import {
  __commonJS,
  __require,
  __toESM
} from "./chunk-HYZYPRER.js";

// node_modules/p5/lib/p5.js
var require_p5 = __commonJS({
  "node_modules/p5/lib/p5.js"(exports, module) {
    (function(f) {
      if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = f();
      } else if (typeof define === "function" && define.amd) {
        define([], f);
      } else {
        var g;
        if (typeof window !== "undefined") {
          g = window;
        } else if (typeof global !== "undefined") {
          g = global;
        } else if (typeof self !== "undefined") {
          g = self;
        } else {
          g = this;
        }
        g.p5 = f();
      }
    })(function() {
      var define, module, exports;
      return function() {
        function r(e2, n, t) {
          function o(i3, f) {
            if (!n[i3]) {
              if (!e2[i3]) {
                var c = "function" == typeof __require && __require;
                if (!f && c)
                  return c(i3, true);
                if (u)
                  return u(i3, true);
                var a = new Error("Cannot find module '" + i3 + "'");
                throw a.code = "MODULE_NOT_FOUND", a;
              }
              var p = n[i3] = {
                exports: {}
              };
              e2[i3][0].call(p.exports, function(r2) {
                var n2 = e2[i3][1][r2];
                return o(n2 || r2);
              }, p, p.exports, r, e2, n, t);
            }
            return n[i3].exports;
          }
          for (var u = "function" == typeof __require && __require, i2 = 0; i2 < t.length; i2++)
            o(t[i2]);
          return o;
        }
        return r;
      }()({
        1: [
          function(_dereq_2, module2, exports2) {
            module2.exports = {
              "p5": {
                "describe": {
                  "name": "describe",
                  "params": [
                    {
                      "name": "text",
                      "description": "<p>description of the canvas</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "display",
                      "description": "<p>either LABEL or FALLBACK</p>\n",
                      "type": "Constant",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Environment"
                },
                "describeElement": {
                  "name": "describeElement",
                  "params": [
                    {
                      "name": "name",
                      "description": "<p>name of the element</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "text",
                      "description": "<p>description of the element</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "display",
                      "description": "<p>either LABEL or FALLBACK</p>\n",
                      "type": "Constant",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Environment"
                },
                "textOutput": {
                  "name": "textOutput",
                  "params": [
                    {
                      "name": "display",
                      "description": "<p>either FALLBACK or LABEL</p>\n",
                      "type": "Constant",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Environment"
                },
                "gridOutput": {
                  "name": "gridOutput",
                  "params": [
                    {
                      "name": "display",
                      "description": "<p>either FALLBACK or LABEL</p>\n",
                      "type": "Constant",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Environment"
                },
                "alpha": {
                  "name": "alpha",
                  "params": [
                    {
                      "name": "color",
                      "description": '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
                      "type": "p5.Color|Number[]|String"
                    }
                  ],
                  "class": "p5",
                  "module": "Color"
                },
                "blue": {
                  "name": "blue",
                  "params": [
                    {
                      "name": "color",
                      "description": '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
                      "type": "p5.Color|Number[]|String"
                    }
                  ],
                  "class": "p5",
                  "module": "Color"
                },
                "brightness": {
                  "name": "brightness",
                  "params": [
                    {
                      "name": "color",
                      "description": '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
                      "type": "p5.Color|Number[]|String"
                    }
                  ],
                  "class": "p5",
                  "module": "Color"
                },
                "color": {
                  "name": "color",
                  "class": "p5",
                  "module": "Color",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "gray",
                          "description": "<p>number specifying value between white and black.</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "alpha",
                          "description": "<p>alpha value relative to current color range\n                                (default is 0-255)</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "<p>red or hue value relative to\n                                the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v2",
                          "description": "<p>green or saturation value\n                                relative to the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v3",
                          "description": "<p>blue or brightness value\n                                relative to the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "alpha",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "value",
                          "description": "<p>a color string</p>\n",
                          "type": "String"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "values",
                          "description": "<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n",
                          "type": "Number[]"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "color",
                          "description": "",
                          "type": "p5.Color"
                        }
                      ]
                    }
                  ]
                },
                "green": {
                  "name": "green",
                  "params": [
                    {
                      "name": "color",
                      "description": '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
                      "type": "p5.Color|Number[]|String"
                    }
                  ],
                  "class": "p5",
                  "module": "Color"
                },
                "hue": {
                  "name": "hue",
                  "params": [
                    {
                      "name": "color",
                      "description": '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
                      "type": "p5.Color|Number[]|String"
                    }
                  ],
                  "class": "p5",
                  "module": "Color"
                },
                "lerpColor": {
                  "name": "lerpColor",
                  "params": [
                    {
                      "name": "c1",
                      "description": "<p>interpolate from this color</p>\n",
                      "type": "p5.Color"
                    },
                    {
                      "name": "c2",
                      "description": "<p>interpolate to this color</p>\n",
                      "type": "p5.Color"
                    },
                    {
                      "name": "amt",
                      "description": "<p>number between 0 and 1</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Color"
                },
                "lightness": {
                  "name": "lightness",
                  "params": [
                    {
                      "name": "color",
                      "description": '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
                      "type": "p5.Color|Number[]|String"
                    }
                  ],
                  "class": "p5",
                  "module": "Color"
                },
                "red": {
                  "name": "red",
                  "params": [
                    {
                      "name": "color",
                      "description": '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
                      "type": "p5.Color|Number[]|String"
                    }
                  ],
                  "class": "p5",
                  "module": "Color"
                },
                "saturation": {
                  "name": "saturation",
                  "params": [
                    {
                      "name": "color",
                      "description": '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
                      "type": "p5.Color|Number[]|String"
                    }
                  ],
                  "class": "p5",
                  "module": "Color"
                },
                "background": {
                  "name": "background",
                  "class": "p5",
                  "module": "Color",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "color",
                          "description": '<p>any value created by the <a href="#/p5/color">color()</a> function</p>\n',
                          "type": "p5.Color"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "colorstring",
                          "description": "<p>color string, possible formats include: integer\n                        rgb() or rgba(), percentage rgb() or rgba(),\n                        3-digit hex, 6-digit hex</p>\n",
                          "type": "String"
                        },
                        {
                          "name": "a",
                          "description": "<p>opacity of the background relative to current\n                            color range (default is 0-255)</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "gray",
                          "description": "<p>specifies a value between white and black</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "a",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "<p>red or hue value (depending on the current color\n                       mode)</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v2",
                          "description": "<p>green or saturation value (depending on the current\n                       color mode)</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v3",
                          "description": "<p>blue or brightness value (depending on the current\n                       color mode)</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "a",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "values",
                          "description": "<p>an array containing the red, green, blue\n                                and alpha components of the color</p>\n",
                          "type": "Number[]"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "image",
                          "description": '<p>image created with <a href="#/p5/loadImage">loadImage()</a> or <a href="#/p5/createImage">createImage()</a>,\n                            to set as background\n                            (must be same size as the sketch window)</p>\n',
                          "type": "p5.Image"
                        },
                        {
                          "name": "a",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "clear": {
                  "name": "clear",
                  "params": [
                    {
                      "name": "r",
                      "description": "<p>normalized red val.</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "g",
                      "description": "<p>normalized green val.</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "b",
                      "description": "<p>normalized blue val.</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "a",
                      "description": "<p>normalized alpha val.</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Color"
                },
                "colorMode": {
                  "name": "colorMode",
                  "class": "p5",
                  "module": "Color",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "mode",
                          "description": "<p>either RGB, HSB or HSL, corresponding to\n                         Red/Green/Blue and Hue/Saturation/Brightness\n                         (or Lightness)</p>\n",
                          "type": "Constant"
                        },
                        {
                          "name": "max",
                          "description": "<p>range for all values</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "mode",
                          "description": "",
                          "type": "Constant"
                        },
                        {
                          "name": "max1",
                          "description": "<p>range for the red or hue depending on the\n                             current color mode</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "max2",
                          "description": "<p>range for the green or saturation depending\n                             on the current color mode</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "max3",
                          "description": "<p>range for the blue or brightness/lightness\n                             depending on the current color mode</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "maxA",
                          "description": "<p>range for the alpha</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "fill": {
                  "name": "fill",
                  "class": "p5",
                  "module": "Color",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "<p>red or hue value relative to\n                                the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v2",
                          "description": "<p>green or saturation value\n                                relative to the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v3",
                          "description": "<p>blue or brightness value\n                                relative to the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "alpha",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "value",
                          "description": "<p>a color string</p>\n",
                          "type": "String"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "gray",
                          "description": "<p>a gray value</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "alpha",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "values",
                          "description": "<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n",
                          "type": "Number[]"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "color",
                          "description": "<p>the fill color</p>\n",
                          "type": "p5.Color"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "noFill": {
                  "name": "noFill",
                  "class": "p5",
                  "module": "Color"
                },
                "noStroke": {
                  "name": "noStroke",
                  "class": "p5",
                  "module": "Color"
                },
                "stroke": {
                  "name": "stroke",
                  "class": "p5",
                  "module": "Color",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "<p>red or hue value relative to\n                                the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v2",
                          "description": "<p>green or saturation value\n                                relative to the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v3",
                          "description": "<p>blue or brightness value\n                                relative to the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "alpha",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "value",
                          "description": "<p>a color string</p>\n",
                          "type": "String"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "gray",
                          "description": "<p>a gray value</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "alpha",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "values",
                          "description": "<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n",
                          "type": "Number[]"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "color",
                          "description": "<p>the stroke color</p>\n",
                          "type": "p5.Color"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "erase": {
                  "name": "erase",
                  "params": [
                    {
                      "name": "strengthFill",
                      "description": "<p>A number (0-255) for the strength of erasing for a shape's fill.\n                                       This will default to 255 when no argument is given, which\n                                       is full strength.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "strengthStroke",
                      "description": "<p>A number (0-255) for the strength of erasing for a shape's stroke.\n                                       This will default to 255 when no argument is given, which\n                                       is full strength.</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Color"
                },
                "noErase": {
                  "name": "noErase",
                  "class": "p5",
                  "module": "Color"
                },
                "arc": {
                  "name": "arc",
                  "params": [
                    {
                      "name": "x",
                      "description": "<p>x-coordinate of the arc's ellipse</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "y",
                      "description": "<p>y-coordinate of the arc's ellipse</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "w",
                      "description": "<p>width of the arc's ellipse by default</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "h",
                      "description": "<p>height of the arc's ellipse by default</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "start",
                      "description": "<p>angle to start the arc, specified in radians</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "stop",
                      "description": "<p>angle to stop the arc, specified in radians</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "mode",
                      "description": "<p>optional parameter to determine the way of drawing\n                        the arc. either CHORD, PIE or OPEN</p>\n",
                      "type": "Constant",
                      "optional": true
                    },
                    {
                      "name": "detail",
                      "description": "<p>optional parameter for WebGL mode only. This is to\n                        specify the number of vertices that makes up the\n                        perimeter of the arc. Default value is 25. Won't\n                        draw a stroke for a detail of more than 50.</p>\n",
                      "type": "Integer",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "ellipse": {
                  "name": "ellipse",
                  "class": "p5",
                  "module": "Shape",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "<p>x-coordinate of the center of the ellipse.</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "<p>y-coordinate of the center of the ellipse.</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "w",
                          "description": "<p>width of the ellipse.</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "h",
                          "description": "<p>height of the ellipse.</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "w",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "h",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "detail",
                          "description": "<p>optional parameter for WEBGL mode only. This is to\n                        specify the number of vertices that makes up the\n                        perimeter of the ellipse. Default value is 25. Won't\n                        draw a stroke for a detail of more than 50.</p>\n",
                          "type": "Integer",
                          "optional": true
                        }
                      ]
                    }
                  ]
                },
                "circle": {
                  "name": "circle",
                  "params": [
                    {
                      "name": "x",
                      "description": "<p>x-coordinate of the center of the circle.</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "y",
                      "description": "<p>y-coordinate of the center of the circle.</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "d",
                      "description": "<p>diameter of the circle.</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "line": {
                  "name": "line",
                  "class": "p5",
                  "module": "Shape",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x1",
                          "description": "<p>the x-coordinate of the first point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y1",
                          "description": "<p>the y-coordinate of the first point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x2",
                          "description": "<p>the x-coordinate of the second point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y2",
                          "description": "<p>the y-coordinate of the second point</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "x1",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y1",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z1",
                          "description": "<p>the z-coordinate of the first point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x2",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y2",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z2",
                          "description": "<p>the z-coordinate of the second point</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "point": {
                  "name": "point",
                  "class": "p5",
                  "module": "Shape",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "<p>the x-coordinate</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "<p>the y-coordinate</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "z",
                          "description": "<p>the z-coordinate (for WebGL mode)</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "coordinate_vector",
                          "description": "<p>the coordinate vector</p>\n",
                          "type": "p5.Vector"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "quad": {
                  "name": "quad",
                  "class": "p5",
                  "module": "Shape",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x1",
                          "description": "<p>the x-coordinate of the first point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y1",
                          "description": "<p>the y-coordinate of the first point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x2",
                          "description": "<p>the x-coordinate of the second point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y2",
                          "description": "<p>the y-coordinate of the second point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x3",
                          "description": "<p>the x-coordinate of the third point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y3",
                          "description": "<p>the y-coordinate of the third point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x4",
                          "description": "<p>the x-coordinate of the fourth point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y4",
                          "description": "<p>the y-coordinate of the fourth point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "detailX",
                          "description": "<p>number of segments in the x-direction</p>\n",
                          "type": "Integer",
                          "optional": true
                        },
                        {
                          "name": "detailY",
                          "description": "<p>number of segments in the y-direction</p>\n",
                          "type": "Integer",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "x1",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y1",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z1",
                          "description": "<p>the z-coordinate of the first point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x2",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y2",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z2",
                          "description": "<p>the z-coordinate of the second point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x3",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y3",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z3",
                          "description": "<p>the z-coordinate of the third point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x4",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y4",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z4",
                          "description": "<p>the z-coordinate of the fourth point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "detailX",
                          "description": "",
                          "type": "Integer",
                          "optional": true
                        },
                        {
                          "name": "detailY",
                          "description": "",
                          "type": "Integer",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "rect": {
                  "name": "rect",
                  "class": "p5",
                  "module": "Shape",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "<p>x-coordinate of the rectangle.</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "<p>y-coordinate of the rectangle.</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "w",
                          "description": "<p>width of the rectangle.</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "h",
                          "description": "<p>height of the rectangle.</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "tl",
                          "description": "<p>optional radius of top-left corner.</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "tr",
                          "description": "<p>optional radius of top-right corner.</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "br",
                          "description": "<p>optional radius of bottom-right corner.</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "bl",
                          "description": "<p>optional radius of bottom-left corner.</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "w",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "h",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "detailX",
                          "description": "<p>number of segments in the x-direction (for WebGL mode)</p>\n",
                          "type": "Integer",
                          "optional": true
                        },
                        {
                          "name": "detailY",
                          "description": "<p>number of segments in the y-direction (for WebGL mode)</p>\n",
                          "type": "Integer",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "square": {
                  "name": "square",
                  "params": [
                    {
                      "name": "x",
                      "description": "<p>x-coordinate of the square.</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "y",
                      "description": "<p>y-coordinate of the square.</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "s",
                      "description": "<p>side size of the square.</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "tl",
                      "description": "<p>optional radius of top-left corner.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "tr",
                      "description": "<p>optional radius of top-right corner.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "br",
                      "description": "<p>optional radius of bottom-right corner.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "bl",
                      "description": "<p>optional radius of bottom-left corner.</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "triangle": {
                  "name": "triangle",
                  "params": [
                    {
                      "name": "x1",
                      "description": "<p>x-coordinate of the first point</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "y1",
                      "description": "<p>y-coordinate of the first point</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "x2",
                      "description": "<p>x-coordinate of the second point</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "y2",
                      "description": "<p>y-coordinate of the second point</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "x3",
                      "description": "<p>x-coordinate of the third point</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "y3",
                      "description": "<p>y-coordinate of the third point</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "ellipseMode": {
                  "name": "ellipseMode",
                  "params": [
                    {
                      "name": "mode",
                      "description": "<p>either CENTER, RADIUS, CORNER, or CORNERS</p>\n",
                      "type": "Constant"
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "noSmooth": {
                  "name": "noSmooth",
                  "class": "p5",
                  "module": "Shape"
                },
                "rectMode": {
                  "name": "rectMode",
                  "params": [
                    {
                      "name": "mode",
                      "description": "<p>either CORNER, CORNERS, CENTER, or RADIUS</p>\n",
                      "type": "Constant"
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "smooth": {
                  "name": "smooth",
                  "class": "p5",
                  "module": "Shape"
                },
                "strokeCap": {
                  "name": "strokeCap",
                  "params": [
                    {
                      "name": "cap",
                      "description": "<p>either ROUND, SQUARE, or PROJECT</p>\n",
                      "type": "Constant"
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "strokeJoin": {
                  "name": "strokeJoin",
                  "params": [
                    {
                      "name": "join",
                      "description": "<p>either MITER, BEVEL, or ROUND</p>\n",
                      "type": "Constant"
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "strokeWeight": {
                  "name": "strokeWeight",
                  "params": [
                    {
                      "name": "weight",
                      "description": "<p>the weight of the stroke (in pixels)</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "bezier": {
                  "name": "bezier",
                  "class": "p5",
                  "module": "Shape",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x1",
                          "description": "<p>x-coordinate for the first anchor point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y1",
                          "description": "<p>y-coordinate for the first anchor point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x2",
                          "description": "<p>x-coordinate for the first control point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y2",
                          "description": "<p>y-coordinate for the first control point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x3",
                          "description": "<p>x-coordinate for the second control point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y3",
                          "description": "<p>y-coordinate for the second control point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x4",
                          "description": "<p>x-coordinate for the second anchor point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y4",
                          "description": "<p>y-coordinate for the second anchor point</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "x1",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y1",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z1",
                          "description": "<p>z-coordinate for the first anchor point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x2",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y2",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z2",
                          "description": "<p>z-coordinate for the first control point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x3",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y3",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z3",
                          "description": "<p>z-coordinate for the second control point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x4",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y4",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z4",
                          "description": "<p>z-coordinate for the second anchor point</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "bezierDetail": {
                  "name": "bezierDetail",
                  "params": [
                    {
                      "name": "detail",
                      "description": "<p>resolution of the curves</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "bezierPoint": {
                  "name": "bezierPoint",
                  "params": [
                    {
                      "name": "a",
                      "description": "<p>coordinate of first point on the curve</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "b",
                      "description": "<p>coordinate of first control point</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "c",
                      "description": "<p>coordinate of second control point</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "d",
                      "description": "<p>coordinate of second point on the curve</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "t",
                      "description": "<p>value between 0 and 1</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "bezierTangent": {
                  "name": "bezierTangent",
                  "params": [
                    {
                      "name": "a",
                      "description": "<p>coordinate of first point on the curve</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "b",
                      "description": "<p>coordinate of first control point</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "c",
                      "description": "<p>coordinate of second control point</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "d",
                      "description": "<p>coordinate of second point on the curve</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "t",
                      "description": "<p>value between 0 and 1</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "curve": {
                  "name": "curve",
                  "class": "p5",
                  "module": "Shape",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x1",
                          "description": "<p>x-coordinate for the beginning control point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y1",
                          "description": "<p>y-coordinate for the beginning control point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x2",
                          "description": "<p>x-coordinate for the first point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y2",
                          "description": "<p>y-coordinate for the first point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x3",
                          "description": "<p>x-coordinate for the second point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y3",
                          "description": "<p>y-coordinate for the second point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x4",
                          "description": "<p>x-coordinate for the ending control point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y4",
                          "description": "<p>y-coordinate for the ending control point</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "x1",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y1",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z1",
                          "description": "<p>z-coordinate for the beginning control point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x2",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y2",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z2",
                          "description": "<p>z-coordinate for the first point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x3",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y3",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z3",
                          "description": "<p>z-coordinate for the second point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x4",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y4",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z4",
                          "description": "<p>z-coordinate for the ending control point</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "curveDetail": {
                  "name": "curveDetail",
                  "params": [
                    {
                      "name": "resolution",
                      "description": "<p>resolution of the curves</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "curveTightness": {
                  "name": "curveTightness",
                  "params": [
                    {
                      "name": "amount",
                      "description": "<p>amount of deformation from the original vertices</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "curvePoint": {
                  "name": "curvePoint",
                  "params": [
                    {
                      "name": "a",
                      "description": "<p>coordinate of first control point of the curve</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "b",
                      "description": "<p>coordinate of first point</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "c",
                      "description": "<p>coordinate of second point</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "d",
                      "description": "<p>coordinate of second control point</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "t",
                      "description": "<p>value between 0 and 1</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "curveTangent": {
                  "name": "curveTangent",
                  "params": [
                    {
                      "name": "a",
                      "description": "<p>coordinate of first control point</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "b",
                      "description": "<p>coordinate of first point on the curve</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "c",
                      "description": "<p>coordinate of second point on the curve</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "d",
                      "description": "<p>coordinate of second conrol point</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "t",
                      "description": "<p>value between 0 and 1</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "beginContour": {
                  "name": "beginContour",
                  "class": "p5",
                  "module": "Shape"
                },
                "beginShape": {
                  "name": "beginShape",
                  "params": [
                    {
                      "name": "kind",
                      "description": "<p>either POINTS, LINES, TRIANGLES, TRIANGLE_FAN\n                               TRIANGLE_STRIP, QUADS, QUAD_STRIP or TESS</p>\n",
                      "type": "Constant",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "bezierVertex": {
                  "name": "bezierVertex",
                  "class": "p5",
                  "module": "Shape",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x2",
                          "description": "<p>x-coordinate for the first control point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y2",
                          "description": "<p>y-coordinate for the first control point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x3",
                          "description": "<p>x-coordinate for the second control point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y3",
                          "description": "<p>y-coordinate for the second control point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x4",
                          "description": "<p>x-coordinate for the anchor point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y4",
                          "description": "<p>y-coordinate for the anchor point</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "x2",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y2",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z2",
                          "description": "<p>z-coordinate for the first control point (for WebGL mode)</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x3",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y3",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z3",
                          "description": "<p>z-coordinate for the second control point (for WebGL mode)</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x4",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y4",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z4",
                          "description": "<p>z-coordinate for the anchor point (for WebGL mode)</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "curveVertex": {
                  "name": "curveVertex",
                  "class": "p5",
                  "module": "Shape",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "<p>x-coordinate of the vertex</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "<p>y-coordinate of the vertex</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z",
                          "description": "<p>z-coordinate of the vertex (for WebGL mode)</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "endContour": {
                  "name": "endContour",
                  "class": "p5",
                  "module": "Shape"
                },
                "endShape": {
                  "name": "endShape",
                  "params": [
                    {
                      "name": "mode",
                      "description": "<p>use CLOSE to close the shape</p>\n",
                      "type": "Constant",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "quadraticVertex": {
                  "name": "quadraticVertex",
                  "class": "p5",
                  "module": "Shape",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "cx",
                          "description": "<p>x-coordinate for the control point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "cy",
                          "description": "<p>y-coordinate for the control point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x3",
                          "description": "<p>x-coordinate for the anchor point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y3",
                          "description": "<p>y-coordinate for the anchor point</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "cx",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "cy",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "cz",
                          "description": "<p>z-coordinate for the control point (for WebGL mode)</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x3",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y3",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z3",
                          "description": "<p>z-coordinate for the anchor point (for WebGL mode)</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "vertex": {
                  "name": "vertex",
                  "class": "p5",
                  "module": "Shape",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "<p>x-coordinate of the vertex</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "<p>y-coordinate of the vertex</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z",
                          "description": "<p>z-coordinate of the vertex.\n                      Defaults to 0 if not specified.</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "u",
                          "description": "<p>the vertex's texture u-coordinate</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "v",
                          "description": "<p>the vertex's texture v-coordinate</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "normal": {
                  "name": "normal",
                  "class": "p5",
                  "module": "Shape",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "vector",
                          "description": "<p>A p5.Vector representing the vertex normal.</p>\n",
                          "type": "Vector"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "<p>The x component of the vertex normal.</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "<p>The y component of the vertex normal.</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "z",
                          "description": "<p>The z component of the vertex normal.</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "VERSION": {
                  "name": "VERSION",
                  "class": "p5",
                  "module": "Constants"
                },
                "P2D": {
                  "name": "P2D",
                  "class": "p5",
                  "module": "Constants"
                },
                "WEBGL": {
                  "name": "WEBGL",
                  "class": "p5",
                  "module": "Constants"
                },
                "ARROW": {
                  "name": "ARROW",
                  "class": "p5",
                  "module": "Constants"
                },
                "CROSS": {
                  "name": "CROSS",
                  "class": "p5",
                  "module": "Constants"
                },
                "HAND": {
                  "name": "HAND",
                  "class": "p5",
                  "module": "Constants"
                },
                "MOVE": {
                  "name": "MOVE",
                  "class": "p5",
                  "module": "Constants"
                },
                "TEXT": {
                  "name": "TEXT",
                  "class": "p5",
                  "module": "Constants"
                },
                "WAIT": {
                  "name": "WAIT",
                  "class": "p5",
                  "module": "Constants"
                },
                "HALF_PI": {
                  "name": "HALF_PI",
                  "class": "p5",
                  "module": "Constants"
                },
                "PI": {
                  "name": "PI",
                  "class": "p5",
                  "module": "Constants"
                },
                "QUARTER_PI": {
                  "name": "QUARTER_PI",
                  "class": "p5",
                  "module": "Constants"
                },
                "TAU": {
                  "name": "TAU",
                  "class": "p5",
                  "module": "Constants"
                },
                "TWO_PI": {
                  "name": "TWO_PI",
                  "class": "p5",
                  "module": "Constants"
                },
                "DEGREES": {
                  "name": "DEGREES",
                  "class": "p5",
                  "module": "Constants"
                },
                "RADIANS": {
                  "name": "RADIANS",
                  "class": "p5",
                  "module": "Constants"
                },
                "CORNER": {
                  "name": "CORNER",
                  "class": "p5",
                  "module": "Constants"
                },
                "CORNERS": {
                  "name": "CORNERS",
                  "class": "p5",
                  "module": "Constants"
                },
                "RADIUS": {
                  "name": "RADIUS",
                  "class": "p5",
                  "module": "Constants"
                },
                "RIGHT": {
                  "name": "RIGHT",
                  "class": "p5",
                  "module": "Constants"
                },
                "LEFT": {
                  "name": "LEFT",
                  "class": "p5",
                  "module": "Constants"
                },
                "CENTER": {
                  "name": "CENTER",
                  "class": "p5",
                  "module": "Constants"
                },
                "TOP": {
                  "name": "TOP",
                  "class": "p5",
                  "module": "Constants"
                },
                "BOTTOM": {
                  "name": "BOTTOM",
                  "class": "p5",
                  "module": "Constants"
                },
                "BASELINE": {
                  "name": "BASELINE",
                  "class": "p5",
                  "module": "Constants"
                },
                "POINTS": {
                  "name": "POINTS",
                  "class": "p5",
                  "module": "Constants"
                },
                "LINES": {
                  "name": "LINES",
                  "class": "p5",
                  "module": "Constants"
                },
                "LINE_STRIP": {
                  "name": "LINE_STRIP",
                  "class": "p5",
                  "module": "Constants"
                },
                "LINE_LOOP": {
                  "name": "LINE_LOOP",
                  "class": "p5",
                  "module": "Constants"
                },
                "TRIANGLES": {
                  "name": "TRIANGLES",
                  "class": "p5",
                  "module": "Constants"
                },
                "TRIANGLE_FAN": {
                  "name": "TRIANGLE_FAN",
                  "class": "p5",
                  "module": "Constants"
                },
                "TRIANGLE_STRIP": {
                  "name": "TRIANGLE_STRIP",
                  "class": "p5",
                  "module": "Constants"
                },
                "QUADS": {
                  "name": "QUADS",
                  "class": "p5",
                  "module": "Constants"
                },
                "QUAD_STRIP": {
                  "name": "QUAD_STRIP",
                  "class": "p5",
                  "module": "Constants"
                },
                "TESS": {
                  "name": "TESS",
                  "class": "p5",
                  "module": "Constants"
                },
                "CLOSE": {
                  "name": "CLOSE",
                  "class": "p5",
                  "module": "Constants"
                },
                "OPEN": {
                  "name": "OPEN",
                  "class": "p5",
                  "module": "Constants"
                },
                "CHORD": {
                  "name": "CHORD",
                  "class": "p5",
                  "module": "Constants"
                },
                "PIE": {
                  "name": "PIE",
                  "class": "p5",
                  "module": "Constants"
                },
                "PROJECT": {
                  "name": "PROJECT",
                  "class": "p5",
                  "module": "Constants"
                },
                "SQUARE": {
                  "name": "SQUARE",
                  "class": "p5",
                  "module": "Constants"
                },
                "ROUND": {
                  "name": "ROUND",
                  "class": "p5",
                  "module": "Constants"
                },
                "BEVEL": {
                  "name": "BEVEL",
                  "class": "p5",
                  "module": "Constants"
                },
                "MITER": {
                  "name": "MITER",
                  "class": "p5",
                  "module": "Constants"
                },
                "RGB": {
                  "name": "RGB",
                  "class": "p5",
                  "module": "Constants"
                },
                "HSB": {
                  "name": "HSB",
                  "class": "p5",
                  "module": "Constants"
                },
                "HSL": {
                  "name": "HSL",
                  "class": "p5",
                  "module": "Constants"
                },
                "AUTO": {
                  "name": "AUTO",
                  "class": "p5",
                  "module": "Constants"
                },
                "ALT": {
                  "name": "ALT",
                  "class": "p5",
                  "module": "Constants"
                },
                "BACKSPACE": {
                  "name": "BACKSPACE",
                  "class": "p5",
                  "module": "Constants"
                },
                "CONTROL": {
                  "name": "CONTROL",
                  "class": "p5",
                  "module": "Constants"
                },
                "DELETE": {
                  "name": "DELETE",
                  "class": "p5",
                  "module": "Constants"
                },
                "DOWN_ARROW": {
                  "name": "DOWN_ARROW",
                  "class": "p5",
                  "module": "Constants"
                },
                "ENTER": {
                  "name": "ENTER",
                  "class": "p5",
                  "module": "Constants"
                },
                "ESCAPE": {
                  "name": "ESCAPE",
                  "class": "p5",
                  "module": "Constants"
                },
                "LEFT_ARROW": {
                  "name": "LEFT_ARROW",
                  "class": "p5",
                  "module": "Constants"
                },
                "OPTION": {
                  "name": "OPTION",
                  "class": "p5",
                  "module": "Constants"
                },
                "RETURN": {
                  "name": "RETURN",
                  "class": "p5",
                  "module": "Constants"
                },
                "RIGHT_ARROW": {
                  "name": "RIGHT_ARROW",
                  "class": "p5",
                  "module": "Constants"
                },
                "SHIFT": {
                  "name": "SHIFT",
                  "class": "p5",
                  "module": "Constants"
                },
                "TAB": {
                  "name": "TAB",
                  "class": "p5",
                  "module": "Constants"
                },
                "UP_ARROW": {
                  "name": "UP_ARROW",
                  "class": "p5",
                  "module": "Constants"
                },
                "BLEND": {
                  "name": "BLEND",
                  "class": "p5",
                  "module": "Constants"
                },
                "REMOVE": {
                  "name": "REMOVE",
                  "class": "p5",
                  "module": "Constants"
                },
                "ADD": {
                  "name": "ADD",
                  "class": "p5",
                  "module": "Constants"
                },
                "DARKEST": {
                  "name": "DARKEST",
                  "class": "p5",
                  "module": "Constants"
                },
                "LIGHTEST": {
                  "name": "LIGHTEST",
                  "class": "p5",
                  "module": "Constants"
                },
                "DIFFERENCE": {
                  "name": "DIFFERENCE",
                  "class": "p5",
                  "module": "Constants"
                },
                "SUBTRACT": {
                  "name": "SUBTRACT",
                  "class": "p5",
                  "module": "Constants"
                },
                "EXCLUSION": {
                  "name": "EXCLUSION",
                  "class": "p5",
                  "module": "Constants"
                },
                "MULTIPLY": {
                  "name": "MULTIPLY",
                  "class": "p5",
                  "module": "Constants"
                },
                "SCREEN": {
                  "name": "SCREEN",
                  "class": "p5",
                  "module": "Constants"
                },
                "REPLACE": {
                  "name": "REPLACE",
                  "class": "p5",
                  "module": "Constants"
                },
                "OVERLAY": {
                  "name": "OVERLAY",
                  "class": "p5",
                  "module": "Constants"
                },
                "HARD_LIGHT": {
                  "name": "HARD_LIGHT",
                  "class": "p5",
                  "module": "Constants"
                },
                "SOFT_LIGHT": {
                  "name": "SOFT_LIGHT",
                  "class": "p5",
                  "module": "Constants"
                },
                "DODGE": {
                  "name": "DODGE",
                  "class": "p5",
                  "module": "Constants"
                },
                "BURN": {
                  "name": "BURN",
                  "class": "p5",
                  "module": "Constants"
                },
                "THRESHOLD": {
                  "name": "THRESHOLD",
                  "class": "p5",
                  "module": "Constants"
                },
                "GRAY": {
                  "name": "GRAY",
                  "class": "p5",
                  "module": "Constants"
                },
                "OPAQUE": {
                  "name": "OPAQUE",
                  "class": "p5",
                  "module": "Constants"
                },
                "INVERT": {
                  "name": "INVERT",
                  "class": "p5",
                  "module": "Constants"
                },
                "POSTERIZE": {
                  "name": "POSTERIZE",
                  "class": "p5",
                  "module": "Constants"
                },
                "DILATE": {
                  "name": "DILATE",
                  "class": "p5",
                  "module": "Constants"
                },
                "ERODE": {
                  "name": "ERODE",
                  "class": "p5",
                  "module": "Constants"
                },
                "BLUR": {
                  "name": "BLUR",
                  "class": "p5",
                  "module": "Constants"
                },
                "NORMAL": {
                  "name": "NORMAL",
                  "class": "p5",
                  "module": "Constants"
                },
                "ITALIC": {
                  "name": "ITALIC",
                  "class": "p5",
                  "module": "Constants"
                },
                "BOLD": {
                  "name": "BOLD",
                  "class": "p5",
                  "module": "Constants"
                },
                "BOLDITALIC": {
                  "name": "BOLDITALIC",
                  "class": "p5",
                  "module": "Constants"
                },
                "CHAR": {
                  "name": "CHAR",
                  "class": "p5",
                  "module": "Constants"
                },
                "WORD": {
                  "name": "WORD",
                  "class": "p5",
                  "module": "Constants"
                },
                "LINEAR": {
                  "name": "LINEAR",
                  "class": "p5",
                  "module": "Constants"
                },
                "QUADRATIC": {
                  "name": "QUADRATIC",
                  "class": "p5",
                  "module": "Constants"
                },
                "BEZIER": {
                  "name": "BEZIER",
                  "class": "p5",
                  "module": "Constants"
                },
                "CURVE": {
                  "name": "CURVE",
                  "class": "p5",
                  "module": "Constants"
                },
                "STROKE": {
                  "name": "STROKE",
                  "class": "p5",
                  "module": "Constants"
                },
                "FILL": {
                  "name": "FILL",
                  "class": "p5",
                  "module": "Constants"
                },
                "TEXTURE": {
                  "name": "TEXTURE",
                  "class": "p5",
                  "module": "Constants"
                },
                "IMMEDIATE": {
                  "name": "IMMEDIATE",
                  "class": "p5",
                  "module": "Constants"
                },
                "IMAGE": {
                  "name": "IMAGE",
                  "class": "p5",
                  "module": "Constants"
                },
                "NEAREST": {
                  "name": "NEAREST",
                  "class": "p5",
                  "module": "Constants"
                },
                "REPEAT": {
                  "name": "REPEAT",
                  "class": "p5",
                  "module": "Constants"
                },
                "CLAMP": {
                  "name": "CLAMP",
                  "class": "p5",
                  "module": "Constants"
                },
                "MIRROR": {
                  "name": "MIRROR",
                  "class": "p5",
                  "module": "Constants"
                },
                "LANDSCAPE": {
                  "name": "LANDSCAPE",
                  "class": "p5",
                  "module": "Constants"
                },
                "PORTRAIT": {
                  "name": "PORTRAIT",
                  "class": "p5",
                  "module": "Constants"
                },
                "GRID": {
                  "name": "GRID",
                  "class": "p5",
                  "module": "Constants"
                },
                "AXES": {
                  "name": "AXES",
                  "class": "p5",
                  "module": "Constants"
                },
                "LABEL": {
                  "name": "LABEL",
                  "class": "p5",
                  "module": "Constants"
                },
                "FALLBACK": {
                  "name": "FALLBACK",
                  "class": "p5",
                  "module": "Constants"
                },
                "CONTAIN": {
                  "name": "CONTAIN",
                  "class": "p5",
                  "module": "Constants"
                },
                "COVER": {
                  "name": "COVER",
                  "class": "p5",
                  "module": "Constants"
                },
                "print": {
                  "name": "print",
                  "params": [
                    {
                      "name": "contents",
                      "description": "<p>any combination of Number, String, Object, Boolean,\n                      Array to print</p>\n",
                      "type": "Any"
                    }
                  ],
                  "class": "p5",
                  "module": "Environment"
                },
                "frameCount": {
                  "name": "frameCount",
                  "class": "p5",
                  "module": "Environment"
                },
                "deltaTime": {
                  "name": "deltaTime",
                  "class": "p5",
                  "module": "Environment"
                },
                "focused": {
                  "name": "focused",
                  "class": "p5",
                  "module": "Environment"
                },
                "cursor": {
                  "name": "cursor",
                  "params": [
                    {
                      "name": "type",
                      "description": `<p>Built-In: either ARROW, CROSS, HAND, MOVE, TEXT and WAIT
                              Native CSS properties: 'grab', 'progress', 'cell' etc.
                              External: path for cursor's images
                              (Allowed File extensions: .cur, .gif, .jpg, .jpeg, .png)
                              For more information on Native CSS cursors and url visit:
                              <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/cursor">https://developer.mozilla.org/en-US/docs/Web/CSS/cursor</a></p>
`,
                      "type": "String|Constant"
                    },
                    {
                      "name": "x",
                      "description": "<p>the horizontal active spot of the cursor (must be less than 32)</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "y",
                      "description": "<p>the vertical active spot of the cursor (must be less than 32)</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Environment"
                },
                "frameRate": {
                  "name": "frameRate",
                  "class": "p5",
                  "module": "Environment",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "fps",
                          "description": "<p>number of frames to be displayed every second</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": []
                    }
                  ]
                },
                "getTargetFrameRate": {
                  "name": "getTargetFrameRate",
                  "class": "p5",
                  "module": "Environment"
                },
                "noCursor": {
                  "name": "noCursor",
                  "class": "p5",
                  "module": "Environment"
                },
                "displayWidth": {
                  "name": "displayWidth",
                  "class": "p5",
                  "module": "Environment"
                },
                "displayHeight": {
                  "name": "displayHeight",
                  "class": "p5",
                  "module": "Environment"
                },
                "windowWidth": {
                  "name": "windowWidth",
                  "class": "p5",
                  "module": "Environment"
                },
                "windowHeight": {
                  "name": "windowHeight",
                  "class": "p5",
                  "module": "Environment"
                },
                "windowResized": {
                  "name": "windowResized",
                  "params": [
                    {
                      "name": "event",
                      "description": "<p>optional Event callback argument.</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Environment"
                },
                "width": {
                  "name": "width",
                  "class": "p5",
                  "module": "Environment"
                },
                "height": {
                  "name": "height",
                  "class": "p5",
                  "module": "Environment"
                },
                "fullscreen": {
                  "name": "fullscreen",
                  "params": [
                    {
                      "name": "val",
                      "description": "<p>whether the sketch should be in fullscreen mode\nor not</p>\n",
                      "type": "Boolean",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Environment"
                },
                "pixelDensity": {
                  "name": "pixelDensity",
                  "class": "p5",
                  "module": "Environment",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "val",
                          "description": "<p>whether or how much the sketch should scale</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": []
                    }
                  ]
                },
                "displayDensity": {
                  "name": "displayDensity",
                  "class": "p5",
                  "module": "Environment"
                },
                "getURL": {
                  "name": "getURL",
                  "class": "p5",
                  "module": "Environment"
                },
                "getURLPath": {
                  "name": "getURLPath",
                  "class": "p5",
                  "module": "Environment"
                },
                "getURLParams": {
                  "name": "getURLParams",
                  "class": "p5",
                  "module": "Environment"
                },
                "preload": {
                  "name": "preload",
                  "class": "p5",
                  "module": "Structure"
                },
                "setup": {
                  "name": "setup",
                  "class": "p5",
                  "module": "Structure"
                },
                "draw": {
                  "name": "draw",
                  "class": "p5",
                  "module": "Structure"
                },
                "remove": {
                  "name": "remove",
                  "class": "p5",
                  "module": "Structure"
                },
                "disableFriendlyErrors": {
                  "name": "disableFriendlyErrors",
                  "class": "p5",
                  "module": "Structure"
                },
                "let": {
                  "name": "let",
                  "class": "p5",
                  "module": "Foundation"
                },
                "const": {
                  "name": "const",
                  "class": "p5",
                  "module": "Foundation"
                },
                "===": {
                  "name": "===",
                  "class": "p5",
                  "module": "Foundation"
                },
                ">": {
                  "name": ">",
                  "class": "p5",
                  "module": "Foundation"
                },
                ">=": {
                  "name": ">=",
                  "class": "p5",
                  "module": "Foundation"
                },
                "<": {
                  "name": "<",
                  "class": "p5",
                  "module": "Foundation"
                },
                "<=": {
                  "name": "<=",
                  "class": "p5",
                  "module": "Foundation"
                },
                "if-else": {
                  "name": "if-else",
                  "class": "p5",
                  "module": "Foundation"
                },
                "function": {
                  "name": "function",
                  "class": "p5",
                  "module": "Foundation"
                },
                "return": {
                  "name": "return",
                  "class": "p5",
                  "module": "Foundation"
                },
                "boolean": {
                  "name": "boolean",
                  "params": [
                    {
                      "name": "n",
                      "description": "<p>value to parse</p>\n",
                      "type": "String|Boolean|Number|Array"
                    }
                  ],
                  "class": "p5",
                  "module": "Data"
                },
                "string": {
                  "name": "string",
                  "class": "p5",
                  "module": "Foundation"
                },
                "number": {
                  "name": "number",
                  "class": "p5",
                  "module": "Foundation"
                },
                "object": {
                  "name": "object",
                  "class": "p5",
                  "module": "Foundation"
                },
                "class": {
                  "name": "class",
                  "class": "p5",
                  "module": "Foundation"
                },
                "for": {
                  "name": "for",
                  "class": "p5",
                  "module": "Foundation"
                },
                "while": {
                  "name": "while",
                  "class": "p5",
                  "module": "Foundation"
                },
                "createCanvas": {
                  "name": "createCanvas",
                  "params": [
                    {
                      "name": "w",
                      "description": "<p>width of the canvas</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "h",
                      "description": "<p>height of the canvas</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "renderer",
                      "description": "<p>either P2D or WEBGL</p>\n",
                      "type": "Constant",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Rendering"
                },
                "resizeCanvas": {
                  "name": "resizeCanvas",
                  "params": [
                    {
                      "name": "w",
                      "description": "<p>width of the canvas</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "h",
                      "description": "<p>height of the canvas</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "noRedraw",
                      "description": "<p>don't redraw the canvas immediately</p>\n",
                      "type": "Boolean",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Rendering"
                },
                "noCanvas": {
                  "name": "noCanvas",
                  "class": "p5",
                  "module": "Rendering"
                },
                "createGraphics": {
                  "name": "createGraphics",
                  "params": [
                    {
                      "name": "w",
                      "description": "<p>width of the offscreen graphics buffer</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "h",
                      "description": "<p>height of the offscreen graphics buffer</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "renderer",
                      "description": "<p>either P2D or WEBGL\n                              undefined defaults to p2d</p>\n",
                      "type": "Constant",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Rendering"
                },
                "blendMode": {
                  "name": "blendMode",
                  "params": [
                    {
                      "name": "mode",
                      "description": "<p>blend mode to set for canvas.\n               either BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY,\n               EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n               SOFT_LIGHT, DODGE, BURN, ADD, REMOVE or SUBTRACT</p>\n",
                      "type": "Constant"
                    }
                  ],
                  "class": "p5",
                  "module": "Rendering"
                },
                "drawingContext": {
                  "name": "drawingContext",
                  "class": "p5",
                  "module": "Rendering"
                },
                "noLoop": {
                  "name": "noLoop",
                  "class": "p5",
                  "module": "Structure"
                },
                "loop": {
                  "name": "loop",
                  "class": "p5",
                  "module": "Structure"
                },
                "isLooping": {
                  "name": "isLooping",
                  "class": "p5",
                  "module": "Structure"
                },
                "push": {
                  "name": "push",
                  "class": "p5",
                  "module": "Structure"
                },
                "pop": {
                  "name": "pop",
                  "class": "p5",
                  "module": "Structure"
                },
                "redraw": {
                  "name": "redraw",
                  "params": [
                    {
                      "name": "n",
                      "description": "<p>Redraw for n-times. The default value is 1.</p>\n",
                      "type": "Integer",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Structure"
                },
                "p5": {
                  "name": "p5",
                  "params": [
                    {
                      "name": "sketch",
                      "description": "<p>a function containing a p5.js sketch</p>\n",
                      "type": "Object"
                    },
                    {
                      "name": "node",
                      "description": "<p>ID or pointer to HTML DOM node to contain sketch in</p>\n",
                      "type": "String|Object"
                    }
                  ],
                  "class": "p5",
                  "module": "Structure"
                },
                "applyMatrix": {
                  "name": "applyMatrix",
                  "class": "p5",
                  "module": "Transform",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "arr",
                          "description": "<p>an array of numbers - should be 6 or 16 length (2<em>3 or 4</em>4 matrix values)</p>\n",
                          "type": "Array"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "a",
                          "description": "<p>numbers which define the 2×3 or 4x4 matrix to be multiplied</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "b",
                          "description": "<p>numbers which define the 2×3 or 4x4 matrix to be multiplied</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "c",
                          "description": "<p>numbers which define the 2×3 or 4x4 matrix to be multiplied</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "d",
                          "description": "<p>numbers which define the 2×3 or 4x4 matrix to be multiplied</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "e",
                          "description": "<p>numbers which define the 2×3 or 4x4 matrix to be multiplied</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "f",
                          "description": "<p>numbers which define the 2×3 or 4x4 matrix to be multiplied</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "a",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "b",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "c",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "d",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "e",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "f",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "g",
                          "description": "<p>numbers which define the 4x4 matrix to be multiplied</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "h",
                          "description": "<p>numbers which define the 4x4 matrix to be multiplied</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "i",
                          "description": "<p>numbers which define the 4x4 matrix to be multiplied</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "j",
                          "description": "<p>numbers which define the 4x4 matrix to be multiplied</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "k",
                          "description": "<p>numbers which define the 4x4 matrix to be multiplied</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "l",
                          "description": "<p>numbers which define the 4x4 matrix to be multiplied</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "m",
                          "description": "<p>numbers which define the 4x4 matrix to be multiplied</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "n",
                          "description": "<p>numbers which define the 4x4 matrix to be multiplied</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "o",
                          "description": "<p>numbers which define the 4x4 matrix to be multiplied</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "p",
                          "description": "<p>numbers which define the 4x4 matrix to be multiplied</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "resetMatrix": {
                  "name": "resetMatrix",
                  "class": "p5",
                  "module": "Transform"
                },
                "rotate": {
                  "name": "rotate",
                  "params": [
                    {
                      "name": "angle",
                      "description": "<p>the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "axis",
                      "description": "<p>(in 3d) the axis to rotate around</p>\n",
                      "type": "p5.Vector|Number[]",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Transform"
                },
                "rotateX": {
                  "name": "rotateX",
                  "params": [
                    {
                      "name": "angle",
                      "description": "<p>the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Transform"
                },
                "rotateY": {
                  "name": "rotateY",
                  "params": [
                    {
                      "name": "angle",
                      "description": "<p>the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Transform"
                },
                "rotateZ": {
                  "name": "rotateZ",
                  "params": [
                    {
                      "name": "angle",
                      "description": "<p>the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Transform"
                },
                "scale": {
                  "name": "scale",
                  "class": "p5",
                  "module": "Transform",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "s",
                          "description": "<p>percent to scale the object, or percentage to\n                     scale the object in the x-axis if multiple arguments\n                     are given</p>\n",
                          "type": "Number|p5.Vector|Number[]"
                        },
                        {
                          "name": "y",
                          "description": "<p>percent to scale the object in the y-axis</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "z",
                          "description": "<p>percent to scale the object in the z-axis (webgl only)</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "scales",
                          "description": "<p>per-axis percents to scale the object</p>\n",
                          "type": "p5.Vector|Number[]"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "shearX": {
                  "name": "shearX",
                  "params": [
                    {
                      "name": "angle",
                      "description": "<p>angle of shear specified in radians or degrees,\n                       depending on current angleMode</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Transform"
                },
                "shearY": {
                  "name": "shearY",
                  "params": [
                    {
                      "name": "angle",
                      "description": "<p>angle of shear specified in radians or degrees,\n                       depending on current angleMode</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Transform"
                },
                "translate": {
                  "name": "translate",
                  "class": "p5",
                  "module": "Transform",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "<p>left/right translation</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "<p>up/down translation</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "z",
                          "description": "<p>forward/backward translation (WEBGL only)</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "vector",
                          "description": "<p>the vector to translate by</p>\n",
                          "type": "p5.Vector"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "storeItem": {
                  "name": "storeItem",
                  "params": [
                    {
                      "name": "key",
                      "description": "",
                      "type": "String"
                    },
                    {
                      "name": "value",
                      "description": "",
                      "type": "String|Number|Object|Boolean|p5.Color|p5.Vector"
                    }
                  ],
                  "class": "p5",
                  "module": "Data"
                },
                "getItem": {
                  "name": "getItem",
                  "params": [
                    {
                      "name": "key",
                      "description": "<p>name that you wish to use to store in local storage</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5",
                  "module": "Data"
                },
                "clearStorage": {
                  "name": "clearStorage",
                  "class": "p5",
                  "module": "Data"
                },
                "removeItem": {
                  "name": "removeItem",
                  "params": [
                    {
                      "name": "key",
                      "description": "",
                      "type": "String"
                    }
                  ],
                  "class": "p5",
                  "module": "Data"
                },
                "createStringDict": {
                  "name": "createStringDict",
                  "class": "p5",
                  "module": "Data",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "key",
                          "description": "",
                          "type": "String"
                        },
                        {
                          "name": "value",
                          "description": "",
                          "type": "String"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "object",
                          "description": "<p>object</p>\n",
                          "type": "Object"
                        }
                      ]
                    }
                  ]
                },
                "createNumberDict": {
                  "name": "createNumberDict",
                  "class": "p5",
                  "module": "Data",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "key",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "value",
                          "description": "",
                          "type": "Number"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "object",
                          "description": "<p>object</p>\n",
                          "type": "Object"
                        }
                      ]
                    }
                  ]
                },
                "select": {
                  "name": "select",
                  "params": [
                    {
                      "name": "selectors",
                      "description": "<p>CSS selector string of element to search for</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "container",
                      "description": '<p>CSS selector string, <a href="#/p5.Element">p5.Element</a>, or\n                                            HTML element to search within</p>\n',
                      "type": "String|p5.Element|HTMLElement",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "DOM"
                },
                "selectAll": {
                  "name": "selectAll",
                  "params": [
                    {
                      "name": "selectors",
                      "description": "<p>CSS selector string of elements to search for</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "container",
                      "description": '<p>CSS selector string, <a href="#/p5.Element">p5.Element</a>\n                                            , or HTML element to search within</p>\n',
                      "type": "String|p5.Element|HTMLElement",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "DOM"
                },
                "removeElements": {
                  "name": "removeElements",
                  "class": "p5",
                  "module": "DOM"
                },
                "changed": {
                  "name": "changed",
                  "params": [
                    {
                      "name": "fxn",
                      "description": "<p>function to be fired when the value of\n                               an element changes.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
                      "type": "Function|Boolean"
                    }
                  ],
                  "class": "p5",
                  "module": "DOM"
                },
                "input": {
                  "name": "input",
                  "params": [
                    {
                      "name": "fxn",
                      "description": "<p>function to be fired when any user input is\n                               detected within the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
                      "type": "Function|Boolean"
                    }
                  ],
                  "class": "p5",
                  "module": "DOM"
                },
                "createDiv": {
                  "name": "createDiv",
                  "params": [
                    {
                      "name": "html",
                      "description": "<p>inner HTML for element created</p>\n",
                      "type": "String",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "DOM"
                },
                "createP": {
                  "name": "createP",
                  "params": [
                    {
                      "name": "html",
                      "description": "<p>inner HTML for element created</p>\n",
                      "type": "String",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "DOM"
                },
                "createSpan": {
                  "name": "createSpan",
                  "params": [
                    {
                      "name": "html",
                      "description": "<p>inner HTML for element created</p>\n",
                      "type": "String",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "DOM"
                },
                "createImg": {
                  "name": "createImg",
                  "class": "p5",
                  "module": "DOM",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "src",
                          "description": "<p>src path or url for image</p>\n",
                          "type": "String"
                        },
                        {
                          "name": "alt",
                          "description": '<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Img#Attributes">alternate text</a> to be used if image does not load. You can use also an empty string (<code>""</code>) if that an image is not intended to be viewed.</p>\n',
                          "type": "String"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "src",
                          "description": "",
                          "type": "String"
                        },
                        {
                          "name": "alt",
                          "description": "",
                          "type": "String"
                        },
                        {
                          "name": "crossOrigin",
                          "description": `<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes">crossOrigin property</a> of the <code>img</code> element; use either 'anonymous' or 'use-credentials' to retrieve the image with cross-origin access (for later use with <code>canvas</code>. if an empty string(<code>""</code>) is passed, CORS is not used</p>
`,
                          "type": "String"
                        },
                        {
                          "name": "successCallback",
                          "description": '<p>callback to be called once image data is loaded with the <a href="#/p5.Element">p5.Element</a> as argument</p>\n',
                          "type": "Function",
                          "optional": true
                        }
                      ]
                    }
                  ]
                },
                "createA": {
                  "name": "createA",
                  "params": [
                    {
                      "name": "href",
                      "description": "<p>url of page to link to</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "html",
                      "description": "<p>inner html of link element to display</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "target",
                      "description": "<p>target where new link should open,\n                            could be _blank, _self, _parent, _top.</p>\n",
                      "type": "String",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "DOM"
                },
                "createSlider": {
                  "name": "createSlider",
                  "params": [
                    {
                      "name": "min",
                      "description": "<p>minimum value of the slider</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "max",
                      "description": "<p>maximum value of the slider</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "value",
                      "description": "<p>default value of the slider</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "step",
                      "description": "<p>step size for each tick of the slider (if step is set to 0, the slider will move continuously from the minimum to the maximum value)</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "DOM"
                },
                "createButton": {
                  "name": "createButton",
                  "params": [
                    {
                      "name": "label",
                      "description": "<p>label displayed on the button</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "value",
                      "description": "<p>value of the button</p>\n",
                      "type": "String",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "DOM"
                },
                "createCheckbox": {
                  "name": "createCheckbox",
                  "params": [
                    {
                      "name": "label",
                      "description": "<p>label displayed after checkbox</p>\n",
                      "type": "String",
                      "optional": true
                    },
                    {
                      "name": "value",
                      "description": "<p>value of the checkbox; checked is true, unchecked is false</p>\n",
                      "type": "Boolean",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "DOM"
                },
                "createSelect": {
                  "name": "createSelect",
                  "class": "p5",
                  "module": "DOM",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "multiple",
                          "description": "<p>true if dropdown should support multiple selections</p>\n",
                          "type": "Boolean",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "existing",
                          "description": "<p>DOM select element</p>\n",
                          "type": "Object"
                        }
                      ]
                    }
                  ]
                },
                "createRadio": {
                  "name": "createRadio",
                  "class": "p5",
                  "module": "DOM",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "containerElement",
                          "description": "<p>A container HTML Element, either a div\nor span, inside which all existing radio inputs will be considered as options.</p>\n",
                          "type": "Object"
                        },
                        {
                          "name": "name",
                          "description": "<p>A name parameter for each Input Element.</p>\n",
                          "type": "String",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "name",
                          "description": "",
                          "type": "String"
                        }
                      ]
                    },
                    {
                      "params": []
                    }
                  ]
                },
                "createColorPicker": {
                  "name": "createColorPicker",
                  "params": [
                    {
                      "name": "value",
                      "description": "<p>default color of element</p>\n",
                      "type": "String|p5.Color",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "DOM"
                },
                "createInput": {
                  "name": "createInput",
                  "class": "p5",
                  "module": "DOM",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "value",
                          "description": "<p>default value of the input box</p>\n",
                          "type": "String"
                        },
                        {
                          "name": "type",
                          "description": "<p>type of text, ie text, password etc. Defaults to text.\n  Needs a value to be specified first.</p>\n",
                          "type": "String",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "value",
                          "description": "",
                          "type": "String",
                          "optional": true
                        }
                      ]
                    }
                  ]
                },
                "createFileInput": {
                  "name": "createFileInput",
                  "params": [
                    {
                      "name": "callback",
                      "description": "<p>callback function for when a file is loaded</p>\n",
                      "type": "Function"
                    },
                    {
                      "name": "multiple",
                      "description": "<p>optional, to allow multiple files to be selected</p>\n",
                      "type": "Boolean",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "DOM"
                },
                "createVideo": {
                  "name": "createVideo",
                  "params": [
                    {
                      "name": "src",
                      "description": "<p>path to a video file, or array of paths for\n                            supporting different browsers</p>\n",
                      "type": "String|String[]"
                    },
                    {
                      "name": "callback",
                      "description": "<p>callback function to be called upon\n                            'canplaythrough' event fire, that is, when the\n                            browser can play the media, and estimates that\n                            enough data has been loaded to play the media\n                            up to its end without having to stop for\n                            further buffering of content</p>\n",
                      "type": "Function",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "DOM"
                },
                "createAudio": {
                  "name": "createAudio",
                  "params": [
                    {
                      "name": "src",
                      "description": "<p>path to an audio file, or array of paths\n                            for supporting different browsers</p>\n",
                      "type": "String|String[]",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "description": "<p>callback function to be called upon\n                            'canplaythrough' event fire, that is, when the\n                            browser can play the media, and estimates that\n                            enough data has been loaded to play the media\n                            up to its end without having to stop for\n                            further buffering of content</p>\n",
                      "type": "Function",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "DOM"
                },
                "createCapture": {
                  "name": "createCapture",
                  "params": [
                    {
                      "name": "type",
                      "description": "<p>type of capture, either VIDEO or\n                                  AUDIO if none specified, default both,\n                                  or a Constraints object</p>\n",
                      "type": "String|Constant|Object"
                    },
                    {
                      "name": "callback",
                      "description": "<p>function to be called once\n                                  stream has loaded</p>\n",
                      "type": "Function",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "DOM"
                },
                "createElement": {
                  "name": "createElement",
                  "params": [
                    {
                      "name": "tag",
                      "description": "<p>tag for the new element</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "content",
                      "description": "<p>html content to be inserted into the element</p>\n",
                      "type": "String",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "DOM"
                },
                "deviceOrientation": {
                  "name": "deviceOrientation",
                  "class": "p5",
                  "module": "Events"
                },
                "accelerationX": {
                  "name": "accelerationX",
                  "class": "p5",
                  "module": "Events"
                },
                "accelerationY": {
                  "name": "accelerationY",
                  "class": "p5",
                  "module": "Events"
                },
                "accelerationZ": {
                  "name": "accelerationZ",
                  "class": "p5",
                  "module": "Events"
                },
                "pAccelerationX": {
                  "name": "pAccelerationX",
                  "class": "p5",
                  "module": "Events"
                },
                "pAccelerationY": {
                  "name": "pAccelerationY",
                  "class": "p5",
                  "module": "Events"
                },
                "pAccelerationZ": {
                  "name": "pAccelerationZ",
                  "class": "p5",
                  "module": "Events"
                },
                "rotationX": {
                  "name": "rotationX",
                  "class": "p5",
                  "module": "Events"
                },
                "rotationY": {
                  "name": "rotationY",
                  "class": "p5",
                  "module": "Events"
                },
                "rotationZ": {
                  "name": "rotationZ",
                  "class": "p5",
                  "module": "Events"
                },
                "pRotationX": {
                  "name": "pRotationX",
                  "class": "p5",
                  "module": "Events"
                },
                "pRotationY": {
                  "name": "pRotationY",
                  "class": "p5",
                  "module": "Events"
                },
                "pRotationZ": {
                  "name": "pRotationZ",
                  "class": "p5",
                  "module": "Events"
                },
                "turnAxis": {
                  "name": "turnAxis",
                  "class": "p5",
                  "module": "Events"
                },
                "setMoveThreshold": {
                  "name": "setMoveThreshold",
                  "params": [
                    {
                      "name": "value",
                      "description": "<p>The threshold value</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Events"
                },
                "setShakeThreshold": {
                  "name": "setShakeThreshold",
                  "params": [
                    {
                      "name": "value",
                      "description": "<p>The threshold value</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Events"
                },
                "deviceMoved": {
                  "name": "deviceMoved",
                  "class": "p5",
                  "module": "Events"
                },
                "deviceTurned": {
                  "name": "deviceTurned",
                  "class": "p5",
                  "module": "Events"
                },
                "deviceShaken": {
                  "name": "deviceShaken",
                  "class": "p5",
                  "module": "Events"
                },
                "keyIsPressed": {
                  "name": "keyIsPressed",
                  "class": "p5",
                  "module": "Events"
                },
                "key": {
                  "name": "key",
                  "class": "p5",
                  "module": "Events"
                },
                "keyCode": {
                  "name": "keyCode",
                  "class": "p5",
                  "module": "Events"
                },
                "keyPressed": {
                  "name": "keyPressed",
                  "params": [
                    {
                      "name": "event",
                      "description": "<p>optional KeyboardEvent callback argument.</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Events"
                },
                "keyReleased": {
                  "name": "keyReleased",
                  "params": [
                    {
                      "name": "event",
                      "description": "<p>optional KeyboardEvent callback argument.</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Events"
                },
                "keyTyped": {
                  "name": "keyTyped",
                  "params": [
                    {
                      "name": "event",
                      "description": "<p>optional KeyboardEvent callback argument.</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Events"
                },
                "keyIsDown": {
                  "name": "keyIsDown",
                  "params": [
                    {
                      "name": "code",
                      "description": "<p>The key to check for.</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Events"
                },
                "movedX": {
                  "name": "movedX",
                  "class": "p5",
                  "module": "Events"
                },
                "movedY": {
                  "name": "movedY",
                  "class": "p5",
                  "module": "Events"
                },
                "mouseX": {
                  "name": "mouseX",
                  "class": "p5",
                  "module": "Events"
                },
                "mouseY": {
                  "name": "mouseY",
                  "class": "p5",
                  "module": "Events"
                },
                "pmouseX": {
                  "name": "pmouseX",
                  "class": "p5",
                  "module": "Events"
                },
                "pmouseY": {
                  "name": "pmouseY",
                  "class": "p5",
                  "module": "Events"
                },
                "winMouseX": {
                  "name": "winMouseX",
                  "class": "p5",
                  "module": "Events"
                },
                "winMouseY": {
                  "name": "winMouseY",
                  "class": "p5",
                  "module": "Events"
                },
                "pwinMouseX": {
                  "name": "pwinMouseX",
                  "class": "p5",
                  "module": "Events"
                },
                "pwinMouseY": {
                  "name": "pwinMouseY",
                  "class": "p5",
                  "module": "Events"
                },
                "mouseButton": {
                  "name": "mouseButton",
                  "class": "p5",
                  "module": "Events"
                },
                "mouseIsPressed": {
                  "name": "mouseIsPressed",
                  "class": "p5",
                  "module": "Events"
                },
                "mouseMoved": {
                  "name": "mouseMoved",
                  "params": [
                    {
                      "name": "event",
                      "description": "<p>optional MouseEvent callback argument.</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Events"
                },
                "mouseDragged": {
                  "name": "mouseDragged",
                  "params": [
                    {
                      "name": "event",
                      "description": "<p>optional MouseEvent callback argument.</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Events"
                },
                "mousePressed": {
                  "name": "mousePressed",
                  "params": [
                    {
                      "name": "event",
                      "description": "<p>optional MouseEvent callback argument.</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Events"
                },
                "mouseReleased": {
                  "name": "mouseReleased",
                  "params": [
                    {
                      "name": "event",
                      "description": "<p>optional MouseEvent callback argument.</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Events"
                },
                "mouseClicked": {
                  "name": "mouseClicked",
                  "params": [
                    {
                      "name": "event",
                      "description": "<p>optional MouseEvent callback argument.</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Events"
                },
                "doubleClicked": {
                  "name": "doubleClicked",
                  "params": [
                    {
                      "name": "event",
                      "description": "<p>optional MouseEvent callback argument.</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Events"
                },
                "mouseWheel": {
                  "name": "mouseWheel",
                  "params": [
                    {
                      "name": "event",
                      "description": "<p>optional WheelEvent callback argument.</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Events"
                },
                "requestPointerLock": {
                  "name": "requestPointerLock",
                  "class": "p5",
                  "module": "Events"
                },
                "exitPointerLock": {
                  "name": "exitPointerLock",
                  "class": "p5",
                  "module": "Events"
                },
                "touches": {
                  "name": "touches",
                  "class": "p5",
                  "module": "Events"
                },
                "touchStarted": {
                  "name": "touchStarted",
                  "params": [
                    {
                      "name": "event",
                      "description": "<p>optional TouchEvent callback argument.</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Events"
                },
                "touchMoved": {
                  "name": "touchMoved",
                  "params": [
                    {
                      "name": "event",
                      "description": "<p>optional TouchEvent callback argument.</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Events"
                },
                "touchEnded": {
                  "name": "touchEnded",
                  "params": [
                    {
                      "name": "event",
                      "description": "<p>optional TouchEvent callback argument.</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Events"
                },
                "createImage": {
                  "name": "createImage",
                  "params": [
                    {
                      "name": "width",
                      "description": "<p>width in pixels</p>\n",
                      "type": "Integer"
                    },
                    {
                      "name": "height",
                      "description": "<p>height in pixels</p>\n",
                      "type": "Integer"
                    }
                  ],
                  "class": "p5",
                  "module": "Image"
                },
                "saveCanvas": {
                  "name": "saveCanvas",
                  "class": "p5",
                  "module": "Image",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "selectedCanvas",
                          "description": "<p>a variable\n                                representing a specific html5 canvas (optional)</p>\n",
                          "type": "p5.Element|HTMLCanvasElement"
                        },
                        {
                          "name": "filename",
                          "description": "",
                          "type": "String",
                          "optional": true
                        },
                        {
                          "name": "extension",
                          "description": "<p>'jpg' or 'png'</p>\n",
                          "type": "String",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "filename",
                          "description": "",
                          "type": "String",
                          "optional": true
                        },
                        {
                          "name": "extension",
                          "description": "",
                          "type": "String",
                          "optional": true
                        }
                      ]
                    }
                  ]
                },
                "saveFrames": {
                  "name": "saveFrames",
                  "params": [
                    {
                      "name": "filename",
                      "description": "",
                      "type": "String"
                    },
                    {
                      "name": "extension",
                      "description": "<p>'jpg' or 'png'</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "duration",
                      "description": "<p>Duration in seconds to save the frames for. This parameter will be constrained to be less or equal to 15.</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "framerate",
                      "description": "<p>Framerate to save the frames in. This parameter will be constrained to be less or equal to 22.</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "callback",
                      "description": "<p>A callback function that will be executed\n                                to handle the image data. This function\n                                should accept an array as argument. The\n                                array will contain the specified number of\n                                frames of objects. Each object has three\n                                properties: imageData - an\n                                image/octet-stream, filename and extension.</p>\n",
                      "type": "Function(Array)",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Image"
                },
                "loadImage": {
                  "name": "loadImage",
                  "params": [
                    {
                      "name": "path",
                      "description": "<p>Path of the image to be loaded</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "successCallback",
                      "description": '<p>Function to be called once\n                               the image is loaded. Will be passed the\n                               <a href="#/p5.Image">p5.Image</a>.</p>\n',
                      "type": "function(p5.Image)",
                      "optional": true
                    },
                    {
                      "name": "failureCallback",
                      "description": "<p>called with event error if\n                               the image fails to load.</p>\n",
                      "type": "Function(Event)",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Image"
                },
                "saveGif": {
                  "name": "saveGif",
                  "params": [
                    {
                      "name": "filename",
                      "description": "<p>File name of your gif</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "duration",
                      "description": "<p>Duration in seconds that you wish to capture from your sketch</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "options",
                      "description": "<p>An optional object that can contain two more arguments: delay, specifying\nhow much time we should wait before recording, and units, a string that can be either 'seconds' or\n'frames'. By default it's 'seconds'.</p>\n",
                      "type": "Object"
                    }
                  ],
                  "class": "p5",
                  "module": "Image"
                },
                "image": {
                  "name": "image",
                  "class": "p5",
                  "module": "Image",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "img",
                          "description": "<p>the image to display</p>\n",
                          "type": "p5.Image|p5.Element|p5.Texture"
                        },
                        {
                          "name": "x",
                          "description": "<p>the x-coordinate of the top-left corner of the image</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "<p>the y-coordinate of the top-left corner of the image</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "width",
                          "description": "<p>the width to draw the image</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "height",
                          "description": "<p>the height to draw the image</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "img",
                          "description": "",
                          "type": "p5.Image|p5.Element|p5.Texture"
                        },
                        {
                          "name": "dx",
                          "description": "<p>the x-coordinate of the destination\n                          rectangle in which to draw the source image</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "dy",
                          "description": "<p>the y-coordinate of the destination\n                          rectangle in which to draw the source image</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "dWidth",
                          "description": "<p>the width of the destination rectangle</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "dHeight",
                          "description": "<p>the height of the destination rectangle</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "sx",
                          "description": "<p>the x-coordinate of the subsection of the source\nimage to draw into the destination rectangle</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "sy",
                          "description": "<p>the y-coordinate of the subsection of the source\nimage to draw into the destination rectangle</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "sWidth",
                          "description": "<p>the width of the subsection of the\n                          source image to draw into the destination\n                          rectangle</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "sHeight",
                          "description": "<p>the height of the subsection of the\n                           source image to draw into the destination rectangle</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "fit",
                          "description": "<p>either CONTAIN or COVER</p>\n",
                          "type": "Constant",
                          "optional": true
                        },
                        {
                          "name": "xAlign",
                          "description": "<p>either LEFT, RIGHT or CENTER default is CENTER</p>\n",
                          "type": "Constant",
                          "optional": true
                        },
                        {
                          "name": "yAlign",
                          "description": "<p>either TOP, BOTTOM or CENTER default is CENTER</p>\n",
                          "type": "Constant",
                          "optional": true
                        }
                      ]
                    }
                  ]
                },
                "tint": {
                  "name": "tint",
                  "class": "p5",
                  "module": "Image",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "<p>red or hue value relative to\n                                the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v2",
                          "description": "<p>green or saturation value\n                                relative to the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v3",
                          "description": "<p>blue or brightness value\n                                relative to the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "alpha",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "value",
                          "description": "<p>a color string</p>\n",
                          "type": "String"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "gray",
                          "description": "<p>a gray value</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "alpha",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "values",
                          "description": "<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n",
                          "type": "Number[]"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "color",
                          "description": "<p>the tint color</p>\n",
                          "type": "p5.Color"
                        }
                      ]
                    }
                  ]
                },
                "noTint": {
                  "name": "noTint",
                  "class": "p5",
                  "module": "Image"
                },
                "imageMode": {
                  "name": "imageMode",
                  "params": [
                    {
                      "name": "mode",
                      "description": "<p>either CORNER, CORNERS, or CENTER</p>\n",
                      "type": "Constant"
                    }
                  ],
                  "class": "p5",
                  "module": "Image"
                },
                "pixels": {
                  "name": "pixels",
                  "class": "p5",
                  "module": "Image"
                },
                "blend": {
                  "name": "blend",
                  "class": "p5",
                  "module": "Image",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "srcImage",
                          "description": "<p>source image</p>\n",
                          "type": "p5.Image"
                        },
                        {
                          "name": "sx",
                          "description": "<p>X coordinate of the source's upper left corner</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "sy",
                          "description": "<p>Y coordinate of the source's upper left corner</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "sw",
                          "description": "<p>source image width</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "sh",
                          "description": "<p>source image height</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "dx",
                          "description": "<p>X coordinate of the destination's upper left corner</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "dy",
                          "description": "<p>Y coordinate of the destination's upper left corner</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "dw",
                          "description": "<p>destination image width</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "dh",
                          "description": "<p>destination image height</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "blendMode",
                          "description": "<p>the blend mode. either\n    BLEND, DARKEST, LIGHTEST, DIFFERENCE,\n    MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n    SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.</p>\n",
                          "type": "Constant"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "sx",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "sy",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "sw",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "sh",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "dx",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "dy",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "dw",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "dh",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "blendMode",
                          "description": "",
                          "type": "Constant"
                        }
                      ]
                    }
                  ]
                },
                "copy": {
                  "name": "copy",
                  "class": "p5",
                  "module": "Image",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "srcImage",
                          "description": "<p>source image</p>\n",
                          "type": "p5.Image|p5.Element"
                        },
                        {
                          "name": "sx",
                          "description": "<p>X coordinate of the source's upper left corner</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "sy",
                          "description": "<p>Y coordinate of the source's upper left corner</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "sw",
                          "description": "<p>source image width</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "sh",
                          "description": "<p>source image height</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "dx",
                          "description": "<p>X coordinate of the destination's upper left corner</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "dy",
                          "description": "<p>Y coordinate of the destination's upper left corner</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "dw",
                          "description": "<p>destination image width</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "dh",
                          "description": "<p>destination image height</p>\n",
                          "type": "Integer"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "sx",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "sy",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "sw",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "sh",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "dx",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "dy",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "dw",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "dh",
                          "description": "",
                          "type": "Integer"
                        }
                      ]
                    }
                  ]
                },
                "filter": {
                  "name": "filter",
                  "params": [
                    {
                      "name": "filterType",
                      "description": "<p>either THRESHOLD, GRAY, OPAQUE, INVERT,\n                               POSTERIZE, BLUR, ERODE, DILATE or BLUR.\n                               See Filters.js for docs on\n                               each available filter</p>\n",
                      "type": "Constant"
                    },
                    {
                      "name": "filterParam",
                      "description": "<p>an optional parameter unique\n                               to each filter, see above</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Image"
                },
                "get": {
                  "name": "get",
                  "class": "p5",
                  "module": "Image",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "<p>x-coordinate of the pixel</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "<p>y-coordinate of the pixel</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "w",
                          "description": "<p>width</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "h",
                          "description": "<p>height</p>\n",
                          "type": "Number"
                        }
                      ]
                    },
                    {
                      "params": []
                    },
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "",
                          "type": "Number"
                        }
                      ]
                    }
                  ]
                },
                "loadPixels": {
                  "name": "loadPixels",
                  "class": "p5",
                  "module": "Image"
                },
                "set": {
                  "name": "set",
                  "params": [
                    {
                      "name": "x",
                      "description": "<p>x-coordinate of the pixel</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "y",
                      "description": "<p>y-coordinate of the pixel</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "c",
                      "description": '<p>insert a grayscale value | a pixel array |\n                               a <a href="#/p5.Color">p5.Color</a> object | a <a href="#/p5.Image">p5.Image</a> to copy</p>\n',
                      "type": "Number|Number[]|Object"
                    }
                  ],
                  "class": "p5",
                  "module": "Image"
                },
                "updatePixels": {
                  "name": "updatePixels",
                  "params": [
                    {
                      "name": "x",
                      "description": "<p>x-coordinate of the upper-left corner of region\n                        to update</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "y",
                      "description": "<p>y-coordinate of the upper-left corner of region\n                        to update</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "w",
                      "description": "<p>width of region to update</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "h",
                      "description": "<p>height of region to update</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Image"
                },
                "loadJSON": {
                  "name": "loadJSON",
                  "class": "p5",
                  "module": "IO",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "path",
                          "description": "<p>name of the file or url to load</p>\n",
                          "type": "String"
                        },
                        {
                          "name": "jsonpOptions",
                          "description": "<p>options object for jsonp related settings</p>\n",
                          "type": "Object",
                          "optional": true
                        },
                        {
                          "name": "datatype",
                          "description": '<p>"json" or "jsonp"</p>\n',
                          "type": "String",
                          "optional": true
                        },
                        {
                          "name": "callback",
                          "description": '<p>function to be executed after\n                                   <a href="#/p5/loadJSON">loadJSON()</a> completes, data is passed\n                                   in as first argument</p>\n',
                          "type": "Function",
                          "optional": true
                        },
                        {
                          "name": "errorCallback",
                          "description": "<p>function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument</p>\n",
                          "type": "Function",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "path",
                          "description": "",
                          "type": "String"
                        },
                        {
                          "name": "datatype",
                          "description": "",
                          "type": "String"
                        },
                        {
                          "name": "callback",
                          "description": "",
                          "type": "Function",
                          "optional": true
                        },
                        {
                          "name": "errorCallback",
                          "description": "",
                          "type": "Function",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "path",
                          "description": "",
                          "type": "String"
                        },
                        {
                          "name": "callback",
                          "description": "",
                          "type": "Function"
                        },
                        {
                          "name": "errorCallback",
                          "description": "",
                          "type": "Function",
                          "optional": true
                        }
                      ]
                    }
                  ]
                },
                "loadStrings": {
                  "name": "loadStrings",
                  "params": [
                    {
                      "name": "filename",
                      "description": "<p>name of the file or url to load</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "callback",
                      "description": '<p>function to be executed after <a href="#/p5/loadStrings">loadStrings()</a>\n                              completes, Array is passed in as first\n                              argument</p>\n',
                      "type": "Function",
                      "optional": true
                    },
                    {
                      "name": "errorCallback",
                      "description": "<p>function to be executed if\n                              there is an error, response is passed\n                              in as first argument</p>\n",
                      "type": "Function",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "IO"
                },
                "loadTable": {
                  "name": "loadTable",
                  "params": [
                    {
                      "name": "filename",
                      "description": "<p>name of the file or URL to load</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "extension",
                      "description": '<p>parse the table by comma-separated values "csv", semicolon-separated\n                                     values "ssv", or tab-separated values "tsv"</p>\n',
                      "type": "String",
                      "optional": true
                    },
                    {
                      "name": "header",
                      "description": '<p>"header" to indicate table has header row</p>\n',
                      "type": "String",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "description": '<p>function to be executed after\n                                     <a href="#/p5/loadTable">loadTable()</a> completes. On success, the\n                                     <a href="#/p5.Table">Table</a> object is passed in as the\n                                     first argument.</p>\n',
                      "type": "Function",
                      "optional": true
                    },
                    {
                      "name": "errorCallback",
                      "description": "<p>function to be executed if\n                                     there is an error, response is passed\n                                     in as first argument</p>\n",
                      "type": "Function",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "IO"
                },
                "loadXML": {
                  "name": "loadXML",
                  "params": [
                    {
                      "name": "filename",
                      "description": "<p>name of the file or URL to load</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "callback",
                      "description": '<p>function to be executed after <a href="#/p5/loadXML">loadXML()</a>\n                              completes, XML object is passed in as\n                              first argument</p>\n',
                      "type": "Function",
                      "optional": true
                    },
                    {
                      "name": "errorCallback",
                      "description": "<p>function to be executed if\n                              there is an error, response is passed\n                              in as first argument</p>\n",
                      "type": "Function",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "IO"
                },
                "loadBytes": {
                  "name": "loadBytes",
                  "params": [
                    {
                      "name": "file",
                      "description": "<p>name of the file or URL to load</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "callback",
                      "description": '<p>function to be executed after <a href="#/p5/loadBytes">loadBytes()</a>\n                                   completes</p>\n',
                      "type": "Function",
                      "optional": true
                    },
                    {
                      "name": "errorCallback",
                      "description": "<p>function to be executed if there\n                                   is an error</p>\n",
                      "type": "Function",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "IO"
                },
                "httpGet": {
                  "name": "httpGet",
                  "class": "p5",
                  "module": "IO",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "path",
                          "description": "<p>name of the file or url to load</p>\n",
                          "type": "String"
                        },
                        {
                          "name": "datatype",
                          "description": '<p>"json", "jsonp", "binary", "arrayBuffer",\n                                   "xml", or "text"</p>\n',
                          "type": "String",
                          "optional": true
                        },
                        {
                          "name": "data",
                          "description": "<p>param data passed sent with request</p>\n",
                          "type": "Object|Boolean",
                          "optional": true
                        },
                        {
                          "name": "callback",
                          "description": '<p>function to be executed after\n                                   <a href="#/p5/httpGet">httpGet()</a> completes, data is passed in\n                                   as first argument</p>\n',
                          "type": "Function",
                          "optional": true
                        },
                        {
                          "name": "errorCallback",
                          "description": "<p>function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument</p>\n",
                          "type": "Function",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "path",
                          "description": "",
                          "type": "String"
                        },
                        {
                          "name": "data",
                          "description": "",
                          "type": "Object|Boolean"
                        },
                        {
                          "name": "callback",
                          "description": "",
                          "type": "Function",
                          "optional": true
                        },
                        {
                          "name": "errorCallback",
                          "description": "",
                          "type": "Function",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "path",
                          "description": "",
                          "type": "String"
                        },
                        {
                          "name": "callback",
                          "description": "",
                          "type": "Function"
                        },
                        {
                          "name": "errorCallback",
                          "description": "",
                          "type": "Function",
                          "optional": true
                        }
                      ]
                    }
                  ]
                },
                "httpPost": {
                  "name": "httpPost",
                  "class": "p5",
                  "module": "IO",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "path",
                          "description": "<p>name of the file or url to load</p>\n",
                          "type": "String"
                        },
                        {
                          "name": "datatype",
                          "description": '<p>"json", "jsonp", "xml", or "text".\n                                   If omitted, <a href="#/p5/httpPost">httpPost()</a> will guess.</p>\n',
                          "type": "String",
                          "optional": true
                        },
                        {
                          "name": "data",
                          "description": "<p>param data passed sent with request</p>\n",
                          "type": "Object|Boolean",
                          "optional": true
                        },
                        {
                          "name": "callback",
                          "description": '<p>function to be executed after\n                                   <a href="#/p5/httpPost">httpPost()</a> completes, data is passed in\n                                   as first argument</p>\n',
                          "type": "Function",
                          "optional": true
                        },
                        {
                          "name": "errorCallback",
                          "description": "<p>function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument</p>\n",
                          "type": "Function",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "path",
                          "description": "",
                          "type": "String"
                        },
                        {
                          "name": "data",
                          "description": "",
                          "type": "Object|Boolean"
                        },
                        {
                          "name": "callback",
                          "description": "",
                          "type": "Function",
                          "optional": true
                        },
                        {
                          "name": "errorCallback",
                          "description": "",
                          "type": "Function",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "path",
                          "description": "",
                          "type": "String"
                        },
                        {
                          "name": "callback",
                          "description": "",
                          "type": "Function"
                        },
                        {
                          "name": "errorCallback",
                          "description": "",
                          "type": "Function",
                          "optional": true
                        }
                      ]
                    }
                  ]
                },
                "httpDo": {
                  "name": "httpDo",
                  "class": "p5",
                  "module": "IO",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "path",
                          "description": "<p>name of the file or url to load</p>\n",
                          "type": "String"
                        },
                        {
                          "name": "method",
                          "description": '<p>either "GET", "POST", or "PUT",\n                                   defaults to "GET"</p>\n',
                          "type": "String",
                          "optional": true
                        },
                        {
                          "name": "datatype",
                          "description": '<p>"json", "jsonp", "xml", or "text"</p>\n',
                          "type": "String",
                          "optional": true
                        },
                        {
                          "name": "data",
                          "description": "<p>param data passed sent with request</p>\n",
                          "type": "Object",
                          "optional": true
                        },
                        {
                          "name": "callback",
                          "description": '<p>function to be executed after\n                                   <a href="#/p5/httpGet">httpGet()</a> completes, data is passed in\n                                   as first argument</p>\n',
                          "type": "Function",
                          "optional": true
                        },
                        {
                          "name": "errorCallback",
                          "description": "<p>function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument</p>\n",
                          "type": "Function",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "path",
                          "description": "",
                          "type": "String"
                        },
                        {
                          "name": "options",
                          "description": '<p>Request object options as documented in the\n                                   "fetch" API\n<a href="https://developer.mozilla.org/en/docs/Web/API/Fetch_API">reference</a></p>\n',
                          "type": "Object"
                        },
                        {
                          "name": "callback",
                          "description": "",
                          "type": "Function",
                          "optional": true
                        },
                        {
                          "name": "errorCallback",
                          "description": "",
                          "type": "Function",
                          "optional": true
                        }
                      ]
                    }
                  ]
                },
                "createWriter": {
                  "name": "createWriter",
                  "params": [
                    {
                      "name": "name",
                      "description": "<p>name of the file to be created</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "extension",
                      "description": "",
                      "type": "String",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "IO"
                },
                "save": {
                  "name": "save",
                  "params": [
                    {
                      "name": "objectOrFilename",
                      "description": "<p>If filename is provided, will\n                                           save canvas as an image with\n                                           either png or jpg extension\n                                           depending on the filename.\n                                           If object is provided, will\n                                           save depending on the object\n                                           and filename (see examples\n                                           above).</p>\n",
                      "type": "Object|String",
                      "optional": true
                    },
                    {
                      "name": "filename",
                      "description": "<p>If an object is provided as the first\n                             parameter, then the second parameter\n                             indicates the filename,\n                             and should include an appropriate\n                             file extension (see examples above).</p>\n",
                      "type": "String",
                      "optional": true
                    },
                    {
                      "name": "options",
                      "description": "<p>Additional options depend on\n                          filetype. For example, when saving JSON,\n                          <code>true</code> indicates that the\n                          output will be optimized for filesize,\n                          rather than readability.</p>\n",
                      "type": "Boolean|String",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "IO"
                },
                "saveJSON": {
                  "name": "saveJSON",
                  "params": [
                    {
                      "name": "json",
                      "description": "",
                      "type": "Array|Object"
                    },
                    {
                      "name": "filename",
                      "description": "",
                      "type": "String"
                    },
                    {
                      "name": "optimize",
                      "description": "<p>If true, removes line breaks\n                               and spaces from the output\n                               file to optimize filesize\n                               (but not readability).</p>\n",
                      "type": "Boolean",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "IO"
                },
                "saveStrings": {
                  "name": "saveStrings",
                  "params": [
                    {
                      "name": "list",
                      "description": "<p>string array to be written</p>\n",
                      "type": "String[]"
                    },
                    {
                      "name": "filename",
                      "description": "<p>filename for output</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "extension",
                      "description": "<p>the filename's extension</p>\n",
                      "type": "String",
                      "optional": true
                    },
                    {
                      "name": "isCRLF",
                      "description": "<p>if true, change line-break to CRLF</p>\n",
                      "type": "Boolean",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "IO"
                },
                "saveTable": {
                  "name": "saveTable",
                  "params": [
                    {
                      "name": "Table",
                      "description": '<p>the <a href="#/p5.Table">Table</a> object to save to a file</p>\n',
                      "type": "p5.Table"
                    },
                    {
                      "name": "filename",
                      "description": "<p>the filename to which the Table should be saved</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "options",
                      "description": '<p>can be one of "tsv", "csv", or "html"</p>\n',
                      "type": "String",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "IO"
                },
                "abs": {
                  "name": "abs",
                  "params": [
                    {
                      "name": "n",
                      "description": "<p>number to compute</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "ceil": {
                  "name": "ceil",
                  "params": [
                    {
                      "name": "n",
                      "description": "<p>number to round up</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "constrain": {
                  "name": "constrain",
                  "params": [
                    {
                      "name": "n",
                      "description": "<p>number to constrain</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "low",
                      "description": "<p>minimum limit</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "high",
                      "description": "<p>maximum limit</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "dist": {
                  "name": "dist",
                  "class": "p5",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x1",
                          "description": "<p>x-coordinate of the first point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y1",
                          "description": "<p>y-coordinate of the first point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x2",
                          "description": "<p>x-coordinate of the second point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y2",
                          "description": "<p>y-coordinate of the second point</p>\n",
                          "type": "Number"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "x1",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y1",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z1",
                          "description": "<p>z-coordinate of the first point</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x2",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y2",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z2",
                          "description": "<p>z-coordinate of the second point</p>\n",
                          "type": "Number"
                        }
                      ]
                    }
                  ]
                },
                "exp": {
                  "name": "exp",
                  "params": [
                    {
                      "name": "n",
                      "description": "<p>exponent to raise</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "floor": {
                  "name": "floor",
                  "params": [
                    {
                      "name": "n",
                      "description": "<p>number to round down</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "lerp": {
                  "name": "lerp",
                  "params": [
                    {
                      "name": "start",
                      "description": "<p>first value</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "stop",
                      "description": "<p>second value</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "amt",
                      "description": "<p>number</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "log": {
                  "name": "log",
                  "params": [
                    {
                      "name": "n",
                      "description": "<p>number greater than 0</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "mag": {
                  "name": "mag",
                  "params": [
                    {
                      "name": "a",
                      "description": "<p>first value</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "b",
                      "description": "<p>second value</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "map": {
                  "name": "map",
                  "params": [
                    {
                      "name": "value",
                      "description": "<p>the incoming value to be converted</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "start1",
                      "description": "<p>lower bound of the value's current range</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "stop1",
                      "description": "<p>upper bound of the value's current range</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "start2",
                      "description": "<p>lower bound of the value's target range</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "stop2",
                      "description": "<p>upper bound of the value's target range</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "withinBounds",
                      "description": "<p>constrain the value to the newly mapped range</p>\n",
                      "type": "Boolean",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "max": {
                  "name": "max",
                  "class": "p5",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "n0",
                          "description": "<p>Number to compare</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "n1",
                          "description": "<p>Number to compare</p>\n",
                          "type": "Number"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "nums",
                          "description": "<p>Numbers to compare</p>\n",
                          "type": "Number[]"
                        }
                      ]
                    }
                  ]
                },
                "min": {
                  "name": "min",
                  "class": "p5",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "n0",
                          "description": "<p>Number to compare</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "n1",
                          "description": "<p>Number to compare</p>\n",
                          "type": "Number"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "nums",
                          "description": "<p>Numbers to compare</p>\n",
                          "type": "Number[]"
                        }
                      ]
                    }
                  ]
                },
                "norm": {
                  "name": "norm",
                  "params": [
                    {
                      "name": "value",
                      "description": "<p>incoming value to be normalized</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "start",
                      "description": "<p>lower bound of the value's current range</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "stop",
                      "description": "<p>upper bound of the value's current range</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "pow": {
                  "name": "pow",
                  "params": [
                    {
                      "name": "n",
                      "description": "<p>base of the exponential expression</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "e",
                      "description": "<p>power by which to raise the base</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "round": {
                  "name": "round",
                  "params": [
                    {
                      "name": "n",
                      "description": "<p>number to round</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "decimals",
                      "description": "<p>number of decimal places to round to, default is 0</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "sq": {
                  "name": "sq",
                  "params": [
                    {
                      "name": "n",
                      "description": "<p>number to square</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "sqrt": {
                  "name": "sqrt",
                  "params": [
                    {
                      "name": "n",
                      "description": "<p>non-negative number to square root</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "fract": {
                  "name": "fract",
                  "params": [
                    {
                      "name": "num",
                      "description": "<p>Number whose fractional part needs to be found out</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "createVector": {
                  "name": "createVector",
                  "params": [
                    {
                      "name": "x",
                      "description": "<p>x component of the vector</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "y",
                      "description": "<p>y component of the vector</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "z",
                      "description": "<p>z component of the vector</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "noise": {
                  "name": "noise",
                  "params": [
                    {
                      "name": "x",
                      "description": "<p>x-coordinate in noise space</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "y",
                      "description": "<p>y-coordinate in noise space</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "z",
                      "description": "<p>z-coordinate in noise space</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "noiseDetail": {
                  "name": "noiseDetail",
                  "params": [
                    {
                      "name": "lod",
                      "description": "<p>number of octaves to be used by the noise</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "falloff",
                      "description": "<p>falloff factor for each octave</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "noiseSeed": {
                  "name": "noiseSeed",
                  "params": [
                    {
                      "name": "seed",
                      "description": "<p>the seed value</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "randomSeed": {
                  "name": "randomSeed",
                  "params": [
                    {
                      "name": "seed",
                      "description": "<p>the seed value</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "random": {
                  "name": "random",
                  "class": "p5",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "min",
                          "description": "<p>the lower bound (inclusive)</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "max",
                          "description": "<p>the upper bound (exclusive)</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "choices",
                          "description": "<p>the array to choose from</p>\n",
                          "type": "Array"
                        }
                      ]
                    }
                  ]
                },
                "randomGaussian": {
                  "name": "randomGaussian",
                  "params": [
                    {
                      "name": "mean",
                      "description": "<p>the mean</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "sd",
                      "description": "<p>the standard deviation</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "acos": {
                  "name": "acos",
                  "params": [
                    {
                      "name": "value",
                      "description": "<p>the value whose arc cosine is to be returned</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "asin": {
                  "name": "asin",
                  "params": [
                    {
                      "name": "value",
                      "description": "<p>the value whose arc sine is to be returned</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "atan": {
                  "name": "atan",
                  "params": [
                    {
                      "name": "value",
                      "description": "<p>the value whose arc tangent is to be returned</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "atan2": {
                  "name": "atan2",
                  "params": [
                    {
                      "name": "y",
                      "description": "<p>y-coordinate of the point</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "x",
                      "description": "<p>x-coordinate of the point</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "cos": {
                  "name": "cos",
                  "params": [
                    {
                      "name": "angle",
                      "description": "<p>the angle</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "sin": {
                  "name": "sin",
                  "params": [
                    {
                      "name": "angle",
                      "description": "<p>the angle</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "tan": {
                  "name": "tan",
                  "params": [
                    {
                      "name": "angle",
                      "description": "<p>the angle</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "degrees": {
                  "name": "degrees",
                  "params": [
                    {
                      "name": "radians",
                      "description": "<p>the radians value to convert to degrees</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "radians": {
                  "name": "radians",
                  "params": [
                    {
                      "name": "degrees",
                      "description": "<p>the degree value to convert to radians</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "Math"
                },
                "angleMode": {
                  "name": "angleMode",
                  "class": "p5",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "mode",
                          "description": "<p>either RADIANS or DEGREES</p>\n",
                          "type": "Constant"
                        }
                      ]
                    },
                    {
                      "params": []
                    }
                  ]
                },
                "textAlign": {
                  "name": "textAlign",
                  "class": "p5",
                  "module": "Typography",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "horizAlign",
                          "description": "<p>horizontal alignment, either LEFT,\n                           CENTER, or RIGHT</p>\n",
                          "type": "Constant"
                        },
                        {
                          "name": "vertAlign",
                          "description": "<p>vertical alignment, either TOP,\n                           BOTTOM, CENTER, or BASELINE</p>\n",
                          "type": "Constant",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": []
                    }
                  ]
                },
                "textLeading": {
                  "name": "textLeading",
                  "class": "p5",
                  "module": "Typography",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "leading",
                          "description": "<p>the size in pixels for spacing between lines</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": []
                    }
                  ]
                },
                "textSize": {
                  "name": "textSize",
                  "class": "p5",
                  "module": "Typography",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "theSize",
                          "description": "<p>the size of the letters in units of pixels</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": []
                    }
                  ]
                },
                "textStyle": {
                  "name": "textStyle",
                  "class": "p5",
                  "module": "Typography",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "theStyle",
                          "description": "<p>styling for text, either NORMAL,\n                           ITALIC, BOLD or BOLDITALIC</p>\n",
                          "type": "Constant"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": []
                    }
                  ]
                },
                "textWidth": {
                  "name": "textWidth",
                  "params": [
                    {
                      "name": "theText",
                      "description": "<p>the String of characters to measure</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5",
                  "module": "Typography"
                },
                "textAscent": {
                  "name": "textAscent",
                  "class": "p5",
                  "module": "Typography"
                },
                "textDescent": {
                  "name": "textDescent",
                  "class": "p5",
                  "module": "Typography"
                },
                "textWrap": {
                  "name": "textWrap",
                  "params": [
                    {
                      "name": "wrapStyle",
                      "description": "<p>text wrapping style, either WORD or CHAR</p>\n",
                      "type": "Constant"
                    }
                  ],
                  "class": "p5",
                  "module": "Typography"
                },
                "loadFont": {
                  "name": "loadFont",
                  "params": [
                    {
                      "name": "path",
                      "description": "<p>name of the file or url to load</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "callback",
                      "description": '<p>function to be executed after\n                                   <a href="#/p5/loadFont">loadFont()</a> completes</p>\n',
                      "type": "Function",
                      "optional": true
                    },
                    {
                      "name": "onError",
                      "description": "<p>function to be executed if\n                                   an error occurs</p>\n",
                      "type": "Function",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Typography"
                },
                "text": {
                  "name": "text",
                  "params": [
                    {
                      "name": "str",
                      "description": "<p>the alphanumeric\n                                            symbols to be displayed</p>\n",
                      "type": "String|Object|Array|Number|Boolean"
                    },
                    {
                      "name": "x",
                      "description": "<p>x-coordinate of text</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "y",
                      "description": "<p>y-coordinate of text</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "x2",
                      "description": '<p>by default, the width of the text box,\n                    see <a href="#/p5/rectMode">rectMode()</a> for more info</p>\n',
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "y2",
                      "description": '<p>by default, the height of the text box,\n                    see <a href="#/p5/rectMode">rectMode()</a> for more info</p>\n',
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Typography"
                },
                "textFont": {
                  "name": "textFont",
                  "class": "p5",
                  "module": "Typography",
                  "overloads": [
                    {
                      "params": []
                    },
                    {
                      "params": [
                        {
                          "name": "font",
                          "description": '<p>a font loaded via <a href="#/p5/loadFont">loadFont()</a>,\nor a String representing a <a href="https://mzl.la/2dOw8WD">web safe font</a>\n(a font that is generally available across all systems)</p>\n',
                          "type": "Object|String"
                        },
                        {
                          "name": "size",
                          "description": "<p>the font size to use</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "append": {
                  "name": "append",
                  "params": [
                    {
                      "name": "array",
                      "description": "<p>Array to append</p>\n",
                      "type": "Array"
                    },
                    {
                      "name": "value",
                      "description": "<p>to be added to the Array</p>\n",
                      "type": "Any"
                    }
                  ],
                  "class": "p5",
                  "module": "Data"
                },
                "arrayCopy": {
                  "name": "arrayCopy",
                  "class": "p5",
                  "module": "Data",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "src",
                          "description": "<p>the source Array</p>\n",
                          "type": "Array"
                        },
                        {
                          "name": "srcPosition",
                          "description": "<p>starting position in the source Array</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "dst",
                          "description": "<p>the destination Array</p>\n",
                          "type": "Array"
                        },
                        {
                          "name": "dstPosition",
                          "description": "<p>starting position in the destination Array</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "length",
                          "description": "<p>number of Array elements to be copied</p>\n",
                          "type": "Integer"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "src",
                          "description": "",
                          "type": "Array"
                        },
                        {
                          "name": "dst",
                          "description": "",
                          "type": "Array"
                        },
                        {
                          "name": "length",
                          "description": "",
                          "type": "Integer",
                          "optional": true
                        }
                      ]
                    }
                  ]
                },
                "concat": {
                  "name": "concat",
                  "params": [
                    {
                      "name": "a",
                      "description": "<p>first Array to concatenate</p>\n",
                      "type": "Array"
                    },
                    {
                      "name": "b",
                      "description": "<p>second Array to concatenate</p>\n",
                      "type": "Array"
                    }
                  ],
                  "class": "p5",
                  "module": "Data"
                },
                "reverse": {
                  "name": "reverse",
                  "params": [
                    {
                      "name": "list",
                      "description": "<p>Array to reverse</p>\n",
                      "type": "Array"
                    }
                  ],
                  "class": "p5",
                  "module": "Data"
                },
                "shorten": {
                  "name": "shorten",
                  "params": [
                    {
                      "name": "list",
                      "description": "<p>Array to shorten</p>\n",
                      "type": "Array"
                    }
                  ],
                  "class": "p5",
                  "module": "Data"
                },
                "shuffle": {
                  "name": "shuffle",
                  "params": [
                    {
                      "name": "array",
                      "description": "<p>Array to shuffle</p>\n",
                      "type": "Array"
                    },
                    {
                      "name": "bool",
                      "description": "<p>modify passed array</p>\n",
                      "type": "Boolean",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Data"
                },
                "sort": {
                  "name": "sort",
                  "params": [
                    {
                      "name": "list",
                      "description": "<p>Array to sort</p>\n",
                      "type": "Array"
                    },
                    {
                      "name": "count",
                      "description": "<p>number of elements to sort, starting from 0</p>\n",
                      "type": "Integer",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Data"
                },
                "splice": {
                  "name": "splice",
                  "params": [
                    {
                      "name": "list",
                      "description": "<p>Array to splice into</p>\n",
                      "type": "Array"
                    },
                    {
                      "name": "value",
                      "description": "<p>value to be spliced in</p>\n",
                      "type": "Any"
                    },
                    {
                      "name": "position",
                      "description": "<p>in the array from which to insert data</p>\n",
                      "type": "Integer"
                    }
                  ],
                  "class": "p5",
                  "module": "Data"
                },
                "subset": {
                  "name": "subset",
                  "params": [
                    {
                      "name": "list",
                      "description": "<p>Array to extract from</p>\n",
                      "type": "Array"
                    },
                    {
                      "name": "start",
                      "description": "<p>position to begin</p>\n",
                      "type": "Integer"
                    },
                    {
                      "name": "count",
                      "description": "<p>number of values to extract</p>\n",
                      "type": "Integer",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Data"
                },
                "float": {
                  "name": "float",
                  "params": [
                    {
                      "name": "str",
                      "description": "<p>float string to parse</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5",
                  "module": "Data"
                },
                "int": {
                  "name": "int",
                  "class": "p5",
                  "module": "Data",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "n",
                          "description": "<p>value to parse</p>\n",
                          "type": "String|Boolean|Number"
                        },
                        {
                          "name": "radix",
                          "description": "<p>the radix to convert to (default: 10)</p>\n",
                          "type": "Integer",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "ns",
                          "description": "<p>values to parse</p>\n",
                          "type": "Array"
                        },
                        {
                          "name": "radix",
                          "description": "",
                          "type": "Integer",
                          "optional": true
                        }
                      ]
                    }
                  ]
                },
                "str": {
                  "name": "str",
                  "params": [
                    {
                      "name": "n",
                      "description": "<p>value to parse</p>\n",
                      "type": "String|Boolean|Number|Array"
                    }
                  ],
                  "class": "p5",
                  "module": "Data"
                },
                "byte": {
                  "name": "byte",
                  "class": "p5",
                  "module": "Data",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "n",
                          "description": "<p>value to parse</p>\n",
                          "type": "String|Boolean|Number"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "ns",
                          "description": "<p>values to parse</p>\n",
                          "type": "Array"
                        }
                      ]
                    }
                  ]
                },
                "char": {
                  "name": "char",
                  "class": "p5",
                  "module": "Data",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "n",
                          "description": "<p>value to parse</p>\n",
                          "type": "String|Number"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "ns",
                          "description": "<p>values to parse</p>\n",
                          "type": "Array"
                        }
                      ]
                    }
                  ]
                },
                "unchar": {
                  "name": "unchar",
                  "class": "p5",
                  "module": "Data",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "n",
                          "description": "<p>value to parse</p>\n",
                          "type": "String"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "ns",
                          "description": "<p>values to parse</p>\n",
                          "type": "Array"
                        }
                      ]
                    }
                  ]
                },
                "hex": {
                  "name": "hex",
                  "class": "p5",
                  "module": "Data",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "n",
                          "description": "<p>value to parse</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "digits",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "ns",
                          "description": "<p>array of values to parse</p>\n",
                          "type": "Number[]"
                        },
                        {
                          "name": "digits",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ]
                    }
                  ]
                },
                "unhex": {
                  "name": "unhex",
                  "class": "p5",
                  "module": "Data",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "n",
                          "description": "<p>value to parse</p>\n",
                          "type": "String"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "ns",
                          "description": "<p>values to parse</p>\n",
                          "type": "Array"
                        }
                      ]
                    }
                  ]
                },
                "join": {
                  "name": "join",
                  "params": [
                    {
                      "name": "list",
                      "description": "<p>array of Strings to be joined</p>\n",
                      "type": "Array"
                    },
                    {
                      "name": "separator",
                      "description": "<p>String to be placed between each item</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5",
                  "module": "Data"
                },
                "match": {
                  "name": "match",
                  "params": [
                    {
                      "name": "str",
                      "description": "<p>the String to be searched</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "regexp",
                      "description": "<p>the regexp to be used for matching</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5",
                  "module": "Data"
                },
                "matchAll": {
                  "name": "matchAll",
                  "params": [
                    {
                      "name": "str",
                      "description": "<p>the String to be searched</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "regexp",
                      "description": "<p>the regexp to be used for matching</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5",
                  "module": "Data"
                },
                "nf": {
                  "name": "nf",
                  "class": "p5",
                  "module": "Data",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "num",
                          "description": "<p>the Number to format</p>\n",
                          "type": "Number|String"
                        },
                        {
                          "name": "left",
                          "description": "<p>number of digits to the left of the\n                               decimal point</p>\n",
                          "type": "Integer|String",
                          "optional": true
                        },
                        {
                          "name": "right",
                          "description": "<p>number of digits to the right of the\n                               decimal point</p>\n",
                          "type": "Integer|String",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "nums",
                          "description": "<p>the Numbers to format</p>\n",
                          "type": "Array"
                        },
                        {
                          "name": "left",
                          "description": "",
                          "type": "Integer|String",
                          "optional": true
                        },
                        {
                          "name": "right",
                          "description": "",
                          "type": "Integer|String",
                          "optional": true
                        }
                      ]
                    }
                  ]
                },
                "nfc": {
                  "name": "nfc",
                  "class": "p5",
                  "module": "Data",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "num",
                          "description": "<p>the Number to format</p>\n",
                          "type": "Number|String"
                        },
                        {
                          "name": "right",
                          "description": "<p>number of digits to the right of the\n                                 decimal point</p>\n",
                          "type": "Integer|String",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "nums",
                          "description": "<p>the Numbers to format</p>\n",
                          "type": "Array"
                        },
                        {
                          "name": "right",
                          "description": "",
                          "type": "Integer|String",
                          "optional": true
                        }
                      ]
                    }
                  ]
                },
                "nfp": {
                  "name": "nfp",
                  "class": "p5",
                  "module": "Data",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "num",
                          "description": "<p>the Number to format</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "left",
                          "description": "<p>number of digits to the left of the decimal\n                               point</p>\n",
                          "type": "Integer",
                          "optional": true
                        },
                        {
                          "name": "right",
                          "description": "<p>number of digits to the right of the\n                               decimal point</p>\n",
                          "type": "Integer",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "nums",
                          "description": "<p>the Numbers to format</p>\n",
                          "type": "Number[]"
                        },
                        {
                          "name": "left",
                          "description": "",
                          "type": "Integer",
                          "optional": true
                        },
                        {
                          "name": "right",
                          "description": "",
                          "type": "Integer",
                          "optional": true
                        }
                      ]
                    }
                  ]
                },
                "nfs": {
                  "name": "nfs",
                  "class": "p5",
                  "module": "Data",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "num",
                          "description": "<p>the Number to format</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "left",
                          "description": "<p>number of digits to the left of the decimal\n                               point</p>\n",
                          "type": "Integer",
                          "optional": true
                        },
                        {
                          "name": "right",
                          "description": "<p>number of digits to the right of the\n                               decimal point</p>\n",
                          "type": "Integer",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "nums",
                          "description": "<p>the Numbers to format</p>\n",
                          "type": "Array"
                        },
                        {
                          "name": "left",
                          "description": "",
                          "type": "Integer",
                          "optional": true
                        },
                        {
                          "name": "right",
                          "description": "",
                          "type": "Integer",
                          "optional": true
                        }
                      ]
                    }
                  ]
                },
                "split": {
                  "name": "split",
                  "params": [
                    {
                      "name": "value",
                      "description": "<p>the String to be split</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "delim",
                      "description": "<p>the String used to separate the data</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5",
                  "module": "Data"
                },
                "splitTokens": {
                  "name": "splitTokens",
                  "params": [
                    {
                      "name": "value",
                      "description": "<p>the String to be split</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "delim",
                      "description": "<p>list of individual Strings that will be used as\n                         separators</p>\n",
                      "type": "String",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Data"
                },
                "trim": {
                  "name": "trim",
                  "class": "p5",
                  "module": "Data",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "str",
                          "description": "<p>a String to be trimmed</p>\n",
                          "type": "String"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "strs",
                          "description": "<p>an Array of Strings to be trimmed</p>\n",
                          "type": "Array"
                        }
                      ]
                    }
                  ]
                },
                "day": {
                  "name": "day",
                  "class": "p5",
                  "module": "IO"
                },
                "hour": {
                  "name": "hour",
                  "class": "p5",
                  "module": "IO"
                },
                "minute": {
                  "name": "minute",
                  "class": "p5",
                  "module": "IO"
                },
                "millis": {
                  "name": "millis",
                  "class": "p5",
                  "module": "IO"
                },
                "month": {
                  "name": "month",
                  "class": "p5",
                  "module": "IO"
                },
                "second": {
                  "name": "second",
                  "class": "p5",
                  "module": "IO"
                },
                "year": {
                  "name": "year",
                  "class": "p5",
                  "module": "IO"
                },
                "plane": {
                  "name": "plane",
                  "params": [
                    {
                      "name": "width",
                      "description": "<p>width of the plane</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "height",
                      "description": "<p>height of the plane</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "detailX",
                      "description": "<p>Optional number of triangle\n                            subdivisions in x-dimension</p>\n",
                      "type": "Integer",
                      "optional": true
                    },
                    {
                      "name": "detailY",
                      "description": "<p>Optional number of triangle\n                            subdivisions in y-dimension</p>\n",
                      "type": "Integer",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "box": {
                  "name": "box",
                  "params": [
                    {
                      "name": "width",
                      "description": "<p>width of the box</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "height",
                      "description": "<p>height of the box</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "depth",
                      "description": "<p>depth of the box</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "detailX",
                      "description": "<p>Optional number of triangle\n                           subdivisions in x-dimension</p>\n",
                      "type": "Integer",
                      "optional": true
                    },
                    {
                      "name": "detailY",
                      "description": "<p>Optional number of triangle\n                           subdivisions in y-dimension</p>\n",
                      "type": "Integer",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "sphere": {
                  "name": "sphere",
                  "params": [
                    {
                      "name": "radius",
                      "description": "<p>radius of circle</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "detailX",
                      "description": "<p>optional number of subdivisions in x-dimension</p>\n",
                      "type": "Integer",
                      "optional": true
                    },
                    {
                      "name": "detailY",
                      "description": "<p>optional number of subdivisions in y-dimension</p>\n",
                      "type": "Integer",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "cylinder": {
                  "name": "cylinder",
                  "params": [
                    {
                      "name": "radius",
                      "description": "<p>radius of the surface</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "height",
                      "description": "<p>height of the cylinder</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "detailX",
                      "description": "<p>number of subdivisions in x-dimension;\n                              default is 24</p>\n",
                      "type": "Integer",
                      "optional": true
                    },
                    {
                      "name": "detailY",
                      "description": "<p>number of subdivisions in y-dimension;\n                              default is 1</p>\n",
                      "type": "Integer",
                      "optional": true
                    },
                    {
                      "name": "bottomCap",
                      "description": "<p>whether to draw the bottom of the cylinder</p>\n",
                      "type": "Boolean",
                      "optional": true
                    },
                    {
                      "name": "topCap",
                      "description": "<p>whether to draw the top of the cylinder</p>\n",
                      "type": "Boolean",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "cone": {
                  "name": "cone",
                  "params": [
                    {
                      "name": "radius",
                      "description": "<p>radius of the bottom surface</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "height",
                      "description": "<p>height of the cone</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "detailX",
                      "description": "<p>number of segments,\n                            the more segments the smoother geometry\n                            default is 24</p>\n",
                      "type": "Integer",
                      "optional": true
                    },
                    {
                      "name": "detailY",
                      "description": "<p>number of segments,\n                            the more segments the smoother geometry\n                            default is 1</p>\n",
                      "type": "Integer",
                      "optional": true
                    },
                    {
                      "name": "cap",
                      "description": "<p>whether to draw the base of the cone</p>\n",
                      "type": "Boolean",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "ellipsoid": {
                  "name": "ellipsoid",
                  "params": [
                    {
                      "name": "radiusx",
                      "description": "<p>x-radius of ellipsoid</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "radiusy",
                      "description": "<p>y-radius of ellipsoid</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "radiusz",
                      "description": "<p>z-radius of ellipsoid</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "detailX",
                      "description": "<p>number of segments,\n                                   the more segments the smoother geometry\n                                   default is 24. Avoid detail number above\n                                   150, it may crash the browser.</p>\n",
                      "type": "Integer",
                      "optional": true
                    },
                    {
                      "name": "detailY",
                      "description": "<p>number of segments,\n                                   the more segments the smoother geometry\n                                   default is 16. Avoid detail number above\n                                   150, it may crash the browser.</p>\n",
                      "type": "Integer",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "torus": {
                  "name": "torus",
                  "params": [
                    {
                      "name": "radius",
                      "description": "<p>radius of the whole ring</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "tubeRadius",
                      "description": "<p>radius of the tube</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "detailX",
                      "description": "<p>number of segments in x-dimension,\n                               the more segments the smoother geometry\n                               default is 24</p>\n",
                      "type": "Integer",
                      "optional": true
                    },
                    {
                      "name": "detailY",
                      "description": "<p>number of segments in y-dimension,\n                               the more segments the smoother geometry\n                               default is 16</p>\n",
                      "type": "Integer",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "orbitControl": {
                  "name": "orbitControl",
                  "params": [
                    {
                      "name": "sensitivityX",
                      "description": "<p>sensitivity to mouse movement along X axis</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "sensitivityY",
                      "description": "<p>sensitivity to mouse movement along Y axis</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "sensitivityZ",
                      "description": "<p>sensitivity to scroll movement along Z axis</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "3D"
                },
                "debugMode": {
                  "name": "debugMode",
                  "class": "p5",
                  "module": "3D",
                  "overloads": [
                    {
                      "params": []
                    },
                    {
                      "params": [
                        {
                          "name": "mode",
                          "description": "<p>either GRID or AXES</p>\n",
                          "type": "Constant"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "mode",
                          "description": "",
                          "type": "Constant"
                        },
                        {
                          "name": "gridSize",
                          "description": "<p>size of one side of the grid</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "gridDivisions",
                          "description": "<p>number of divisions in the grid</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "xOff",
                          "description": "<p>X axis offset from origin (0,0,0)</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "yOff",
                          "description": "<p>Y axis offset from origin (0,0,0)</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "zOff",
                          "description": "<p>Z axis offset from origin (0,0,0)</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "mode",
                          "description": "",
                          "type": "Constant"
                        },
                        {
                          "name": "axesSize",
                          "description": "<p>size of axes icon</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "xOff",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "yOff",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "zOff",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "gridSize",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "gridDivisions",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "gridXOff",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "gridYOff",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "gridZOff",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "axesSize",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "axesXOff",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "axesYOff",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "axesZOff",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ]
                    }
                  ]
                },
                "noDebugMode": {
                  "name": "noDebugMode",
                  "class": "p5",
                  "module": "3D"
                },
                "ambientLight": {
                  "name": "ambientLight",
                  "class": "p5",
                  "module": "3D",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "<p>red or hue value relative to\n                                  the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v2",
                          "description": "<p>green or saturation value\n                                  relative to the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v3",
                          "description": "<p>blue or brightness value\n                                  relative to the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "alpha",
                          "description": "<p>alpha value relative to current\n                                  color range (default is 0-255)</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "gray",
                          "description": "<p>number specifying value between\n                                 white and black</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "alpha",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "value",
                          "description": "<p>a color string</p>\n",
                          "type": "String"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "values",
                          "description": "<p>an array containing the red,green,blue &\n                                 and alpha components of the color</p>\n",
                          "type": "Number[]"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "color",
                          "description": '<p>color as a <a href="#/p5.Color">p5.Color</a></p>\n',
                          "type": "p5.Color"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "specularColor": {
                  "name": "specularColor",
                  "class": "p5",
                  "module": "3D",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "<p>red or hue value relative to\n                                 the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v2",
                          "description": "<p>green or saturation value\n                                 relative to the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v3",
                          "description": "<p>blue or brightness value\n                                 relative to the current color range</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "gray",
                          "description": "<p>number specifying value between\n                                 white and black</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "value",
                          "description": "<p>color as a CSS string</p>\n",
                          "type": "String"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "values",
                          "description": "<p>color as an array containing the\n                                 red, green, and blue components</p>\n",
                          "type": "Number[]"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "color",
                          "description": '<p>color as a <a href="#/p5.Color">p5.Color</a></p>\n',
                          "type": "p5.Color"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "directionalLight": {
                  "name": "directionalLight",
                  "class": "p5",
                  "module": "3D",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "<p>red or hue value relative to the current\n                                color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v2",
                          "description": "<p>green or saturation value relative to the\n                                current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v3",
                          "description": "<p>blue or brightness value relative to the\n                                current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x",
                          "description": "<p>x component of direction (inclusive range of -1 to 1)</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "<p>y component of direction (inclusive range of -1 to 1)</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "z",
                          "description": "<p>z component of direction (inclusive range of -1 to 1)</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "v2",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "v3",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "direction",
                          "description": '<p>direction of light as a\n                                <a href="#/p5.Vector">p5.Vector</a></p>\n',
                          "type": "p5.Vector"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "color",
                          "description": '<p>color as a <a href="#/p5.Color">p5.Color</a>,\n                                           as an array, or as a CSS string</p>\n',
                          "type": "p5.Color|Number[]|String"
                        },
                        {
                          "name": "x",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z",
                          "description": "",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "color",
                          "description": "",
                          "type": "p5.Color|Number[]|String"
                        },
                        {
                          "name": "direction",
                          "description": "",
                          "type": "p5.Vector"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "pointLight": {
                  "name": "pointLight",
                  "class": "p5",
                  "module": "3D",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "<p>red or hue value relative to the current\n                         color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v2",
                          "description": "<p>green or saturation value relative to the\n                         current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v3",
                          "description": "<p>blue or brightness value relative to the\n                         current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x",
                          "description": "<p>x component of position</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "<p>y component of position</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "z",
                          "description": "<p>z component of position</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "v2",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "v3",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "position",
                          "description": '<p>of light as a <a href="#/p5.Vector">p5.Vector</a></p>\n',
                          "type": "p5.Vector"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "color",
                          "description": '<p>color as a <a href="#/p5.Color">p5.Color</a>,\n                                           as an array, or as a CSS string</p>\n',
                          "type": "p5.Color|Number[]|String"
                        },
                        {
                          "name": "x",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z",
                          "description": "",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "color",
                          "description": "",
                          "type": "p5.Color|Number[]|String"
                        },
                        {
                          "name": "position",
                          "description": "",
                          "type": "p5.Vector"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "lights": {
                  "name": "lights",
                  "class": "p5",
                  "module": "3D"
                },
                "lightFalloff": {
                  "name": "lightFalloff",
                  "params": [
                    {
                      "name": "constant",
                      "description": "<p>CONSTANT value for determining falloff</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "linear",
                      "description": "<p>LINEAR value for determining falloff</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "quadratic",
                      "description": "<p>QUADRATIC value for determining falloff</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "3D"
                },
                "spotLight": {
                  "name": "spotLight",
                  "class": "p5",
                  "module": "3D",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "<p>red or hue value relative to the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v2",
                          "description": "<p>green or saturation value relative to the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v3",
                          "description": "<p>blue or brightness value relative to the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "x",
                          "description": "<p>x component of position</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "<p>y component of position</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "z",
                          "description": "<p>z component of position</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "rx",
                          "description": "<p>x component of light direction (inclusive range of -1 to 1)</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "ry",
                          "description": "<p>y component of light direction (inclusive range of -1 to 1)</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "rz",
                          "description": "<p>z component of light direction (inclusive range of -1 to 1)</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "angle",
                          "description": "<p>angle of cone. Defaults to PI/3</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "concentration",
                          "description": "<p>concentration of cone. Defaults to 100</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "color",
                          "description": '<p>color as a <a href="#/p5.Color">p5.Color</a>,\n                                                    as an array, or as a CSS string</p>\n',
                          "type": "p5.Color|Number[]|String"
                        },
                        {
                          "name": "position",
                          "description": '<p>position of light as a <a href="#/p5.Vector">p5.Vector</a></p>\n',
                          "type": "p5.Vector"
                        },
                        {
                          "name": "direction",
                          "description": '<p>direction of light as a <a href="#/p5.Vector">p5.Vector</a></p>\n',
                          "type": "p5.Vector"
                        },
                        {
                          "name": "angle",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "concentration",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "v2",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "v3",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "position",
                          "description": "",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "direction",
                          "description": "",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "angle",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "concentration",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "color",
                          "description": "",
                          "type": "p5.Color|Number[]|String"
                        },
                        {
                          "name": "x",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "direction",
                          "description": "",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "angle",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "concentration",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "color",
                          "description": "",
                          "type": "p5.Color|Number[]|String"
                        },
                        {
                          "name": "position",
                          "description": "",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "rx",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "ry",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "rz",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "angle",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "concentration",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "v2",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "v3",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "x",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "direction",
                          "description": "",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "angle",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "concentration",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "v2",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "v3",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "position",
                          "description": "",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "rx",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "ry",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "rz",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "angle",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "concentration",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "color",
                          "description": "",
                          "type": "p5.Color|Number[]|String"
                        },
                        {
                          "name": "x",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "rx",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "ry",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "rz",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "angle",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "concentration",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ]
                    }
                  ]
                },
                "noLights": {
                  "name": "noLights",
                  "class": "p5",
                  "module": "3D"
                },
                "loadModel": {
                  "name": "loadModel",
                  "class": "p5",
                  "module": "Shape",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "path",
                          "description": "<p>Path of the model to be loaded</p>\n",
                          "type": "String"
                        },
                        {
                          "name": "normalize",
                          "description": "<p>If true, scale the model to a\n                                     standardized size when loading</p>\n",
                          "type": "Boolean"
                        },
                        {
                          "name": "successCallback",
                          "description": "<p>Function to be called\n                                    once the model is loaded. Will be passed\n                                    the 3D model object.</p>\n",
                          "type": "function(p5.Geometry)",
                          "optional": true
                        },
                        {
                          "name": "failureCallback",
                          "description": "<p>called with event error if\n                                        the model fails to load.</p>\n",
                          "type": "Function(Event)",
                          "optional": true
                        },
                        {
                          "name": "fileType",
                          "description": "<p>The file extension of the model\n                                     (<code>.stl</code>, <code>.obj</code>).</p>\n",
                          "type": "String",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "path",
                          "description": "",
                          "type": "String"
                        },
                        {
                          "name": "successCallback",
                          "description": "",
                          "type": "function(p5.Geometry)",
                          "optional": true
                        },
                        {
                          "name": "failureCallback",
                          "description": "",
                          "type": "Function(Event)",
                          "optional": true
                        },
                        {
                          "name": "fileType",
                          "description": "",
                          "type": "String",
                          "optional": true
                        }
                      ]
                    }
                  ]
                },
                "model": {
                  "name": "model",
                  "params": [
                    {
                      "name": "model",
                      "description": "<p>Loaded 3d model to be rendered</p>\n",
                      "type": "p5.Geometry"
                    }
                  ],
                  "class": "p5",
                  "module": "Shape"
                },
                "loadShader": {
                  "name": "loadShader",
                  "params": [
                    {
                      "name": "vertFilename",
                      "description": "<p>path to file containing vertex shader\nsource code</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "fragFilename",
                      "description": "<p>path to file containing fragment shader\nsource code</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "callback",
                      "description": "<p>callback to be executed after loadShader\ncompletes. On success, the p5.Shader object is passed as the first argument.</p>\n",
                      "type": "Function",
                      "optional": true
                    },
                    {
                      "name": "errorCallback",
                      "description": "<p>callback to be executed when an error\noccurs inside loadShader. On error, the error is passed as the first\nargument.</p>\n",
                      "type": "Function",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "3D"
                },
                "createShader": {
                  "name": "createShader",
                  "params": [
                    {
                      "name": "vertSrc",
                      "description": "<p>source code for the vertex shader</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "fragSrc",
                      "description": "<p>source code for the fragment shader</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5",
                  "module": "3D"
                },
                "shader": {
                  "name": "shader",
                  "params": [
                    {
                      "name": "s",
                      "description": '<p>the <a href="#/p5.Shader">p5.Shader</a> object\nto use for rendering shapes.</p>\n',
                      "type": "p5.Shader"
                    }
                  ],
                  "class": "p5",
                  "module": "3D"
                },
                "resetShader": {
                  "name": "resetShader",
                  "class": "p5",
                  "module": "3D"
                },
                "texture": {
                  "name": "texture",
                  "params": [
                    {
                      "name": "tex",
                      "description": "<p>image to use as texture</p>\n",
                      "type": "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture"
                    }
                  ],
                  "class": "p5",
                  "module": "3D"
                },
                "textureMode": {
                  "name": "textureMode",
                  "params": [
                    {
                      "name": "mode",
                      "description": "<p>either IMAGE or NORMAL</p>\n",
                      "type": "Constant"
                    }
                  ],
                  "class": "p5",
                  "module": "3D"
                },
                "textureWrap": {
                  "name": "textureWrap",
                  "params": [
                    {
                      "name": "wrapX",
                      "description": "<p>either CLAMP, REPEAT, or MIRROR</p>\n",
                      "type": "Constant"
                    },
                    {
                      "name": "wrapY",
                      "description": "<p>either CLAMP, REPEAT, or MIRROR</p>\n",
                      "type": "Constant",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "3D"
                },
                "normalMaterial": {
                  "name": "normalMaterial",
                  "class": "p5",
                  "module": "3D"
                },
                "ambientMaterial": {
                  "name": "ambientMaterial",
                  "class": "p5",
                  "module": "3D",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "<p>red or hue value relative to the current\n                      color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v2",
                          "description": "<p>green or saturation value relative to the\n                      current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v3",
                          "description": "<p>blue or brightness value relative to the\n                      current color range</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "gray",
                          "description": "<p>number specifying value between\n                        white and black</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "color",
                          "description": '<p>color as a <a href="#/p5.Color">p5.Color</a>,\n           as an array, or as a CSS string</p>\n',
                          "type": "p5.Color|Number[]|String"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "emissiveMaterial": {
                  "name": "emissiveMaterial",
                  "class": "p5",
                  "module": "3D",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "<p>red or hue value relative to the current\n                           color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v2",
                          "description": "<p>green or saturation value relative to the\n                           current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v3",
                          "description": "<p>blue or brightness value relative to the\n                           current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "alpha",
                          "description": "<p>alpha value relative to current color\n                           range (default is 0-255)</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "gray",
                          "description": "<p>number specifying value between\n                        white and black</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "color",
                          "description": '<p>color as a <a href="#/p5.Color">p5.Color</a>,\n           as an array, or as a CSS string</p>\n',
                          "type": "p5.Color|Number[]|String"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "specularMaterial": {
                  "name": "specularMaterial",
                  "class": "p5",
                  "module": "3D",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "gray",
                          "description": "<p>number specifying value between white and black.</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "alpha",
                          "description": "<p>alpha value relative to current color range\n                                (default is 0-255)</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "<p>red or hue value relative to\n                                the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v2",
                          "description": "<p>green or saturation value\n                                relative to the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "v3",
                          "description": "<p>blue or brightness value\n                                relative to the current color range</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "alpha",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "color",
                          "description": '<p>color as a <a href="#/p5.Color">p5.Color</a>,\n           as an array, or as a CSS string</p>\n',
                          "type": "p5.Color|Number[]|String"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "shininess": {
                  "name": "shininess",
                  "params": [
                    {
                      "name": "shine",
                      "description": "<p>degree of shininess</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "3D"
                },
                "camera": {
                  "name": "camera",
                  "params": [
                    {
                      "name": "x",
                      "description": "<p>camera position value on x axis</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "y",
                      "description": "<p>camera position value on y axis</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "z",
                      "description": "<p>camera position value on z axis</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "centerX",
                      "description": "<p>x coordinate representing center of the sketch</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "centerY",
                      "description": "<p>y coordinate representing center of the sketch</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "centerZ",
                      "description": "<p>z coordinate representing center of the sketch</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "upX",
                      "description": "<p>x component of direction 'up' from camera</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "upY",
                      "description": "<p>y component of direction 'up' from camera</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "upZ",
                      "description": "<p>z component of direction 'up' from camera</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "3D"
                },
                "perspective": {
                  "name": "perspective",
                  "params": [
                    {
                      "name": "fovy",
                      "description": '<p>camera frustum vertical field of view,\n                          from bottom to top of view, in <a href="#/p5/angleMode">angleMode</a> units</p>\n',
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "aspect",
                      "description": "<p>camera frustum aspect ratio</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "near",
                      "description": "<p>frustum near plane length</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "far",
                      "description": "<p>frustum far plane length</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "3D"
                },
                "ortho": {
                  "name": "ortho",
                  "params": [
                    {
                      "name": "left",
                      "description": "<p>camera frustum left plane</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "right",
                      "description": "<p>camera frustum right plane</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "bottom",
                      "description": "<p>camera frustum bottom plane</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "top",
                      "description": "<p>camera frustum top plane</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "near",
                      "description": "<p>camera frustum near plane</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "far",
                      "description": "<p>camera frustum far plane</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "3D"
                },
                "frustum": {
                  "name": "frustum",
                  "params": [
                    {
                      "name": "left",
                      "description": "<p>camera frustum left plane</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "right",
                      "description": "<p>camera frustum right plane</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "bottom",
                      "description": "<p>camera frustum bottom plane</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "top",
                      "description": "<p>camera frustum top plane</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "near",
                      "description": "<p>camera frustum near plane</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "far",
                      "description": "<p>camera frustum far plane</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "3D"
                },
                "createCamera": {
                  "name": "createCamera",
                  "class": "p5",
                  "module": "3D"
                },
                "setCamera": {
                  "name": "setCamera",
                  "params": [
                    {
                      "name": "cam",
                      "description": "<p>p5.Camera object</p>\n",
                      "type": "p5.Camera"
                    }
                  ],
                  "class": "p5",
                  "module": "3D"
                },
                "setAttributes": {
                  "name": "setAttributes",
                  "class": "p5",
                  "module": "Rendering",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "key",
                          "description": "<p>Name of attribute</p>\n",
                          "type": "String"
                        },
                        {
                          "name": "value",
                          "description": "<p>New value of named attribute</p>\n",
                          "type": "Boolean"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "obj",
                          "description": "<p>object with key-value pairs</p>\n",
                          "type": "Object"
                        }
                      ]
                    }
                  ]
                },
                "getAudioContext": {
                  "name": "getAudioContext",
                  "class": "p5",
                  "module": "p5.sound"
                },
                "userStartAudio": {
                  "params": [
                    {
                      "name": "elements",
                      "description": "<p>This argument can be an Element,\n                              Selector String, NodeList, p5.Element,\n                              jQuery Element, or an Array of any of those.</p>\n",
                      "type": "Element|Array",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "description": "<p>Callback to invoke when the AudioContext\n                              has started</p>\n",
                      "type": "Function",
                      "optional": true
                    }
                  ],
                  "name": "userStartAudio",
                  "class": "p5",
                  "module": "p5.sound"
                },
                "getOutputVolume": {
                  "name": "getOutputVolume",
                  "class": "p5",
                  "module": "p5.sound"
                },
                "outputVolume": {
                  "name": "outputVolume",
                  "params": [
                    {
                      "name": "volume",
                      "description": "<p>Volume (amplitude) between 0.0\n                                   and 1.0 or modulating signal/oscillator</p>\n",
                      "type": "Number|Object"
                    },
                    {
                      "name": "rampTime",
                      "description": "<p>Fade for t seconds</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "timeFromNow",
                      "description": "<p>Schedule this event to happen at\n                               t seconds in the future</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "p5.sound"
                },
                "soundOut": {
                  "name": "soundOut",
                  "class": "p5",
                  "module": "p5.sound"
                },
                "sampleRate": {
                  "name": "sampleRate",
                  "class": "p5",
                  "module": "p5.sound"
                },
                "freqToMidi": {
                  "name": "freqToMidi",
                  "params": [
                    {
                      "name": "frequency",
                      "description": '<p>A freqeuncy, for example, the "A"\n                           above Middle C is 440Hz</p>\n',
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "p5.sound"
                },
                "midiToFreq": {
                  "name": "midiToFreq",
                  "params": [
                    {
                      "name": "midiNote",
                      "description": "<p>The number of a MIDI note</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "p5.sound"
                },
                "soundFormats": {
                  "name": "soundFormats",
                  "params": [
                    {
                      "name": "formats",
                      "description": "<p>i.e. 'mp3', 'wav', 'ogg'</p>\n",
                      "type": "String",
                      "optional": true,
                      "multiple": true
                    }
                  ],
                  "class": "p5",
                  "module": "p5.sound"
                },
                "saveSound": {
                  "name": "saveSound",
                  "params": [
                    {
                      "name": "soundFile",
                      "description": "<p>p5.SoundFile that you wish to save</p>\n",
                      "type": "p5.SoundFile"
                    },
                    {
                      "name": "fileName",
                      "description": "<p>name of the resulting .wav file.</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5",
                  "module": "p5.sound"
                },
                "loadSound": {
                  "name": "loadSound",
                  "params": [
                    {
                      "name": "path",
                      "description": "<p>Path to the sound file, or an array with\n                                  paths to soundfiles in multiple formats\n                                  i.e. ['sound.ogg', 'sound.mp3'].\n                                  Alternately, accepts an object: either\n                                  from the HTML5 File API, or a p5.File.</p>\n",
                      "type": "String|Array"
                    },
                    {
                      "name": "successCallback",
                      "description": "<p>Name of a function to call once file loads</p>\n",
                      "type": "Function",
                      "optional": true
                    },
                    {
                      "name": "errorCallback",
                      "description": "<p>Name of a function to call if there is\n                                    an error loading the file.</p>\n",
                      "type": "Function",
                      "optional": true
                    },
                    {
                      "name": "whileLoading",
                      "description": "<p>Name of a function to call while file is loading.\n                               This function will receive the percentage loaded\n                               so far, from 0.0 to 1.0.</p>\n",
                      "type": "Function",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "p5.sound"
                },
                "createConvolver": {
                  "name": "createConvolver",
                  "params": [
                    {
                      "name": "path",
                      "description": "<p>path to a sound file</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "callback",
                      "description": "<p>function to call if loading is successful.\n                              The object will be passed in as the argument\n                              to the callback function.</p>\n",
                      "type": "Function",
                      "optional": true
                    },
                    {
                      "name": "errorCallback",
                      "description": "<p>function to call if loading is not successful.\n                              A custom error will be passed in as the argument\n                              to the callback function.</p>\n",
                      "type": "Function",
                      "optional": true
                    }
                  ],
                  "class": "p5",
                  "module": "p5.sound"
                },
                "setBPM": {
                  "name": "setBPM",
                  "params": [
                    {
                      "name": "BPM",
                      "description": "<p>Beats Per Minute</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "rampTime",
                      "description": "<p>Seconds from now</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5",
                  "module": "p5.sound"
                }
              },
              "p5.Color": {
                "toString": {
                  "name": "toString",
                  "params": [
                    {
                      "name": "format",
                      "description": "<p>How the color string will be formatted.\nLeaving this empty formats the string as rgba(r, g, b, a).\n'#rgb' '#rgba' '#rrggbb' and '#rrggbbaa' format as hexadecimal color codes.\n'rgb' 'hsb' and 'hsl' return the color formatted in the specified color mode.\n'rgba' 'hsba' and 'hsla' are the same as above but with alpha channels.\n'rgb%' 'hsb%' 'hsl%' 'rgba%' 'hsba%' and 'hsla%' format as percentages.</p>\n",
                      "type": "String",
                      "optional": true
                    }
                  ],
                  "class": "p5.Color",
                  "module": "Color"
                },
                "setRed": {
                  "name": "setRed",
                  "params": [
                    {
                      "name": "red",
                      "description": "<p>the new red value</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Color",
                  "module": "Color"
                },
                "setGreen": {
                  "name": "setGreen",
                  "params": [
                    {
                      "name": "green",
                      "description": "<p>the new green value</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Color",
                  "module": "Color"
                },
                "setBlue": {
                  "name": "setBlue",
                  "params": [
                    {
                      "name": "blue",
                      "description": "<p>the new blue value</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Color",
                  "module": "Color"
                },
                "setAlpha": {
                  "name": "setAlpha",
                  "params": [
                    {
                      "name": "alpha",
                      "description": "<p>the new alpha value</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Color",
                  "module": "Color"
                }
              },
              "p5.Element": {
                "elt": {
                  "name": "elt",
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "parent": {
                  "name": "parent",
                  "class": "p5.Element",
                  "module": "DOM",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "parent",
                          "description": '<p>the ID, DOM node, or <a href="#/p5.Element">p5.Element</a>\n                         of desired parent element</p>\n',
                          "type": "String|p5.Element|Object"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": []
                    }
                  ]
                },
                "id": {
                  "name": "id",
                  "class": "p5.Element",
                  "module": "DOM",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "id",
                          "description": "<p>ID of the element</p>\n",
                          "type": "String"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": []
                    }
                  ]
                },
                "class": {
                  "name": "class",
                  "class": "p5.Element",
                  "module": "DOM",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "class",
                          "description": "<p>class to add</p>\n",
                          "type": "String"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": []
                    }
                  ]
                },
                "mousePressed": {
                  "name": "mousePressed",
                  "params": [
                    {
                      "name": "fxn",
                      "description": "<p>function to be fired when mouse is\n                               pressed over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
                      "type": "Function|Boolean"
                    }
                  ],
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "doubleClicked": {
                  "name": "doubleClicked",
                  "params": [
                    {
                      "name": "fxn",
                      "description": "<p>function to be fired when mouse is\n                               double clicked over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
                      "type": "Function|Boolean"
                    }
                  ],
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "mouseWheel": {
                  "name": "mouseWheel",
                  "params": [
                    {
                      "name": "fxn",
                      "description": "<p>function to be fired when mouse is\n                               scrolled over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
                      "type": "Function|Boolean"
                    }
                  ],
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "mouseReleased": {
                  "name": "mouseReleased",
                  "params": [
                    {
                      "name": "fxn",
                      "description": "<p>function to be fired when mouse is\n                               released over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
                      "type": "Function|Boolean"
                    }
                  ],
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "mouseClicked": {
                  "name": "mouseClicked",
                  "params": [
                    {
                      "name": "fxn",
                      "description": "<p>function to be fired when mouse is\n                               clicked over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
                      "type": "Function|Boolean"
                    }
                  ],
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "mouseMoved": {
                  "name": "mouseMoved",
                  "params": [
                    {
                      "name": "fxn",
                      "description": "<p>function to be fired when a mouse moves\n                               over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
                      "type": "Function|Boolean"
                    }
                  ],
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "mouseOver": {
                  "name": "mouseOver",
                  "params": [
                    {
                      "name": "fxn",
                      "description": "<p>function to be fired when a mouse moves\n                               onto the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
                      "type": "Function|Boolean"
                    }
                  ],
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "mouseOut": {
                  "name": "mouseOut",
                  "params": [
                    {
                      "name": "fxn",
                      "description": "<p>function to be fired when a mouse\n                               moves off of an element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
                      "type": "Function|Boolean"
                    }
                  ],
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "touchStarted": {
                  "name": "touchStarted",
                  "params": [
                    {
                      "name": "fxn",
                      "description": "<p>function to be fired when a touch\n                               starts over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
                      "type": "Function|Boolean"
                    }
                  ],
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "touchMoved": {
                  "name": "touchMoved",
                  "params": [
                    {
                      "name": "fxn",
                      "description": "<p>function to be fired when a touch moves over\n                               the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
                      "type": "Function|Boolean"
                    }
                  ],
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "touchEnded": {
                  "name": "touchEnded",
                  "params": [
                    {
                      "name": "fxn",
                      "description": "<p>function to be fired when a touch ends\n                               over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
                      "type": "Function|Boolean"
                    }
                  ],
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "dragOver": {
                  "name": "dragOver",
                  "params": [
                    {
                      "name": "fxn",
                      "description": "<p>function to be fired when a file is\n                               dragged over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
                      "type": "Function|Boolean"
                    }
                  ],
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "dragLeave": {
                  "name": "dragLeave",
                  "params": [
                    {
                      "name": "fxn",
                      "description": "<p>function to be fired when a file is\n                               dragged off the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
                      "type": "Function|Boolean"
                    }
                  ],
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "addClass": {
                  "name": "addClass",
                  "params": [
                    {
                      "name": "class",
                      "description": "<p>name of class to add</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "removeClass": {
                  "name": "removeClass",
                  "params": [
                    {
                      "name": "class",
                      "description": "<p>name of class to remove</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "hasClass": {
                  "name": "hasClass",
                  "params": [
                    {
                      "name": "c",
                      "description": "<p>class name of class to check</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "toggleClass": {
                  "name": "toggleClass",
                  "params": [
                    {
                      "name": "c",
                      "description": "<p>class name to toggle</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "child": {
                  "name": "child",
                  "class": "p5.Element",
                  "module": "DOM",
                  "overloads": [
                    {
                      "params": []
                    },
                    {
                      "params": [
                        {
                          "name": "child",
                          "description": '<p>the ID, DOM node, or <a href="#/p5.Element">p5.Element</a>\n                        to add to the current element</p>\n',
                          "type": "String|p5.Element",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "center": {
                  "name": "center",
                  "params": [
                    {
                      "name": "align",
                      "description": "<p>passing 'vertical', 'horizontal' aligns element accordingly</p>\n",
                      "type": "String",
                      "optional": true
                    }
                  ],
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "html": {
                  "name": "html",
                  "class": "p5.Element",
                  "module": "DOM",
                  "overloads": [
                    {
                      "params": []
                    },
                    {
                      "params": [
                        {
                          "name": "html",
                          "description": "<p>the HTML to be placed inside the element</p>\n",
                          "type": "String",
                          "optional": true
                        },
                        {
                          "name": "append",
                          "description": "<p>whether to append HTML to existing</p>\n",
                          "type": "Boolean",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "position": {
                  "name": "position",
                  "class": "p5.Element",
                  "module": "DOM",
                  "overloads": [
                    {
                      "params": []
                    },
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "<p>x-position relative to upper left of window (optional)</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "y",
                          "description": "<p>y-position relative to upper left of window (optional)</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "positionType",
                          "description": "<p>it can be static, fixed, relative, sticky, initial or inherit (optional)</p>\n",
                          "type": "String",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "style": {
                  "name": "style",
                  "class": "p5.Element",
                  "module": "DOM",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "property",
                          "description": "<p>property to be set</p>\n",
                          "type": "String"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "property",
                          "description": "",
                          "type": "String"
                        },
                        {
                          "name": "value",
                          "description": "<p>value to assign to property</p>\n",
                          "type": "String|p5.Color"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "attribute": {
                  "name": "attribute",
                  "class": "p5.Element",
                  "module": "DOM",
                  "overloads": [
                    {
                      "params": []
                    },
                    {
                      "params": [
                        {
                          "name": "attr",
                          "description": "<p>attribute to set</p>\n",
                          "type": "String"
                        },
                        {
                          "name": "value",
                          "description": "<p>value to assign to attribute</p>\n",
                          "type": "String"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "removeAttribute": {
                  "name": "removeAttribute",
                  "params": [
                    {
                      "name": "attr",
                      "description": "<p>attribute to remove</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "value": {
                  "name": "value",
                  "class": "p5.Element",
                  "module": "DOM",
                  "overloads": [
                    {
                      "params": []
                    },
                    {
                      "params": [
                        {
                          "name": "value",
                          "description": "",
                          "type": "String|Number"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "show": {
                  "name": "show",
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "hide": {
                  "name": "hide",
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "size": {
                  "name": "size",
                  "class": "p5.Element",
                  "module": "DOM",
                  "overloads": [
                    {
                      "params": []
                    },
                    {
                      "params": [
                        {
                          "name": "w",
                          "description": "<p>width of the element, either AUTO, or a number</p>\n",
                          "type": "Number|Constant"
                        },
                        {
                          "name": "h",
                          "description": "<p>height of the element, either AUTO, or a number</p>\n",
                          "type": "Number|Constant",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "remove": {
                  "name": "remove",
                  "class": "p5.Element",
                  "module": "DOM"
                },
                "drop": {
                  "name": "drop",
                  "params": [
                    {
                      "name": "callback",
                      "description": "<p>callback to receive loaded file, called for each file dropped.</p>\n",
                      "type": "Function"
                    },
                    {
                      "name": "fxn",
                      "description": "<p>callback triggered once when files are dropped with the drop event.</p>\n",
                      "type": "Function",
                      "optional": true
                    }
                  ],
                  "class": "p5.Element",
                  "module": "DOM"
                }
              },
              "p5.Graphics": {
                "reset": {
                  "name": "reset",
                  "class": "p5.Graphics",
                  "module": "Rendering"
                },
                "remove": {
                  "name": "remove",
                  "class": "p5.Graphics",
                  "module": "Rendering"
                }
              },
              "JSON": {
                "stringify": {
                  "name": "stringify",
                  "params": [
                    {
                      "name": "object",
                      "description": "<p>:Javascript object that you would like to convert to JSON</p>\n",
                      "type": "Object"
                    }
                  ],
                  "class": "JSON",
                  "module": "Foundation"
                }
              },
              "console": {
                "log": {
                  "name": "log",
                  "params": [
                    {
                      "name": "message",
                      "description": "<p>:Message that you would like to print to the console</p>\n",
                      "type": "String|Expression|Object"
                    }
                  ],
                  "class": "console",
                  "module": "Foundation"
                }
              },
              "p5.TypedDict": {
                "size": {
                  "name": "size",
                  "class": "p5.TypedDict",
                  "module": "Data"
                },
                "hasKey": {
                  "name": "hasKey",
                  "params": [
                    {
                      "name": "key",
                      "description": "<p>that you want to look up</p>\n",
                      "type": "Number|String"
                    }
                  ],
                  "class": "p5.TypedDict",
                  "module": "Data"
                },
                "get": {
                  "name": "get",
                  "params": [
                    {
                      "name": "the",
                      "description": "<p>key you want to access</p>\n",
                      "type": "Number|String"
                    }
                  ],
                  "class": "p5.TypedDict",
                  "module": "Data"
                },
                "set": {
                  "name": "set",
                  "params": [
                    {
                      "name": "key",
                      "description": "",
                      "type": "Number|String"
                    },
                    {
                      "name": "value",
                      "description": "",
                      "type": "Number|String"
                    }
                  ],
                  "class": "p5.TypedDict",
                  "module": "Data"
                },
                "create": {
                  "name": "create",
                  "class": "p5.TypedDict",
                  "module": "Data",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "key",
                          "description": "",
                          "type": "Number|String"
                        },
                        {
                          "name": "value",
                          "description": "",
                          "type": "Number|String"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "obj",
                          "description": "<p>key/value pair</p>\n",
                          "type": "Object"
                        }
                      ]
                    }
                  ]
                },
                "clear": {
                  "name": "clear",
                  "class": "p5.TypedDict",
                  "module": "Data"
                },
                "remove": {
                  "name": "remove",
                  "params": [
                    {
                      "name": "key",
                      "description": "<p>for the pair to remove</p>\n",
                      "type": "Number|String"
                    }
                  ],
                  "class": "p5.TypedDict",
                  "module": "Data"
                },
                "print": {
                  "name": "print",
                  "class": "p5.TypedDict",
                  "module": "Data"
                },
                "saveTable": {
                  "name": "saveTable",
                  "class": "p5.TypedDict",
                  "module": "Data"
                },
                "saveJSON": {
                  "name": "saveJSON",
                  "class": "p5.TypedDict",
                  "module": "Data"
                }
              },
              "p5.NumberDict": {
                "add": {
                  "name": "add",
                  "params": [
                    {
                      "name": "Key",
                      "description": "<p>for the value you wish to add to</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "Number",
                      "description": "<p>to add to the value</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.NumberDict",
                  "module": "Data"
                },
                "sub": {
                  "name": "sub",
                  "params": [
                    {
                      "name": "Key",
                      "description": "<p>for the value you wish to subtract from</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "Number",
                      "description": "<p>to subtract from the value</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.NumberDict",
                  "module": "Data"
                },
                "mult": {
                  "name": "mult",
                  "params": [
                    {
                      "name": "Key",
                      "description": "<p>for value you wish to multiply</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "Amount",
                      "description": "<p>to multiply the value by</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.NumberDict",
                  "module": "Data"
                },
                "div": {
                  "name": "div",
                  "params": [
                    {
                      "name": "Key",
                      "description": "<p>for value you wish to divide</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "Amount",
                      "description": "<p>to divide the value by</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.NumberDict",
                  "module": "Data"
                },
                "minValue": {
                  "name": "minValue",
                  "class": "p5.NumberDict",
                  "module": "Data"
                },
                "maxValue": {
                  "name": "maxValue",
                  "class": "p5.NumberDict",
                  "module": "Data"
                },
                "minKey": {
                  "name": "minKey",
                  "class": "p5.NumberDict",
                  "module": "Data"
                },
                "maxKey": {
                  "name": "maxKey",
                  "class": "p5.NumberDict",
                  "module": "Data"
                }
              },
              "p5.MediaElement": {
                "src": {
                  "name": "src",
                  "class": "p5.MediaElement",
                  "module": "DOM"
                },
                "play": {
                  "name": "play",
                  "class": "p5.MediaElement",
                  "module": "DOM"
                },
                "stop": {
                  "name": "stop",
                  "class": "p5.MediaElement",
                  "module": "DOM"
                },
                "pause": {
                  "name": "pause",
                  "class": "p5.MediaElement",
                  "module": "DOM"
                },
                "loop": {
                  "name": "loop",
                  "class": "p5.MediaElement",
                  "module": "DOM"
                },
                "noLoop": {
                  "name": "noLoop",
                  "class": "p5.MediaElement",
                  "module": "DOM"
                },
                "autoplay": {
                  "name": "autoplay",
                  "params": [
                    {
                      "name": "shouldAutoplay",
                      "description": "<p>whether the element should autoplay</p>\n",
                      "type": "Boolean"
                    }
                  ],
                  "class": "p5.MediaElement",
                  "module": "DOM"
                },
                "volume": {
                  "name": "volume",
                  "class": "p5.MediaElement",
                  "module": "DOM",
                  "overloads": [
                    {
                      "params": []
                    },
                    {
                      "params": [
                        {
                          "name": "val",
                          "description": "<p>volume between 0.0 and 1.0</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "speed": {
                  "name": "speed",
                  "class": "p5.MediaElement",
                  "module": "DOM",
                  "overloads": [
                    {
                      "params": []
                    },
                    {
                      "params": [
                        {
                          "name": "speed",
                          "description": "<p>speed multiplier for element playback</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "time": {
                  "name": "time",
                  "class": "p5.MediaElement",
                  "module": "DOM",
                  "overloads": [
                    {
                      "params": []
                    },
                    {
                      "params": [
                        {
                          "name": "time",
                          "description": "<p>time to jump to (in seconds)</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "duration": {
                  "name": "duration",
                  "class": "p5.MediaElement",
                  "module": "DOM"
                },
                "onended": {
                  "name": "onended",
                  "params": [
                    {
                      "name": "callback",
                      "description": "<p>function to call when the\n                            soundfile has ended. The\n                            media element will be passed\n                            in as the argument to the\n                            callback.</p>\n",
                      "type": "Function"
                    }
                  ],
                  "class": "p5.MediaElement",
                  "module": "DOM"
                },
                "connect": {
                  "name": "connect",
                  "params": [
                    {
                      "name": "audioNode",
                      "description": "<p>AudioNode from the Web Audio API,\nor an object from the p5.sound library</p>\n",
                      "type": "AudioNode|Object"
                    }
                  ],
                  "class": "p5.MediaElement",
                  "module": "DOM"
                },
                "disconnect": {
                  "name": "disconnect",
                  "class": "p5.MediaElement",
                  "module": "DOM"
                },
                "showControls": {
                  "name": "showControls",
                  "class": "p5.MediaElement",
                  "module": "DOM"
                },
                "hideControls": {
                  "name": "hideControls",
                  "class": "p5.MediaElement",
                  "module": "DOM"
                },
                "addCue": {
                  "name": "addCue",
                  "params": [
                    {
                      "name": "time",
                      "description": "<p>Time in seconds, relative to this media\n                            element's playback. For example, to trigger\n                            an event every time playback reaches two\n                            seconds, pass in the number 2. This will be\n                            passed as the first parameter to\n                            the callback function.</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "callback",
                      "description": "<p>Name of a function that will be\n                            called at the given time. The callback will\n                            receive time and (optionally) param as its\n                            two parameters.</p>\n",
                      "type": "Function"
                    },
                    {
                      "name": "value",
                      "description": "<p>An object to be passed as the\n                            second parameter to the\n                            callback function.</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5.MediaElement",
                  "module": "DOM"
                },
                "removeCue": {
                  "name": "removeCue",
                  "params": [
                    {
                      "name": "id",
                      "description": "<p>ID of the cue, as returned by addCue</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.MediaElement",
                  "module": "DOM"
                },
                "clearCues": {
                  "name": "clearCues",
                  "params": [
                    {
                      "name": "id",
                      "description": "<p>ID of the cue, as returned by addCue</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.MediaElement",
                  "module": "DOM"
                }
              },
              "p5.File": {
                "file": {
                  "name": "file",
                  "class": "p5.File",
                  "module": "DOM"
                },
                "type": {
                  "name": "type",
                  "class": "p5.File",
                  "module": "DOM"
                },
                "subtype": {
                  "name": "subtype",
                  "class": "p5.File",
                  "module": "DOM"
                },
                "name": {
                  "name": "name",
                  "class": "p5.File",
                  "module": "DOM"
                },
                "size": {
                  "name": "size",
                  "class": "p5.File",
                  "module": "DOM"
                },
                "data": {
                  "name": "data",
                  "class": "p5.File",
                  "module": "DOM"
                }
              },
              "p5.Image": {
                "width": {
                  "name": "width",
                  "class": "p5.Image",
                  "module": "Image"
                },
                "height": {
                  "name": "height",
                  "class": "p5.Image",
                  "module": "Image"
                },
                "pixels": {
                  "name": "pixels",
                  "class": "p5.Image",
                  "module": "Image"
                },
                "loadPixels": {
                  "name": "loadPixels",
                  "class": "p5.Image",
                  "module": "Image"
                },
                "updatePixels": {
                  "name": "updatePixels",
                  "class": "p5.Image",
                  "module": "Image",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "<p>x-offset of the target update area for the\n                             underlying canvas</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "y",
                          "description": "<p>y-offset of the target update area for the\n                             underlying canvas</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "w",
                          "description": "<p>width of the target update area for the\n                             underlying canvas</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "h",
                          "description": "<p>height of the target update area for the\n                             underlying canvas</p>\n",
                          "type": "Integer"
                        }
                      ]
                    },
                    {
                      "params": []
                    }
                  ]
                },
                "get": {
                  "name": "get",
                  "class": "p5.Image",
                  "module": "Image",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "<p>x-coordinate of the pixel</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "<p>y-coordinate of the pixel</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "w",
                          "description": "<p>width</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "h",
                          "description": "<p>height</p>\n",
                          "type": "Number"
                        }
                      ]
                    },
                    {
                      "params": []
                    },
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "",
                          "type": "Number"
                        }
                      ]
                    }
                  ]
                },
                "set": {
                  "name": "set",
                  "params": [
                    {
                      "name": "x",
                      "description": "<p>x-coordinate of the pixel</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "y",
                      "description": "<p>y-coordinate of the pixel</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "a",
                      "description": '<p>grayscale value | pixel array |\n                               a <a href="#/p5.Color">p5.Color</a> | image to copy</p>\n',
                      "type": "Number|Number[]|Object"
                    }
                  ],
                  "class": "p5.Image",
                  "module": "Image"
                },
                "resize": {
                  "name": "resize",
                  "params": [
                    {
                      "name": "width",
                      "description": "<p>the resized image width</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "height",
                      "description": "<p>the resized image height</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Image",
                  "module": "Image"
                },
                "copy": {
                  "name": "copy",
                  "class": "p5.Image",
                  "module": "Image",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "srcImage",
                          "description": "<p>source image</p>\n",
                          "type": "p5.Image|p5.Element"
                        },
                        {
                          "name": "sx",
                          "description": "<p>X coordinate of the source's upper left corner</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "sy",
                          "description": "<p>Y coordinate of the source's upper left corner</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "sw",
                          "description": "<p>source image width</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "sh",
                          "description": "<p>source image height</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "dx",
                          "description": "<p>X coordinate of the destination's upper left corner</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "dy",
                          "description": "<p>Y coordinate of the destination's upper left corner</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "dw",
                          "description": "<p>destination image width</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "dh",
                          "description": "<p>destination image height</p>\n",
                          "type": "Integer"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "sx",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "sy",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "sw",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "sh",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "dx",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "dy",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "dw",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "dh",
                          "description": "",
                          "type": "Integer"
                        }
                      ]
                    }
                  ]
                },
                "mask": {
                  "name": "mask",
                  "params": [
                    {
                      "name": "srcImage",
                      "description": "<p>source image</p>\n",
                      "type": "p5.Image"
                    }
                  ],
                  "class": "p5.Image",
                  "module": "Image"
                },
                "filter": {
                  "name": "filter",
                  "params": [
                    {
                      "name": "filterType",
                      "description": "<p>either THRESHOLD, GRAY, OPAQUE, INVERT,\n                               POSTERIZE, ERODE, DILATE or BLUR.\n                               See Filters.js for docs on\n                               each available filter</p>\n",
                      "type": "Constant"
                    },
                    {
                      "name": "filterParam",
                      "description": "<p>an optional parameter unique\n                               to each filter, see above</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Image",
                  "module": "Image"
                },
                "blend": {
                  "name": "blend",
                  "class": "p5.Image",
                  "module": "Image",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "srcImage",
                          "description": "<p>source image</p>\n",
                          "type": "p5.Image"
                        },
                        {
                          "name": "sx",
                          "description": "<p>X coordinate of the source's upper left corner</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "sy",
                          "description": "<p>Y coordinate of the source's upper left corner</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "sw",
                          "description": "<p>source image width</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "sh",
                          "description": "<p>source image height</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "dx",
                          "description": "<p>X coordinate of the destination's upper left corner</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "dy",
                          "description": "<p>Y coordinate of the destination's upper left corner</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "dw",
                          "description": "<p>destination image width</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "dh",
                          "description": "<p>destination image height</p>\n",
                          "type": "Integer"
                        },
                        {
                          "name": "blendMode",
                          "description": '<p>the blend mode. either\n    BLEND, DARKEST, LIGHTEST, DIFFERENCE,\n    MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n    SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.</p>\n<p>Available blend modes are: normal | multiply | screen | overlay |\n           darken | lighten | color-dodge | color-burn | hard-light |\n           soft-light | difference | exclusion | hue | saturation |\n           color | luminosity</p>\n<p><a href="http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/">http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/</a></p>\n',
                          "type": "Constant"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "sx",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "sy",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "sw",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "sh",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "dx",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "dy",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "dw",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "dh",
                          "description": "",
                          "type": "Integer"
                        },
                        {
                          "name": "blendMode",
                          "description": "",
                          "type": "Constant"
                        }
                      ]
                    }
                  ]
                },
                "save": {
                  "name": "save",
                  "params": [
                    {
                      "name": "filename",
                      "description": "<p>give your file a name</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "extension",
                      "description": "<p>'png' or 'jpg'</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5.Image",
                  "module": "Image"
                },
                "reset": {
                  "name": "reset",
                  "class": "p5.Image",
                  "module": "Image"
                },
                "getCurrentFrame": {
                  "name": "getCurrentFrame",
                  "class": "p5.Image",
                  "module": "Image"
                },
                "setFrame": {
                  "name": "setFrame",
                  "params": [
                    {
                      "name": "index",
                      "description": "<p>the index for the frame that should be displayed</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Image",
                  "module": "Image"
                },
                "numFrames": {
                  "name": "numFrames",
                  "class": "p5.Image",
                  "module": "Image"
                },
                "play": {
                  "name": "play",
                  "class": "p5.Image",
                  "module": "Image"
                },
                "pause": {
                  "name": "pause",
                  "class": "p5.Image",
                  "module": "Image"
                },
                "delay": {
                  "name": "delay",
                  "params": [
                    {
                      "name": "d",
                      "description": "<p>the amount in milliseconds to delay between switching frames</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "index",
                      "description": "<p>the index of the frame that should have the new delay value {optional}</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Image",
                  "module": "Image"
                }
              },
              "p5.PrintWriter": {
                "write": {
                  "name": "write",
                  "params": [
                    {
                      "name": "data",
                      "description": "<p>all data to be written by the PrintWriter</p>\n",
                      "type": "Array"
                    }
                  ],
                  "class": "p5.PrintWriter",
                  "module": "IO"
                },
                "print": {
                  "name": "print",
                  "params": [
                    {
                      "name": "data",
                      "description": "<p>all data to be printed by the PrintWriter</p>\n",
                      "type": "Array"
                    }
                  ],
                  "class": "p5.PrintWriter",
                  "module": "IO"
                },
                "clear": {
                  "name": "clear",
                  "class": "p5.PrintWriter",
                  "module": "IO"
                },
                "close": {
                  "name": "close",
                  "class": "p5.PrintWriter",
                  "module": "IO"
                }
              },
              "p5.Table": {
                "columns": {
                  "name": "columns",
                  "class": "p5.Table",
                  "module": "IO"
                },
                "rows": {
                  "name": "rows",
                  "class": "p5.Table",
                  "module": "IO"
                },
                "addRow": {
                  "name": "addRow",
                  "params": [
                    {
                      "name": "row",
                      "description": "<p>row to be added to the table</p>\n",
                      "type": "p5.TableRow",
                      "optional": true
                    }
                  ],
                  "class": "p5.Table",
                  "module": "IO"
                },
                "removeRow": {
                  "name": "removeRow",
                  "params": [
                    {
                      "name": "id",
                      "description": "<p>ID number of the row to remove</p>\n",
                      "type": "Integer"
                    }
                  ],
                  "class": "p5.Table",
                  "module": "IO"
                },
                "getRow": {
                  "name": "getRow",
                  "params": [
                    {
                      "name": "rowID",
                      "description": "<p>ID number of the row to get</p>\n",
                      "type": "Integer"
                    }
                  ],
                  "class": "p5.Table",
                  "module": "IO"
                },
                "getRows": {
                  "name": "getRows",
                  "class": "p5.Table",
                  "module": "IO"
                },
                "findRow": {
                  "name": "findRow",
                  "params": [
                    {
                      "name": "value",
                      "description": "<p>The value to match</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "column",
                      "description": "<p>ID number or title of the\n                               column to search</p>\n",
                      "type": "Integer|String"
                    }
                  ],
                  "class": "p5.Table",
                  "module": "IO"
                },
                "findRows": {
                  "name": "findRows",
                  "params": [
                    {
                      "name": "value",
                      "description": "<p>The value to match</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "column",
                      "description": "<p>ID number or title of the\n                               column to search</p>\n",
                      "type": "Integer|String"
                    }
                  ],
                  "class": "p5.Table",
                  "module": "IO"
                },
                "matchRow": {
                  "name": "matchRow",
                  "params": [
                    {
                      "name": "regexp",
                      "description": "<p>The regular expression to match</p>\n",
                      "type": "String|RegExp"
                    },
                    {
                      "name": "column",
                      "description": "<p>The column ID (number) or\n                                 title (string)</p>\n",
                      "type": "String|Integer"
                    }
                  ],
                  "class": "p5.Table",
                  "module": "IO"
                },
                "matchRows": {
                  "name": "matchRows",
                  "params": [
                    {
                      "name": "regexp",
                      "description": "<p>The regular expression to match</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "column",
                      "description": "<p>The column ID (number) or\n                                 title (string)</p>\n",
                      "type": "String|Integer",
                      "optional": true
                    }
                  ],
                  "class": "p5.Table",
                  "module": "IO"
                },
                "getColumn": {
                  "name": "getColumn",
                  "params": [
                    {
                      "name": "column",
                      "description": "<p>String or Number of the column to return</p>\n",
                      "type": "String|Number"
                    }
                  ],
                  "class": "p5.Table",
                  "module": "IO"
                },
                "clearRows": {
                  "name": "clearRows",
                  "class": "p5.Table",
                  "module": "IO"
                },
                "addColumn": {
                  "name": "addColumn",
                  "params": [
                    {
                      "name": "title",
                      "description": "<p>title of the given column</p>\n",
                      "type": "String",
                      "optional": true
                    }
                  ],
                  "class": "p5.Table",
                  "module": "IO"
                },
                "getColumnCount": {
                  "name": "getColumnCount",
                  "class": "p5.Table",
                  "module": "IO"
                },
                "getRowCount": {
                  "name": "getRowCount",
                  "class": "p5.Table",
                  "module": "IO"
                },
                "removeTokens": {
                  "name": "removeTokens",
                  "params": [
                    {
                      "name": "chars",
                      "description": "<p>String listing characters to be removed</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "column",
                      "description": "<p>Column ID (number)\n                                 or name (string)</p>\n",
                      "type": "String|Integer",
                      "optional": true
                    }
                  ],
                  "class": "p5.Table",
                  "module": "IO"
                },
                "trim": {
                  "name": "trim",
                  "params": [
                    {
                      "name": "column",
                      "description": "<p>Column ID (number)\n                                 or name (string)</p>\n",
                      "type": "String|Integer",
                      "optional": true
                    }
                  ],
                  "class": "p5.Table",
                  "module": "IO"
                },
                "removeColumn": {
                  "name": "removeColumn",
                  "params": [
                    {
                      "name": "column",
                      "description": "<p>columnName (string) or ID (number)</p>\n",
                      "type": "String|Integer"
                    }
                  ],
                  "class": "p5.Table",
                  "module": "IO"
                },
                "set": {
                  "name": "set",
                  "params": [
                    {
                      "name": "row",
                      "description": "<p>row ID</p>\n",
                      "type": "Integer"
                    },
                    {
                      "name": "column",
                      "description": "<p>column ID (Number)\n                              or title (String)</p>\n",
                      "type": "String|Integer"
                    },
                    {
                      "name": "value",
                      "description": "<p>value to assign</p>\n",
                      "type": "String|Number"
                    }
                  ],
                  "class": "p5.Table",
                  "module": "IO"
                },
                "setNum": {
                  "name": "setNum",
                  "params": [
                    {
                      "name": "row",
                      "description": "<p>row ID</p>\n",
                      "type": "Integer"
                    },
                    {
                      "name": "column",
                      "description": "<p>column ID (Number)\n                              or title (String)</p>\n",
                      "type": "String|Integer"
                    },
                    {
                      "name": "value",
                      "description": "<p>value to assign</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Table",
                  "module": "IO"
                },
                "setString": {
                  "name": "setString",
                  "params": [
                    {
                      "name": "row",
                      "description": "<p>row ID</p>\n",
                      "type": "Integer"
                    },
                    {
                      "name": "column",
                      "description": "<p>column ID (Number)\n                              or title (String)</p>\n",
                      "type": "String|Integer"
                    },
                    {
                      "name": "value",
                      "description": "<p>value to assign</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5.Table",
                  "module": "IO"
                },
                "get": {
                  "name": "get",
                  "params": [
                    {
                      "name": "row",
                      "description": "<p>row ID</p>\n",
                      "type": "Integer"
                    },
                    {
                      "name": "column",
                      "description": "<p>columnName (string) or\n                                  ID (number)</p>\n",
                      "type": "String|Integer"
                    }
                  ],
                  "class": "p5.Table",
                  "module": "IO"
                },
                "getNum": {
                  "name": "getNum",
                  "params": [
                    {
                      "name": "row",
                      "description": "<p>row ID</p>\n",
                      "type": "Integer"
                    },
                    {
                      "name": "column",
                      "description": "<p>columnName (string) or\n                                  ID (number)</p>\n",
                      "type": "String|Integer"
                    }
                  ],
                  "class": "p5.Table",
                  "module": "IO"
                },
                "getString": {
                  "name": "getString",
                  "params": [
                    {
                      "name": "row",
                      "description": "<p>row ID</p>\n",
                      "type": "Integer"
                    },
                    {
                      "name": "column",
                      "description": "<p>columnName (string) or\n                                  ID (number)</p>\n",
                      "type": "String|Integer"
                    }
                  ],
                  "class": "p5.Table",
                  "module": "IO"
                },
                "getObject": {
                  "name": "getObject",
                  "params": [
                    {
                      "name": "headerColumn",
                      "description": "<p>Name of the column which should be used to\n                             title each row object (optional)</p>\n",
                      "type": "String",
                      "optional": true
                    }
                  ],
                  "class": "p5.Table",
                  "module": "IO"
                },
                "getArray": {
                  "name": "getArray",
                  "class": "p5.Table",
                  "module": "IO"
                }
              },
              "p5.TableRow": {
                "set": {
                  "name": "set",
                  "params": [
                    {
                      "name": "column",
                      "description": "<p>Column ID (Number)\n                              or Title (String)</p>\n",
                      "type": "String|Integer"
                    },
                    {
                      "name": "value",
                      "description": "<p>The value to be stored</p>\n",
                      "type": "String|Number"
                    }
                  ],
                  "class": "p5.TableRow",
                  "module": "IO"
                },
                "setNum": {
                  "name": "setNum",
                  "params": [
                    {
                      "name": "column",
                      "description": "<p>Column ID (Number)\n                              or Title (String)</p>\n",
                      "type": "String|Integer"
                    },
                    {
                      "name": "value",
                      "description": "<p>The value to be stored\n                              as a Float</p>\n",
                      "type": "Number|String"
                    }
                  ],
                  "class": "p5.TableRow",
                  "module": "IO"
                },
                "setString": {
                  "name": "setString",
                  "params": [
                    {
                      "name": "column",
                      "description": "<p>Column ID (Number)\n                              or Title (String)</p>\n",
                      "type": "String|Integer"
                    },
                    {
                      "name": "value",
                      "description": "<p>The value to be stored\n                              as a String</p>\n",
                      "type": "String|Number|Boolean|Object"
                    }
                  ],
                  "class": "p5.TableRow",
                  "module": "IO"
                },
                "get": {
                  "name": "get",
                  "params": [
                    {
                      "name": "column",
                      "description": "<p>columnName (string) or\n                                 ID (number)</p>\n",
                      "type": "String|Integer"
                    }
                  ],
                  "class": "p5.TableRow",
                  "module": "IO"
                },
                "getNum": {
                  "name": "getNum",
                  "params": [
                    {
                      "name": "column",
                      "description": "<p>columnName (string) or\n                                 ID (number)</p>\n",
                      "type": "String|Integer"
                    }
                  ],
                  "class": "p5.TableRow",
                  "module": "IO"
                },
                "getString": {
                  "name": "getString",
                  "params": [
                    {
                      "name": "column",
                      "description": "<p>columnName (string) or\n                                 ID (number)</p>\n",
                      "type": "String|Integer"
                    }
                  ],
                  "class": "p5.TableRow",
                  "module": "IO"
                }
              },
              "p5.XML": {
                "getParent": {
                  "name": "getParent",
                  "class": "p5.XML",
                  "module": "IO"
                },
                "getName": {
                  "name": "getName",
                  "class": "p5.XML",
                  "module": "IO"
                },
                "setName": {
                  "name": "setName",
                  "params": [
                    {
                      "name": "the",
                      "description": "<p>new name of the node</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5.XML",
                  "module": "IO"
                },
                "hasChildren": {
                  "name": "hasChildren",
                  "class": "p5.XML",
                  "module": "IO"
                },
                "listChildren": {
                  "name": "listChildren",
                  "class": "p5.XML",
                  "module": "IO"
                },
                "getChildren": {
                  "name": "getChildren",
                  "params": [
                    {
                      "name": "name",
                      "description": "<p>element name</p>\n",
                      "type": "String",
                      "optional": true
                    }
                  ],
                  "class": "p5.XML",
                  "module": "IO"
                },
                "getChild": {
                  "name": "getChild",
                  "params": [
                    {
                      "name": "name",
                      "description": "<p>element name or index</p>\n",
                      "type": "String|Integer"
                    }
                  ],
                  "class": "p5.XML",
                  "module": "IO"
                },
                "addChild": {
                  "name": "addChild",
                  "params": [
                    {
                      "name": "node",
                      "description": '<p>a <a href="#/p5.XML">p5.XML</a> Object which will be the child to be added</p>\n',
                      "type": "p5.XML"
                    }
                  ],
                  "class": "p5.XML",
                  "module": "IO"
                },
                "removeChild": {
                  "name": "removeChild",
                  "params": [
                    {
                      "name": "name",
                      "description": "<p>element name or index</p>\n",
                      "type": "String|Integer"
                    }
                  ],
                  "class": "p5.XML",
                  "module": "IO"
                },
                "getAttributeCount": {
                  "name": "getAttributeCount",
                  "class": "p5.XML",
                  "module": "IO"
                },
                "listAttributes": {
                  "name": "listAttributes",
                  "class": "p5.XML",
                  "module": "IO"
                },
                "hasAttribute": {
                  "name": "hasAttribute",
                  "params": [
                    {
                      "name": "the",
                      "description": "<p>attribute to be checked</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5.XML",
                  "module": "IO"
                },
                "getNum": {
                  "name": "getNum",
                  "params": [
                    {
                      "name": "name",
                      "description": "<p>the non-null full name of the attribute</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "defaultValue",
                      "description": "<p>the default value of the attribute</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.XML",
                  "module": "IO"
                },
                "getString": {
                  "name": "getString",
                  "params": [
                    {
                      "name": "name",
                      "description": "<p>the non-null full name of the attribute</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "defaultValue",
                      "description": "<p>the default value of the attribute</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.XML",
                  "module": "IO"
                },
                "setAttribute": {
                  "name": "setAttribute",
                  "params": [
                    {
                      "name": "name",
                      "description": "<p>the full name of the attribute</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "value",
                      "description": "<p>the value of the attribute</p>\n",
                      "type": "Number|String|Boolean"
                    }
                  ],
                  "class": "p5.XML",
                  "module": "IO"
                },
                "getContent": {
                  "name": "getContent",
                  "params": [
                    {
                      "name": "defaultValue",
                      "description": "<p>value returned if no content is found</p>\n",
                      "type": "String",
                      "optional": true
                    }
                  ],
                  "class": "p5.XML",
                  "module": "IO"
                },
                "setContent": {
                  "name": "setContent",
                  "params": [
                    {
                      "name": "text",
                      "description": "<p>the new content</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5.XML",
                  "module": "IO"
                },
                "serialize": {
                  "name": "serialize",
                  "class": "p5.XML",
                  "module": "IO"
                }
              },
              "p5.Vector": {
                "x": {
                  "name": "x",
                  "class": "p5.Vector",
                  "module": "Math"
                },
                "y": {
                  "name": "y",
                  "class": "p5.Vector",
                  "module": "Math"
                },
                "z": {
                  "name": "z",
                  "class": "p5.Vector",
                  "module": "Math"
                },
                "toString": {
                  "name": "toString",
                  "class": "p5.Vector",
                  "module": "Math"
                },
                "set": {
                  "name": "set",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "<p>The x component of the vector</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "y",
                          "description": "<p>The y component of the vector</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "z",
                          "description": "<p>The z component of the vector</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "value",
                          "description": "<p>The vector to set</p>\n",
                          "type": "p5.Vector|Number[]"
                        }
                      ],
                      "chainable": 1
                    }
                  ]
                },
                "copy": {
                  "name": "copy",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": []
                    },
                    {
                      "params": [
                        {
                          "name": "v",
                          "description": '<p>the <a href="#/p5.Vector">p5.Vector</a> to create a copy of</p>\n',
                          "type": "p5.Vector"
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "add": {
                  "name": "add",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "<p>The x component of the vector to be added</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "<p>The y component of the vector to be added</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "z",
                          "description": "<p>The z component of the vector to be added</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "value",
                          "description": "<p>The vector to add</p>\n",
                          "type": "p5.Vector|Number[]"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": '<p>A <a href="#/p5.Vector">p5.Vector</a> to add</p>\n',
                          "type": "p5.Vector"
                        },
                        {
                          "name": "v2",
                          "description": '<p>A <a href="#/p5.Vector">p5.Vector</a> to add</p>\n',
                          "type": "p5.Vector"
                        },
                        {
                          "name": "target",
                          "description": "<p>The vector to receive the result</p>\n",
                          "type": "p5.Vector",
                          "optional": true
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "rem": {
                  "name": "rem",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "<p>The x component of divisor vector</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "<p>The y component of divisor vector</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "z",
                          "description": "<p>The z component of divisor vector</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "value",
                          "description": "<p>The divisor vector</p>\n",
                          "type": "p5.Vector | Number[]"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": '<p>The dividend <a href="#/p5.Vector">p5.Vector</a></p>\n',
                          "type": "p5.Vector"
                        },
                        {
                          "name": "v2",
                          "description": '<p>The divisor <a href="#/p5.Vector">p5.Vector</a></p>\n',
                          "type": "p5.Vector"
                        }
                      ],
                      "static": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "v2",
                          "description": "",
                          "type": "p5.Vector"
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "sub": {
                  "name": "sub",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "<p>The x component of the vector to subtract</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "<p>The y component of the vector to subtract</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "z",
                          "description": "<p>The z component of the vector to subtract</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "value",
                          "description": "<p>the vector to subtract</p>\n",
                          "type": "p5.Vector|Number[]"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": '<p>A <a href="#/p5.Vector">p5.Vector</a> to subtract from</p>\n',
                          "type": "p5.Vector"
                        },
                        {
                          "name": "v2",
                          "description": '<p>A <a href="#/p5.Vector">p5.Vector</a> to subtract</p>\n',
                          "type": "p5.Vector"
                        },
                        {
                          "name": "target",
                          "description": "<p>The vector to receive the result</p>\n",
                          "type": "p5.Vector",
                          "optional": true
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "mult": {
                  "name": "mult",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "n",
                          "description": "<p>The number to multiply with the vector</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "<p>The number to multiply with the x component of the vector</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "<p>The number to multiply with the y component of the vector</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "z",
                          "description": "<p>The number to multiply with the z component of the vector</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "arr",
                          "description": "<p>The array to multiply with the components of the vector</p>\n",
                          "type": "Number[]"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v",
                          "description": "<p>The vector to multiply with the components of the original vector</p>\n",
                          "type": "p5.Vector"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "static": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v",
                          "description": "",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "n",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "target",
                          "description": "<p>the vector to receive the result</p>\n",
                          "type": "p5.Vector",
                          "optional": true
                        }
                      ],
                      "static": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v0",
                          "description": "",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "v1",
                          "description": "",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "target",
                          "description": "",
                          "type": "p5.Vector",
                          "optional": true
                        }
                      ],
                      "static": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v0",
                          "description": "",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "arr",
                          "description": "",
                          "type": "Number[]"
                        },
                        {
                          "name": "target",
                          "description": "",
                          "type": "p5.Vector",
                          "optional": true
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "div": {
                  "name": "div",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "n",
                          "description": "<p>The number to divide the vector by</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "<p>The number to divide with the x component of the vector</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "<p>The number to divide with the y component of the vector</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "z",
                          "description": "<p>The number to divide with the z component of the vector</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "arr",
                          "description": "<p>The array to divide the components of the vector by</p>\n",
                          "type": "Number[]"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v",
                          "description": "<p>The vector to divide the components of the original vector by</p>\n",
                          "type": "p5.Vector"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "z",
                          "description": "",
                          "type": "Number",
                          "optional": true
                        }
                      ],
                      "static": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v",
                          "description": "",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "n",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "target",
                          "description": "<p>The vector to receive the result</p>\n",
                          "type": "p5.Vector",
                          "optional": true
                        }
                      ],
                      "static": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v0",
                          "description": "",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "v1",
                          "description": "",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "target",
                          "description": "",
                          "type": "p5.Vector",
                          "optional": true
                        }
                      ],
                      "static": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v0",
                          "description": "",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "arr",
                          "description": "",
                          "type": "Number[]"
                        },
                        {
                          "name": "target",
                          "description": "",
                          "type": "p5.Vector",
                          "optional": true
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "mag": {
                  "name": "mag",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": []
                    },
                    {
                      "params": [
                        {
                          "name": "vecT",
                          "description": "<p>The vector to return the magnitude of</p>\n",
                          "type": "p5.Vector"
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "magSq": {
                  "name": "magSq",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": []
                    },
                    {
                      "params": [
                        {
                          "name": "vecT",
                          "description": "<p>the vector to return the squared magnitude of</p>\n",
                          "type": "p5.Vector"
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "dot": {
                  "name": "dot",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "<p>The x component of the vector</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "<p>The y component of the vector</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "z",
                          "description": "<p>The z component of the vector</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "value",
                          "description": '<p>value component of the vector or a <a href="#/p5.Vector">p5.Vector</a></p>\n',
                          "type": "p5.Vector"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": '<p>The first <a href="#/p5.Vector">p5.Vector</a></p>\n',
                          "type": "p5.Vector"
                        },
                        {
                          "name": "v2",
                          "description": '<p>The second <a href="#/p5.Vector">p5.Vector</a></p>\n',
                          "type": "p5.Vector"
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "cross": {
                  "name": "cross",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "v",
                          "description": '<p><a href="#/p5.Vector">p5.Vector</a> to be crossed</p>\n',
                          "type": "p5.Vector"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": '<p>The first <a href="#/p5.Vector">p5.Vector</a></p>\n',
                          "type": "p5.Vector"
                        },
                        {
                          "name": "v2",
                          "description": '<p>The second <a href="#/p5.Vector">p5.Vector</a></p>\n',
                          "type": "p5.Vector"
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "dist": {
                  "name": "dist",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "v",
                          "description": '<p>The x, y, and z coordinates of a <a href="#/p5.Vector">p5.Vector</a></p>\n',
                          "type": "p5.Vector"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": '<p>The first <a href="#/p5.Vector">p5.Vector</a></p>\n',
                          "type": "p5.Vector"
                        },
                        {
                          "name": "v2",
                          "description": '<p>The second <a href="#/p5.Vector">p5.Vector</a></p>\n',
                          "type": "p5.Vector"
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "normalize": {
                  "name": "normalize",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": []
                    },
                    {
                      "params": [
                        {
                          "name": "v",
                          "description": "<p>The vector to normalize</p>\n",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "target",
                          "description": "<p>The vector to receive the result</p>\n",
                          "type": "p5.Vector",
                          "optional": true
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "limit": {
                  "name": "limit",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "max",
                          "description": "<p>The maximum magnitude for the vector</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v",
                          "description": "<p>the vector to limit</p>\n",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "max",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "target",
                          "description": "<p>the vector to receive the result (Optional)</p>\n",
                          "type": "p5.Vector",
                          "optional": true
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "setMag": {
                  "name": "setMag",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "len",
                          "description": "<p>The new length for this vector</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v",
                          "description": "<p>the vector to set the magnitude of</p>\n",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "len",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "target",
                          "description": "<p>the vector to receive the result (Optional)</p>\n",
                          "type": "p5.Vector",
                          "optional": true
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "heading": {
                  "name": "heading",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": []
                    },
                    {
                      "params": [
                        {
                          "name": "v",
                          "description": "<p>the vector to find the angle of</p>\n",
                          "type": "p5.Vector"
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "setHeading": {
                  "name": "setHeading",
                  "params": [
                    {
                      "name": "angle",
                      "description": "<p>The angle of rotation</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Vector",
                  "module": "Math"
                },
                "rotate": {
                  "name": "rotate",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "angle",
                          "description": "<p>The angle of rotation</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v",
                          "description": "",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "angle",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "target",
                          "description": "<p>The vector to receive the result</p>\n",
                          "type": "p5.Vector",
                          "optional": true
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "angleBetween": {
                  "name": "angleBetween",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "value",
                          "description": '<p>The x, y, and z components of a <a href="#/p5.Vector">p5.Vector</a></p>\n',
                          "type": "p5.Vector"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "<p>the first vector</p>\n",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "v2",
                          "description": "<p>the second vector</p>\n",
                          "type": "p5.Vector"
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "lerp": {
                  "name": "lerp",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "<p>The x component</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "y",
                          "description": "<p>The y component</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "z",
                          "description": "<p>The z component</p>\n",
                          "type": "Number"
                        },
                        {
                          "name": "amt",
                          "description": "<p>The amount of interpolation; some value between 0.0\n                        (old vector) and 1.0 (new vector). 0.9 is very near\n                        the new vector. 0.5 is halfway in between.</p>\n",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v",
                          "description": '<p>The <a href="#/p5.Vector">p5.Vector</a> to lerp to</p>\n',
                          "type": "p5.Vector"
                        },
                        {
                          "name": "amt",
                          "description": "",
                          "type": "Number"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "v2",
                          "description": "",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "amt",
                          "description": "",
                          "type": "Number"
                        },
                        {
                          "name": "target",
                          "description": "<p>The vector to receive the result</p>\n",
                          "type": "p5.Vector",
                          "optional": true
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "reflect": {
                  "name": "reflect",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "surfaceNormal",
                          "description": '<p>the <a href="#/p5.Vector">p5.Vector</a>\n                                   to reflect about.</p>\n',
                          "type": "p5.Vector"
                        }
                      ],
                      "chainable": 1
                    },
                    {
                      "params": [
                        {
                          "name": "incidentVector",
                          "description": "<p>vector to be reflected</p>\n",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "surfaceNormal",
                          "description": "",
                          "type": "p5.Vector"
                        },
                        {
                          "name": "target",
                          "description": "<p>the vector to receive the result (Optional)</p>\n",
                          "type": "p5.Vector",
                          "optional": true
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "array": {
                  "name": "array",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": []
                    },
                    {
                      "params": [
                        {
                          "name": "v",
                          "description": "<p>the vector to convert to an array</p>\n",
                          "type": "p5.Vector"
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "equals": {
                  "name": "equals",
                  "class": "p5.Vector",
                  "module": "Math",
                  "overloads": [
                    {
                      "params": [
                        {
                          "name": "x",
                          "description": "<p>The x component of the vector</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "y",
                          "description": "<p>The y component of the vector</p>\n",
                          "type": "Number",
                          "optional": true
                        },
                        {
                          "name": "z",
                          "description": "<p>The z component of the vector</p>\n",
                          "type": "Number",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "value",
                          "description": "<p>The vector to compare</p>\n",
                          "type": "p5.Vector|Array"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "v1",
                          "description": "<p>the first vector to compare</p>\n",
                          "type": "p5.Vector|Array"
                        },
                        {
                          "name": "v2",
                          "description": "<p>the second vector to compare</p>\n",
                          "type": "p5.Vector|Array"
                        }
                      ],
                      "static": 1
                    }
                  ]
                },
                "fromAngle": {
                  "name": "fromAngle",
                  "params": [
                    {
                      "name": "angle",
                      "description": '<p>The desired angle, in radians (unaffected by <a href="#/p5/angleMode">angleMode</a>)</p>\n',
                      "type": "Number"
                    },
                    {
                      "name": "length",
                      "description": "<p>The length of the new vector (defaults to 1)</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Vector",
                  "module": "Math"
                },
                "fromAngles": {
                  "name": "fromAngles",
                  "params": [
                    {
                      "name": "theta",
                      "description": "<p>The polar angle, in radians (zero is up)</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "phi",
                      "description": "<p>The azimuthal angle, in radians\n                              (zero is out of the screen)</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "length",
                      "description": "<p>The length of the new vector (defaults to 1)</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Vector",
                  "module": "Math"
                },
                "random2D": {
                  "name": "random2D",
                  "class": "p5.Vector",
                  "module": "Math"
                },
                "random3D": {
                  "name": "random3D",
                  "class": "p5.Vector",
                  "module": "Math"
                }
              },
              "p5.Font": {
                "font": {
                  "name": "font",
                  "class": "p5.Font",
                  "module": "Typography"
                },
                "textBounds": {
                  "name": "textBounds",
                  "params": [
                    {
                      "name": "line",
                      "description": "<p>a line of text</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "x",
                      "description": "<p>x-position</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "y",
                      "description": "<p>y-position</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "fontSize",
                      "description": "<p>font size to use (optional) Default is 12.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "options",
                      "description": "<p>opentype options (optional)\n                           opentype fonts contains alignment and baseline options.\n                           Default is 'LEFT' and 'alphabetic'</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5.Font",
                  "module": "Typography"
                },
                "textToPoints": {
                  "name": "textToPoints",
                  "params": [
                    {
                      "name": "txt",
                      "description": "<p>a line of text</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "x",
                      "description": "<p>x-position</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "y",
                      "description": "<p>y-position</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "fontSize",
                      "description": "<p>font size to use (optional)</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "options",
                      "description": "<p>an (optional) object that can contain:</p>\n<p><br>sampleFactor - the ratio of path-length to number of samples\n(default=.1); higher values yield more points and are therefore\nmore precise</p>\n<p><br>simplifyThreshold - if set to a non-zero value, collinear points will be\nbe removed from the polygon; the value represents the threshold angle to use\nwhen determining whether two edges are collinear</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5.Font",
                  "module": "Typography"
                }
              },
              "p5.Camera": {
                "eyeX": {
                  "name": "eyeX",
                  "class": "p5.Camera",
                  "module": "3D"
                },
                "eyeY": {
                  "name": "eyeY",
                  "class": "p5.Camera",
                  "module": "3D"
                },
                "eyeZ": {
                  "name": "eyeZ",
                  "class": "p5.Camera",
                  "module": "3D"
                },
                "centerX": {
                  "name": "centerX",
                  "class": "p5.Camera",
                  "module": "3D"
                },
                "centerY": {
                  "name": "centerY",
                  "class": "p5.Camera",
                  "module": "3D"
                },
                "centerZ": {
                  "name": "centerZ",
                  "class": "p5.Camera",
                  "module": "3D"
                },
                "upX": {
                  "name": "upX",
                  "class": "p5.Camera",
                  "module": "3D"
                },
                "upY": {
                  "name": "upY",
                  "class": "p5.Camera",
                  "module": "3D"
                },
                "upZ": {
                  "name": "upZ",
                  "class": "p5.Camera",
                  "module": "3D"
                },
                "perspective": {
                  "name": "perspective",
                  "class": "p5.Camera",
                  "module": "3D"
                },
                "ortho": {
                  "name": "ortho",
                  "class": "p5.Camera",
                  "module": "3D"
                },
                "frustum": {
                  "name": "frustum",
                  "class": "p5.Camera",
                  "module": "3D"
                },
                "pan": {
                  "name": "pan",
                  "params": [
                    {
                      "name": "angle",
                      "description": '<p>amount to rotate camera in current\n<a href="#/p5/angleMode">angleMode</a> units.\nGreater than 0 values rotate counterclockwise (to the left).</p>\n',
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Camera",
                  "module": "3D"
                },
                "tilt": {
                  "name": "tilt",
                  "params": [
                    {
                      "name": "angle",
                      "description": '<p>amount to rotate camera in current\n<a href="#/p5/angleMode">angleMode</a> units.\nGreater than 0 values rotate counterclockwise (to the left).</p>\n',
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Camera",
                  "module": "3D"
                },
                "lookAt": {
                  "name": "lookAt",
                  "params": [
                    {
                      "name": "x",
                      "description": "<p>x position of a point in world space</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "y",
                      "description": "<p>y position of a point in world space</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "z",
                      "description": "<p>z position of a point in world space</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Camera",
                  "module": "3D"
                },
                "camera": {
                  "name": "camera",
                  "class": "p5.Camera",
                  "module": "3D"
                },
                "move": {
                  "name": "move",
                  "params": [
                    {
                      "name": "x",
                      "description": "<p>amount to move along camera's left-right axis</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "y",
                      "description": "<p>amount to move along camera's up-down axis</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "z",
                      "description": "<p>amount to move along camera's forward-backward axis</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Camera",
                  "module": "3D"
                },
                "setPosition": {
                  "name": "setPosition",
                  "params": [
                    {
                      "name": "x",
                      "description": "<p>x position of a point in world space</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "y",
                      "description": "<p>y position of a point in world space</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "z",
                      "description": "<p>z position of a point in world space</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Camera",
                  "module": "3D"
                }
              },
              "p5.Geometry": {
                "computeFaces": {
                  "name": "computeFaces",
                  "class": "p5.Geometry",
                  "module": "Shape"
                },
                "computeNormals": {
                  "name": "computeNormals",
                  "class": "p5.Geometry",
                  "module": "Shape"
                },
                "averageNormals": {
                  "name": "averageNormals",
                  "class": "p5.Geometry",
                  "module": "Shape"
                },
                "averagePoleNormals": {
                  "name": "averagePoleNormals",
                  "class": "p5.Geometry",
                  "module": "Shape"
                },
                "normalize": {
                  "name": "normalize",
                  "class": "p5.Geometry",
                  "module": "Shape"
                }
              },
              "p5.Shader": {
                "setUniform": {
                  "name": "setUniform",
                  "params": [
                    {
                      "name": "uniformName",
                      "description": "<p>the name of the uniform.\nMust correspond to the name used in the vertex and fragment shaders</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "data",
                      "description": "<p>the data to associate with the uniform. The type can be\na boolean (true/false), a number, an array of numbers, or\nan image (p5.Image, p5.Graphics, p5.MediaElement, p5.Texture)</p>\n",
                      "type": "Boolean|Number|Number[]|p5.Image|p5.Graphics|p5.MediaElement|p5.Texture"
                    }
                  ],
                  "class": "p5.Shader",
                  "module": "3D"
                }
              },
              "p5.SoundFile": {
                "isLoaded": {
                  "name": "isLoaded",
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "play": {
                  "name": "play",
                  "params": [
                    {
                      "name": "startTime",
                      "description": "<p>(optional) schedule playback to start (in seconds from now).</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "rate",
                      "description": "<p>(optional) playback rate</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "amp",
                      "description": "<p>(optional) amplitude (volume)\n                                    of playback</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "cueStart",
                      "description": "<p>(optional) cue start time in seconds</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "duration",
                      "description": "<p>(optional) duration of playback in seconds</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "playMode": {
                  "name": "playMode",
                  "params": [
                    {
                      "name": "str",
                      "description": "<p>'restart' or 'sustain' or 'untilDone'</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "pause": {
                  "name": "pause",
                  "params": [
                    {
                      "name": "startTime",
                      "description": "<p>(optional) schedule event to occur\n                             seconds from now</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "loop": {
                  "name": "loop",
                  "params": [
                    {
                      "name": "startTime",
                      "description": "<p>(optional) schedule event to occur\n                            seconds from now</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "rate",
                      "description": "<p>(optional) playback rate</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "amp",
                      "description": "<p>(optional) playback volume</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "cueLoopStart",
                      "description": "<p>(optional) startTime in seconds</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "duration",
                      "description": "<p>(optional) loop duration in seconds</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "setLoop": {
                  "name": "setLoop",
                  "params": [
                    {
                      "name": "Boolean",
                      "description": "<p>set looping to true or false</p>\n",
                      "type": "Boolean"
                    }
                  ],
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "isLooping": {
                  "name": "isLooping",
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "isPlaying": {
                  "name": "isPlaying",
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "isPaused": {
                  "name": "isPaused",
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "stop": {
                  "name": "stop",
                  "params": [
                    {
                      "name": "startTime",
                      "description": "<p>(optional) schedule event to occur\n                            in seconds from now</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "pan": {
                  "name": "pan",
                  "params": [
                    {
                      "name": "panValue",
                      "description": "<p>Set the stereo panner</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "timeFromNow",
                      "description": "<p>schedule this event to happen\n                                seconds from now</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "getPan": {
                  "name": "getPan",
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "rate": {
                  "name": "rate",
                  "params": [
                    {
                      "name": "playbackRate",
                      "description": "<p>Set the playback rate. 1.0 is normal,\n                                   .5 is half-speed, 2.0 is twice as fast.\n                                   Values less than zero play backwards.</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "setVolume": {
                  "name": "setVolume",
                  "params": [
                    {
                      "name": "volume",
                      "description": "<p>Volume (amplitude) between 0.0\n                                   and 1.0 or modulating signal/oscillator</p>\n",
                      "type": "Number|Object"
                    },
                    {
                      "name": "rampTime",
                      "description": "<p>Fade for t seconds</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "timeFromNow",
                      "description": "<p>Schedule this event to happen at\n                               t seconds in the future</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "duration": {
                  "name": "duration",
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "currentTime": {
                  "name": "currentTime",
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "jump": {
                  "name": "jump",
                  "params": [
                    {
                      "name": "cueTime",
                      "description": "<p>cueTime of the soundFile in seconds.</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "duration",
                      "description": "<p>duration in seconds.</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "channels": {
                  "name": "channels",
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "sampleRate": {
                  "name": "sampleRate",
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "frames": {
                  "name": "frames",
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "getPeaks": {
                  "name": "getPeaks",
                  "params": [
                    {
                      "name": "length",
                      "description": "<p>length is the size of the returned array.\n                         Larger length results in more precision.\n                         Defaults to 5*width of the browser window.</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "reverseBuffer": {
                  "name": "reverseBuffer",
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "onended": {
                  "name": "onended",
                  "params": [
                    {
                      "name": "callback",
                      "description": "<p>function to call when the\n                            soundfile has ended.</p>\n",
                      "type": "Function"
                    }
                  ],
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "connect": {
                  "name": "connect",
                  "params": [
                    {
                      "name": "object",
                      "description": "<p>Audio object that accepts an input</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "disconnect": {
                  "name": "disconnect",
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "setPath": {
                  "name": "setPath",
                  "params": [
                    {
                      "name": "path",
                      "description": "<p>path to audio file</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "callback",
                      "description": "<p>Callback</p>\n",
                      "type": "Function"
                    }
                  ],
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "setBuffer": {
                  "name": "setBuffer",
                  "params": [
                    {
                      "name": "buf",
                      "description": "<p>Array of Float32 Array(s). 2 Float32 Arrays\n                   will create a stereo source. 1 will create\n                   a mono source.</p>\n",
                      "type": "Array"
                    }
                  ],
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "addCue": {
                  "name": "addCue",
                  "params": [
                    {
                      "name": "time",
                      "description": "<p>Time in seconds, relative to this media\n                           element's playback. For example, to trigger\n                           an event every time playback reaches two\n                           seconds, pass in the number 2. This will be\n                           passed as the first parameter to\n                           the callback function.</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "callback",
                      "description": "<p>Name of a function that will be\n                           called at the given time. The callback will\n                           receive time and (optionally) param as its\n                           two parameters.</p>\n",
                      "type": "Function"
                    },
                    {
                      "name": "value",
                      "description": "<p>An object to be passed as the\n                           second parameter to the\n                           callback function.</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "removeCue": {
                  "name": "removeCue",
                  "params": [
                    {
                      "name": "id",
                      "description": "<p>ID of the cue, as returned by addCue</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "clearCues": {
                  "name": "clearCues",
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "save": {
                  "name": "save",
                  "params": [
                    {
                      "name": "fileName",
                      "description": "<p>name of the resulting .wav file.</p>\n",
                      "type": "String",
                      "optional": true
                    }
                  ],
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                },
                "getBlob": {
                  "name": "getBlob",
                  "class": "p5.SoundFile",
                  "module": "p5.sound"
                }
              },
              "p5.Amplitude": {
                "setInput": {
                  "name": "setInput",
                  "params": [
                    {
                      "name": "snd",
                      "description": "<p>set the sound source\n                                     (optional, defaults to\n                                     main output)</p>\n",
                      "type": "SoundObject|undefined",
                      "optional": true
                    },
                    {
                      "name": "smoothing",
                      "description": "<p>a range between 0.0 and 1.0\n                                      to smooth amplitude readings</p>\n",
                      "type": "Number|undefined",
                      "optional": true
                    }
                  ],
                  "class": "p5.Amplitude",
                  "module": "p5.sound"
                },
                "getLevel": {
                  "name": "getLevel",
                  "params": [
                    {
                      "name": "channel",
                      "description": "<p>Optionally return only channel 0 (left) or 1 (right)</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Amplitude",
                  "module": "p5.sound"
                },
                "toggleNormalize": {
                  "name": "toggleNormalize",
                  "params": [
                    {
                      "name": "boolean",
                      "description": "<p>set normalize to true (1) or false (0)</p>\n",
                      "type": "Boolean",
                      "optional": true
                    }
                  ],
                  "class": "p5.Amplitude",
                  "module": "p5.sound"
                },
                "smooth": {
                  "name": "smooth",
                  "params": [
                    {
                      "name": "set",
                      "description": "<p>smoothing from 0.0 <= 1</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Amplitude",
                  "module": "p5.sound"
                }
              },
              "p5.FFT": {
                "setInput": {
                  "name": "setInput",
                  "params": [
                    {
                      "name": "source",
                      "description": "<p>p5.sound object (or web audio API source node)</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5.FFT",
                  "module": "p5.sound"
                },
                "waveform": {
                  "name": "waveform",
                  "params": [
                    {
                      "name": "bins",
                      "description": "<p>Must be a power of two between\n                          16 and 1024. Defaults to 1024.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "precision",
                      "description": "<p>If any value is provided, will return results\n                            in a Float32 Array which is more precise\n                            than a regular array.</p>\n",
                      "type": "String",
                      "optional": true
                    }
                  ],
                  "class": "p5.FFT",
                  "module": "p5.sound"
                },
                "analyze": {
                  "name": "analyze",
                  "params": [
                    {
                      "name": "bins",
                      "description": "<p>Must be a power of two between\n                           16 and 1024. Defaults to 1024.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "scale",
                      "description": '<p>If "dB," returns decibel\n                           float measurements between\n                           -140 and 0 (max).\n                           Otherwise returns integers from 0-255.</p>\n',
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.FFT",
                  "module": "p5.sound"
                },
                "getEnergy": {
                  "name": "getEnergy",
                  "params": [
                    {
                      "name": "frequency1",
                      "description": '<p>Will return a value representing\n                              energy at this frequency. Alternately,\n                              the strings "bass", "lowMid" "mid",\n                              "highMid", and "treble" will return\n                              predefined frequency ranges.</p>\n',
                      "type": "Number|String"
                    },
                    {
                      "name": "frequency2",
                      "description": "<p>If a second frequency is given,\n                              will return average amount of\n                              energy that exists between the\n                              two frequencies.</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.FFT",
                  "module": "p5.sound"
                },
                "getCentroid": {
                  "name": "getCentroid",
                  "class": "p5.FFT",
                  "module": "p5.sound"
                },
                "smooth": {
                  "name": "smooth",
                  "params": [
                    {
                      "name": "smoothing",
                      "description": "<p>0.0 < smoothing < 1.0.\n                             Defaults to 0.8.</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.FFT",
                  "module": "p5.sound"
                },
                "linAverages": {
                  "name": "linAverages",
                  "params": [
                    {
                      "name": "N",
                      "description": "<p>Number of returned frequency groups</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.FFT",
                  "module": "p5.sound"
                },
                "logAverages": {
                  "name": "logAverages",
                  "params": [
                    {
                      "name": "octaveBands",
                      "description": "<p>Array of Octave Bands objects for grouping</p>\n",
                      "type": "Array"
                    }
                  ],
                  "class": "p5.FFT",
                  "module": "p5.sound"
                },
                "getOctaveBands": {
                  "name": "getOctaveBands",
                  "params": [
                    {
                      "name": "N",
                      "description": "<p>Specifies the 1/N type of generated octave bands</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "fCtr0",
                      "description": "<p>Minimum central frequency for the lowest band</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.FFT",
                  "module": "p5.sound"
                }
              },
              "p5.Oscillator": {
                "start": {
                  "name": "start",
                  "params": [
                    {
                      "name": "time",
                      "description": "<p>startTime in seconds from now.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "frequency",
                      "description": "<p>frequency in Hz.</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Oscillator",
                  "module": "p5.sound"
                },
                "stop": {
                  "name": "stop",
                  "params": [
                    {
                      "name": "secondsFromNow",
                      "description": "<p>Time, in seconds from now.</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Oscillator",
                  "module": "p5.sound"
                },
                "amp": {
                  "name": "amp",
                  "params": [
                    {
                      "name": "vol",
                      "description": "<p>between 0 and 1.0\n                            or a modulating signal/oscillator</p>\n",
                      "type": "Number|Object"
                    },
                    {
                      "name": "rampTime",
                      "description": "<p>create a fade that lasts rampTime</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "timeFromNow",
                      "description": "<p>schedule this event to happen\n                              seconds from now</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Oscillator",
                  "module": "p5.sound"
                },
                "getAmp": {
                  "name": "getAmp",
                  "class": "p5.Oscillator",
                  "module": "p5.sound"
                },
                "freq": {
                  "name": "freq",
                  "params": [
                    {
                      "name": "Frequency",
                      "description": "<p>Frequency in Hz\n                                      or modulating signal/oscillator</p>\n",
                      "type": "Number|Object"
                    },
                    {
                      "name": "rampTime",
                      "description": "<p>Ramp time (in seconds)</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "timeFromNow",
                      "description": "<p>Schedule this event to happen\n                                 at x seconds from now</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Oscillator",
                  "module": "p5.sound"
                },
                "getFreq": {
                  "name": "getFreq",
                  "class": "p5.Oscillator",
                  "module": "p5.sound"
                },
                "setType": {
                  "name": "setType",
                  "params": [
                    {
                      "name": "type",
                      "description": "<p>'sine', 'triangle', 'sawtooth' or 'square'.</p>\n",
                      "type": "String"
                    }
                  ],
                  "class": "p5.Oscillator",
                  "module": "p5.sound"
                },
                "getType": {
                  "name": "getType",
                  "class": "p5.Oscillator",
                  "module": "p5.sound"
                },
                "connect": {
                  "name": "connect",
                  "params": [
                    {
                      "name": "unit",
                      "description": "<p>A p5.sound or Web Audio object</p>\n",
                      "type": "Object"
                    }
                  ],
                  "class": "p5.Oscillator",
                  "module": "p5.sound"
                },
                "disconnect": {
                  "name": "disconnect",
                  "class": "p5.Oscillator",
                  "module": "p5.sound"
                },
                "pan": {
                  "name": "pan",
                  "params": [
                    {
                      "name": "panning",
                      "description": "<p>Number between -1 and 1</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "timeFromNow",
                      "description": "<p>schedule this event to happen\n                              seconds from now</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Oscillator",
                  "module": "p5.sound"
                },
                "getPan": {
                  "name": "getPan",
                  "class": "p5.Oscillator",
                  "module": "p5.sound"
                },
                "phase": {
                  "name": "phase",
                  "params": [
                    {
                      "name": "phase",
                      "description": "<p>float between 0.0 and 1.0</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Oscillator",
                  "module": "p5.sound"
                },
                "add": {
                  "name": "add",
                  "params": [
                    {
                      "name": "number",
                      "description": "<p>Constant number to add</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Oscillator",
                  "module": "p5.sound"
                },
                "mult": {
                  "name": "mult",
                  "params": [
                    {
                      "name": "number",
                      "description": "<p>Constant number to multiply</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Oscillator",
                  "module": "p5.sound"
                },
                "scale": {
                  "name": "scale",
                  "params": [
                    {
                      "name": "inMin",
                      "description": "<p>input range minumum</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "inMax",
                      "description": "<p>input range maximum</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "outMin",
                      "description": "<p>input range minumum</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "outMax",
                      "description": "<p>input range maximum</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Oscillator",
                  "module": "p5.sound"
                }
              },
              "p5.Envelope": {
                "attackTime": {
                  "name": "attackTime",
                  "class": "p5.Envelope",
                  "module": "p5.sound"
                },
                "attackLevel": {
                  "name": "attackLevel",
                  "class": "p5.Envelope",
                  "module": "p5.sound"
                },
                "decayTime": {
                  "name": "decayTime",
                  "class": "p5.Envelope",
                  "module": "p5.sound"
                },
                "decayLevel": {
                  "name": "decayLevel",
                  "class": "p5.Envelope",
                  "module": "p5.sound"
                },
                "releaseTime": {
                  "name": "releaseTime",
                  "class": "p5.Envelope",
                  "module": "p5.sound"
                },
                "releaseLevel": {
                  "name": "releaseLevel",
                  "class": "p5.Envelope",
                  "module": "p5.sound"
                },
                "set": {
                  "name": "set",
                  "params": [
                    {
                      "name": "attackTime",
                      "description": "<p>Time (in seconds) before level\n                               reaches attackLevel</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "attackLevel",
                      "description": "<p>Typically an amplitude between\n                               0.0 and 1.0</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "decayTime",
                      "description": "<p>Time</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "decayLevel",
                      "description": "<p>Amplitude (In a standard ADSR envelope,\n                               decayLevel = sustainLevel)</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "releaseTime",
                      "description": "<p>Release Time (in seconds)</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "releaseLevel",
                      "description": "<p>Amplitude</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Envelope",
                  "module": "p5.sound"
                },
                "setADSR": {
                  "name": "setADSR",
                  "params": [
                    {
                      "name": "attackTime",
                      "description": "<p>Time (in seconds before envelope\n                              reaches Attack Level</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "decayTime",
                      "description": "<p>Time (in seconds) before envelope\n                              reaches Decay/Sustain Level</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "susRatio",
                      "description": "<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\n                              where 1.0 = attackLevel, 0.0 = releaseLevel.\n                              The susRatio determines the decayLevel and the level at which the\n                              sustain portion of the envelope will sustain.\n                              For example, if attackLevel is 0.4, releaseLevel is 0,\n                              and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\n                              increased to 1.0 (using <code>setRange</code>),\n                              then decayLevel would increase proportionally, to become 0.5.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "releaseTime",
                      "description": "<p>Time in seconds from now (defaults to 0)</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Envelope",
                  "module": "p5.sound"
                },
                "setRange": {
                  "name": "setRange",
                  "params": [
                    {
                      "name": "aLevel",
                      "description": "<p>attack level (defaults to 1)</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "rLevel",
                      "description": "<p>release level (defaults to 0)</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Envelope",
                  "module": "p5.sound"
                },
                "setInput": {
                  "name": "setInput",
                  "params": [
                    {
                      "name": "inputs",
                      "description": "<p>A p5.sound object or\n                              Web Audio Param.</p>\n",
                      "type": "Object",
                      "optional": true,
                      "multiple": true
                    }
                  ],
                  "class": "p5.Envelope",
                  "module": "p5.sound"
                },
                "setExp": {
                  "name": "setExp",
                  "params": [
                    {
                      "name": "isExp",
                      "description": "<p>true is exponential, false is linear</p>\n",
                      "type": "Boolean"
                    }
                  ],
                  "class": "p5.Envelope",
                  "module": "p5.sound"
                },
                "play": {
                  "name": "play",
                  "params": [
                    {
                      "name": "unit",
                      "description": "<p>A p5.sound object or\n                              Web Audio Param.</p>\n",
                      "type": "Object"
                    },
                    {
                      "name": "startTime",
                      "description": "<p>time from now (in seconds) at which to play</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "sustainTime",
                      "description": "<p>time to sustain before releasing the envelope</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Envelope",
                  "module": "p5.sound"
                },
                "triggerAttack": {
                  "name": "triggerAttack",
                  "params": [
                    {
                      "name": "unit",
                      "description": "<p>p5.sound Object or Web Audio Param</p>\n",
                      "type": "Object"
                    },
                    {
                      "name": "secondsFromNow",
                      "description": "<p>time from now (in seconds)</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Envelope",
                  "module": "p5.sound"
                },
                "triggerRelease": {
                  "name": "triggerRelease",
                  "params": [
                    {
                      "name": "unit",
                      "description": "<p>p5.sound Object or Web Audio Param</p>\n",
                      "type": "Object"
                    },
                    {
                      "name": "secondsFromNow",
                      "description": "<p>time to trigger the release</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Envelope",
                  "module": "p5.sound"
                },
                "ramp": {
                  "name": "ramp",
                  "params": [
                    {
                      "name": "unit",
                      "description": "<p>p5.sound Object or Web Audio Param</p>\n",
                      "type": "Object"
                    },
                    {
                      "name": "secondsFromNow",
                      "description": "<p>When to trigger the ramp</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "v",
                      "description": "<p>Target value</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "v2",
                      "description": "<p>Second target value</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Envelope",
                  "module": "p5.sound"
                },
                "add": {
                  "name": "add",
                  "params": [
                    {
                      "name": "number",
                      "description": "<p>Constant number to add</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Envelope",
                  "module": "p5.sound"
                },
                "mult": {
                  "name": "mult",
                  "params": [
                    {
                      "name": "number",
                      "description": "<p>Constant number to multiply</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Envelope",
                  "module": "p5.sound"
                },
                "scale": {
                  "name": "scale",
                  "params": [
                    {
                      "name": "inMin",
                      "description": "<p>input range minumum</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "inMax",
                      "description": "<p>input range maximum</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "outMin",
                      "description": "<p>input range minumum</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "outMax",
                      "description": "<p>input range maximum</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Envelope",
                  "module": "p5.sound"
                }
              },
              "p5.Noise": {
                "setType": {
                  "name": "setType",
                  "params": [
                    {
                      "name": "type",
                      "description": "<p>'white', 'pink' or 'brown'</p>\n",
                      "type": "String",
                      "optional": true
                    }
                  ],
                  "class": "p5.Noise",
                  "module": "p5.sound"
                }
              },
              "p5.Pulse": {
                "width": {
                  "name": "width",
                  "params": [
                    {
                      "name": "width",
                      "description": "<p>Width between the pulses (0 to 1.0,\n                       defaults to 0)</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Pulse",
                  "module": "p5.sound"
                }
              },
              "p5.AudioIn": {
                "input": {
                  "name": "input",
                  "class": "p5.AudioIn",
                  "module": "p5.sound"
                },
                "output": {
                  "name": "output",
                  "class": "p5.AudioIn",
                  "module": "p5.sound"
                },
                "stream": {
                  "name": "stream",
                  "class": "p5.AudioIn",
                  "module": "p5.sound"
                },
                "mediaStream": {
                  "name": "mediaStream",
                  "class": "p5.AudioIn",
                  "module": "p5.sound"
                },
                "currentSource": {
                  "name": "currentSource",
                  "class": "p5.AudioIn",
                  "module": "p5.sound"
                },
                "enabled": {
                  "name": "enabled",
                  "class": "p5.AudioIn",
                  "module": "p5.sound"
                },
                "amplitude": {
                  "name": "amplitude",
                  "class": "p5.AudioIn",
                  "module": "p5.sound"
                },
                "start": {
                  "name": "start",
                  "params": [
                    {
                      "name": "successCallback",
                      "description": "<p>Name of a function to call on\n                                  success.</p>\n",
                      "type": "Function",
                      "optional": true
                    },
                    {
                      "name": "errorCallback",
                      "description": "<p>Name of a function to call if\n                                  there was an error. For example,\n                                  some browsers do not support\n                                  getUserMedia.</p>\n",
                      "type": "Function",
                      "optional": true
                    }
                  ],
                  "class": "p5.AudioIn",
                  "module": "p5.sound"
                },
                "stop": {
                  "name": "stop",
                  "class": "p5.AudioIn",
                  "module": "p5.sound"
                },
                "connect": {
                  "name": "connect",
                  "params": [
                    {
                      "name": "unit",
                      "description": "<p>An object that accepts audio input,\n                        such as an FFT</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5.AudioIn",
                  "module": "p5.sound"
                },
                "disconnect": {
                  "name": "disconnect",
                  "class": "p5.AudioIn",
                  "module": "p5.sound"
                },
                "getLevel": {
                  "name": "getLevel",
                  "params": [
                    {
                      "name": "smoothing",
                      "description": "<p>Smoothing is 0.0 by default.\n                             Smooths values based on previous values.</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.AudioIn",
                  "module": "p5.sound"
                },
                "amp": {
                  "name": "amp",
                  "params": [
                    {
                      "name": "vol",
                      "description": "<p>between 0 and 1.0</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "time",
                      "description": "<p>ramp time (optional)</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.AudioIn",
                  "module": "p5.sound"
                },
                "getSources": {
                  "name": "getSources",
                  "params": [
                    {
                      "name": "successCallback",
                      "description": "<p>This callback function handles the sources when they\n                                     have been enumerated. The callback function\n                                     receives the deviceList array as its only argument</p>\n",
                      "type": "Function",
                      "optional": true
                    },
                    {
                      "name": "errorCallback",
                      "description": "<p>This optional callback receives the error\n                                   message as its argument.</p>\n",
                      "type": "Function",
                      "optional": true
                    }
                  ],
                  "class": "p5.AudioIn",
                  "module": "p5.sound"
                },
                "setSource": {
                  "name": "setSource",
                  "params": [
                    {
                      "name": "num",
                      "description": "<p>position of input source in the array</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.AudioIn",
                  "module": "p5.sound"
                }
              },
              "p5.Effect": {
                "amp": {
                  "name": "amp",
                  "params": [
                    {
                      "name": "vol",
                      "description": "<p>amplitude between 0 and 1.0</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "rampTime",
                      "description": "<p>create a fade that lasts until rampTime</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "tFromNow",
                      "description": "<p>schedule this event to happen in tFromNow seconds</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Effect",
                  "module": "p5.sound"
                },
                "chain": {
                  "name": "chain",
                  "params": [
                    {
                      "name": "arguments",
                      "description": "<p>Chain together multiple sound objects</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5.Effect",
                  "module": "p5.sound"
                },
                "drywet": {
                  "name": "drywet",
                  "params": [
                    {
                      "name": "fade",
                      "description": "<p>The desired drywet value (0 - 1.0)</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Effect",
                  "module": "p5.sound"
                },
                "connect": {
                  "name": "connect",
                  "params": [
                    {
                      "name": "unit",
                      "description": "",
                      "type": "Object"
                    }
                  ],
                  "class": "p5.Effect",
                  "module": "p5.sound"
                },
                "disconnect": {
                  "name": "disconnect",
                  "class": "p5.Effect",
                  "module": "p5.sound"
                }
              },
              "p5.Filter": {
                "biquadFilter": {
                  "name": "biquadFilter",
                  "class": "p5.Filter",
                  "module": "p5.sound"
                },
                "process": {
                  "name": "process",
                  "params": [
                    {
                      "name": "Signal",
                      "description": "<p>An object that outputs audio</p>\n",
                      "type": "Object"
                    },
                    {
                      "name": "freq",
                      "description": "<p>Frequency in Hz, from 10 to 22050</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "res",
                      "description": "<p>Resonance/Width of the filter frequency\n                      from 0.001 to 1000</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Filter",
                  "module": "p5.sound"
                },
                "set": {
                  "name": "set",
                  "params": [
                    {
                      "name": "freq",
                      "description": "<p>Frequency in Hz, from 10 to 22050</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "res",
                      "description": "<p>Resonance (Q) from 0.001 to 1000</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "timeFromNow",
                      "description": "<p>schedule this event to happen\n                              seconds from now</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Filter",
                  "module": "p5.sound"
                },
                "freq": {
                  "name": "freq",
                  "params": [
                    {
                      "name": "freq",
                      "description": "<p>Filter Frequency</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "timeFromNow",
                      "description": "<p>schedule this event to happen\n                              seconds from now</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Filter",
                  "module": "p5.sound"
                },
                "res": {
                  "name": "res",
                  "params": [
                    {
                      "name": "res",
                      "description": "<p>Resonance/Width of filter freq\n                     from 0.001 to 1000</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "timeFromNow",
                      "description": "<p>schedule this event to happen\n                              seconds from now</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Filter",
                  "module": "p5.sound"
                },
                "gain": {
                  "name": "gain",
                  "params": [
                    {
                      "name": "gain",
                      "description": "",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Filter",
                  "module": "p5.sound"
                },
                "toggle": {
                  "name": "toggle",
                  "class": "p5.Filter",
                  "module": "p5.sound"
                },
                "setType": {
                  "name": "setType",
                  "params": [
                    {
                      "name": "t",
                      "description": "",
                      "type": "String"
                    }
                  ],
                  "class": "p5.Filter",
                  "module": "p5.sound"
                }
              },
              "p5.EQ": {
                "bands": {
                  "name": "bands",
                  "class": "p5.EQ",
                  "module": "p5.sound"
                },
                "process": {
                  "name": "process",
                  "params": [
                    {
                      "name": "src",
                      "description": "<p>Audio source</p>\n",
                      "type": "Object"
                    }
                  ],
                  "class": "p5.EQ",
                  "module": "p5.sound"
                }
              },
              "p5.Panner3D": {
                "panner": {
                  "name": "panner",
                  "class": "p5.Panner3D",
                  "module": "p5.sound"
                },
                "process": {
                  "name": "process",
                  "params": [
                    {
                      "name": "src",
                      "description": "<p>Input source</p>\n",
                      "type": "Object"
                    }
                  ],
                  "class": "p5.Panner3D",
                  "module": "p5.sound"
                },
                "set": {
                  "name": "set",
                  "params": [
                    {
                      "name": "xVal",
                      "description": "",
                      "type": "Number"
                    },
                    {
                      "name": "yVal",
                      "description": "",
                      "type": "Number"
                    },
                    {
                      "name": "zVal",
                      "description": "",
                      "type": "Number"
                    },
                    {
                      "name": "time",
                      "description": "",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Panner3D",
                  "module": "p5.sound"
                },
                "positionX": {
                  "name": "positionX",
                  "class": "p5.Panner3D",
                  "module": "p5.sound"
                },
                "positionY": {
                  "name": "positionY",
                  "class": "p5.Panner3D",
                  "module": "p5.sound"
                },
                "positionZ": {
                  "name": "positionZ",
                  "class": "p5.Panner3D",
                  "module": "p5.sound"
                },
                "orient": {
                  "name": "orient",
                  "params": [
                    {
                      "name": "xVal",
                      "description": "",
                      "type": "Number"
                    },
                    {
                      "name": "yVal",
                      "description": "",
                      "type": "Number"
                    },
                    {
                      "name": "zVal",
                      "description": "",
                      "type": "Number"
                    },
                    {
                      "name": "time",
                      "description": "",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Panner3D",
                  "module": "p5.sound"
                },
                "orientX": {
                  "name": "orientX",
                  "class": "p5.Panner3D",
                  "module": "p5.sound"
                },
                "orientY": {
                  "name": "orientY",
                  "class": "p5.Panner3D",
                  "module": "p5.sound"
                },
                "orientZ": {
                  "name": "orientZ",
                  "class": "p5.Panner3D",
                  "module": "p5.sound"
                },
                "setFalloff": {
                  "name": "setFalloff",
                  "params": [
                    {
                      "name": "maxDistance",
                      "description": "",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "rolloffFactor",
                      "description": "",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Panner3D",
                  "module": "p5.sound"
                },
                "maxDist": {
                  "name": "maxDist",
                  "params": [
                    {
                      "name": "maxDistance",
                      "description": "",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Panner3D",
                  "module": "p5.sound"
                },
                "rollof": {
                  "name": "rollof",
                  "params": [
                    {
                      "name": "rolloffFactor",
                      "description": "",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Panner3D",
                  "module": "p5.sound"
                }
              },
              "p5.Delay": {
                "leftDelay": {
                  "name": "leftDelay",
                  "class": "p5.Delay",
                  "module": "p5.sound"
                },
                "rightDelay": {
                  "name": "rightDelay",
                  "class": "p5.Delay",
                  "module": "p5.sound"
                },
                "process": {
                  "name": "process",
                  "params": [
                    {
                      "name": "Signal",
                      "description": "<p>An object that outputs audio</p>\n",
                      "type": "Object"
                    },
                    {
                      "name": "delayTime",
                      "description": "<p>Time (in seconds) of the delay/echo.\n                             Some browsers limit delayTime to\n                             1 second.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "feedback",
                      "description": "<p>sends the delay back through itself\n                             in a loop that decreases in volume\n                             each time.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "lowPass",
                      "description": "<p>Cutoff frequency. Only frequencies\n                             below the lowPass will be part of the\n                             delay.</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Delay",
                  "module": "p5.sound"
                },
                "delayTime": {
                  "name": "delayTime",
                  "params": [
                    {
                      "name": "delayTime",
                      "description": "<p>Time (in seconds) of the delay</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Delay",
                  "module": "p5.sound"
                },
                "feedback": {
                  "name": "feedback",
                  "params": [
                    {
                      "name": "feedback",
                      "description": "<p>0.0 to 1.0, or an object such as an\n                                Oscillator that can be used to\n                                modulate this param</p>\n",
                      "type": "Number|Object"
                    }
                  ],
                  "class": "p5.Delay",
                  "module": "p5.sound"
                },
                "filter": {
                  "name": "filter",
                  "params": [
                    {
                      "name": "cutoffFreq",
                      "description": "<p>A lowpass filter will cut off any\n                            frequencies higher than the filter frequency.</p>\n",
                      "type": "Number|Object"
                    },
                    {
                      "name": "res",
                      "description": "<p>Resonance of the filter frequency\n                            cutoff, or an object (i.e. a p5.Oscillator)\n                            that can be used to modulate this parameter.\n                            High numbers (i.e. 15) will produce a resonance,\n                            low numbers (i.e. .2) will produce a slope.</p>\n",
                      "type": "Number|Object"
                    }
                  ],
                  "class": "p5.Delay",
                  "module": "p5.sound"
                },
                "setType": {
                  "name": "setType",
                  "params": [
                    {
                      "name": "type",
                      "description": "<p>'pingPong' (1) or 'default' (0)</p>\n",
                      "type": "String|Number"
                    }
                  ],
                  "class": "p5.Delay",
                  "module": "p5.sound"
                },
                "amp": {
                  "name": "amp",
                  "params": [
                    {
                      "name": "volume",
                      "description": "<p>amplitude between 0 and 1.0</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "rampTime",
                      "description": "<p>create a fade that lasts rampTime</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "timeFromNow",
                      "description": "<p>schedule this event to happen\n                              seconds from now</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Delay",
                  "module": "p5.sound"
                },
                "connect": {
                  "name": "connect",
                  "params": [
                    {
                      "name": "unit",
                      "description": "",
                      "type": "Object"
                    }
                  ],
                  "class": "p5.Delay",
                  "module": "p5.sound"
                },
                "disconnect": {
                  "name": "disconnect",
                  "class": "p5.Delay",
                  "module": "p5.sound"
                }
              },
              "p5.Reverb": {
                "process": {
                  "name": "process",
                  "params": [
                    {
                      "name": "src",
                      "description": "<p>p5.sound / Web Audio object with a sound\n                         output.</p>\n",
                      "type": "Object"
                    },
                    {
                      "name": "seconds",
                      "description": "<p>Duration of the reverb, in seconds.\n                         Min: 0, Max: 10. Defaults to 3.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "decayRate",
                      "description": "<p>Percentage of decay with each echo.\n                          Min: 0, Max: 100. Defaults to 2.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "reverse",
                      "description": "<p>Play the reverb backwards or forwards.</p>\n",
                      "type": "Boolean",
                      "optional": true
                    }
                  ],
                  "class": "p5.Reverb",
                  "module": "p5.sound"
                },
                "set": {
                  "name": "set",
                  "params": [
                    {
                      "name": "seconds",
                      "description": "<p>Duration of the reverb, in seconds.\n                         Min: 0, Max: 10. Defaults to 3.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "decayRate",
                      "description": "<p>Percentage of decay with each echo.\n                          Min: 0, Max: 100. Defaults to 2.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "reverse",
                      "description": "<p>Play the reverb backwards or forwards.</p>\n",
                      "type": "Boolean",
                      "optional": true
                    }
                  ],
                  "class": "p5.Reverb",
                  "module": "p5.sound"
                },
                "amp": {
                  "name": "amp",
                  "params": [
                    {
                      "name": "volume",
                      "description": "<p>amplitude between 0 and 1.0</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "rampTime",
                      "description": "<p>create a fade that lasts rampTime</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "timeFromNow",
                      "description": "<p>schedule this event to happen\n                              seconds from now</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Reverb",
                  "module": "p5.sound"
                },
                "connect": {
                  "name": "connect",
                  "params": [
                    {
                      "name": "unit",
                      "description": "",
                      "type": "Object"
                    }
                  ],
                  "class": "p5.Reverb",
                  "module": "p5.sound"
                },
                "disconnect": {
                  "name": "disconnect",
                  "class": "p5.Reverb",
                  "module": "p5.sound"
                }
              },
              "p5.Convolver": {
                "convolverNode": {
                  "name": "convolverNode",
                  "class": "p5.Convolver",
                  "module": "p5.sound"
                },
                "impulses": {
                  "name": "impulses",
                  "class": "p5.Convolver",
                  "module": "p5.sound"
                },
                "process": {
                  "name": "process",
                  "params": [
                    {
                      "name": "src",
                      "description": "<p>p5.sound / Web Audio object with a sound\n                         output.</p>\n",
                      "type": "Object"
                    }
                  ],
                  "class": "p5.Convolver",
                  "module": "p5.sound"
                },
                "addImpulse": {
                  "name": "addImpulse",
                  "params": [
                    {
                      "name": "path",
                      "description": "<p>path to a sound file</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "callback",
                      "description": "<p>function (optional)</p>\n",
                      "type": "Function"
                    },
                    {
                      "name": "errorCallback",
                      "description": "<p>function (optional)</p>\n",
                      "type": "Function"
                    }
                  ],
                  "class": "p5.Convolver",
                  "module": "p5.sound"
                },
                "resetImpulse": {
                  "name": "resetImpulse",
                  "params": [
                    {
                      "name": "path",
                      "description": "<p>path to a sound file</p>\n",
                      "type": "String"
                    },
                    {
                      "name": "callback",
                      "description": "<p>function (optional)</p>\n",
                      "type": "Function"
                    },
                    {
                      "name": "errorCallback",
                      "description": "<p>function (optional)</p>\n",
                      "type": "Function"
                    }
                  ],
                  "class": "p5.Convolver",
                  "module": "p5.sound"
                },
                "toggleImpulse": {
                  "name": "toggleImpulse",
                  "params": [
                    {
                      "name": "id",
                      "description": "<p>Identify the impulse by its original filename\n                          (String), or by its position in the\n                          <code>.impulses</code> Array (Number).</p>\n",
                      "type": "String|Number"
                    }
                  ],
                  "class": "p5.Convolver",
                  "module": "p5.sound"
                }
              },
              "p5.Phrase": {
                "sequence": {
                  "name": "sequence",
                  "class": "p5.Phrase",
                  "module": "p5.sound"
                }
              },
              "p5.Part": {
                "setBPM": {
                  "name": "setBPM",
                  "params": [
                    {
                      "name": "BPM",
                      "description": "<p>Beats Per Minute</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "rampTime",
                      "description": "<p>Seconds from now</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Part",
                  "module": "p5.sound"
                },
                "getBPM": {
                  "name": "getBPM",
                  "class": "p5.Part",
                  "module": "p5.sound"
                },
                "start": {
                  "name": "start",
                  "params": [
                    {
                      "name": "time",
                      "description": "<p>seconds from now</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Part",
                  "module": "p5.sound"
                },
                "loop": {
                  "name": "loop",
                  "params": [
                    {
                      "name": "time",
                      "description": "<p>seconds from now</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Part",
                  "module": "p5.sound"
                },
                "noLoop": {
                  "name": "noLoop",
                  "class": "p5.Part",
                  "module": "p5.sound"
                },
                "stop": {
                  "name": "stop",
                  "params": [
                    {
                      "name": "time",
                      "description": "<p>seconds from now</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Part",
                  "module": "p5.sound"
                },
                "pause": {
                  "name": "pause",
                  "params": [
                    {
                      "name": "time",
                      "description": "<p>seconds from now</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Part",
                  "module": "p5.sound"
                },
                "addPhrase": {
                  "name": "addPhrase",
                  "params": [
                    {
                      "name": "phrase",
                      "description": "<p>reference to a p5.Phrase</p>\n",
                      "type": "p5.Phrase"
                    }
                  ],
                  "class": "p5.Part",
                  "module": "p5.sound"
                },
                "removePhrase": {
                  "name": "removePhrase",
                  "params": [
                    {
                      "name": "phraseName",
                      "description": "",
                      "type": "String"
                    }
                  ],
                  "class": "p5.Part",
                  "module": "p5.sound"
                },
                "getPhrase": {
                  "name": "getPhrase",
                  "params": [
                    {
                      "name": "phraseName",
                      "description": "",
                      "type": "String"
                    }
                  ],
                  "class": "p5.Part",
                  "module": "p5.sound"
                },
                "replaceSequence": {
                  "name": "replaceSequence",
                  "params": [
                    {
                      "name": "phraseName",
                      "description": "",
                      "type": "String"
                    },
                    {
                      "name": "sequence",
                      "description": "<p>Array of values to pass into the callback\n                          at each step of the phrase.</p>\n",
                      "type": "Array"
                    }
                  ],
                  "class": "p5.Part",
                  "module": "p5.sound"
                },
                "onStep": {
                  "name": "onStep",
                  "params": [
                    {
                      "name": "callback",
                      "description": "<p>The name of the callback\n                            you want to fire\n                            on every beat/tatum.</p>\n",
                      "type": "Function"
                    }
                  ],
                  "class": "p5.Part",
                  "module": "p5.sound"
                }
              },
              "p5.Score": {
                "start": {
                  "name": "start",
                  "class": "p5.Score",
                  "module": "p5.sound"
                },
                "stop": {
                  "name": "stop",
                  "class": "p5.Score",
                  "module": "p5.sound"
                },
                "pause": {
                  "name": "pause",
                  "class": "p5.Score",
                  "module": "p5.sound"
                },
                "loop": {
                  "name": "loop",
                  "class": "p5.Score",
                  "module": "p5.sound"
                },
                "noLoop": {
                  "name": "noLoop",
                  "class": "p5.Score",
                  "module": "p5.sound"
                },
                "setBPM": {
                  "name": "setBPM",
                  "params": [
                    {
                      "name": "BPM",
                      "description": "<p>Beats Per Minute</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "rampTime",
                      "description": "<p>Seconds from now</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Score",
                  "module": "p5.sound"
                }
              },
              "p5.SoundLoop": {
                "bpm": {
                  "name": "bpm",
                  "class": "p5.SoundLoop",
                  "module": "p5.sound"
                },
                "timeSignature": {
                  "name": "timeSignature",
                  "class": "p5.SoundLoop",
                  "module": "p5.sound"
                },
                "interval": {
                  "name": "interval",
                  "class": "p5.SoundLoop",
                  "module": "p5.sound"
                },
                "iterations": {
                  "name": "iterations",
                  "class": "p5.SoundLoop",
                  "module": "p5.sound"
                },
                "musicalTimeMode": {
                  "name": "musicalTimeMode",
                  "class": "p5.SoundLoop",
                  "module": "p5.sound"
                },
                "maxIterations": {
                  "name": "maxIterations",
                  "class": "p5.SoundLoop",
                  "module": "p5.sound"
                },
                "start": {
                  "name": "start",
                  "params": [
                    {
                      "name": "timeFromNow",
                      "description": "<p>schedule a starting time</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.SoundLoop",
                  "module": "p5.sound"
                },
                "stop": {
                  "name": "stop",
                  "params": [
                    {
                      "name": "timeFromNow",
                      "description": "<p>schedule a stopping time</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.SoundLoop",
                  "module": "p5.sound"
                },
                "pause": {
                  "name": "pause",
                  "params": [
                    {
                      "name": "timeFromNow",
                      "description": "<p>schedule a pausing time</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.SoundLoop",
                  "module": "p5.sound"
                },
                "syncedStart": {
                  "name": "syncedStart",
                  "params": [
                    {
                      "name": "otherLoop",
                      "description": "<p>a p5.SoundLoop to sync with</p>\n",
                      "type": "Object"
                    },
                    {
                      "name": "timeFromNow",
                      "description": "<p>Start the loops in sync after timeFromNow seconds</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.SoundLoop",
                  "module": "p5.sound"
                }
              },
              "p5.Compressor": {
                "compressor": {
                  "name": "compressor",
                  "class": "p5.Compressor",
                  "module": "p5.sound"
                },
                "process": {
                  "name": "process",
                  "params": [
                    {
                      "name": "src",
                      "description": "<p>Sound source to be connected</p>\n",
                      "type": "Object"
                    },
                    {
                      "name": "attack",
                      "description": "<p>The amount of time (in seconds) to reduce the gain by 10dB,\n                           default = .003, range 0 - 1</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "knee",
                      "description": '<p>A decibel value representing the range above the\n                           threshold where the curve smoothly transitions to the "ratio" portion.\n                           default = 30, range 0 - 40</p>\n',
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "ratio",
                      "description": "<p>The amount of dB change in input for a 1 dB change in output\n                           default = 12, range 1 - 20</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "threshold",
                      "description": "<p>The decibel value above which the compression will start taking effect\n                           default = -24, range -100 - 0</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "release",
                      "description": "<p>The amount of time (in seconds) to increase the gain by 10dB\n                           default = .25, range 0 - 1</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Compressor",
                  "module": "p5.sound"
                },
                "set": {
                  "name": "set",
                  "params": [
                    {
                      "name": "attack",
                      "description": "<p>The amount of time (in seconds) to reduce the gain by 10dB,\n                           default = .003, range 0 - 1</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "knee",
                      "description": '<p>A decibel value representing the range above the\n                           threshold where the curve smoothly transitions to the "ratio" portion.\n                           default = 30, range 0 - 40</p>\n',
                      "type": "Number"
                    },
                    {
                      "name": "ratio",
                      "description": "<p>The amount of dB change in input for a 1 dB change in output\n                           default = 12, range 1 - 20</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "threshold",
                      "description": "<p>The decibel value above which the compression will start taking effect\n                           default = -24, range -100 - 0</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "release",
                      "description": "<p>The amount of time (in seconds) to increase the gain by 10dB\n                           default = .25, range 0 - 1</p>\n",
                      "type": "Number"
                    }
                  ],
                  "class": "p5.Compressor",
                  "module": "p5.sound"
                },
                "attack": {
                  "name": "attack",
                  "params": [
                    {
                      "name": "attack",
                      "description": "<p>Attack is the amount of time (in seconds) to reduce the gain by 10dB,\n                         default = .003, range 0 - 1</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "time",
                      "description": "<p>Assign time value to schedule the change in value</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Compressor",
                  "module": "p5.sound"
                },
                "knee": {
                  "name": "knee",
                  "params": [
                    {
                      "name": "knee",
                      "description": '<p>A decibel value representing the range above the\n                       threshold where the curve smoothly transitions to the "ratio" portion.\n                       default = 30, range 0 - 40</p>\n',
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "time",
                      "description": "<p>Assign time value to schedule the change in value</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Compressor",
                  "module": "p5.sound"
                },
                "ratio": {
                  "name": "ratio",
                  "params": [
                    {
                      "name": "ratio",
                      "description": "<p>The amount of dB change in input for a 1 dB change in output\n                           default = 12, range 1 - 20</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "time",
                      "description": "<p>Assign time value to schedule the change in value</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Compressor",
                  "module": "p5.sound"
                },
                "threshold": {
                  "name": "threshold",
                  "params": [
                    {
                      "name": "threshold",
                      "description": "<p>The decibel value above which the compression will start taking effect\n                           default = -24, range -100 - 0</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "time",
                      "description": "<p>Assign time value to schedule the change in value</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Compressor",
                  "module": "p5.sound"
                },
                "release": {
                  "name": "release",
                  "params": [
                    {
                      "name": "release",
                      "description": "<p>The amount of time (in seconds) to increase the gain by 10dB\n                           default = .25, range 0 - 1</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "time",
                      "description": "<p>Assign time value to schedule the change in value</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Compressor",
                  "module": "p5.sound"
                },
                "reduction": {
                  "name": "reduction",
                  "class": "p5.Compressor",
                  "module": "p5.sound"
                }
              },
              "p5.PeakDetect": {
                "isDetected": {
                  "name": "isDetected",
                  "class": "p5.PeakDetect",
                  "module": "p5.sound"
                },
                "update": {
                  "name": "update",
                  "params": [
                    {
                      "name": "fftObject",
                      "description": "<p>A p5.FFT object</p>\n",
                      "type": "p5.FFT"
                    }
                  ],
                  "class": "p5.PeakDetect",
                  "module": "p5.sound"
                },
                "onPeak": {
                  "name": "onPeak",
                  "params": [
                    {
                      "name": "callback",
                      "description": "<p>Name of a function that will\n                            be called when a peak is\n                            detected.</p>\n",
                      "type": "Function"
                    },
                    {
                      "name": "val",
                      "description": "<p>Optional value to pass\n                            into the function when\n                            a peak is detected.</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5.PeakDetect",
                  "module": "p5.sound"
                }
              },
              "p5.SoundRecorder": {
                "setInput": {
                  "name": "setInput",
                  "params": [
                    {
                      "name": "unit",
                      "description": "<p>p5.sound object or a web audio unit\n                       that outputs sound</p>\n",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "class": "p5.SoundRecorder",
                  "module": "p5.sound"
                },
                "record": {
                  "name": "record",
                  "params": [
                    {
                      "name": "soundFile",
                      "description": "<p>p5.SoundFile</p>\n",
                      "type": "p5.SoundFile"
                    },
                    {
                      "name": "duration",
                      "description": "<p>Time (in seconds)</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "description": "<p>The name of a function that will be\n                              called once the recording completes</p>\n",
                      "type": "Function",
                      "optional": true
                    }
                  ],
                  "class": "p5.SoundRecorder",
                  "module": "p5.sound"
                },
                "stop": {
                  "name": "stop",
                  "class": "p5.SoundRecorder",
                  "module": "p5.sound"
                }
              },
              "p5.Distortion": {
                "WaveShaperNode": {
                  "name": "WaveShaperNode",
                  "class": "p5.Distortion",
                  "module": "p5.sound"
                },
                "process": {
                  "name": "process",
                  "params": [
                    {
                      "name": "amount",
                      "description": "<p>Unbounded distortion amount.\n                               Normal values range from 0-1.</p>\n",
                      "type": "Number",
                      "optional": true,
                      "optdefault": "0.25"
                    },
                    {
                      "name": "oversample",
                      "description": "<p>'none', '2x', or '4x'.</p>\n",
                      "type": "String",
                      "optional": true,
                      "optdefault": "'none'"
                    }
                  ],
                  "class": "p5.Distortion",
                  "module": "p5.sound"
                },
                "set": {
                  "name": "set",
                  "params": [
                    {
                      "name": "amount",
                      "description": "<p>Unbounded distortion amount.\n                               Normal values range from 0-1.</p>\n",
                      "type": "Number",
                      "optional": true,
                      "optdefault": "0.25"
                    },
                    {
                      "name": "oversample",
                      "description": "<p>'none', '2x', or '4x'.</p>\n",
                      "type": "String",
                      "optional": true,
                      "optdefault": "'none'"
                    }
                  ],
                  "class": "p5.Distortion",
                  "module": "p5.sound"
                },
                "getAmount": {
                  "name": "getAmount",
                  "class": "p5.Distortion",
                  "module": "p5.sound"
                },
                "getOversample": {
                  "name": "getOversample",
                  "class": "p5.Distortion",
                  "module": "p5.sound"
                }
              },
              "p5.Gain": {
                "setInput": {
                  "name": "setInput",
                  "params": [
                    {
                      "name": "src",
                      "description": "<p>p5.sound / Web Audio object with a sound\n                         output.</p>\n",
                      "type": "Object"
                    }
                  ],
                  "class": "p5.Gain",
                  "module": "p5.sound"
                },
                "connect": {
                  "name": "connect",
                  "params": [
                    {
                      "name": "unit",
                      "description": "",
                      "type": "Object"
                    }
                  ],
                  "class": "p5.Gain",
                  "module": "p5.sound"
                },
                "disconnect": {
                  "name": "disconnect",
                  "class": "p5.Gain",
                  "module": "p5.sound"
                },
                "amp": {
                  "name": "amp",
                  "params": [
                    {
                      "name": "volume",
                      "description": "<p>amplitude between 0 and 1.0</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "rampTime",
                      "description": "<p>create a fade that lasts rampTime</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "timeFromNow",
                      "description": "<p>schedule this event to happen\n                              seconds from now</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.Gain",
                  "module": "p5.sound"
                }
              },
              "p5.AudioVoice": {
                "connect": {
                  "name": "connect",
                  "params": [
                    {
                      "name": "unit",
                      "description": "",
                      "type": "Object"
                    }
                  ],
                  "class": "p5.AudioVoice",
                  "module": "p5.sound"
                },
                "disconnect": {
                  "name": "disconnect",
                  "class": "p5.AudioVoice",
                  "module": "p5.sound"
                }
              },
              "p5.MonoSynth": {
                "attack": {
                  "name": "attack",
                  "class": "p5.MonoSynth",
                  "module": "p5.sound"
                },
                "decay": {
                  "name": "decay",
                  "class": "p5.MonoSynth",
                  "module": "p5.sound"
                },
                "sustain": {
                  "name": "sustain",
                  "class": "p5.MonoSynth",
                  "module": "p5.sound"
                },
                "release": {
                  "name": "release",
                  "class": "p5.MonoSynth",
                  "module": "p5.sound"
                },
                "play": {
                  "name": "play",
                  "params": [
                    {
                      "name": "note",
                      "description": '<p>the note you want to play, specified as a\n                               frequency in Hertz (Number) or as a midi\n                               value in Note/Octave format ("C4", "Eb3"...etc")\n                               See <a href = "https://github.com/Tonejs/Tone.js/wiki/Instruments">\n                               Tone</a>. Defaults to 440 hz.</p>\n',
                      "type": "String | Number"
                    },
                    {
                      "name": "velocity",
                      "description": "<p>velocity of the note to play (ranging from 0 to 1)</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "secondsFromNow",
                      "description": "<p>time from now (in seconds) at which to play</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "sustainTime",
                      "description": "<p>time to sustain before releasing the envelope. Defaults to 0.15 seconds.</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.MonoSynth",
                  "module": "p5.sound"
                },
                "triggerAttack": {
                  "params": [
                    {
                      "name": "note",
                      "description": '<p>the note you want to play, specified as a\n                               frequency in Hertz (Number) or as a midi\n                               value in Note/Octave format ("C4", "Eb3"...etc")\n                               See <a href = "https://github.com/Tonejs/Tone.js/wiki/Instruments">\n                               Tone</a>. Defaults to 440 hz</p>\n',
                      "type": "String | Number"
                    },
                    {
                      "name": "velocity",
                      "description": "<p>velocity of the note to play (ranging from 0 to 1)</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "secondsFromNow",
                      "description": "<p>time from now (in seconds) at which to play</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "name": "triggerAttack",
                  "class": "p5.MonoSynth",
                  "module": "p5.sound"
                },
                "triggerRelease": {
                  "params": [
                    {
                      "name": "secondsFromNow",
                      "description": "<p>time to trigger the release</p>\n",
                      "type": "Number"
                    }
                  ],
                  "name": "triggerRelease",
                  "class": "p5.MonoSynth",
                  "module": "p5.sound"
                },
                "setADSR": {
                  "name": "setADSR",
                  "params": [
                    {
                      "name": "attackTime",
                      "description": "<p>Time (in seconds before envelope\n                              reaches Attack Level</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "decayTime",
                      "description": "<p>Time (in seconds) before envelope\n                              reaches Decay/Sustain Level</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "susRatio",
                      "description": "<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\n                              where 1.0 = attackLevel, 0.0 = releaseLevel.\n                              The susRatio determines the decayLevel and the level at which the\n                              sustain portion of the envelope will sustain.\n                              For example, if attackLevel is 0.4, releaseLevel is 0,\n                              and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\n                              increased to 1.0 (using <code>setRange</code>),\n                              then decayLevel would increase proportionally, to become 0.5.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "releaseTime",
                      "description": "<p>Time in seconds from now (defaults to 0)</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.MonoSynth",
                  "module": "p5.sound"
                },
                "amp": {
                  "name": "amp",
                  "params": [
                    {
                      "name": "vol",
                      "description": "<p>desired volume</p>\n",
                      "type": "Number"
                    },
                    {
                      "name": "rampTime",
                      "description": "<p>Time to reach new volume</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.MonoSynth",
                  "module": "p5.sound"
                },
                "connect": {
                  "name": "connect",
                  "params": [
                    {
                      "name": "unit",
                      "description": "<p>A p5.sound or Web Audio object</p>\n",
                      "type": "Object"
                    }
                  ],
                  "class": "p5.MonoSynth",
                  "module": "p5.sound"
                },
                "disconnect": {
                  "name": "disconnect",
                  "class": "p5.MonoSynth",
                  "module": "p5.sound"
                },
                "dispose": {
                  "name": "dispose",
                  "class": "p5.MonoSynth",
                  "module": "p5.sound"
                }
              },
              "p5.PolySynth": {
                "notes": {
                  "name": "notes",
                  "class": "p5.PolySynth",
                  "module": "p5.sound"
                },
                "polyvalue": {
                  "name": "polyvalue",
                  "class": "p5.PolySynth",
                  "module": "p5.sound"
                },
                "AudioVoice": {
                  "name": "AudioVoice",
                  "class": "p5.PolySynth",
                  "module": "p5.sound"
                },
                "play": {
                  "name": "play",
                  "params": [
                    {
                      "name": "note",
                      "description": "<p>midi note to play (ranging from 0 to 127 - 60 being a middle C)</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "velocity",
                      "description": "<p>velocity of the note to play (ranging from 0 to 1)</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "secondsFromNow",
                      "description": "<p>time from now (in seconds) at which to play</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "sustainTime",
                      "description": "<p>time to sustain before releasing the envelope</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.PolySynth",
                  "module": "p5.sound"
                },
                "noteADSR": {
                  "name": "noteADSR",
                  "params": [
                    {
                      "name": "note",
                      "description": "<p>Midi note on which ADSR should be set.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "attackTime",
                      "description": "<p>Time (in seconds before envelope\n                              reaches Attack Level</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "decayTime",
                      "description": "<p>Time (in seconds) before envelope\n                              reaches Decay/Sustain Level</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "susRatio",
                      "description": "<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\n                              where 1.0 = attackLevel, 0.0 = releaseLevel.\n                              The susRatio determines the decayLevel and the level at which the\n                              sustain portion of the envelope will sustain.\n                              For example, if attackLevel is 0.4, releaseLevel is 0,\n                              and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\n                              increased to 1.0 (using <code>setRange</code>),\n                              then decayLevel would increase proportionally, to become 0.5.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "releaseTime",
                      "description": "<p>Time in seconds from now (defaults to 0)</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.PolySynth",
                  "module": "p5.sound"
                },
                "setADSR": {
                  "name": "setADSR",
                  "params": [
                    {
                      "name": "attackTime",
                      "description": "<p>Time (in seconds before envelope\n                               reaches Attack Level</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "decayTime",
                      "description": "<p>Time (in seconds) before envelope\n                               reaches Decay/Sustain Level</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "susRatio",
                      "description": "<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\n                               where 1.0 = attackLevel, 0.0 = releaseLevel.\n                               The susRatio determines the decayLevel and the level at which the\n                               sustain portion of the envelope will sustain.\n                               For example, if attackLevel is 0.4, releaseLevel is 0,\n                               and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\n                               increased to 1.0 (using <code>setRange</code>),\n                               then decayLevel would increase proportionally, to become 0.5.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "releaseTime",
                      "description": "<p>Time in seconds from now (defaults to 0)</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.PolySynth",
                  "module": "p5.sound"
                },
                "noteAttack": {
                  "name": "noteAttack",
                  "params": [
                    {
                      "name": "note",
                      "description": "<p>midi note on which attack should be triggered.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "velocity",
                      "description": "<p>velocity of the note to play (ranging from 0 to 1)/</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "secondsFromNow",
                      "description": "<p>time from now (in seconds)</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.PolySynth",
                  "module": "p5.sound"
                },
                "noteRelease": {
                  "name": "noteRelease",
                  "params": [
                    {
                      "name": "note",
                      "description": "<p>midi note on which attack should be triggered.\n                                  If no value is provided, all notes will be released.</p>\n",
                      "type": "Number",
                      "optional": true
                    },
                    {
                      "name": "secondsFromNow",
                      "description": "<p>time to trigger the release</p>\n",
                      "type": "Number",
                      "optional": true
                    }
                  ],
                  "class": "p5.PolySynth",
                  "module": "p5.sound"
                },
                "connect": {
                  "name": "connect",
                  "params": [
                    {
                      "name": "unit",
                      "description": "<p>A p5.sound or Web Audio object</p>\n",
                      "type": "Object"
                    }
                  ],
                  "class": "p5.PolySynth",
                  "module": "p5.sound"
                },
                "disconnect": {
                  "name": "disconnect",
                  "class": "p5.PolySynth",
                  "module": "p5.sound"
                },
                "dispose": {
                  "name": "dispose",
                  "class": "p5.PolySynth",
                  "module": "p5.sound"
                }
              }
            };
          },
          {}
        ],
        2: [
          function(_dereq_2, module2, exports2) {
            function _arrayWithHoles(arr) {
              if (Array.isArray(arr))
                return arr;
            }
            module2.exports = _arrayWithHoles;
          },
          {}
        ],
        3: [
          function(_dereq_2, module2, exports2) {
            function _arrayWithoutHoles2(arr) {
              if (Array.isArray(arr)) {
                for (var i2 = 0, arr2 = new Array(arr.length); i2 < arr.length; i2++) {
                  arr2[i2] = arr[i2];
                }
                return arr2;
              }
            }
            module2.exports = _arrayWithoutHoles2;
          },
          {}
        ],
        4: [
          function(_dereq_2, module2, exports2) {
            function _assertThisInitialized(self2) {
              if (self2 === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return self2;
            }
            module2.exports = _assertThisInitialized;
          },
          {}
        ],
        5: [
          function(_dereq_2, module2, exports2) {
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            module2.exports = _classCallCheck;
          },
          {}
        ],
        6: [
          function(_dereq_2, module2, exports2) {
            function _defineProperties(target, props) {
              for (var i2 = 0; i2 < props.length; i2++) {
                var descriptor = props[i2];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            module2.exports = _createClass;
          },
          {}
        ],
        7: [
          function(_dereq_2, module2, exports2) {
            function _defineProperty(obj, key2, value) {
              if (key2 in obj) {
                Object.defineProperty(obj, key2, {
                  value,
                  enumerable: true,
                  configurable: true,
                  writable: true
                });
              } else {
                obj[key2] = value;
              }
              return obj;
            }
            module2.exports = _defineProperty;
          },
          {}
        ],
        8: [
          function(_dereq_2, module2, exports2) {
            function _getPrototypeOf(o) {
              module2.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                return o2.__proto__ || Object.getPrototypeOf(o2);
              };
              return _getPrototypeOf(o);
            }
            module2.exports = _getPrototypeOf;
          },
          {}
        ],
        9: [
          function(_dereq_2, module2, exports2) {
            var setPrototypeOf = _dereq_2("./setPrototypeOf");
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass)
                setPrototypeOf(subClass, superClass);
            }
            module2.exports = _inherits;
          },
          {
            "./setPrototypeOf": 16
          }
        ],
        10: [
          function(_dereq_2, module2, exports2) {
            function _iterableToArray2(iter) {
              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]")
                return Array.from(iter);
            }
            module2.exports = _iterableToArray2;
          },
          {}
        ],
        11: [
          function(_dereq_2, module2, exports2) {
            function _iterableToArrayLimit(arr, i2) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = void 0;
              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);
                  if (i2 && _arr.length === i2)
                    break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"] != null)
                    _i["return"]();
                } finally {
                  if (_d)
                    throw _e;
                }
              }
              return _arr;
            }
            module2.exports = _iterableToArrayLimit;
          },
          {}
        ],
        12: [
          function(_dereq_2, module2, exports2) {
            function _nonIterableRest() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
            module2.exports = _nonIterableRest;
          },
          {}
        ],
        13: [
          function(_dereq_2, module2, exports2) {
            function _nonIterableSpread2() {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            }
            module2.exports = _nonIterableSpread2;
          },
          {}
        ],
        14: [
          function(_dereq_2, module2, exports2) {
            var defineProperty = _dereq_2("./defineProperty");
            function _objectSpread(target) {
              for (var i2 = 1; i2 < arguments.length; i2++) {
                var source = arguments[i2] != null ? arguments[i2] : {};
                var ownKeys = Object.keys(source);
                if (typeof Object.getOwnPropertySymbols === "function") {
                  ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                  }));
                }
                ownKeys.forEach(function(key2) {
                  defineProperty(target, key2, source[key2]);
                });
              }
              return target;
            }
            module2.exports = _objectSpread;
          },
          {
            "./defineProperty": 7
          }
        ],
        15: [
          function(_dereq_2, module2, exports2) {
            var _typeof3 = _dereq_2("../helpers/typeof");
            var assertThisInitialized = _dereq_2("./assertThisInitialized");
            function _possibleConstructorReturn(self2, call) {
              if (call && (_typeof3(call) === "object" || typeof call === "function")) {
                return call;
              }
              return assertThisInitialized(self2);
            }
            module2.exports = _possibleConstructorReturn;
          },
          {
            "../helpers/typeof": 19,
            "./assertThisInitialized": 4
          }
        ],
        16: [
          function(_dereq_2, module2, exports2) {
            function _setPrototypeOf(o, p) {
              module2.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return _setPrototypeOf(o, p);
            }
            module2.exports = _setPrototypeOf;
          },
          {}
        ],
        17: [
          function(_dereq_2, module2, exports2) {
            var arrayWithHoles = _dereq_2("./arrayWithHoles");
            var iterableToArrayLimit = _dereq_2("./iterableToArrayLimit");
            var nonIterableRest = _dereq_2("./nonIterableRest");
            function _slicedToArray(arr, i2) {
              return arrayWithHoles(arr) || iterableToArrayLimit(arr, i2) || nonIterableRest();
            }
            module2.exports = _slicedToArray;
          },
          {
            "./arrayWithHoles": 2,
            "./iterableToArrayLimit": 11,
            "./nonIterableRest": 12
          }
        ],
        18: [
          function(_dereq_2, module2, exports2) {
            var arrayWithoutHoles = _dereq_2("./arrayWithoutHoles");
            var iterableToArray = _dereq_2("./iterableToArray");
            var nonIterableSpread = _dereq_2("./nonIterableSpread");
            function _toConsumableArray2(arr) {
              return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
            }
            module2.exports = _toConsumableArray2;
          },
          {
            "./arrayWithoutHoles": 3,
            "./iterableToArray": 10,
            "./nonIterableSpread": 13
          }
        ],
        19: [
          function(_dereq_2, module2, exports2) {
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                module2.exports = _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                module2.exports = _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            module2.exports = _typeof3;
          },
          {}
        ],
        20: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            exports2.byteLength = byteLength;
            exports2.toByteArray = toByteArray;
            exports2.fromByteArray = fromByteArray;
            var lookup = [];
            var revLookup = [];
            var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
            var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            for (var i2 = 0, len = code.length; i2 < len; ++i2) {
              lookup[i2] = code[i2];
              revLookup[code.charCodeAt(i2)] = i2;
            }
            revLookup["-".charCodeAt(0)] = 62;
            revLookup["_".charCodeAt(0)] = 63;
            function getLens(b64) {
              var len2 = b64.length;
              if (len2 % 4 > 0) {
                throw new Error("Invalid string. Length must be a multiple of 4");
              }
              var validLen = b64.indexOf("=");
              if (validLen === -1)
                validLen = len2;
              var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
              return [
                validLen,
                placeHoldersLen
              ];
            }
            function byteLength(b64) {
              var lens = getLens(b64);
              var validLen = lens[0];
              var placeHoldersLen = lens[1];
              return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
            }
            function _byteLength(b64, validLen, placeHoldersLen) {
              return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
            }
            function toByteArray(b64) {
              var tmp;
              var lens = getLens(b64);
              var validLen = lens[0];
              var placeHoldersLen = lens[1];
              var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
              var curByte = 0;
              var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
              var i3;
              for (i3 = 0; i3 < len2; i3 += 4) {
                tmp = revLookup[b64.charCodeAt(i3)] << 18 | revLookup[b64.charCodeAt(i3 + 1)] << 12 | revLookup[b64.charCodeAt(i3 + 2)] << 6 | revLookup[b64.charCodeAt(i3 + 3)];
                arr[curByte++] = tmp >> 16 & 255;
                arr[curByte++] = tmp >> 8 & 255;
                arr[curByte++] = tmp & 255;
              }
              if (placeHoldersLen === 2) {
                tmp = revLookup[b64.charCodeAt(i3)] << 2 | revLookup[b64.charCodeAt(i3 + 1)] >> 4;
                arr[curByte++] = tmp & 255;
              }
              if (placeHoldersLen === 1) {
                tmp = revLookup[b64.charCodeAt(i3)] << 10 | revLookup[b64.charCodeAt(i3 + 1)] << 4 | revLookup[b64.charCodeAt(i3 + 2)] >> 2;
                arr[curByte++] = tmp >> 8 & 255;
                arr[curByte++] = tmp & 255;
              }
              return arr;
            }
            function tripletToBase64(num) {
              return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
            }
            function encodeChunk(uint8, start, end) {
              var tmp;
              var output = [];
              for (var i3 = start; i3 < end; i3 += 3) {
                tmp = (uint8[i3] << 16 & 16711680) + (uint8[i3 + 1] << 8 & 65280) + (uint8[i3 + 2] & 255);
                output.push(tripletToBase64(tmp));
              }
              return output.join("");
            }
            function fromByteArray(uint8) {
              var tmp;
              var len2 = uint8.length;
              var extraBytes = len2 % 3;
              var parts = [];
              var maxChunkLength = 16383;
              for (var i3 = 0, len22 = len2 - extraBytes; i3 < len22; i3 += maxChunkLength) {
                parts.push(encodeChunk(uint8, i3, i3 + maxChunkLength > len22 ? len22 : i3 + maxChunkLength));
              }
              if (extraBytes === 1) {
                tmp = uint8[len2 - 1];
                parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
              } else if (extraBytes === 2) {
                tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
                parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
              }
              return parts.join("");
            }
          },
          {}
        ],
        21: [
          function(_dereq_2, module2, exports2) {
          },
          {}
        ],
        22: [
          function(_dereq_2, module2, exports2) {
            (function(Buffer) {
              "use strict";
              var base64 = _dereq_2("base64-js");
              var ieee754 = _dereq_2("ieee754");
              var customInspectSymbol = typeof Symbol === "function" && typeof Symbol.for === "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
              exports2.Buffer = Buffer;
              exports2.SlowBuffer = SlowBuffer;
              exports2.INSPECT_MAX_BYTES = 50;
              var K_MAX_LENGTH = 2147483647;
              exports2.kMaxLength = K_MAX_LENGTH;
              Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
              if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
                console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
              }
              function typedArraySupport() {
                try {
                  var arr = new Uint8Array(1);
                  var proto = {
                    foo: function() {
                      return 42;
                    }
                  };
                  Object.setPrototypeOf(proto, Uint8Array.prototype);
                  Object.setPrototypeOf(arr, proto);
                  return arr.foo() === 42;
                } catch (e2) {
                  return false;
                }
              }
              Object.defineProperty(Buffer.prototype, "parent", {
                enumerable: true,
                get: function() {
                  if (!Buffer.isBuffer(this))
                    return void 0;
                  return this.buffer;
                }
              });
              Object.defineProperty(Buffer.prototype, "offset", {
                enumerable: true,
                get: function() {
                  if (!Buffer.isBuffer(this))
                    return void 0;
                  return this.byteOffset;
                }
              });
              function createBuffer(length) {
                if (length > K_MAX_LENGTH) {
                  throw new RangeError('The value "' + length + '" is invalid for option "size"');
                }
                var buf = new Uint8Array(length);
                Object.setPrototypeOf(buf, Buffer.prototype);
                return buf;
              }
              function Buffer(arg, encodingOrOffset, length) {
                if (typeof arg === "number") {
                  if (typeof encodingOrOffset === "string") {
                    throw new TypeError('The "string" argument must be of type string. Received type number');
                  }
                  return allocUnsafe(arg);
                }
                return from(arg, encodingOrOffset, length);
              }
              if (typeof Symbol !== "undefined" && Symbol.species != null && Buffer[Symbol.species] === Buffer) {
                Object.defineProperty(Buffer, Symbol.species, {
                  value: null,
                  configurable: true,
                  enumerable: false,
                  writable: false
                });
              }
              Buffer.poolSize = 8192;
              function from(value, encodingOrOffset, length) {
                if (typeof value === "string") {
                  return fromString(value, encodingOrOffset);
                }
                if (ArrayBuffer.isView(value)) {
                  return fromArrayLike(value);
                }
                if (value == null) {
                  throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
                }
                if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
                  return fromArrayBuffer(value, encodingOrOffset, length);
                }
                if (typeof value === "number") {
                  throw new TypeError('The "value" argument must not be of type number. Received type number');
                }
                var valueOf = value.valueOf && value.valueOf();
                if (valueOf != null && valueOf !== value) {
                  return Buffer.from(valueOf, encodingOrOffset, length);
                }
                var b = fromObject(value);
                if (b)
                  return b;
                if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
                  return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
                }
                throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
              }
              Buffer.from = function(value, encodingOrOffset, length) {
                return from(value, encodingOrOffset, length);
              };
              Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
              Object.setPrototypeOf(Buffer, Uint8Array);
              function assertSize(size) {
                if (typeof size !== "number") {
                  throw new TypeError('"size" argument must be of type number');
                } else if (size < 0) {
                  throw new RangeError('The value "' + size + '" is invalid for option "size"');
                }
              }
              function alloc(size, fill, encoding) {
                assertSize(size);
                if (size <= 0) {
                  return createBuffer(size);
                }
                if (fill !== void 0) {
                  return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
                }
                return createBuffer(size);
              }
              Buffer.alloc = function(size, fill, encoding) {
                return alloc(size, fill, encoding);
              };
              function allocUnsafe(size) {
                assertSize(size);
                return createBuffer(size < 0 ? 0 : checked(size) | 0);
              }
              Buffer.allocUnsafe = function(size) {
                return allocUnsafe(size);
              };
              Buffer.allocUnsafeSlow = function(size) {
                return allocUnsafe(size);
              };
              function fromString(string, encoding) {
                if (typeof encoding !== "string" || encoding === "") {
                  encoding = "utf8";
                }
                if (!Buffer.isEncoding(encoding)) {
                  throw new TypeError("Unknown encoding: " + encoding);
                }
                var length = byteLength(string, encoding) | 0;
                var buf = createBuffer(length);
                var actual = buf.write(string, encoding);
                if (actual !== length) {
                  buf = buf.slice(0, actual);
                }
                return buf;
              }
              function fromArrayLike(array) {
                var length = array.length < 0 ? 0 : checked(array.length) | 0;
                var buf = createBuffer(length);
                for (var i2 = 0; i2 < length; i2 += 1) {
                  buf[i2] = array[i2] & 255;
                }
                return buf;
              }
              function fromArrayBuffer(array, byteOffset, length) {
                if (byteOffset < 0 || array.byteLength < byteOffset) {
                  throw new RangeError('"offset" is outside of buffer bounds');
                }
                if (array.byteLength < byteOffset + (length || 0)) {
                  throw new RangeError('"length" is outside of buffer bounds');
                }
                var buf;
                if (byteOffset === void 0 && length === void 0) {
                  buf = new Uint8Array(array);
                } else if (length === void 0) {
                  buf = new Uint8Array(array, byteOffset);
                } else {
                  buf = new Uint8Array(array, byteOffset, length);
                }
                Object.setPrototypeOf(buf, Buffer.prototype);
                return buf;
              }
              function fromObject(obj) {
                if (Buffer.isBuffer(obj)) {
                  var len = checked(obj.length) | 0;
                  var buf = createBuffer(len);
                  if (buf.length === 0) {
                    return buf;
                  }
                  obj.copy(buf, 0, 0, len);
                  return buf;
                }
                if (obj.length !== void 0) {
                  if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
                    return createBuffer(0);
                  }
                  return fromArrayLike(obj);
                }
                if (obj.type === "Buffer" && Array.isArray(obj.data)) {
                  return fromArrayLike(obj.data);
                }
              }
              function checked(length) {
                if (length >= K_MAX_LENGTH) {
                  throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
                }
                return length | 0;
              }
              function SlowBuffer(length) {
                if (+length != length) {
                  length = 0;
                }
                return Buffer.alloc(+length);
              }
              Buffer.isBuffer = function isBuffer(b) {
                return b != null && b._isBuffer === true && b !== Buffer.prototype;
              };
              Buffer.compare = function compare(a, b) {
                if (isInstance(a, Uint8Array))
                  a = Buffer.from(a, a.offset, a.byteLength);
                if (isInstance(b, Uint8Array))
                  b = Buffer.from(b, b.offset, b.byteLength);
                if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                  throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
                }
                if (a === b)
                  return 0;
                var x = a.length;
                var y = b.length;
                for (var i2 = 0, len = Math.min(x, y); i2 < len; ++i2) {
                  if (a[i2] !== b[i2]) {
                    x = a[i2];
                    y = b[i2];
                    break;
                  }
                }
                if (x < y)
                  return -1;
                if (y < x)
                  return 1;
                return 0;
              };
              Buffer.isEncoding = function isEncoding(encoding) {
                switch (String(encoding).toLowerCase()) {
                  case "hex":
                  case "utf8":
                  case "utf-8":
                  case "ascii":
                  case "latin1":
                  case "binary":
                  case "base64":
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return true;
                  default:
                    return false;
                }
              };
              Buffer.concat = function concat(list, length) {
                if (!Array.isArray(list)) {
                  throw new TypeError('"list" argument must be an Array of Buffers');
                }
                if (list.length === 0) {
                  return Buffer.alloc(0);
                }
                var i2;
                if (length === void 0) {
                  length = 0;
                  for (i2 = 0; i2 < list.length; ++i2) {
                    length += list[i2].length;
                  }
                }
                var buffer = Buffer.allocUnsafe(length);
                var pos = 0;
                for (i2 = 0; i2 < list.length; ++i2) {
                  var buf = list[i2];
                  if (isInstance(buf, Uint8Array)) {
                    buf = Buffer.from(buf);
                  }
                  if (!Buffer.isBuffer(buf)) {
                    throw new TypeError('"list" argument must be an Array of Buffers');
                  }
                  buf.copy(buffer, pos);
                  pos += buf.length;
                }
                return buffer;
              };
              function byteLength(string, encoding) {
                if (Buffer.isBuffer(string)) {
                  return string.length;
                }
                if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
                  return string.byteLength;
                }
                if (typeof string !== "string") {
                  throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
                }
                var len = string.length;
                var mustMatch = arguments.length > 2 && arguments[2] === true;
                if (!mustMatch && len === 0)
                  return 0;
                var loweredCase = false;
                for (; ; ) {
                  switch (encoding) {
                    case "ascii":
                    case "latin1":
                    case "binary":
                      return len;
                    case "utf8":
                    case "utf-8":
                      return utf8ToBytes(string).length;
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                      return len * 2;
                    case "hex":
                      return len >>> 1;
                    case "base64":
                      return base64ToBytes(string).length;
                    default:
                      if (loweredCase) {
                        return mustMatch ? -1 : utf8ToBytes(string).length;
                      }
                      encoding = ("" + encoding).toLowerCase();
                      loweredCase = true;
                  }
                }
              }
              Buffer.byteLength = byteLength;
              function slowToString(encoding, start, end) {
                var loweredCase = false;
                if (start === void 0 || start < 0) {
                  start = 0;
                }
                if (start > this.length) {
                  return "";
                }
                if (end === void 0 || end > this.length) {
                  end = this.length;
                }
                if (end <= 0) {
                  return "";
                }
                end >>>= 0;
                start >>>= 0;
                if (end <= start) {
                  return "";
                }
                if (!encoding)
                  encoding = "utf8";
                while (true) {
                  switch (encoding) {
                    case "hex":
                      return hexSlice(this, start, end);
                    case "utf8":
                    case "utf-8":
                      return utf8Slice(this, start, end);
                    case "ascii":
                      return asciiSlice(this, start, end);
                    case "latin1":
                    case "binary":
                      return latin1Slice(this, start, end);
                    case "base64":
                      return base64Slice(this, start, end);
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                      return utf16leSlice(this, start, end);
                    default:
                      if (loweredCase)
                        throw new TypeError("Unknown encoding: " + encoding);
                      encoding = (encoding + "").toLowerCase();
                      loweredCase = true;
                  }
                }
              }
              Buffer.prototype._isBuffer = true;
              function swap(b, n, m) {
                var i2 = b[n];
                b[n] = b[m];
                b[m] = i2;
              }
              Buffer.prototype.swap16 = function swap16() {
                var len = this.length;
                if (len % 2 !== 0) {
                  throw new RangeError("Buffer size must be a multiple of 16-bits");
                }
                for (var i2 = 0; i2 < len; i2 += 2) {
                  swap(this, i2, i2 + 1);
                }
                return this;
              };
              Buffer.prototype.swap32 = function swap32() {
                var len = this.length;
                if (len % 4 !== 0) {
                  throw new RangeError("Buffer size must be a multiple of 32-bits");
                }
                for (var i2 = 0; i2 < len; i2 += 4) {
                  swap(this, i2, i2 + 3);
                  swap(this, i2 + 1, i2 + 2);
                }
                return this;
              };
              Buffer.prototype.swap64 = function swap64() {
                var len = this.length;
                if (len % 8 !== 0) {
                  throw new RangeError("Buffer size must be a multiple of 64-bits");
                }
                for (var i2 = 0; i2 < len; i2 += 8) {
                  swap(this, i2, i2 + 7);
                  swap(this, i2 + 1, i2 + 6);
                  swap(this, i2 + 2, i2 + 5);
                  swap(this, i2 + 3, i2 + 4);
                }
                return this;
              };
              Buffer.prototype.toString = function toString() {
                var length = this.length;
                if (length === 0)
                  return "";
                if (arguments.length === 0)
                  return utf8Slice(this, 0, length);
                return slowToString.apply(this, arguments);
              };
              Buffer.prototype.toLocaleString = Buffer.prototype.toString;
              Buffer.prototype.equals = function equals(b) {
                if (!Buffer.isBuffer(b))
                  throw new TypeError("Argument must be a Buffer");
                if (this === b)
                  return true;
                return Buffer.compare(this, b) === 0;
              };
              Buffer.prototype.inspect = function inspect() {
                var str = "";
                var max = exports2.INSPECT_MAX_BYTES;
                str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
                if (this.length > max)
                  str += " ... ";
                return "<Buffer " + str + ">";
              };
              if (customInspectSymbol) {
                Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
              }
              Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
                if (isInstance(target, Uint8Array)) {
                  target = Buffer.from(target, target.offset, target.byteLength);
                }
                if (!Buffer.isBuffer(target)) {
                  throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
                }
                if (start === void 0) {
                  start = 0;
                }
                if (end === void 0) {
                  end = target ? target.length : 0;
                }
                if (thisStart === void 0) {
                  thisStart = 0;
                }
                if (thisEnd === void 0) {
                  thisEnd = this.length;
                }
                if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                  throw new RangeError("out of range index");
                }
                if (thisStart >= thisEnd && start >= end) {
                  return 0;
                }
                if (thisStart >= thisEnd) {
                  return -1;
                }
                if (start >= end) {
                  return 1;
                }
                start >>>= 0;
                end >>>= 0;
                thisStart >>>= 0;
                thisEnd >>>= 0;
                if (this === target)
                  return 0;
                var x = thisEnd - thisStart;
                var y = end - start;
                var len = Math.min(x, y);
                var thisCopy = this.slice(thisStart, thisEnd);
                var targetCopy = target.slice(start, end);
                for (var i2 = 0; i2 < len; ++i2) {
                  if (thisCopy[i2] !== targetCopy[i2]) {
                    x = thisCopy[i2];
                    y = targetCopy[i2];
                    break;
                  }
                }
                if (x < y)
                  return -1;
                if (y < x)
                  return 1;
                return 0;
              };
              function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
                if (buffer.length === 0)
                  return -1;
                if (typeof byteOffset === "string") {
                  encoding = byteOffset;
                  byteOffset = 0;
                } else if (byteOffset > 2147483647) {
                  byteOffset = 2147483647;
                } else if (byteOffset < -2147483648) {
                  byteOffset = -2147483648;
                }
                byteOffset = +byteOffset;
                if (numberIsNaN(byteOffset)) {
                  byteOffset = dir ? 0 : buffer.length - 1;
                }
                if (byteOffset < 0)
                  byteOffset = buffer.length + byteOffset;
                if (byteOffset >= buffer.length) {
                  if (dir)
                    return -1;
                  else
                    byteOffset = buffer.length - 1;
                } else if (byteOffset < 0) {
                  if (dir)
                    byteOffset = 0;
                  else
                    return -1;
                }
                if (typeof val === "string") {
                  val = Buffer.from(val, encoding);
                }
                if (Buffer.isBuffer(val)) {
                  if (val.length === 0) {
                    return -1;
                  }
                  return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
                } else if (typeof val === "number") {
                  val = val & 255;
                  if (typeof Uint8Array.prototype.indexOf === "function") {
                    if (dir) {
                      return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                    } else {
                      return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                    }
                  }
                  return arrayIndexOf(buffer, [
                    val
                  ], byteOffset, encoding, dir);
                }
                throw new TypeError("val must be string, number or Buffer");
              }
              function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                var indexSize = 1;
                var arrLength = arr.length;
                var valLength = val.length;
                if (encoding !== void 0) {
                  encoding = String(encoding).toLowerCase();
                  if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
                    if (arr.length < 2 || val.length < 2) {
                      return -1;
                    }
                    indexSize = 2;
                    arrLength /= 2;
                    valLength /= 2;
                    byteOffset /= 2;
                  }
                }
                function read(buf, i3) {
                  if (indexSize === 1) {
                    return buf[i3];
                  } else {
                    return buf.readUInt16BE(i3 * indexSize);
                  }
                }
                var i2;
                if (dir) {
                  var foundIndex = -1;
                  for (i2 = byteOffset; i2 < arrLength; i2++) {
                    if (read(arr, i2) === read(val, foundIndex === -1 ? 0 : i2 - foundIndex)) {
                      if (foundIndex === -1)
                        foundIndex = i2;
                      if (i2 - foundIndex + 1 === valLength)
                        return foundIndex * indexSize;
                    } else {
                      if (foundIndex !== -1)
                        i2 -= i2 - foundIndex;
                      foundIndex = -1;
                    }
                  }
                } else {
                  if (byteOffset + valLength > arrLength)
                    byteOffset = arrLength - valLength;
                  for (i2 = byteOffset; i2 >= 0; i2--) {
                    var found = true;
                    for (var j = 0; j < valLength; j++) {
                      if (read(arr, i2 + j) !== read(val, j)) {
                        found = false;
                        break;
                      }
                    }
                    if (found)
                      return i2;
                  }
                }
                return -1;
              }
              Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
                return this.indexOf(val, byteOffset, encoding) !== -1;
              };
              Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
              };
              Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
              };
              function hexWrite(buf, string, offset, length) {
                offset = Number(offset) || 0;
                var remaining = buf.length - offset;
                if (!length) {
                  length = remaining;
                } else {
                  length = Number(length);
                  if (length > remaining) {
                    length = remaining;
                  }
                }
                var strLen = string.length;
                if (length > strLen / 2) {
                  length = strLen / 2;
                }
                for (var i2 = 0; i2 < length; ++i2) {
                  var parsed = parseInt(string.substr(i2 * 2, 2), 16);
                  if (numberIsNaN(parsed))
                    return i2;
                  buf[offset + i2] = parsed;
                }
                return i2;
              }
              function utf8Write(buf, string, offset, length) {
                return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
              }
              function asciiWrite(buf, string, offset, length) {
                return blitBuffer(asciiToBytes(string), buf, offset, length);
              }
              function latin1Write(buf, string, offset, length) {
                return asciiWrite(buf, string, offset, length);
              }
              function base64Write(buf, string, offset, length) {
                return blitBuffer(base64ToBytes(string), buf, offset, length);
              }
              function ucs2Write(buf, string, offset, length) {
                return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
              }
              Buffer.prototype.write = function write(string, offset, length, encoding) {
                if (offset === void 0) {
                  encoding = "utf8";
                  length = this.length;
                  offset = 0;
                } else if (length === void 0 && typeof offset === "string") {
                  encoding = offset;
                  length = this.length;
                  offset = 0;
                } else if (isFinite(offset)) {
                  offset = offset >>> 0;
                  if (isFinite(length)) {
                    length = length >>> 0;
                    if (encoding === void 0)
                      encoding = "utf8";
                  } else {
                    encoding = length;
                    length = void 0;
                  }
                } else {
                  throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                }
                var remaining = this.length - offset;
                if (length === void 0 || length > remaining)
                  length = remaining;
                if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                  throw new RangeError("Attempt to write outside buffer bounds");
                }
                if (!encoding)
                  encoding = "utf8";
                var loweredCase = false;
                for (; ; ) {
                  switch (encoding) {
                    case "hex":
                      return hexWrite(this, string, offset, length);
                    case "utf8":
                    case "utf-8":
                      return utf8Write(this, string, offset, length);
                    case "ascii":
                      return asciiWrite(this, string, offset, length);
                    case "latin1":
                    case "binary":
                      return latin1Write(this, string, offset, length);
                    case "base64":
                      return base64Write(this, string, offset, length);
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                      return ucs2Write(this, string, offset, length);
                    default:
                      if (loweredCase)
                        throw new TypeError("Unknown encoding: " + encoding);
                      encoding = ("" + encoding).toLowerCase();
                      loweredCase = true;
                  }
                }
              };
              Buffer.prototype.toJSON = function toJSON() {
                return {
                  type: "Buffer",
                  data: Array.prototype.slice.call(this._arr || this, 0)
                };
              };
              function base64Slice(buf, start, end) {
                if (start === 0 && end === buf.length) {
                  return base64.fromByteArray(buf);
                } else {
                  return base64.fromByteArray(buf.slice(start, end));
                }
              }
              function utf8Slice(buf, start, end) {
                end = Math.min(buf.length, end);
                var res = [];
                var i2 = start;
                while (i2 < end) {
                  var firstByte = buf[i2];
                  var codePoint = null;
                  var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
                  if (i2 + bytesPerSequence <= end) {
                    var secondByte, thirdByte, fourthByte, tempCodePoint;
                    switch (bytesPerSequence) {
                      case 1:
                        if (firstByte < 128) {
                          codePoint = firstByte;
                        }
                        break;
                      case 2:
                        secondByte = buf[i2 + 1];
                        if ((secondByte & 192) === 128) {
                          tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                          if (tempCodePoint > 127) {
                            codePoint = tempCodePoint;
                          }
                        }
                        break;
                      case 3:
                        secondByte = buf[i2 + 1];
                        thirdByte = buf[i2 + 2];
                        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                          tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                          if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                            codePoint = tempCodePoint;
                          }
                        }
                        break;
                      case 4:
                        secondByte = buf[i2 + 1];
                        thirdByte = buf[i2 + 2];
                        fourthByte = buf[i2 + 3];
                        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                          tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                          if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                            codePoint = tempCodePoint;
                          }
                        }
                    }
                  }
                  if (codePoint === null) {
                    codePoint = 65533;
                    bytesPerSequence = 1;
                  } else if (codePoint > 65535) {
                    codePoint -= 65536;
                    res.push(codePoint >>> 10 & 1023 | 55296);
                    codePoint = 56320 | codePoint & 1023;
                  }
                  res.push(codePoint);
                  i2 += bytesPerSequence;
                }
                return decodeCodePointsArray(res);
              }
              var MAX_ARGUMENTS_LENGTH = 4096;
              function decodeCodePointsArray(codePoints) {
                var len = codePoints.length;
                if (len <= MAX_ARGUMENTS_LENGTH) {
                  return String.fromCharCode.apply(String, codePoints);
                }
                var res = "";
                var i2 = 0;
                while (i2 < len) {
                  res += String.fromCharCode.apply(String, codePoints.slice(i2, i2 += MAX_ARGUMENTS_LENGTH));
                }
                return res;
              }
              function asciiSlice(buf, start, end) {
                var ret = "";
                end = Math.min(buf.length, end);
                for (var i2 = start; i2 < end; ++i2) {
                  ret += String.fromCharCode(buf[i2] & 127);
                }
                return ret;
              }
              function latin1Slice(buf, start, end) {
                var ret = "";
                end = Math.min(buf.length, end);
                for (var i2 = start; i2 < end; ++i2) {
                  ret += String.fromCharCode(buf[i2]);
                }
                return ret;
              }
              function hexSlice(buf, start, end) {
                var len = buf.length;
                if (!start || start < 0)
                  start = 0;
                if (!end || end < 0 || end > len)
                  end = len;
                var out = "";
                for (var i2 = start; i2 < end; ++i2) {
                  out += hexSliceLookupTable[buf[i2]];
                }
                return out;
              }
              function utf16leSlice(buf, start, end) {
                var bytes = buf.slice(start, end);
                var res = "";
                for (var i2 = 0; i2 < bytes.length; i2 += 2) {
                  res += String.fromCharCode(bytes[i2] + bytes[i2 + 1] * 256);
                }
                return res;
              }
              Buffer.prototype.slice = function slice(start, end) {
                var len = this.length;
                start = ~~start;
                end = end === void 0 ? len : ~~end;
                if (start < 0) {
                  start += len;
                  if (start < 0)
                    start = 0;
                } else if (start > len) {
                  start = len;
                }
                if (end < 0) {
                  end += len;
                  if (end < 0)
                    end = 0;
                } else if (end > len) {
                  end = len;
                }
                if (end < start)
                  end = start;
                var newBuf = this.subarray(start, end);
                Object.setPrototypeOf(newBuf, Buffer.prototype);
                return newBuf;
              };
              function checkOffset(offset, ext, length) {
                if (offset % 1 !== 0 || offset < 0)
                  throw new RangeError("offset is not uint");
                if (offset + ext > length)
                  throw new RangeError("Trying to access beyond buffer length");
              }
              Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
                offset = offset >>> 0;
                byteLength2 = byteLength2 >>> 0;
                if (!noAssert)
                  checkOffset(offset, byteLength2, this.length);
                var val = this[offset];
                var mul = 1;
                var i2 = 0;
                while (++i2 < byteLength2 && (mul *= 256)) {
                  val += this[offset + i2] * mul;
                }
                return val;
              };
              Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
                offset = offset >>> 0;
                byteLength2 = byteLength2 >>> 0;
                if (!noAssert) {
                  checkOffset(offset, byteLength2, this.length);
                }
                var val = this[offset + --byteLength2];
                var mul = 1;
                while (byteLength2 > 0 && (mul *= 256)) {
                  val += this[offset + --byteLength2] * mul;
                }
                return val;
              };
              Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 1, this.length);
                return this[offset];
              };
              Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 2, this.length);
                return this[offset] | this[offset + 1] << 8;
              };
              Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 2, this.length);
                return this[offset] << 8 | this[offset + 1];
              };
              Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 4, this.length);
                return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
              };
              Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 4, this.length);
                return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
              };
              Buffer.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
                offset = offset >>> 0;
                byteLength2 = byteLength2 >>> 0;
                if (!noAssert)
                  checkOffset(offset, byteLength2, this.length);
                var val = this[offset];
                var mul = 1;
                var i2 = 0;
                while (++i2 < byteLength2 && (mul *= 256)) {
                  val += this[offset + i2] * mul;
                }
                mul *= 128;
                if (val >= mul)
                  val -= Math.pow(2, 8 * byteLength2);
                return val;
              };
              Buffer.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
                offset = offset >>> 0;
                byteLength2 = byteLength2 >>> 0;
                if (!noAssert)
                  checkOffset(offset, byteLength2, this.length);
                var i2 = byteLength2;
                var mul = 1;
                var val = this[offset + --i2];
                while (i2 > 0 && (mul *= 256)) {
                  val += this[offset + --i2] * mul;
                }
                mul *= 128;
                if (val >= mul)
                  val -= Math.pow(2, 8 * byteLength2);
                return val;
              };
              Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 1, this.length);
                if (!(this[offset] & 128))
                  return this[offset];
                return (255 - this[offset] + 1) * -1;
              };
              Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 2, this.length);
                var val = this[offset] | this[offset + 1] << 8;
                return val & 32768 ? val | 4294901760 : val;
              };
              Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 2, this.length);
                var val = this[offset + 1] | this[offset] << 8;
                return val & 32768 ? val | 4294901760 : val;
              };
              Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 4, this.length);
                return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
              };
              Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 4, this.length);
                return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
              };
              Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 4, this.length);
                return ieee754.read(this, offset, true, 23, 4);
              };
              Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 4, this.length);
                return ieee754.read(this, offset, false, 23, 4);
              };
              Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 8, this.length);
                return ieee754.read(this, offset, true, 52, 8);
              };
              Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 8, this.length);
                return ieee754.read(this, offset, false, 52, 8);
              };
              function checkInt(buf, value, offset, ext, max, min) {
                if (!Buffer.isBuffer(buf))
                  throw new TypeError('"buffer" argument must be a Buffer instance');
                if (value > max || value < min)
                  throw new RangeError('"value" argument is out of bounds');
                if (offset + ext > buf.length)
                  throw new RangeError("Index out of range");
              }
              Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
                value = +value;
                offset = offset >>> 0;
                byteLength2 = byteLength2 >>> 0;
                if (!noAssert) {
                  var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
                  checkInt(this, value, offset, byteLength2, maxBytes, 0);
                }
                var mul = 1;
                var i2 = 0;
                this[offset] = value & 255;
                while (++i2 < byteLength2 && (mul *= 256)) {
                  this[offset + i2] = value / mul & 255;
                }
                return offset + byteLength2;
              };
              Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
                value = +value;
                offset = offset >>> 0;
                byteLength2 = byteLength2 >>> 0;
                if (!noAssert) {
                  var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
                  checkInt(this, value, offset, byteLength2, maxBytes, 0);
                }
                var i2 = byteLength2 - 1;
                var mul = 1;
                this[offset + i2] = value & 255;
                while (--i2 >= 0 && (mul *= 256)) {
                  this[offset + i2] = value / mul & 255;
                }
                return offset + byteLength2;
              };
              Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 1, 255, 0);
                this[offset] = value & 255;
                return offset + 1;
              };
              Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 2, 65535, 0);
                this[offset] = value & 255;
                this[offset + 1] = value >>> 8;
                return offset + 2;
              };
              Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 2, 65535, 0);
                this[offset] = value >>> 8;
                this[offset + 1] = value & 255;
                return offset + 2;
              };
              Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 4, 4294967295, 0);
                this[offset + 3] = value >>> 24;
                this[offset + 2] = value >>> 16;
                this[offset + 1] = value >>> 8;
                this[offset] = value & 255;
                return offset + 4;
              };
              Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 4, 4294967295, 0);
                this[offset] = value >>> 24;
                this[offset + 1] = value >>> 16;
                this[offset + 2] = value >>> 8;
                this[offset + 3] = value & 255;
                return offset + 4;
              };
              Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) {
                  var limit = Math.pow(2, 8 * byteLength2 - 1);
                  checkInt(this, value, offset, byteLength2, limit - 1, -limit);
                }
                var i2 = 0;
                var mul = 1;
                var sub = 0;
                this[offset] = value & 255;
                while (++i2 < byteLength2 && (mul *= 256)) {
                  if (value < 0 && sub === 0 && this[offset + i2 - 1] !== 0) {
                    sub = 1;
                  }
                  this[offset + i2] = (value / mul >> 0) - sub & 255;
                }
                return offset + byteLength2;
              };
              Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) {
                  var limit = Math.pow(2, 8 * byteLength2 - 1);
                  checkInt(this, value, offset, byteLength2, limit - 1, -limit);
                }
                var i2 = byteLength2 - 1;
                var mul = 1;
                var sub = 0;
                this[offset + i2] = value & 255;
                while (--i2 >= 0 && (mul *= 256)) {
                  if (value < 0 && sub === 0 && this[offset + i2 + 1] !== 0) {
                    sub = 1;
                  }
                  this[offset + i2] = (value / mul >> 0) - sub & 255;
                }
                return offset + byteLength2;
              };
              Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 1, 127, -128);
                if (value < 0)
                  value = 255 + value + 1;
                this[offset] = value & 255;
                return offset + 1;
              };
              Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 2, 32767, -32768);
                this[offset] = value & 255;
                this[offset + 1] = value >>> 8;
                return offset + 2;
              };
              Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 2, 32767, -32768);
                this[offset] = value >>> 8;
                this[offset + 1] = value & 255;
                return offset + 2;
              };
              Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 4, 2147483647, -2147483648);
                this[offset] = value & 255;
                this[offset + 1] = value >>> 8;
                this[offset + 2] = value >>> 16;
                this[offset + 3] = value >>> 24;
                return offset + 4;
              };
              Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 4, 2147483647, -2147483648);
                if (value < 0)
                  value = 4294967295 + value + 1;
                this[offset] = value >>> 24;
                this[offset + 1] = value >>> 16;
                this[offset + 2] = value >>> 8;
                this[offset + 3] = value & 255;
                return offset + 4;
              };
              function checkIEEE754(buf, value, offset, ext, max, min) {
                if (offset + ext > buf.length)
                  throw new RangeError("Index out of range");
                if (offset < 0)
                  throw new RangeError("Index out of range");
              }
              function writeFloat(buf, value, offset, littleEndian, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) {
                  checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
                }
                ieee754.write(buf, value, offset, littleEndian, 23, 4);
                return offset + 4;
              }
              Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
                return writeFloat(this, value, offset, true, noAssert);
              };
              Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
                return writeFloat(this, value, offset, false, noAssert);
              };
              function writeDouble(buf, value, offset, littleEndian, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) {
                  checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
                }
                ieee754.write(buf, value, offset, littleEndian, 52, 8);
                return offset + 8;
              }
              Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
                return writeDouble(this, value, offset, true, noAssert);
              };
              Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
                return writeDouble(this, value, offset, false, noAssert);
              };
              Buffer.prototype.copy = function copy(target, targetStart, start, end) {
                if (!Buffer.isBuffer(target))
                  throw new TypeError("argument should be a Buffer");
                if (!start)
                  start = 0;
                if (!end && end !== 0)
                  end = this.length;
                if (targetStart >= target.length)
                  targetStart = target.length;
                if (!targetStart)
                  targetStart = 0;
                if (end > 0 && end < start)
                  end = start;
                if (end === start)
                  return 0;
                if (target.length === 0 || this.length === 0)
                  return 0;
                if (targetStart < 0) {
                  throw new RangeError("targetStart out of bounds");
                }
                if (start < 0 || start >= this.length)
                  throw new RangeError("Index out of range");
                if (end < 0)
                  throw new RangeError("sourceEnd out of bounds");
                if (end > this.length)
                  end = this.length;
                if (target.length - targetStart < end - start) {
                  end = target.length - targetStart + start;
                }
                var len = end - start;
                if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
                  this.copyWithin(targetStart, start, end);
                } else if (this === target && start < targetStart && targetStart < end) {
                  for (var i2 = len - 1; i2 >= 0; --i2) {
                    target[i2 + targetStart] = this[i2 + start];
                  }
                } else {
                  Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
                }
                return len;
              };
              Buffer.prototype.fill = function fill(val, start, end, encoding) {
                if (typeof val === "string") {
                  if (typeof start === "string") {
                    encoding = start;
                    start = 0;
                    end = this.length;
                  } else if (typeof end === "string") {
                    encoding = end;
                    end = this.length;
                  }
                  if (encoding !== void 0 && typeof encoding !== "string") {
                    throw new TypeError("encoding must be a string");
                  }
                  if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) {
                    throw new TypeError("Unknown encoding: " + encoding);
                  }
                  if (val.length === 1) {
                    var code = val.charCodeAt(0);
                    if (encoding === "utf8" && code < 128 || encoding === "latin1") {
                      val = code;
                    }
                  }
                } else if (typeof val === "number") {
                  val = val & 255;
                } else if (typeof val === "boolean") {
                  val = Number(val);
                }
                if (start < 0 || this.length < start || this.length < end) {
                  throw new RangeError("Out of range index");
                }
                if (end <= start) {
                  return this;
                }
                start = start >>> 0;
                end = end === void 0 ? this.length : end >>> 0;
                if (!val)
                  val = 0;
                var i2;
                if (typeof val === "number") {
                  for (i2 = start; i2 < end; ++i2) {
                    this[i2] = val;
                  }
                } else {
                  var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
                  var len = bytes.length;
                  if (len === 0) {
                    throw new TypeError('The value "' + val + '" is invalid for argument "value"');
                  }
                  for (i2 = 0; i2 < end - start; ++i2) {
                    this[i2 + start] = bytes[i2 % len];
                  }
                }
                return this;
              };
              var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
              function base64clean(str) {
                str = str.split("=")[0];
                str = str.trim().replace(INVALID_BASE64_RE, "");
                if (str.length < 2)
                  return "";
                while (str.length % 4 !== 0) {
                  str = str + "=";
                }
                return str;
              }
              function utf8ToBytes(string, units) {
                units = units || Infinity;
                var codePoint;
                var length = string.length;
                var leadSurrogate = null;
                var bytes = [];
                for (var i2 = 0; i2 < length; ++i2) {
                  codePoint = string.charCodeAt(i2);
                  if (codePoint > 55295 && codePoint < 57344) {
                    if (!leadSurrogate) {
                      if (codePoint > 56319) {
                        if ((units -= 3) > -1)
                          bytes.push(239, 191, 189);
                        continue;
                      } else if (i2 + 1 === length) {
                        if ((units -= 3) > -1)
                          bytes.push(239, 191, 189);
                        continue;
                      }
                      leadSurrogate = codePoint;
                      continue;
                    }
                    if (codePoint < 56320) {
                      if ((units -= 3) > -1)
                        bytes.push(239, 191, 189);
                      leadSurrogate = codePoint;
                      continue;
                    }
                    codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
                  } else if (leadSurrogate) {
                    if ((units -= 3) > -1)
                      bytes.push(239, 191, 189);
                  }
                  leadSurrogate = null;
                  if (codePoint < 128) {
                    if ((units -= 1) < 0)
                      break;
                    bytes.push(codePoint);
                  } else if (codePoint < 2048) {
                    if ((units -= 2) < 0)
                      break;
                    bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
                  } else if (codePoint < 65536) {
                    if ((units -= 3) < 0)
                      break;
                    bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
                  } else if (codePoint < 1114112) {
                    if ((units -= 4) < 0)
                      break;
                    bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
                  } else {
                    throw new Error("Invalid code point");
                  }
                }
                return bytes;
              }
              function asciiToBytes(str) {
                var byteArray = [];
                for (var i2 = 0; i2 < str.length; ++i2) {
                  byteArray.push(str.charCodeAt(i2) & 255);
                }
                return byteArray;
              }
              function utf16leToBytes(str, units) {
                var c, hi, lo;
                var byteArray = [];
                for (var i2 = 0; i2 < str.length; ++i2) {
                  if ((units -= 2) < 0)
                    break;
                  c = str.charCodeAt(i2);
                  hi = c >> 8;
                  lo = c % 256;
                  byteArray.push(lo);
                  byteArray.push(hi);
                }
                return byteArray;
              }
              function base64ToBytes(str) {
                return base64.toByteArray(base64clean(str));
              }
              function blitBuffer(src, dst, offset, length) {
                for (var i2 = 0; i2 < length; ++i2) {
                  if (i2 + offset >= dst.length || i2 >= src.length)
                    break;
                  dst[i2 + offset] = src[i2];
                }
                return i2;
              }
              function isInstance(obj, type) {
                return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
              }
              function numberIsNaN(obj) {
                return obj !== obj;
              }
              var hexSliceLookupTable = function() {
                var alphabet = "0123456789abcdef";
                var table = new Array(256);
                for (var i2 = 0; i2 < 16; ++i2) {
                  var i16 = i2 * 16;
                  for (var j = 0; j < 16; ++j) {
                    table[i16 + j] = alphabet[i2] + alphabet[j];
                  }
                }
                return table;
              }();
            }).call(this, _dereq_2("buffer").Buffer);
          },
          {
            "base64-js": 20,
            "buffer": 22,
            "ieee754": 260
          }
        ],
        23: [
          function(_dereq_2, module2, exports2) {
            module2.exports = function(it) {
              if (typeof it != "function") {
                throw TypeError(String(it) + " is not a function");
              }
              return it;
            };
          },
          {}
        ],
        24: [
          function(_dereq_2, module2, exports2) {
            var isObject = _dereq_2("../internals/is-object");
            module2.exports = function(it) {
              if (!isObject(it) && it !== null) {
                throw TypeError("Can't set " + String(it) + " as a prototype");
              }
              return it;
            };
          },
          {
            "../internals/is-object": 92
          }
        ],
        25: [
          function(_dereq_2, module2, exports2) {
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var create = _dereq_2("../internals/object-create");
            var definePropertyModule = _dereq_2("../internals/object-define-property");
            var UNSCOPABLES = wellKnownSymbol("unscopables");
            var ArrayPrototype = Array.prototype;
            if (ArrayPrototype[UNSCOPABLES] == void 0) {
              definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
                configurable: true,
                value: create(null)
              });
            }
            module2.exports = function(key2) {
              ArrayPrototype[UNSCOPABLES][key2] = true;
            };
          },
          {
            "../internals/object-create": 108,
            "../internals/object-define-property": 110,
            "../internals/well-known-symbol": 164
          }
        ],
        26: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var charAt = _dereq_2("../internals/string-multibyte").charAt;
            module2.exports = function(S, index, unicode) {
              return index + (unicode ? charAt(S, index).length : 1);
            };
          },
          {
            "../internals/string-multibyte": 141
          }
        ],
        27: [
          function(_dereq_2, module2, exports2) {
            module2.exports = function(it, Constructor, name) {
              if (!(it instanceof Constructor)) {
                throw TypeError("Incorrect " + (name ? name + " " : "") + "invocation");
              }
              return it;
            };
          },
          {}
        ],
        28: [
          function(_dereq_2, module2, exports2) {
            var isObject = _dereq_2("../internals/is-object");
            module2.exports = function(it) {
              if (!isObject(it)) {
                throw TypeError(String(it) + " is not an object");
              }
              return it;
            };
          },
          {
            "../internals/is-object": 92
          }
        ],
        29: [
          function(_dereq_2, module2, exports2) {
            module2.exports = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined";
          },
          {}
        ],
        30: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var NATIVE_ARRAY_BUFFER = _dereq_2("../internals/array-buffer-native");
            var DESCRIPTORS = _dereq_2("../internals/descriptors");
            var global2 = _dereq_2("../internals/global");
            var isObject = _dereq_2("../internals/is-object");
            var has = _dereq_2("../internals/has");
            var classof = _dereq_2("../internals/classof");
            var createNonEnumerableProperty = _dereq_2("../internals/create-non-enumerable-property");
            var redefine = _dereq_2("../internals/redefine");
            var defineProperty = _dereq_2("../internals/object-define-property").f;
            var getPrototypeOf = _dereq_2("../internals/object-get-prototype-of");
            var setPrototypeOf = _dereq_2("../internals/object-set-prototype-of");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var uid = _dereq_2("../internals/uid");
            var Int8Array2 = global2.Int8Array;
            var Int8ArrayPrototype = Int8Array2 && Int8Array2.prototype;
            var Uint8ClampedArray2 = global2.Uint8ClampedArray;
            var Uint8ClampedArrayPrototype = Uint8ClampedArray2 && Uint8ClampedArray2.prototype;
            var TypedArray = Int8Array2 && getPrototypeOf(Int8Array2);
            var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);
            var ObjectPrototype = Object.prototype;
            var isPrototypeOf = ObjectPrototype.isPrototypeOf;
            var TO_STRING_TAG = wellKnownSymbol("toStringTag");
            var TYPED_ARRAY_TAG = uid("TYPED_ARRAY_TAG");
            var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global2.opera) !== "Opera";
            var TYPED_ARRAY_TAG_REQIRED = false;
            var NAME;
            var TypedArrayConstructorsList = {
              Int8Array: 1,
              Uint8Array: 1,
              Uint8ClampedArray: 1,
              Int16Array: 2,
              Uint16Array: 2,
              Int32Array: 4,
              Uint32Array: 4,
              Float32Array: 4,
              Float64Array: 8
            };
            var isView = function isView2(it) {
              var klass = classof(it);
              return klass === "DataView" || has(TypedArrayConstructorsList, klass);
            };
            var isTypedArray = function(it) {
              return isObject(it) && has(TypedArrayConstructorsList, classof(it));
            };
            var aTypedArray = function(it) {
              if (isTypedArray(it))
                return it;
              throw TypeError("Target is not a typed array");
            };
            var aTypedArrayConstructor = function(C) {
              if (setPrototypeOf) {
                if (isPrototypeOf.call(TypedArray, C))
                  return C;
              } else
                for (var ARRAY in TypedArrayConstructorsList)
                  if (has(TypedArrayConstructorsList, NAME)) {
                    var TypedArrayConstructor = global2[ARRAY];
                    if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {
                      return C;
                    }
                  }
              throw TypeError("Target is not a typed array constructor");
            };
            var exportTypedArrayMethod = function(KEY, property, forced) {
              if (!DESCRIPTORS)
                return;
              if (forced)
                for (var ARRAY in TypedArrayConstructorsList) {
                  var TypedArrayConstructor = global2[ARRAY];
                  if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {
                    delete TypedArrayConstructor.prototype[KEY];
                  }
                }
              if (!TypedArrayPrototype[KEY] || forced) {
                redefine(TypedArrayPrototype, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);
              }
            };
            var exportTypedArrayStaticMethod = function(KEY, property, forced) {
              var ARRAY, TypedArrayConstructor;
              if (!DESCRIPTORS)
                return;
              if (setPrototypeOf) {
                if (forced)
                  for (ARRAY in TypedArrayConstructorsList) {
                    TypedArrayConstructor = global2[ARRAY];
                    if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {
                      delete TypedArrayConstructor[KEY];
                    }
                  }
                if (!TypedArray[KEY] || forced) {
                  try {
                    return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8Array2[KEY] || property);
                  } catch (error) {
                  }
                } else
                  return;
              }
              for (ARRAY in TypedArrayConstructorsList) {
                TypedArrayConstructor = global2[ARRAY];
                if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
                  redefine(TypedArrayConstructor, KEY, property);
                }
              }
            };
            for (NAME in TypedArrayConstructorsList) {
              if (!global2[NAME])
                NATIVE_ARRAY_BUFFER_VIEWS = false;
            }
            if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != "function" || TypedArray === Function.prototype) {
              TypedArray = function TypedArray2() {
                throw TypeError("Incorrect invocation");
              };
              if (NATIVE_ARRAY_BUFFER_VIEWS)
                for (NAME in TypedArrayConstructorsList) {
                  if (global2[NAME])
                    setPrototypeOf(global2[NAME], TypedArray);
                }
            }
            if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {
              TypedArrayPrototype = TypedArray.prototype;
              if (NATIVE_ARRAY_BUFFER_VIEWS)
                for (NAME in TypedArrayConstructorsList) {
                  if (global2[NAME])
                    setPrototypeOf(global2[NAME].prototype, TypedArrayPrototype);
                }
            }
            if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
              setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
            }
            if (DESCRIPTORS && !has(TypedArrayPrototype, TO_STRING_TAG)) {
              TYPED_ARRAY_TAG_REQIRED = true;
              defineProperty(TypedArrayPrototype, TO_STRING_TAG, {
                get: function() {
                  return isObject(this) ? this[TYPED_ARRAY_TAG] : void 0;
                }
              });
              for (NAME in TypedArrayConstructorsList)
                if (global2[NAME]) {
                  createNonEnumerableProperty(global2[NAME], TYPED_ARRAY_TAG, NAME);
                }
            }
            module2.exports = {
              NATIVE_ARRAY_BUFFER_VIEWS,
              TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
              aTypedArray,
              aTypedArrayConstructor,
              exportTypedArrayMethod,
              exportTypedArrayStaticMethod,
              isView,
              isTypedArray,
              TypedArray,
              TypedArrayPrototype
            };
          },
          {
            "../internals/array-buffer-native": 29,
            "../internals/classof": 47,
            "../internals/create-non-enumerable-property": 56,
            "../internals/descriptors": 61,
            "../internals/global": 77,
            "../internals/has": 78,
            "../internals/is-object": 92,
            "../internals/object-define-property": 110,
            "../internals/object-get-prototype-of": 115,
            "../internals/object-set-prototype-of": 119,
            "../internals/redefine": 126,
            "../internals/uid": 161,
            "../internals/well-known-symbol": 164
          }
        ],
        31: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var global2 = _dereq_2("../internals/global");
            var DESCRIPTORS = _dereq_2("../internals/descriptors");
            var NATIVE_ARRAY_BUFFER = _dereq_2("../internals/array-buffer-native");
            var createNonEnumerableProperty = _dereq_2("../internals/create-non-enumerable-property");
            var redefineAll = _dereq_2("../internals/redefine-all");
            var fails = _dereq_2("../internals/fails");
            var anInstance = _dereq_2("../internals/an-instance");
            var toInteger = _dereq_2("../internals/to-integer");
            var toLength = _dereq_2("../internals/to-length");
            var toIndex = _dereq_2("../internals/to-index");
            var IEEE754 = _dereq_2("../internals/ieee754");
            var getPrototypeOf = _dereq_2("../internals/object-get-prototype-of");
            var setPrototypeOf = _dereq_2("../internals/object-set-prototype-of");
            var getOwnPropertyNames = _dereq_2("../internals/object-get-own-property-names").f;
            var defineProperty = _dereq_2("../internals/object-define-property").f;
            var arrayFill = _dereq_2("../internals/array-fill");
            var setToStringTag = _dereq_2("../internals/set-to-string-tag");
            var InternalStateModule = _dereq_2("../internals/internal-state");
            var getInternalState = InternalStateModule.get;
            var setInternalState = InternalStateModule.set;
            var ARRAY_BUFFER = "ArrayBuffer";
            var DATA_VIEW = "DataView";
            var PROTOTYPE = "prototype";
            var WRONG_LENGTH = "Wrong length";
            var WRONG_INDEX = "Wrong index";
            var NativeArrayBuffer = global2[ARRAY_BUFFER];
            var $ArrayBuffer = NativeArrayBuffer;
            var $DataView = global2[DATA_VIEW];
            var $DataViewPrototype = $DataView && $DataView[PROTOTYPE];
            var ObjectPrototype = Object.prototype;
            var RangeError2 = global2.RangeError;
            var packIEEE754 = IEEE754.pack;
            var unpackIEEE754 = IEEE754.unpack;
            var packInt8 = function(number) {
              return [number & 255];
            };
            var packInt16 = function(number) {
              return [
                number & 255,
                number >> 8 & 255
              ];
            };
            var packInt32 = function(number) {
              return [
                number & 255,
                number >> 8 & 255,
                number >> 16 & 255,
                number >> 24 & 255
              ];
            };
            var unpackInt32 = function(buffer) {
              return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
            };
            var packFloat32 = function(number) {
              return packIEEE754(number, 23, 4);
            };
            var packFloat64 = function(number) {
              return packIEEE754(number, 52, 8);
            };
            var addGetter = function(Constructor, key3) {
              defineProperty(Constructor[PROTOTYPE], key3, {
                get: function() {
                  return getInternalState(this)[key3];
                }
              });
            };
            var get = function(view, count, index, isLittleEndian) {
              var intIndex = toIndex(index);
              var store = getInternalState(view);
              if (intIndex + count > store.byteLength)
                throw RangeError2(WRONG_INDEX);
              var bytes = getInternalState(store.buffer).bytes;
              var start = intIndex + store.byteOffset;
              var pack = bytes.slice(start, start + count);
              return isLittleEndian ? pack : pack.reverse();
            };
            var set = function(view, count, index, conversion, value, isLittleEndian) {
              var intIndex = toIndex(index);
              var store = getInternalState(view);
              if (intIndex + count > store.byteLength)
                throw RangeError2(WRONG_INDEX);
              var bytes = getInternalState(store.buffer).bytes;
              var start = intIndex + store.byteOffset;
              var pack = conversion(+value);
              for (var i2 = 0; i2 < count; i2++)
                bytes[start + i2] = pack[isLittleEndian ? i2 : count - i2 - 1];
            };
            if (!NATIVE_ARRAY_BUFFER) {
              $ArrayBuffer = function ArrayBuffer2(length) {
                anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
                var byteLength = toIndex(length);
                setInternalState(this, {
                  bytes: arrayFill.call(new Array(byteLength), 0),
                  byteLength
                });
                if (!DESCRIPTORS)
                  this.byteLength = byteLength;
              };
              $DataView = function DataView2(buffer, byteOffset, byteLength) {
                anInstance(this, $DataView, DATA_VIEW);
                anInstance(buffer, $ArrayBuffer, DATA_VIEW);
                var bufferLength = getInternalState(buffer).byteLength;
                var offset = toInteger(byteOffset);
                if (offset < 0 || offset > bufferLength)
                  throw RangeError2("Wrong offset");
                byteLength = byteLength === void 0 ? bufferLength - offset : toLength(byteLength);
                if (offset + byteLength > bufferLength)
                  throw RangeError2(WRONG_LENGTH);
                setInternalState(this, {
                  buffer,
                  byteLength,
                  byteOffset: offset
                });
                if (!DESCRIPTORS) {
                  this.buffer = buffer;
                  this.byteLength = byteLength;
                  this.byteOffset = offset;
                }
              };
              if (DESCRIPTORS) {
                addGetter($ArrayBuffer, "byteLength");
                addGetter($DataView, "buffer");
                addGetter($DataView, "byteLength");
                addGetter($DataView, "byteOffset");
              }
              redefineAll($DataView[PROTOTYPE], {
                getInt8: function getInt8(byteOffset) {
                  return get(this, 1, byteOffset)[0] << 24 >> 24;
                },
                getUint8: function getUint8(byteOffset) {
                  return get(this, 1, byteOffset)[0];
                },
                getInt16: function getInt16(byteOffset) {
                  var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : void 0);
                  return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
                },
                getUint16: function getUint16(byteOffset) {
                  var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : void 0);
                  return bytes[1] << 8 | bytes[0];
                },
                getInt32: function getInt32(byteOffset) {
                  return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : void 0));
                },
                getUint32: function getUint32(byteOffset) {
                  return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : void 0)) >>> 0;
                },
                getFloat32: function getFloat32(byteOffset) {
                  return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : void 0), 23);
                },
                getFloat64: function getFloat64(byteOffset) {
                  return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : void 0), 52);
                },
                setInt8: function setInt8(byteOffset, value) {
                  set(this, 1, byteOffset, packInt8, value);
                },
                setUint8: function setUint8(byteOffset, value) {
                  set(this, 1, byteOffset, packInt8, value);
                },
                setInt16: function setInt16(byteOffset, value) {
                  set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : void 0);
                },
                setUint16: function setUint16(byteOffset, value) {
                  set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : void 0);
                },
                setInt32: function setInt32(byteOffset, value) {
                  set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : void 0);
                },
                setUint32: function setUint32(byteOffset, value) {
                  set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : void 0);
                },
                setFloat32: function setFloat32(byteOffset, value) {
                  set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : void 0);
                },
                setFloat64: function setFloat64(byteOffset, value) {
                  set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : void 0);
                }
              });
            } else {
              if (!fails(function() {
                NativeArrayBuffer(1);
              }) || !fails(function() {
                new NativeArrayBuffer(-1);
              }) || fails(function() {
                new NativeArrayBuffer();
                new NativeArrayBuffer(1.5);
                new NativeArrayBuffer(NaN);
                return NativeArrayBuffer.name != ARRAY_BUFFER;
              })) {
                $ArrayBuffer = function ArrayBuffer2(length) {
                  anInstance(this, $ArrayBuffer);
                  return new NativeArrayBuffer(toIndex(length));
                };
                var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE] = NativeArrayBuffer[PROTOTYPE];
                for (var keys = getOwnPropertyNames(NativeArrayBuffer), j = 0, key2; keys.length > j; ) {
                  if (!((key2 = keys[j++]) in $ArrayBuffer)) {
                    createNonEnumerableProperty($ArrayBuffer, key2, NativeArrayBuffer[key2]);
                  }
                }
                ArrayBufferPrototype.constructor = $ArrayBuffer;
              }
              if (setPrototypeOf && getPrototypeOf($DataViewPrototype) !== ObjectPrototype) {
                setPrototypeOf($DataViewPrototype, ObjectPrototype);
              }
              var testView = new $DataView(new $ArrayBuffer(2));
              var nativeSetInt8 = $DataViewPrototype.setInt8;
              testView.setInt8(0, 2147483648);
              testView.setInt8(1, 2147483649);
              if (testView.getInt8(0) || !testView.getInt8(1))
                redefineAll($DataViewPrototype, {
                  setInt8: function setInt8(byteOffset, value) {
                    nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
                  },
                  setUint8: function setUint8(byteOffset, value) {
                    nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
                  }
                }, {
                  unsafe: true
                });
            }
            setToStringTag($ArrayBuffer, ARRAY_BUFFER);
            setToStringTag($DataView, DATA_VIEW);
            module2.exports = {
              ArrayBuffer: $ArrayBuffer,
              DataView: $DataView
            };
          },
          {
            "../internals/an-instance": 27,
            "../internals/array-buffer-native": 29,
            "../internals/array-fill": 33,
            "../internals/create-non-enumerable-property": 56,
            "../internals/descriptors": 61,
            "../internals/fails": 69,
            "../internals/global": 77,
            "../internals/ieee754": 83,
            "../internals/internal-state": 88,
            "../internals/object-define-property": 110,
            "../internals/object-get-own-property-names": 113,
            "../internals/object-get-prototype-of": 115,
            "../internals/object-set-prototype-of": 119,
            "../internals/redefine-all": 125,
            "../internals/set-to-string-tag": 135,
            "../internals/to-index": 149,
            "../internals/to-integer": 151,
            "../internals/to-length": 152
          }
        ],
        32: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var toObject = _dereq_2("../internals/to-object");
            var toAbsoluteIndex = _dereq_2("../internals/to-absolute-index");
            var toLength = _dereq_2("../internals/to-length");
            var min = Math.min;
            module2.exports = [].copyWithin || function copyWithin(target, start) {
              var O = toObject(this);
              var len = toLength(O.length);
              var to = toAbsoluteIndex(target, len);
              var from = toAbsoluteIndex(start, len);
              var end = arguments.length > 2 ? arguments[2] : void 0;
              var count = min((end === void 0 ? len : toAbsoluteIndex(end, len)) - from, len - to);
              var inc = 1;
              if (from < to && to < from + count) {
                inc = -1;
                from += count - 1;
                to += count - 1;
              }
              while (count-- > 0) {
                if (from in O)
                  O[to] = O[from];
                else
                  delete O[to];
                to += inc;
                from += inc;
              }
              return O;
            };
          },
          {
            "../internals/to-absolute-index": 148,
            "../internals/to-length": 152,
            "../internals/to-object": 153
          }
        ],
        33: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var toObject = _dereq_2("../internals/to-object");
            var toAbsoluteIndex = _dereq_2("../internals/to-absolute-index");
            var toLength = _dereq_2("../internals/to-length");
            module2.exports = function fill(value) {
              var O = toObject(this);
              var length = toLength(O.length);
              var argumentsLength = arguments.length;
              var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : void 0, length);
              var end = argumentsLength > 2 ? arguments[2] : void 0;
              var endPos = end === void 0 ? length : toAbsoluteIndex(end, length);
              while (endPos > index)
                O[index++] = value;
              return O;
            };
          },
          {
            "../internals/to-absolute-index": 148,
            "../internals/to-length": 152,
            "../internals/to-object": 153
          }
        ],
        34: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $forEach = _dereq_2("../internals/array-iteration").forEach;
            var arrayMethodIsStrict = _dereq_2("../internals/array-method-is-strict");
            var arrayMethodUsesToLength = _dereq_2("../internals/array-method-uses-to-length");
            var STRICT_METHOD = arrayMethodIsStrict("forEach");
            var USES_TO_LENGTH = arrayMethodUsesToLength("forEach");
            module2.exports = !STRICT_METHOD || !USES_TO_LENGTH ? function forEach(callbackfn) {
              return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
            } : [].forEach;
          },
          {
            "../internals/array-iteration": 37,
            "../internals/array-method-is-strict": 40,
            "../internals/array-method-uses-to-length": 41
          }
        ],
        35: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var bind = _dereq_2("../internals/function-bind-context");
            var toObject = _dereq_2("../internals/to-object");
            var callWithSafeIterationClosing = _dereq_2("../internals/call-with-safe-iteration-closing");
            var isArrayIteratorMethod = _dereq_2("../internals/is-array-iterator-method");
            var toLength = _dereq_2("../internals/to-length");
            var createProperty = _dereq_2("../internals/create-property");
            var getIteratorMethod = _dereq_2("../internals/get-iterator-method");
            module2.exports = function from(arrayLike) {
              var O = toObject(arrayLike);
              var C = typeof this == "function" ? this : Array;
              var argumentsLength = arguments.length;
              var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
              var mapping = mapfn !== void 0;
              var iteratorMethod = getIteratorMethod(O);
              var index = 0;
              var length, result, step, iterator, next, value;
              if (mapping)
                mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : void 0, 2);
              if (iteratorMethod != void 0 && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
                iterator = iteratorMethod.call(O);
                next = iterator.next;
                result = new C();
                for (; !(step = next.call(iterator)).done; index++) {
                  value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [
                    step.value,
                    index
                  ], true) : step.value;
                  createProperty(result, index, value);
                }
              } else {
                length = toLength(O.length);
                result = new C(length);
                for (; length > index; index++) {
                  value = mapping ? mapfn(O[index], index) : O[index];
                  createProperty(result, index, value);
                }
              }
              result.length = index;
              return result;
            };
          },
          {
            "../internals/call-with-safe-iteration-closing": 44,
            "../internals/create-property": 58,
            "../internals/function-bind-context": 72,
            "../internals/get-iterator-method": 75,
            "../internals/is-array-iterator-method": 89,
            "../internals/to-length": 152,
            "../internals/to-object": 153
          }
        ],
        36: [
          function(_dereq_2, module2, exports2) {
            var toIndexedObject = _dereq_2("../internals/to-indexed-object");
            var toLength = _dereq_2("../internals/to-length");
            var toAbsoluteIndex = _dereq_2("../internals/to-absolute-index");
            var createMethod = function(IS_INCLUDES) {
              return function($this, el, fromIndex) {
                var O = toIndexedObject($this);
                var length = toLength(O.length);
                var index = toAbsoluteIndex(fromIndex, length);
                var value;
                if (IS_INCLUDES && el != el)
                  while (length > index) {
                    value = O[index++];
                    if (value != value)
                      return true;
                  }
                else
                  for (; length > index; index++) {
                    if ((IS_INCLUDES || index in O) && O[index] === el)
                      return IS_INCLUDES || index || 0;
                  }
                return !IS_INCLUDES && -1;
              };
            };
            module2.exports = {
              // `Array.prototype.includes` method
              // https://tc39.github.io/ecma262/#sec-array.prototype.includes
              includes: createMethod(true),
              // `Array.prototype.indexOf` method
              // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
              indexOf: createMethod(false)
            };
          },
          {
            "../internals/to-absolute-index": 148,
            "../internals/to-indexed-object": 150,
            "../internals/to-length": 152
          }
        ],
        37: [
          function(_dereq_2, module2, exports2) {
            var bind = _dereq_2("../internals/function-bind-context");
            var IndexedObject = _dereq_2("../internals/indexed-object");
            var toObject = _dereq_2("../internals/to-object");
            var toLength = _dereq_2("../internals/to-length");
            var arraySpeciesCreate = _dereq_2("../internals/array-species-create");
            var push = [].push;
            var createMethod = function(TYPE) {
              var IS_MAP = TYPE == 1;
              var IS_FILTER = TYPE == 2;
              var IS_SOME = TYPE == 3;
              var IS_EVERY = TYPE == 4;
              var IS_FIND_INDEX = TYPE == 6;
              var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
              return function($this, callbackfn, that, specificCreate) {
                var O = toObject($this);
                var self2 = IndexedObject(O);
                var boundFunction = bind(callbackfn, that, 3);
                var length = toLength(self2.length);
                var index = 0;
                var create = specificCreate || arraySpeciesCreate;
                var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : void 0;
                var value, result;
                for (; length > index; index++)
                  if (NO_HOLES || index in self2) {
                    value = self2[index];
                    result = boundFunction(value, index, O);
                    if (TYPE) {
                      if (IS_MAP)
                        target[index] = result;
                      else if (result)
                        switch (TYPE) {
                          case 3:
                            return true;
                          case 5:
                            return value;
                          case 6:
                            return index;
                          case 2:
                            push.call(target, value);
                        }
                      else if (IS_EVERY)
                        return false;
                    }
                  }
                return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
              };
            };
            module2.exports = {
              // `Array.prototype.forEach` method
              // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
              forEach: createMethod(0),
              // `Array.prototype.map` method
              // https://tc39.github.io/ecma262/#sec-array.prototype.map
              map: createMethod(1),
              // `Array.prototype.filter` method
              // https://tc39.github.io/ecma262/#sec-array.prototype.filter
              filter: createMethod(2),
              // `Array.prototype.some` method
              // https://tc39.github.io/ecma262/#sec-array.prototype.some
              some: createMethod(3),
              // `Array.prototype.every` method
              // https://tc39.github.io/ecma262/#sec-array.prototype.every
              every: createMethod(4),
              // `Array.prototype.find` method
              // https://tc39.github.io/ecma262/#sec-array.prototype.find
              find: createMethod(5),
              // `Array.prototype.findIndex` method
              // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
              findIndex: createMethod(6)
            };
          },
          {
            "../internals/array-species-create": 43,
            "../internals/function-bind-context": 72,
            "../internals/indexed-object": 84,
            "../internals/to-length": 152,
            "../internals/to-object": 153
          }
        ],
        38: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var toIndexedObject = _dereq_2("../internals/to-indexed-object");
            var toInteger = _dereq_2("../internals/to-integer");
            var toLength = _dereq_2("../internals/to-length");
            var arrayMethodIsStrict = _dereq_2("../internals/array-method-is-strict");
            var arrayMethodUsesToLength = _dereq_2("../internals/array-method-uses-to-length");
            var min = Math.min;
            var nativeLastIndexOf = [].lastIndexOf;
            var NEGATIVE_ZERO = !!nativeLastIndexOf && 1 / [
              1
            ].lastIndexOf(1, -0) < 0;
            var STRICT_METHOD = arrayMethodIsStrict("lastIndexOf");
            var USES_TO_LENGTH = arrayMethodUsesToLength("indexOf", {
              ACCESSORS: true,
              1: 0
            });
            var FORCED = NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH;
            module2.exports = FORCED ? function lastIndexOf(searchElement) {
              if (NEGATIVE_ZERO)
                return nativeLastIndexOf.apply(this, arguments) || 0;
              var O = toIndexedObject(this);
              var length = toLength(O.length);
              var index = length - 1;
              if (arguments.length > 1)
                index = min(index, toInteger(arguments[1]));
              if (index < 0)
                index = length + index;
              for (; index >= 0; index--)
                if (index in O && O[index] === searchElement)
                  return index || 0;
              return -1;
            } : nativeLastIndexOf;
          },
          {
            "../internals/array-method-is-strict": 40,
            "../internals/array-method-uses-to-length": 41,
            "../internals/to-indexed-object": 150,
            "../internals/to-integer": 151,
            "../internals/to-length": 152
          }
        ],
        39: [
          function(_dereq_2, module2, exports2) {
            var fails = _dereq_2("../internals/fails");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var V8_VERSION = _dereq_2("../internals/engine-v8-version");
            var SPECIES = wellKnownSymbol("species");
            module2.exports = function(METHOD_NAME) {
              return V8_VERSION >= 51 || !fails(function() {
                var array = [];
                var constructor = array.constructor = {};
                constructor[SPECIES] = function() {
                  return {
                    foo: 1
                  };
                };
                return array[METHOD_NAME](Boolean).foo !== 1;
              });
            };
          },
          {
            "../internals/engine-v8-version": 66,
            "../internals/fails": 69,
            "../internals/well-known-symbol": 164
          }
        ],
        40: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var fails = _dereq_2("../internals/fails");
            module2.exports = function(METHOD_NAME, argument) {
              var method = [][METHOD_NAME];
              return !!method && fails(function() {
                method.call(null, argument || function() {
                  throw 1;
                }, 1);
              });
            };
          },
          {
            "../internals/fails": 69
          }
        ],
        41: [
          function(_dereq_2, module2, exports2) {
            var DESCRIPTORS = _dereq_2("../internals/descriptors");
            var fails = _dereq_2("../internals/fails");
            var has = _dereq_2("../internals/has");
            var defineProperty = Object.defineProperty;
            var cache = {};
            var thrower = function(it) {
              throw it;
            };
            module2.exports = function(METHOD_NAME, options) {
              if (has(cache, METHOD_NAME))
                return cache[METHOD_NAME];
              if (!options)
                options = {};
              var method = [][METHOD_NAME];
              var ACCESSORS = has(options, "ACCESSORS") ? options.ACCESSORS : false;
              var argument0 = has(options, 0) ? options[0] : thrower;
              var argument1 = has(options, 1) ? options[1] : void 0;
              return cache[METHOD_NAME] = !!method && !fails(function() {
                if (ACCESSORS && !DESCRIPTORS)
                  return true;
                var O = {
                  length: -1
                };
                if (ACCESSORS)
                  defineProperty(O, 1, {
                    enumerable: true,
                    get: thrower
                  });
                else
                  O[1] = 1;
                method.call(O, argument0, argument1);
              });
            };
          },
          {
            "../internals/descriptors": 61,
            "../internals/fails": 69,
            "../internals/has": 78
          }
        ],
        42: [
          function(_dereq_2, module2, exports2) {
            var aFunction = _dereq_2("../internals/a-function");
            var toObject = _dereq_2("../internals/to-object");
            var IndexedObject = _dereq_2("../internals/indexed-object");
            var toLength = _dereq_2("../internals/to-length");
            var createMethod = function(IS_RIGHT) {
              return function(that, callbackfn, argumentsLength, memo) {
                aFunction(callbackfn);
                var O = toObject(that);
                var self2 = IndexedObject(O);
                var length = toLength(O.length);
                var index = IS_RIGHT ? length - 1 : 0;
                var i2 = IS_RIGHT ? -1 : 1;
                if (argumentsLength < 2)
                  while (true) {
                    if (index in self2) {
                      memo = self2[index];
                      index += i2;
                      break;
                    }
                    index += i2;
                    if (IS_RIGHT ? index < 0 : length <= index) {
                      throw TypeError("Reduce of empty array with no initial value");
                    }
                  }
                for (; IS_RIGHT ? index >= 0 : length > index; index += i2)
                  if (index in self2) {
                    memo = callbackfn(memo, self2[index], index, O);
                  }
                return memo;
              };
            };
            module2.exports = {
              // `Array.prototype.reduce` method
              // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
              left: createMethod(false),
              // `Array.prototype.reduceRight` method
              // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
              right: createMethod(true)
            };
          },
          {
            "../internals/a-function": 23,
            "../internals/indexed-object": 84,
            "../internals/to-length": 152,
            "../internals/to-object": 153
          }
        ],
        43: [
          function(_dereq_2, module2, exports2) {
            var isObject = _dereq_2("../internals/is-object");
            var isArray = _dereq_2("../internals/is-array");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var SPECIES = wellKnownSymbol("species");
            module2.exports = function(originalArray, length) {
              var C;
              if (isArray(originalArray)) {
                C = originalArray.constructor;
                if (typeof C == "function" && (C === Array || isArray(C.prototype)))
                  C = void 0;
                else if (isObject(C)) {
                  C = C[SPECIES];
                  if (C === null)
                    C = void 0;
                }
              }
              return new (C === void 0 ? Array : C)(length === 0 ? 0 : length);
            };
          },
          {
            "../internals/is-array": 90,
            "../internals/is-object": 92,
            "../internals/well-known-symbol": 164
          }
        ],
        44: [
          function(_dereq_2, module2, exports2) {
            var anObject = _dereq_2("../internals/an-object");
            module2.exports = function(iterator, fn, value, ENTRIES) {
              try {
                return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
              } catch (error) {
                var returnMethod = iterator["return"];
                if (returnMethod !== void 0)
                  anObject(returnMethod.call(iterator));
                throw error;
              }
            };
          },
          {
            "../internals/an-object": 28
          }
        ],
        45: [
          function(_dereq_2, module2, exports2) {
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var ITERATOR = wellKnownSymbol("iterator");
            var SAFE_CLOSING = false;
            try {
              var called = 0;
              var iteratorWithReturn = {
                next: function() {
                  return {
                    done: !!called++
                  };
                },
                "return": function() {
                  SAFE_CLOSING = true;
                }
              };
              iteratorWithReturn[ITERATOR] = function() {
                return this;
              };
              Array.from(iteratorWithReturn, function() {
                throw 2;
              });
            } catch (error) {
            }
            module2.exports = function(exec, SKIP_CLOSING) {
              if (!SKIP_CLOSING && !SAFE_CLOSING)
                return false;
              var ITERATION_SUPPORT = false;
              try {
                var object = {};
                object[ITERATOR] = function() {
                  return {
                    next: function() {
                      return {
                        done: ITERATION_SUPPORT = true
                      };
                    }
                  };
                };
                exec(object);
              } catch (error) {
              }
              return ITERATION_SUPPORT;
            };
          },
          {
            "../internals/well-known-symbol": 164
          }
        ],
        46: [
          function(_dereq_2, module2, exports2) {
            var toString = {}.toString;
            module2.exports = function(it) {
              return toString.call(it).slice(8, -1);
            };
          },
          {}
        ],
        47: [
          function(_dereq_2, module2, exports2) {
            var TO_STRING_TAG_SUPPORT = _dereq_2("../internals/to-string-tag-support");
            var classofRaw = _dereq_2("../internals/classof-raw");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var TO_STRING_TAG = wellKnownSymbol("toStringTag");
            var CORRECT_ARGUMENTS = classofRaw(function() {
              return arguments;
            }()) == "Arguments";
            var tryGet = function(it, key2) {
              try {
                return it[key2];
              } catch (error) {
              }
            };
            module2.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
              var O, tag, result;
              return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) == "Object" && typeof O.callee == "function" ? "Arguments" : result;
            };
          },
          {
            "../internals/classof-raw": 46,
            "../internals/to-string-tag-support": 157,
            "../internals/well-known-symbol": 164
          }
        ],
        48: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var defineProperty = _dereq_2("../internals/object-define-property").f;
            var create = _dereq_2("../internals/object-create");
            var redefineAll = _dereq_2("../internals/redefine-all");
            var bind = _dereq_2("../internals/function-bind-context");
            var anInstance = _dereq_2("../internals/an-instance");
            var iterate = _dereq_2("../internals/iterate");
            var defineIterator = _dereq_2("../internals/define-iterator");
            var setSpecies = _dereq_2("../internals/set-species");
            var DESCRIPTORS = _dereq_2("../internals/descriptors");
            var fastKey = _dereq_2("../internals/internal-metadata").fastKey;
            var InternalStateModule = _dereq_2("../internals/internal-state");
            var setInternalState = InternalStateModule.set;
            var internalStateGetterFor = InternalStateModule.getterFor;
            module2.exports = {
              getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
                var C = wrapper(function(that, iterable) {
                  anInstance(that, C, CONSTRUCTOR_NAME);
                  setInternalState(that, {
                    type: CONSTRUCTOR_NAME,
                    index: create(null),
                    first: void 0,
                    last: void 0,
                    size: 0
                  });
                  if (!DESCRIPTORS)
                    that.size = 0;
                  if (iterable != void 0)
                    iterate(iterable, that[ADDER], that, IS_MAP);
                });
                var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
                var define2 = function(that, key2, value) {
                  var state = getInternalState(that);
                  var entry = getEntry(that, key2);
                  var previous, index;
                  if (entry) {
                    entry.value = value;
                  } else {
                    state.last = entry = {
                      index: index = fastKey(key2, true),
                      key: key2,
                      value,
                      previous: previous = state.last,
                      next: void 0,
                      removed: false
                    };
                    if (!state.first)
                      state.first = entry;
                    if (previous)
                      previous.next = entry;
                    if (DESCRIPTORS)
                      state.size++;
                    else
                      that.size++;
                    if (index !== "F")
                      state.index[index] = entry;
                  }
                  return that;
                };
                var getEntry = function(that, key2) {
                  var state = getInternalState(that);
                  var index = fastKey(key2);
                  var entry;
                  if (index !== "F")
                    return state.index[index];
                  for (entry = state.first; entry; entry = entry.next) {
                    if (entry.key == key2)
                      return entry;
                  }
                };
                redefineAll(C.prototype, {
                  // 23.1.3.1 Map.prototype.clear()
                  // 23.2.3.2 Set.prototype.clear()
                  clear: function clear() {
                    var that = this;
                    var state = getInternalState(that);
                    var data = state.index;
                    var entry = state.first;
                    while (entry) {
                      entry.removed = true;
                      if (entry.previous)
                        entry.previous = entry.previous.next = void 0;
                      delete data[entry.index];
                      entry = entry.next;
                    }
                    state.first = state.last = void 0;
                    if (DESCRIPTORS)
                      state.size = 0;
                    else
                      that.size = 0;
                  },
                  // 23.1.3.3 Map.prototype.delete(key)
                  // 23.2.3.4 Set.prototype.delete(value)
                  "delete": function(key2) {
                    var that = this;
                    var state = getInternalState(that);
                    var entry = getEntry(that, key2);
                    if (entry) {
                      var next = entry.next;
                      var prev = entry.previous;
                      delete state.index[entry.index];
                      entry.removed = true;
                      if (prev)
                        prev.next = next;
                      if (next)
                        next.previous = prev;
                      if (state.first == entry)
                        state.first = next;
                      if (state.last == entry)
                        state.last = prev;
                      if (DESCRIPTORS)
                        state.size--;
                      else
                        that.size--;
                    }
                    return !!entry;
                  },
                  // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
                  // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
                  forEach: function forEach(callbackfn) {
                    var state = getInternalState(this);
                    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0, 3);
                    var entry;
                    while (entry = entry ? entry.next : state.first) {
                      boundFunction(entry.value, entry.key, this);
                      while (entry && entry.removed)
                        entry = entry.previous;
                    }
                  },
                  // 23.1.3.7 Map.prototype.has(key)
                  // 23.2.3.7 Set.prototype.has(value)
                  has: function has(key2) {
                    return !!getEntry(this, key2);
                  }
                });
                redefineAll(C.prototype, IS_MAP ? {
                  // 23.1.3.6 Map.prototype.get(key)
                  get: function get(key2) {
                    var entry = getEntry(this, key2);
                    return entry && entry.value;
                  },
                  // 23.1.3.9 Map.prototype.set(key, value)
                  set: function set(key2, value) {
                    return define2(this, key2 === 0 ? 0 : key2, value);
                  }
                } : {
                  // 23.2.3.1 Set.prototype.add(value)
                  add: function add(value) {
                    return define2(this, value = value === 0 ? 0 : value, value);
                  }
                });
                if (DESCRIPTORS)
                  defineProperty(C.prototype, "size", {
                    get: function() {
                      return getInternalState(this).size;
                    }
                  });
                return C;
              },
              setStrong: function(C, CONSTRUCTOR_NAME, IS_MAP) {
                var ITERATOR_NAME = CONSTRUCTOR_NAME + " Iterator";
                var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
                var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
                defineIterator(C, CONSTRUCTOR_NAME, function(iterated, kind) {
                  setInternalState(this, {
                    type: ITERATOR_NAME,
                    target: iterated,
                    state: getInternalCollectionState(iterated),
                    kind,
                    last: void 0
                  });
                }, function() {
                  var state = getInternalIteratorState(this);
                  var kind = state.kind;
                  var entry = state.last;
                  while (entry && entry.removed)
                    entry = entry.previous;
                  if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
                    state.target = void 0;
                    return {
                      value: void 0,
                      done: true
                    };
                  }
                  if (kind == "keys")
                    return {
                      value: entry.key,
                      done: false
                    };
                  if (kind == "values")
                    return {
                      value: entry.value,
                      done: false
                    };
                  return {
                    value: [
                      entry.key,
                      entry.value
                    ],
                    done: false
                  };
                }, IS_MAP ? "entries" : "values", !IS_MAP, true);
                setSpecies(CONSTRUCTOR_NAME);
              }
            };
          },
          {
            "../internals/an-instance": 27,
            "../internals/define-iterator": 59,
            "../internals/descriptors": 61,
            "../internals/function-bind-context": 72,
            "../internals/internal-metadata": 87,
            "../internals/internal-state": 88,
            "../internals/iterate": 95,
            "../internals/object-create": 108,
            "../internals/object-define-property": 110,
            "../internals/redefine-all": 125,
            "../internals/set-species": 134
          }
        ],
        49: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var redefineAll = _dereq_2("../internals/redefine-all");
            var getWeakData = _dereq_2("../internals/internal-metadata").getWeakData;
            var anObject = _dereq_2("../internals/an-object");
            var isObject = _dereq_2("../internals/is-object");
            var anInstance = _dereq_2("../internals/an-instance");
            var iterate = _dereq_2("../internals/iterate");
            var ArrayIterationModule = _dereq_2("../internals/array-iteration");
            var $has = _dereq_2("../internals/has");
            var InternalStateModule = _dereq_2("../internals/internal-state");
            var setInternalState = InternalStateModule.set;
            var internalStateGetterFor = InternalStateModule.getterFor;
            var find = ArrayIterationModule.find;
            var findIndex = ArrayIterationModule.findIndex;
            var id = 0;
            var uncaughtFrozenStore = function(store) {
              return store.frozen || (store.frozen = new UncaughtFrozenStore());
            };
            var UncaughtFrozenStore = function() {
              this.entries = [];
            };
            var findUncaughtFrozen = function(store, key2) {
              return find(store.entries, function(it) {
                return it[0] === key2;
              });
            };
            UncaughtFrozenStore.prototype = {
              get: function(key2) {
                var entry = findUncaughtFrozen(this, key2);
                if (entry)
                  return entry[1];
              },
              has: function(key2) {
                return !!findUncaughtFrozen(this, key2);
              },
              set: function(key2, value) {
                var entry = findUncaughtFrozen(this, key2);
                if (entry)
                  entry[1] = value;
                else
                  this.entries.push([
                    key2,
                    value
                  ]);
              },
              "delete": function(key2) {
                var index = findIndex(this.entries, function(it) {
                  return it[0] === key2;
                });
                if (~index)
                  this.entries.splice(index, 1);
                return !!~index;
              }
            };
            module2.exports = {
              getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
                var C = wrapper(function(that, iterable) {
                  anInstance(that, C, CONSTRUCTOR_NAME);
                  setInternalState(that, {
                    type: CONSTRUCTOR_NAME,
                    id: id++,
                    frozen: void 0
                  });
                  if (iterable != void 0)
                    iterate(iterable, that[ADDER], that, IS_MAP);
                });
                var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
                var define2 = function(that, key2, value) {
                  var state = getInternalState(that);
                  var data = getWeakData(anObject(key2), true);
                  if (data === true)
                    uncaughtFrozenStore(state).set(key2, value);
                  else
                    data[state.id] = value;
                  return that;
                };
                redefineAll(C.prototype, {
                  // 23.3.3.2 WeakMap.prototype.delete(key)
                  // 23.4.3.3 WeakSet.prototype.delete(value)
                  "delete": function(key2) {
                    var state = getInternalState(this);
                    if (!isObject(key2))
                      return false;
                    var data = getWeakData(key2);
                    if (data === true)
                      return uncaughtFrozenStore(state)["delete"](key2);
                    return data && $has(data, state.id) && delete data[state.id];
                  },
                  // 23.3.3.4 WeakMap.prototype.has(key)
                  // 23.4.3.4 WeakSet.prototype.has(value)
                  has: function has(key2) {
                    var state = getInternalState(this);
                    if (!isObject(key2))
                      return false;
                    var data = getWeakData(key2);
                    if (data === true)
                      return uncaughtFrozenStore(state).has(key2);
                    return data && $has(data, state.id);
                  }
                });
                redefineAll(C.prototype, IS_MAP ? {
                  // 23.3.3.3 WeakMap.prototype.get(key)
                  get: function get(key2) {
                    var state = getInternalState(this);
                    if (isObject(key2)) {
                      var data = getWeakData(key2);
                      if (data === true)
                        return uncaughtFrozenStore(state).get(key2);
                      return data ? data[state.id] : void 0;
                    }
                  },
                  // 23.3.3.5 WeakMap.prototype.set(key, value)
                  set: function set(key2, value) {
                    return define2(this, key2, value);
                  }
                } : {
                  // 23.4.3.1 WeakSet.prototype.add(value)
                  add: function add(value) {
                    return define2(this, value, true);
                  }
                });
                return C;
              }
            };
          },
          {
            "../internals/an-instance": 27,
            "../internals/an-object": 28,
            "../internals/array-iteration": 37,
            "../internals/has": 78,
            "../internals/internal-metadata": 87,
            "../internals/internal-state": 88,
            "../internals/is-object": 92,
            "../internals/iterate": 95,
            "../internals/redefine-all": 125
          }
        ],
        50: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var global2 = _dereq_2("../internals/global");
            var isForced = _dereq_2("../internals/is-forced");
            var redefine = _dereq_2("../internals/redefine");
            var InternalMetadataModule = _dereq_2("../internals/internal-metadata");
            var iterate = _dereq_2("../internals/iterate");
            var anInstance = _dereq_2("../internals/an-instance");
            var isObject = _dereq_2("../internals/is-object");
            var fails = _dereq_2("../internals/fails");
            var checkCorrectnessOfIteration = _dereq_2("../internals/check-correctness-of-iteration");
            var setToStringTag = _dereq_2("../internals/set-to-string-tag");
            var inheritIfRequired = _dereq_2("../internals/inherit-if-required");
            module2.exports = function(CONSTRUCTOR_NAME, wrapper, common) {
              var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
              var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
              var ADDER = IS_MAP ? "set" : "add";
              var NativeConstructor = global2[CONSTRUCTOR_NAME];
              var NativePrototype = NativeConstructor && NativeConstructor.prototype;
              var Constructor = NativeConstructor;
              var exported = {};
              var fixMethod = function(KEY) {
                var nativeMethod = NativePrototype[KEY];
                redefine(NativePrototype, KEY, KEY == "add" ? function add(value) {
                  nativeMethod.call(this, value === 0 ? 0 : value);
                  return this;
                } : KEY == "delete" ? function(key2) {
                  return IS_WEAK && !isObject(key2) ? false : nativeMethod.call(this, key2 === 0 ? 0 : key2);
                } : KEY == "get" ? function get(key2) {
                  return IS_WEAK && !isObject(key2) ? void 0 : nativeMethod.call(this, key2 === 0 ? 0 : key2);
                } : KEY == "has" ? function has(key2) {
                  return IS_WEAK && !isObject(key2) ? false : nativeMethod.call(this, key2 === 0 ? 0 : key2);
                } : function set(key2, value) {
                  nativeMethod.call(this, key2 === 0 ? 0 : key2, value);
                  return this;
                });
              };
              if (isForced(CONSTRUCTOR_NAME, typeof NativeConstructor != "function" || !(IS_WEAK || NativePrototype.forEach && !fails(function() {
                new NativeConstructor().entries().next();
              })))) {
                Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
                InternalMetadataModule.REQUIRED = true;
              } else if (isForced(CONSTRUCTOR_NAME, true)) {
                var instance = new Constructor();
                var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
                var THROWS_ON_PRIMITIVES = fails(function() {
                  instance.has(1);
                });
                var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function(iterable) {
                  new NativeConstructor(iterable);
                });
                var BUGGY_ZERO = !IS_WEAK && fails(function() {
                  var $instance = new NativeConstructor();
                  var index = 5;
                  while (index--)
                    $instance[ADDER](index, index);
                  return !$instance.has(-0);
                });
                if (!ACCEPT_ITERABLES) {
                  Constructor = wrapper(function(dummy, iterable) {
                    anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
                    var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
                    if (iterable != void 0)
                      iterate(iterable, that[ADDER], that, IS_MAP);
                    return that;
                  });
                  Constructor.prototype = NativePrototype;
                  NativePrototype.constructor = Constructor;
                }
                if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
                  fixMethod("delete");
                  fixMethod("has");
                  IS_MAP && fixMethod("get");
                }
                if (BUGGY_ZERO || HASNT_CHAINING)
                  fixMethod(ADDER);
                if (IS_WEAK && NativePrototype.clear)
                  delete NativePrototype.clear;
              }
              exported[CONSTRUCTOR_NAME] = Constructor;
              $({
                global: true,
                forced: Constructor != NativeConstructor
              }, exported);
              setToStringTag(Constructor, CONSTRUCTOR_NAME);
              if (!IS_WEAK)
                common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
              return Constructor;
            };
          },
          {
            "../internals/an-instance": 27,
            "../internals/check-correctness-of-iteration": 45,
            "../internals/export": 68,
            "../internals/fails": 69,
            "../internals/global": 77,
            "../internals/inherit-if-required": 85,
            "../internals/internal-metadata": 87,
            "../internals/is-forced": 91,
            "../internals/is-object": 92,
            "../internals/iterate": 95,
            "../internals/redefine": 126,
            "../internals/set-to-string-tag": 135
          }
        ],
        51: [
          function(_dereq_2, module2, exports2) {
            var has = _dereq_2("../internals/has");
            var ownKeys = _dereq_2("../internals/own-keys");
            var getOwnPropertyDescriptorModule = _dereq_2("../internals/object-get-own-property-descriptor");
            var definePropertyModule = _dereq_2("../internals/object-define-property");
            module2.exports = function(target, source) {
              var keys = ownKeys(source);
              var defineProperty = definePropertyModule.f;
              var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
              for (var i2 = 0; i2 < keys.length; i2++) {
                var key2 = keys[i2];
                if (!has(target, key2))
                  defineProperty(target, key2, getOwnPropertyDescriptor(source, key2));
              }
            };
          },
          {
            "../internals/has": 78,
            "../internals/object-define-property": 110,
            "../internals/object-get-own-property-descriptor": 111,
            "../internals/own-keys": 121
          }
        ],
        52: [
          function(_dereq_2, module2, exports2) {
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var MATCH = wellKnownSymbol("match");
            module2.exports = function(METHOD_NAME) {
              var regexp = /./;
              try {
                "/./"[METHOD_NAME](regexp);
              } catch (e2) {
                try {
                  regexp[MATCH] = false;
                  return "/./"[METHOD_NAME](regexp);
                } catch (f) {
                }
              }
              return false;
            };
          },
          {
            "../internals/well-known-symbol": 164
          }
        ],
        53: [
          function(_dereq_2, module2, exports2) {
            var fails = _dereq_2("../internals/fails");
            module2.exports = !fails(function() {
              function F() {
              }
              F.prototype.constructor = null;
              return Object.getPrototypeOf(new F()) !== F.prototype;
            });
          },
          {
            "../internals/fails": 69
          }
        ],
        54: [
          function(_dereq_2, module2, exports2) {
            var requireObjectCoercible = _dereq_2("../internals/require-object-coercible");
            var quot = /"/g;
            module2.exports = function(string, tag, attribute, value) {
              var S = String(requireObjectCoercible(string));
              var p1 = "<" + tag;
              if (attribute !== "")
                p1 += " " + attribute + '="' + String(value).replace(quot, "&quot;") + '"';
              return p1 + ">" + S + "</" + tag + ">";
            };
          },
          {
            "../internals/require-object-coercible": 131
          }
        ],
        55: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var IteratorPrototype = _dereq_2("../internals/iterators-core").IteratorPrototype;
            var create = _dereq_2("../internals/object-create");
            var createPropertyDescriptor = _dereq_2("../internals/create-property-descriptor");
            var setToStringTag = _dereq_2("../internals/set-to-string-tag");
            var Iterators = _dereq_2("../internals/iterators");
            var returnThis = function() {
              return this;
            };
            module2.exports = function(IteratorConstructor, NAME, next) {
              var TO_STRING_TAG = NAME + " Iterator";
              IteratorConstructor.prototype = create(IteratorPrototype, {
                next: createPropertyDescriptor(1, next)
              });
              setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
              Iterators[TO_STRING_TAG] = returnThis;
              return IteratorConstructor;
            };
          },
          {
            "../internals/create-property-descriptor": 57,
            "../internals/iterators": 97,
            "../internals/iterators-core": 96,
            "../internals/object-create": 108,
            "../internals/set-to-string-tag": 135
          }
        ],
        56: [
          function(_dereq_2, module2, exports2) {
            var DESCRIPTORS = _dereq_2("../internals/descriptors");
            var definePropertyModule = _dereq_2("../internals/object-define-property");
            var createPropertyDescriptor = _dereq_2("../internals/create-property-descriptor");
            module2.exports = DESCRIPTORS ? function(object, key2, value) {
              return definePropertyModule.f(object, key2, createPropertyDescriptor(1, value));
            } : function(object, key2, value) {
              object[key2] = value;
              return object;
            };
          },
          {
            "../internals/create-property-descriptor": 57,
            "../internals/descriptors": 61,
            "../internals/object-define-property": 110
          }
        ],
        57: [
          function(_dereq_2, module2, exports2) {
            module2.exports = function(bitmap, value) {
              return {
                enumerable: !(bitmap & 1),
                configurable: !(bitmap & 2),
                writable: !(bitmap & 4),
                value
              };
            };
          },
          {}
        ],
        58: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var toPrimitive = _dereq_2("../internals/to-primitive");
            var definePropertyModule = _dereq_2("../internals/object-define-property");
            var createPropertyDescriptor = _dereq_2("../internals/create-property-descriptor");
            module2.exports = function(object, key2, value) {
              var propertyKey = toPrimitive(key2);
              if (propertyKey in object)
                definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
              else
                object[propertyKey] = value;
            };
          },
          {
            "../internals/create-property-descriptor": 57,
            "../internals/object-define-property": 110,
            "../internals/to-primitive": 156
          }
        ],
        59: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var createIteratorConstructor = _dereq_2("../internals/create-iterator-constructor");
            var getPrototypeOf = _dereq_2("../internals/object-get-prototype-of");
            var setPrototypeOf = _dereq_2("../internals/object-set-prototype-of");
            var setToStringTag = _dereq_2("../internals/set-to-string-tag");
            var createNonEnumerableProperty = _dereq_2("../internals/create-non-enumerable-property");
            var redefine = _dereq_2("../internals/redefine");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var IS_PURE = _dereq_2("../internals/is-pure");
            var Iterators = _dereq_2("../internals/iterators");
            var IteratorsCore = _dereq_2("../internals/iterators-core");
            var IteratorPrototype = IteratorsCore.IteratorPrototype;
            var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
            var ITERATOR = wellKnownSymbol("iterator");
            var KEYS = "keys";
            var VALUES = "values";
            var ENTRIES = "entries";
            var returnThis = function() {
              return this;
            };
            module2.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
              createIteratorConstructor(IteratorConstructor, NAME, next);
              var getIterationMethod = function(KIND) {
                if (KIND === DEFAULT && defaultIterator)
                  return defaultIterator;
                if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
                  return IterablePrototype[KIND];
                switch (KIND) {
                  case KEYS:
                    return function keys() {
                      return new IteratorConstructor(this, KIND);
                    };
                  case VALUES:
                    return function values() {
                      return new IteratorConstructor(this, KIND);
                    };
                  case ENTRIES:
                    return function entries() {
                      return new IteratorConstructor(this, KIND);
                    };
                }
                return function() {
                  return new IteratorConstructor(this);
                };
              };
              var TO_STRING_TAG = NAME + " Iterator";
              var INCORRECT_VALUES_NAME = false;
              var IterablePrototype = Iterable.prototype;
              var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
              var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
              var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
              var CurrentIteratorPrototype, methods, KEY;
              if (anyNativeIterator) {
                CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
                if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
                  if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
                    if (setPrototypeOf) {
                      setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
                    } else if (typeof CurrentIteratorPrototype[ITERATOR] != "function") {
                      createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
                    }
                  }
                  setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
                  if (IS_PURE)
                    Iterators[TO_STRING_TAG] = returnThis;
                }
              }
              if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
                INCORRECT_VALUES_NAME = true;
                defaultIterator = function values() {
                  return nativeIterator.call(this);
                };
              }
              if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
                createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
              }
              Iterators[NAME] = defaultIterator;
              if (DEFAULT) {
                methods = {
                  values: getIterationMethod(VALUES),
                  keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
                  entries: getIterationMethod(ENTRIES)
                };
                if (FORCED)
                  for (KEY in methods) {
                    if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
                      redefine(IterablePrototype, KEY, methods[KEY]);
                    }
                  }
                else
                  $({
                    target: NAME,
                    proto: true,
                    forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
                  }, methods);
              }
              return methods;
            };
          },
          {
            "../internals/create-iterator-constructor": 55,
            "../internals/create-non-enumerable-property": 56,
            "../internals/export": 68,
            "../internals/is-pure": 93,
            "../internals/iterators": 97,
            "../internals/iterators-core": 96,
            "../internals/object-get-prototype-of": 115,
            "../internals/object-set-prototype-of": 119,
            "../internals/redefine": 126,
            "../internals/set-to-string-tag": 135,
            "../internals/well-known-symbol": 164
          }
        ],
        60: [
          function(_dereq_2, module2, exports2) {
            var path = _dereq_2("../internals/path");
            var has = _dereq_2("../internals/has");
            var wrappedWellKnownSymbolModule = _dereq_2("../internals/well-known-symbol-wrapped");
            var defineProperty = _dereq_2("../internals/object-define-property").f;
            module2.exports = function(NAME) {
              var Symbol2 = path.Symbol || (path.Symbol = {});
              if (!has(Symbol2, NAME))
                defineProperty(Symbol2, NAME, {
                  value: wrappedWellKnownSymbolModule.f(NAME)
                });
            };
          },
          {
            "../internals/has": 78,
            "../internals/object-define-property": 110,
            "../internals/path": 122,
            "../internals/well-known-symbol-wrapped": 163
          }
        ],
        61: [
          function(_dereq_2, module2, exports2) {
            var fails = _dereq_2("../internals/fails");
            module2.exports = !fails(function() {
              return Object.defineProperty({}, 1, {
                get: function() {
                  return 7;
                }
              })[1] != 7;
            });
          },
          {
            "../internals/fails": 69
          }
        ],
        62: [
          function(_dereq_2, module2, exports2) {
            var global2 = _dereq_2("../internals/global");
            var isObject = _dereq_2("../internals/is-object");
            var document2 = global2.document;
            var EXISTS = isObject(document2) && isObject(document2.createElement);
            module2.exports = function(it) {
              return EXISTS ? document2.createElement(it) : {};
            };
          },
          {
            "../internals/global": 77,
            "../internals/is-object": 92
          }
        ],
        63: [
          function(_dereq_2, module2, exports2) {
            module2.exports = {
              CSSRuleList: 0,
              CSSStyleDeclaration: 0,
              CSSValueList: 0,
              ClientRectList: 0,
              DOMRectList: 0,
              DOMStringList: 0,
              DOMTokenList: 1,
              DataTransferItemList: 0,
              FileList: 0,
              HTMLAllCollection: 0,
              HTMLCollection: 0,
              HTMLFormElement: 0,
              HTMLSelectElement: 0,
              MediaList: 0,
              MimeTypeArray: 0,
              NamedNodeMap: 0,
              NodeList: 1,
              PaintRequestList: 0,
              Plugin: 0,
              PluginArray: 0,
              SVGLengthList: 0,
              SVGNumberList: 0,
              SVGPathSegList: 0,
              SVGPointList: 0,
              SVGStringList: 0,
              SVGTransformList: 0,
              SourceBufferList: 0,
              StyleSheetList: 0,
              TextTrackCueList: 0,
              TextTrackList: 0,
              TouchList: 0
            };
          },
          {}
        ],
        64: [
          function(_dereq_2, module2, exports2) {
            var userAgent = _dereq_2("../internals/engine-user-agent");
            module2.exports = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);
          },
          {
            "../internals/engine-user-agent": 65
          }
        ],
        65: [
          function(_dereq_2, module2, exports2) {
            var getBuiltIn = _dereq_2("../internals/get-built-in");
            module2.exports = getBuiltIn("navigator", "userAgent") || "";
          },
          {
            "../internals/get-built-in": 74
          }
        ],
        66: [
          function(_dereq_2, module2, exports2) {
            var global2 = _dereq_2("../internals/global");
            var userAgent = _dereq_2("../internals/engine-user-agent");
            var process = global2.process;
            var versions = process && process.versions;
            var v8 = versions && versions.v8;
            var match, version;
            if (v8) {
              match = v8.split(".");
              version = match[0] + match[1];
            } else if (userAgent) {
              match = userAgent.match(/Edge\/(\d+)/);
              if (!match || match[1] >= 74) {
                match = userAgent.match(/Chrome\/(\d+)/);
                if (match)
                  version = match[1];
              }
            }
            module2.exports = version && +version;
          },
          {
            "../internals/engine-user-agent": 65,
            "../internals/global": 77
          }
        ],
        67: [
          function(_dereq_2, module2, exports2) {
            module2.exports = [
              "constructor",
              "hasOwnProperty",
              "isPrototypeOf",
              "propertyIsEnumerable",
              "toLocaleString",
              "toString",
              "valueOf"
            ];
          },
          {}
        ],
        68: [
          function(_dereq_2, module2, exports2) {
            var global2 = _dereq_2("../internals/global");
            var getOwnPropertyDescriptor = _dereq_2("../internals/object-get-own-property-descriptor").f;
            var createNonEnumerableProperty = _dereq_2("../internals/create-non-enumerable-property");
            var redefine = _dereq_2("../internals/redefine");
            var setGlobal = _dereq_2("../internals/set-global");
            var copyConstructorProperties = _dereq_2("../internals/copy-constructor-properties");
            var isForced = _dereq_2("../internals/is-forced");
            module2.exports = function(options, source) {
              var TARGET = options.target;
              var GLOBAL = options.global;
              var STATIC = options.stat;
              var FORCED, target, key2, targetProperty, sourceProperty, descriptor;
              if (GLOBAL) {
                target = global2;
              } else if (STATIC) {
                target = global2[TARGET] || setGlobal(TARGET, {});
              } else {
                target = (global2[TARGET] || {}).prototype;
              }
              if (target)
                for (key2 in source) {
                  sourceProperty = source[key2];
                  if (options.noTargetGet) {
                    descriptor = getOwnPropertyDescriptor(target, key2);
                    targetProperty = descriptor && descriptor.value;
                  } else
                    targetProperty = target[key2];
                  FORCED = isForced(GLOBAL ? key2 : TARGET + (STATIC ? "." : "#") + key2, options.forced);
                  if (!FORCED && targetProperty !== void 0) {
                    if (typeof sourceProperty === typeof targetProperty)
                      continue;
                    copyConstructorProperties(sourceProperty, targetProperty);
                  }
                  if (options.sham || targetProperty && targetProperty.sham) {
                    createNonEnumerableProperty(sourceProperty, "sham", true);
                  }
                  redefine(target, key2, sourceProperty, options);
                }
            };
          },
          {
            "../internals/copy-constructor-properties": 51,
            "../internals/create-non-enumerable-property": 56,
            "../internals/global": 77,
            "../internals/is-forced": 91,
            "../internals/object-get-own-property-descriptor": 111,
            "../internals/redefine": 126,
            "../internals/set-global": 133
          }
        ],
        69: [
          function(_dereq_2, module2, exports2) {
            module2.exports = function(exec) {
              try {
                return !!exec();
              } catch (error) {
                return true;
              }
            };
          },
          {}
        ],
        70: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("../modules/es.regexp.exec");
            var redefine = _dereq_2("../internals/redefine");
            var fails = _dereq_2("../internals/fails");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var regexpExec = _dereq_2("../internals/regexp-exec");
            var createNonEnumerableProperty = _dereq_2("../internals/create-non-enumerable-property");
            var SPECIES = wellKnownSymbol("species");
            var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function() {
              var re = /./;
              re.exec = function() {
                var result = [];
                result.groups = {
                  a: "7"
                };
                return result;
              };
              return "".replace(re, "$<a>") !== "7";
            });
            var REPLACE_KEEPS_$0 = function() {
              return "a".replace(/./, "$0") === "$0";
            }();
            var REPLACE = wellKnownSymbol("replace");
            var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function() {
              if (/./[REPLACE]) {
                return /./[REPLACE]("a", "$0") === "";
              }
              return false;
            }();
            var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function() {
              var re = /(?:)/;
              var originalExec = re.exec;
              re.exec = function() {
                return originalExec.apply(this, arguments);
              };
              var result = "ab".split(re);
              return result.length !== 2 || result[0] !== "a" || result[1] !== "b";
            });
            module2.exports = function(KEY, length, exec, sham) {
              var SYMBOL = wellKnownSymbol(KEY);
              var DELEGATES_TO_SYMBOL = !fails(function() {
                var O = {};
                O[SYMBOL] = function() {
                  return 7;
                };
                return ""[KEY](O) != 7;
              });
              var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function() {
                var execCalled = false;
                var re = /a/;
                if (KEY === "split") {
                  re = {};
                  re.constructor = {};
                  re.constructor[SPECIES] = function() {
                    return re;
                  };
                  re.flags = "";
                  re[SYMBOL] = /./[SYMBOL];
                }
                re.exec = function() {
                  execCalled = true;
                  return null;
                };
                re[SYMBOL]("");
                return !execCalled;
              });
              if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === "replace" && !(REPLACE_SUPPORTS_NAMED_GROUPS && REPLACE_KEEPS_$0 && !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE) || KEY === "split" && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
                var nativeRegExpMethod = /./[SYMBOL];
                var methods = exec(SYMBOL, ""[KEY], function(nativeMethod, regexp, str, arg2, forceStringMethod) {
                  if (regexp.exec === regexpExec) {
                    if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                      return {
                        done: true,
                        value: nativeRegExpMethod.call(regexp, str, arg2)
                      };
                    }
                    return {
                      done: true,
                      value: nativeMethod.call(str, regexp, arg2)
                    };
                  }
                  return {
                    done: false
                  };
                }, {
                  REPLACE_KEEPS_$0,
                  REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
                });
                var stringMethod = methods[0];
                var regexMethod = methods[1];
                redefine(String.prototype, KEY, stringMethod);
                redefine(RegExp.prototype, SYMBOL, length == 2 ? function(string, arg) {
                  return regexMethod.call(string, this, arg);
                } : function(string) {
                  return regexMethod.call(string, this);
                });
              }
              if (sham)
                createNonEnumerableProperty(RegExp.prototype[SYMBOL], "sham", true);
            };
          },
          {
            "../internals/create-non-enumerable-property": 56,
            "../internals/fails": 69,
            "../internals/redefine": 126,
            "../internals/regexp-exec": 128,
            "../internals/well-known-symbol": 164,
            "../modules/es.regexp.exec": 199
          }
        ],
        71: [
          function(_dereq_2, module2, exports2) {
            var fails = _dereq_2("../internals/fails");
            module2.exports = !fails(function() {
              return Object.isExtensible(Object.preventExtensions({}));
            });
          },
          {
            "../internals/fails": 69
          }
        ],
        72: [
          function(_dereq_2, module2, exports2) {
            var aFunction = _dereq_2("../internals/a-function");
            module2.exports = function(fn, that, length) {
              aFunction(fn);
              if (that === void 0)
                return fn;
              switch (length) {
                case 0:
                  return function() {
                    return fn.call(that);
                  };
                case 1:
                  return function(a) {
                    return fn.call(that, a);
                  };
                case 2:
                  return function(a, b) {
                    return fn.call(that, a, b);
                  };
                case 3:
                  return function(a, b, c) {
                    return fn.call(that, a, b, c);
                  };
              }
              return function() {
                return fn.apply(that, arguments);
              };
            };
          },
          {
            "../internals/a-function": 23
          }
        ],
        73: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var aFunction = _dereq_2("../internals/a-function");
            var isObject = _dereq_2("../internals/is-object");
            var slice = [].slice;
            var factories = {};
            var construct = function(C, argsLength, args) {
              if (!(argsLength in factories)) {
                for (var list = [], i2 = 0; i2 < argsLength; i2++)
                  list[i2] = "a[" + i2 + "]";
                factories[argsLength] = Function("C,a", "return new C(" + list.join(",") + ")");
              }
              return factories[argsLength](C, args);
            };
            module2.exports = Function.bind || function bind(that) {
              var fn = aFunction(this);
              var partArgs = slice.call(arguments, 1);
              var boundFunction = function bound() {
                var args = partArgs.concat(slice.call(arguments));
                return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);
              };
              if (isObject(fn.prototype))
                boundFunction.prototype = fn.prototype;
              return boundFunction;
            };
          },
          {
            "../internals/a-function": 23,
            "../internals/is-object": 92
          }
        ],
        74: [
          function(_dereq_2, module2, exports2) {
            var path = _dereq_2("../internals/path");
            var global2 = _dereq_2("../internals/global");
            var aFunction = function(variable) {
              return typeof variable == "function" ? variable : void 0;
            };
            module2.exports = function(namespace, method) {
              return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global2[namespace]) : path[namespace] && path[namespace][method] || global2[namespace] && global2[namespace][method];
            };
          },
          {
            "../internals/global": 77,
            "../internals/path": 122
          }
        ],
        75: [
          function(_dereq_2, module2, exports2) {
            var classof = _dereq_2("../internals/classof");
            var Iterators = _dereq_2("../internals/iterators");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var ITERATOR = wellKnownSymbol("iterator");
            module2.exports = function(it) {
              if (it != void 0)
                return it[ITERATOR] || it["@@iterator"] || Iterators[classof(it)];
            };
          },
          {
            "../internals/classof": 47,
            "../internals/iterators": 97,
            "../internals/well-known-symbol": 164
          }
        ],
        76: [
          function(_dereq_2, module2, exports2) {
            var anObject = _dereq_2("../internals/an-object");
            var getIteratorMethod = _dereq_2("../internals/get-iterator-method");
            module2.exports = function(it) {
              var iteratorMethod = getIteratorMethod(it);
              if (typeof iteratorMethod != "function") {
                throw TypeError(String(it) + " is not iterable");
              }
              return anObject(iteratorMethod.call(it));
            };
          },
          {
            "../internals/an-object": 28,
            "../internals/get-iterator-method": 75
          }
        ],
        77: [
          function(_dereq_2, module2, exports2) {
            (function(global2) {
              var check = function(it) {
                return it && it.Math == Math && it;
              };
              module2.exports = // eslint-disable-next-line no-undef
              check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof global2 == "object" && global2) || // eslint-disable-next-line no-new-func
              Function("return this")();
            }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
          },
          {}
        ],
        78: [
          function(_dereq_2, module2, exports2) {
            var hasOwnProperty = {}.hasOwnProperty;
            module2.exports = function(it, key2) {
              return hasOwnProperty.call(it, key2);
            };
          },
          {}
        ],
        79: [
          function(_dereq_2, module2, exports2) {
            module2.exports = {};
          },
          {}
        ],
        80: [
          function(_dereq_2, module2, exports2) {
            var global2 = _dereq_2("../internals/global");
            module2.exports = function(a, b) {
              var console2 = global2.console;
              if (console2 && console2.error) {
                arguments.length === 1 ? console2.error(a) : console2.error(a, b);
              }
            };
          },
          {
            "../internals/global": 77
          }
        ],
        81: [
          function(_dereq_2, module2, exports2) {
            var getBuiltIn = _dereq_2("../internals/get-built-in");
            module2.exports = getBuiltIn("document", "documentElement");
          },
          {
            "../internals/get-built-in": 74
          }
        ],
        82: [
          function(_dereq_2, module2, exports2) {
            var DESCRIPTORS = _dereq_2("../internals/descriptors");
            var fails = _dereq_2("../internals/fails");
            var createElement = _dereq_2("../internals/document-create-element");
            module2.exports = !DESCRIPTORS && !fails(function() {
              return Object.defineProperty(createElement("div"), "a", {
                get: function() {
                  return 7;
                }
              }).a != 7;
            });
          },
          {
            "../internals/descriptors": 61,
            "../internals/document-create-element": 62,
            "../internals/fails": 69
          }
        ],
        83: [
          function(_dereq_2, module2, exports2) {
            var Infinity2 = 1 / 0;
            var abs = Math.abs;
            var pow = Math.pow;
            var floor = Math.floor;
            var log = Math.log;
            var LN2 = Math.LN2;
            var pack = function(number, mantissaLength, bytes) {
              var buffer = new Array(bytes);
              var exponentLength = bytes * 8 - mantissaLength - 1;
              var eMax = (1 << exponentLength) - 1;
              var eBias = eMax >> 1;
              var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
              var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
              var index = 0;
              var exponent, mantissa, c;
              number = abs(number);
              if (number != number || number === Infinity2) {
                mantissa = number != number ? 1 : 0;
                exponent = eMax;
              } else {
                exponent = floor(log(number) / LN2);
                if (number * (c = pow(2, -exponent)) < 1) {
                  exponent--;
                  c *= 2;
                }
                if (exponent + eBias >= 1) {
                  number += rt / c;
                } else {
                  number += rt * pow(2, 1 - eBias);
                }
                if (number * c >= 2) {
                  exponent++;
                  c /= 2;
                }
                if (exponent + eBias >= eMax) {
                  mantissa = 0;
                  exponent = eMax;
                } else if (exponent + eBias >= 1) {
                  mantissa = (number * c - 1) * pow(2, mantissaLength);
                  exponent = exponent + eBias;
                } else {
                  mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
                  exponent = 0;
                }
              }
              for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8)
                ;
              exponent = exponent << mantissaLength | mantissa;
              exponentLength += mantissaLength;
              for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8)
                ;
              buffer[--index] |= sign * 128;
              return buffer;
            };
            var unpack = function(buffer, mantissaLength) {
              var bytes = buffer.length;
              var exponentLength = bytes * 8 - mantissaLength - 1;
              var eMax = (1 << exponentLength) - 1;
              var eBias = eMax >> 1;
              var nBits = exponentLength - 7;
              var index = bytes - 1;
              var sign = buffer[index--];
              var exponent = sign & 127;
              var mantissa;
              sign >>= 7;
              for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8)
                ;
              mantissa = exponent & (1 << -nBits) - 1;
              exponent >>= -nBits;
              nBits += mantissaLength;
              for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8)
                ;
              if (exponent === 0) {
                exponent = 1 - eBias;
              } else if (exponent === eMax) {
                return mantissa ? NaN : sign ? -Infinity2 : Infinity2;
              } else {
                mantissa = mantissa + pow(2, mantissaLength);
                exponent = exponent - eBias;
              }
              return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
            };
            module2.exports = {
              pack,
              unpack
            };
          },
          {}
        ],
        84: [
          function(_dereq_2, module2, exports2) {
            var fails = _dereq_2("../internals/fails");
            var classof = _dereq_2("../internals/classof-raw");
            var split = "".split;
            module2.exports = fails(function() {
              return !Object("z").propertyIsEnumerable(0);
            }) ? function(it) {
              return classof(it) == "String" ? split.call(it, "") : Object(it);
            } : Object;
          },
          {
            "../internals/classof-raw": 46,
            "../internals/fails": 69
          }
        ],
        85: [
          function(_dereq_2, module2, exports2) {
            var isObject = _dereq_2("../internals/is-object");
            var setPrototypeOf = _dereq_2("../internals/object-set-prototype-of");
            module2.exports = function($this, dummy, Wrapper) {
              var NewTarget, NewTargetPrototype;
              if (
                // it can work only with native `setPrototypeOf`
                setPrototypeOf && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
                typeof (NewTarget = dummy.constructor) == "function" && NewTarget !== Wrapper && isObject(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype
              )
                setPrototypeOf($this, NewTargetPrototype);
              return $this;
            };
          },
          {
            "../internals/is-object": 92,
            "../internals/object-set-prototype-of": 119
          }
        ],
        86: [
          function(_dereq_2, module2, exports2) {
            var store = _dereq_2("../internals/shared-store");
            var functionToString = Function.toString;
            if (typeof store.inspectSource != "function") {
              store.inspectSource = function(it) {
                return functionToString.call(it);
              };
            }
            module2.exports = store.inspectSource;
          },
          {
            "../internals/shared-store": 137
          }
        ],
        87: [
          function(_dereq_2, module2, exports2) {
            var hiddenKeys = _dereq_2("../internals/hidden-keys");
            var isObject = _dereq_2("../internals/is-object");
            var has = _dereq_2("../internals/has");
            var defineProperty = _dereq_2("../internals/object-define-property").f;
            var uid = _dereq_2("../internals/uid");
            var FREEZING = _dereq_2("../internals/freezing");
            var METADATA = uid("meta");
            var id = 0;
            var isExtensible = Object.isExtensible || function() {
              return true;
            };
            var setMetadata = function(it) {
              defineProperty(it, METADATA, {
                value: {
                  objectID: "O" + ++id,
                  // object ID
                  weakData: {}
                  // weak collections IDs
                }
              });
            };
            var fastKey = function(it, create) {
              if (!isObject(it))
                return typeof it == "symbol" ? it : (typeof it == "string" ? "S" : "P") + it;
              if (!has(it, METADATA)) {
                if (!isExtensible(it))
                  return "F";
                if (!create)
                  return "E";
                setMetadata(it);
              }
              return it[METADATA].objectID;
            };
            var getWeakData = function(it, create) {
              if (!has(it, METADATA)) {
                if (!isExtensible(it))
                  return true;
                if (!create)
                  return false;
                setMetadata(it);
              }
              return it[METADATA].weakData;
            };
            var onFreeze = function(it) {
              if (FREEZING && meta.REQUIRED && isExtensible(it) && !has(it, METADATA))
                setMetadata(it);
              return it;
            };
            var meta = module2.exports = {
              REQUIRED: false,
              fastKey,
              getWeakData,
              onFreeze
            };
            hiddenKeys[METADATA] = true;
          },
          {
            "../internals/freezing": 71,
            "../internals/has": 78,
            "../internals/hidden-keys": 79,
            "../internals/is-object": 92,
            "../internals/object-define-property": 110,
            "../internals/uid": 161
          }
        ],
        88: [
          function(_dereq_2, module2, exports2) {
            var NATIVE_WEAK_MAP = _dereq_2("../internals/native-weak-map");
            var global2 = _dereq_2("../internals/global");
            var isObject = _dereq_2("../internals/is-object");
            var createNonEnumerableProperty = _dereq_2("../internals/create-non-enumerable-property");
            var objectHas = _dereq_2("../internals/has");
            var sharedKey = _dereq_2("../internals/shared-key");
            var hiddenKeys = _dereq_2("../internals/hidden-keys");
            var WeakMap2 = global2.WeakMap;
            var set, get, has;
            var enforce = function(it) {
              return has(it) ? get(it) : set(it, {});
            };
            var getterFor = function(TYPE) {
              return function(it) {
                var state;
                if (!isObject(it) || (state = get(it)).type !== TYPE) {
                  throw TypeError("Incompatible receiver, " + TYPE + " required");
                }
                return state;
              };
            };
            if (NATIVE_WEAK_MAP) {
              var store = new WeakMap2();
              var wmget = store.get;
              var wmhas = store.has;
              var wmset = store.set;
              set = function(it, metadata) {
                wmset.call(store, it, metadata);
                return metadata;
              };
              get = function(it) {
                return wmget.call(store, it) || {};
              };
              has = function(it) {
                return wmhas.call(store, it);
              };
            } else {
              var STATE = sharedKey("state");
              hiddenKeys[STATE] = true;
              set = function(it, metadata) {
                createNonEnumerableProperty(it, STATE, metadata);
                return metadata;
              };
              get = function(it) {
                return objectHas(it, STATE) ? it[STATE] : {};
              };
              has = function(it) {
                return objectHas(it, STATE);
              };
            }
            module2.exports = {
              set,
              get,
              has,
              enforce,
              getterFor
            };
          },
          {
            "../internals/create-non-enumerable-property": 56,
            "../internals/global": 77,
            "../internals/has": 78,
            "../internals/hidden-keys": 79,
            "../internals/is-object": 92,
            "../internals/native-weak-map": 103,
            "../internals/shared-key": 136
          }
        ],
        89: [
          function(_dereq_2, module2, exports2) {
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var Iterators = _dereq_2("../internals/iterators");
            var ITERATOR = wellKnownSymbol("iterator");
            var ArrayPrototype = Array.prototype;
            module2.exports = function(it) {
              return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
            };
          },
          {
            "../internals/iterators": 97,
            "../internals/well-known-symbol": 164
          }
        ],
        90: [
          function(_dereq_2, module2, exports2) {
            var classof = _dereq_2("../internals/classof-raw");
            module2.exports = Array.isArray || function isArray(arg) {
              return classof(arg) == "Array";
            };
          },
          {
            "../internals/classof-raw": 46
          }
        ],
        91: [
          function(_dereq_2, module2, exports2) {
            var fails = _dereq_2("../internals/fails");
            var replacement = /#|\.prototype\./;
            var isForced = function(feature, detection) {
              var value = data[normalize(feature)];
              return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == "function" ? fails(detection) : !!detection;
            };
            var normalize = isForced.normalize = function(string) {
              return String(string).replace(replacement, ".").toLowerCase();
            };
            var data = isForced.data = {};
            var NATIVE = isForced.NATIVE = "N";
            var POLYFILL = isForced.POLYFILL = "P";
            module2.exports = isForced;
          },
          {
            "../internals/fails": 69
          }
        ],
        92: [
          function(_dereq_2, module2, exports2) {
            module2.exports = function(it) {
              return typeof it === "object" ? it !== null : typeof it === "function";
            };
          },
          {}
        ],
        93: [
          function(_dereq_2, module2, exports2) {
            module2.exports = false;
          },
          {}
        ],
        94: [
          function(_dereq_2, module2, exports2) {
            var isObject = _dereq_2("../internals/is-object");
            var classof = _dereq_2("../internals/classof-raw");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var MATCH = wellKnownSymbol("match");
            module2.exports = function(it) {
              var isRegExp;
              return isObject(it) && ((isRegExp = it[MATCH]) !== void 0 ? !!isRegExp : classof(it) == "RegExp");
            };
          },
          {
            "../internals/classof-raw": 46,
            "../internals/is-object": 92,
            "../internals/well-known-symbol": 164
          }
        ],
        95: [
          function(_dereq_2, module2, exports2) {
            var anObject = _dereq_2("../internals/an-object");
            var isArrayIteratorMethod = _dereq_2("../internals/is-array-iterator-method");
            var toLength = _dereq_2("../internals/to-length");
            var bind = _dereq_2("../internals/function-bind-context");
            var getIteratorMethod = _dereq_2("../internals/get-iterator-method");
            var callWithSafeIterationClosing = _dereq_2("../internals/call-with-safe-iteration-closing");
            var Result = function(stopped, result) {
              this.stopped = stopped;
              this.result = result;
            };
            var iterate = module2.exports = function(iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
              var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);
              var iterator, iterFn, index, length, result, next, step;
              if (IS_ITERATOR) {
                iterator = iterable;
              } else {
                iterFn = getIteratorMethod(iterable);
                if (typeof iterFn != "function")
                  throw TypeError("Target is not iterable");
                if (isArrayIteratorMethod(iterFn)) {
                  for (index = 0, length = toLength(iterable.length); length > index; index++) {
                    result = AS_ENTRIES ? boundFunction(anObject(step = iterable[index])[0], step[1]) : boundFunction(iterable[index]);
                    if (result && result instanceof Result)
                      return result;
                  }
                  return new Result(false);
                }
                iterator = iterFn.call(iterable);
              }
              next = iterator.next;
              while (!(step = next.call(iterator)).done) {
                result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
                if (typeof result == "object" && result && result instanceof Result)
                  return result;
              }
              return new Result(false);
            };
            iterate.stop = function(result) {
              return new Result(true, result);
            };
          },
          {
            "../internals/an-object": 28,
            "../internals/call-with-safe-iteration-closing": 44,
            "../internals/function-bind-context": 72,
            "../internals/get-iterator-method": 75,
            "../internals/is-array-iterator-method": 89,
            "../internals/to-length": 152
          }
        ],
        96: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var getPrototypeOf = _dereq_2("../internals/object-get-prototype-of");
            var createNonEnumerableProperty = _dereq_2("../internals/create-non-enumerable-property");
            var has = _dereq_2("../internals/has");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var IS_PURE = _dereq_2("../internals/is-pure");
            var ITERATOR = wellKnownSymbol("iterator");
            var BUGGY_SAFARI_ITERATORS = false;
            var returnThis = function() {
              return this;
            };
            var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;
            if ([].keys) {
              arrayIterator = [].keys();
              if (!("next" in arrayIterator))
                BUGGY_SAFARI_ITERATORS = true;
              else {
                PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
                if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
                  IteratorPrototype = PrototypeOfArrayIteratorPrototype;
              }
            }
            if (IteratorPrototype == void 0)
              IteratorPrototype = {};
            if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {
              createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
            }
            module2.exports = {
              IteratorPrototype,
              BUGGY_SAFARI_ITERATORS
            };
          },
          {
            "../internals/create-non-enumerable-property": 56,
            "../internals/has": 78,
            "../internals/is-pure": 93,
            "../internals/object-get-prototype-of": 115,
            "../internals/well-known-symbol": 164
          }
        ],
        97: [
          function(_dereq_2, module2, exports2) {
            module2.exports = {};
          },
          {}
        ],
        98: [
          function(_dereq_2, module2, exports2) {
            module2.exports = Math.sign || function sign(x) {
              return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
            };
          },
          {}
        ],
        99: [
          function(_dereq_2, module2, exports2) {
            var global2 = _dereq_2("../internals/global");
            var getOwnPropertyDescriptor = _dereq_2("../internals/object-get-own-property-descriptor").f;
            var classof = _dereq_2("../internals/classof-raw");
            var macrotask = _dereq_2("../internals/task").set;
            var IS_IOS = _dereq_2("../internals/engine-is-ios");
            var MutationObserver = global2.MutationObserver || global2.WebKitMutationObserver;
            var process = global2.process;
            var Promise2 = global2.Promise;
            var IS_NODE = classof(process) == "process";
            var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global2, "queueMicrotask");
            var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
            var flush, head, last, notify, toggle, node, promise, then;
            if (!queueMicrotask) {
              flush = function() {
                var parent, fn;
                if (IS_NODE && (parent = process.domain))
                  parent.exit();
                while (head) {
                  fn = head.fn;
                  head = head.next;
                  try {
                    fn();
                  } catch (error) {
                    if (head)
                      notify();
                    else
                      last = void 0;
                    throw error;
                  }
                }
                last = void 0;
                if (parent)
                  parent.enter();
              };
              if (IS_NODE) {
                notify = function() {
                  process.nextTick(flush);
                };
              } else if (MutationObserver && !IS_IOS) {
                toggle = true;
                node = document.createTextNode("");
                new MutationObserver(flush).observe(node, {
                  characterData: true
                });
                notify = function() {
                  node.data = toggle = !toggle;
                };
              } else if (Promise2 && Promise2.resolve) {
                promise = Promise2.resolve(void 0);
                then = promise.then;
                notify = function() {
                  then.call(promise, flush);
                };
              } else {
                notify = function() {
                  macrotask.call(global2, flush);
                };
              }
            }
            module2.exports = queueMicrotask || function(fn) {
              var task = {
                fn,
                next: void 0
              };
              if (last)
                last.next = task;
              if (!head) {
                head = task;
                notify();
              }
              last = task;
            };
          },
          {
            "../internals/classof-raw": 46,
            "../internals/engine-is-ios": 64,
            "../internals/global": 77,
            "../internals/object-get-own-property-descriptor": 111,
            "../internals/task": 146
          }
        ],
        100: [
          function(_dereq_2, module2, exports2) {
            var global2 = _dereq_2("../internals/global");
            module2.exports = global2.Promise;
          },
          {
            "../internals/global": 77
          }
        ],
        101: [
          function(_dereq_2, module2, exports2) {
            var fails = _dereq_2("../internals/fails");
            module2.exports = !!Object.getOwnPropertySymbols && !fails(function() {
              return !String(Symbol());
            });
          },
          {
            "../internals/fails": 69
          }
        ],
        102: [
          function(_dereq_2, module2, exports2) {
            var fails = _dereq_2("../internals/fails");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var IS_PURE = _dereq_2("../internals/is-pure");
            var ITERATOR = wellKnownSymbol("iterator");
            module2.exports = !fails(function() {
              var url2 = new URL("b?a=1&b=2&c=3", "http://a");
              var searchParams = url2.searchParams;
              var result = "";
              url2.pathname = "c%20d";
              searchParams.forEach(function(value, key2) {
                searchParams["delete"]("b");
                result += key2 + value;
              });
              return IS_PURE && !url2.toJSON || !searchParams.sort || url2.href !== "http://a/c%20d?a=1&c=3" || searchParams.get("c") !== "3" || String(new URLSearchParams("?a=1")) !== "a=1" || !searchParams[ITERATOR] || new URL("https://a@b").username !== "a" || new URLSearchParams(new URLSearchParams("a=b")).get("a") !== "b" || new URL("http://тест").host !== "xn--e1aybc" || new URL("http://a#б").hash !== "#%D0%B1" || result !== "a1c3" || new URL("http://x", void 0).host !== "x";
            });
          },
          {
            "../internals/fails": 69,
            "../internals/is-pure": 93,
            "../internals/well-known-symbol": 164
          }
        ],
        103: [
          function(_dereq_2, module2, exports2) {
            var global2 = _dereq_2("../internals/global");
            var inspectSource = _dereq_2("../internals/inspect-source");
            var WeakMap2 = global2.WeakMap;
            module2.exports = typeof WeakMap2 === "function" && /native code/.test(inspectSource(WeakMap2));
          },
          {
            "../internals/global": 77,
            "../internals/inspect-source": 86
          }
        ],
        104: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var aFunction = _dereq_2("../internals/a-function");
            var PromiseCapability = function(C) {
              var resolve, reject;
              this.promise = new C(function($$resolve, $$reject) {
                if (resolve !== void 0 || reject !== void 0)
                  throw TypeError("Bad Promise constructor");
                resolve = $$resolve;
                reject = $$reject;
              });
              this.resolve = aFunction(resolve);
              this.reject = aFunction(reject);
            };
            module2.exports.f = function(C) {
              return new PromiseCapability(C);
            };
          },
          {
            "../internals/a-function": 23
          }
        ],
        105: [
          function(_dereq_2, module2, exports2) {
            var isRegExp = _dereq_2("../internals/is-regexp");
            module2.exports = function(it) {
              if (isRegExp(it)) {
                throw TypeError("The method doesn't accept regular expressions");
              }
              return it;
            };
          },
          {
            "../internals/is-regexp": 94
          }
        ],
        106: [
          function(_dereq_2, module2, exports2) {
            var global2 = _dereq_2("../internals/global");
            var globalIsFinite = global2.isFinite;
            module2.exports = Number.isFinite || function isFinite2(it) {
              return typeof it == "number" && globalIsFinite(it);
            };
          },
          {
            "../internals/global": 77
          }
        ],
        107: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var DESCRIPTORS = _dereq_2("../internals/descriptors");
            var fails = _dereq_2("../internals/fails");
            var objectKeys = _dereq_2("../internals/object-keys");
            var getOwnPropertySymbolsModule = _dereq_2("../internals/object-get-own-property-symbols");
            var propertyIsEnumerableModule = _dereq_2("../internals/object-property-is-enumerable");
            var toObject = _dereq_2("../internals/to-object");
            var IndexedObject = _dereq_2("../internals/indexed-object");
            var nativeAssign = Object.assign;
            var defineProperty = Object.defineProperty;
            module2.exports = !nativeAssign || fails(function() {
              if (DESCRIPTORS && nativeAssign({
                b: 1
              }, nativeAssign(defineProperty({}, "a", {
                enumerable: true,
                get: function() {
                  defineProperty(this, "b", {
                    value: 3,
                    enumerable: false
                  });
                }
              }), {
                b: 2
              })).b !== 1)
                return true;
              var A = {};
              var B = {};
              var symbol = Symbol();
              var alphabet = "abcdefghijklmnopqrst";
              A[symbol] = 7;
              alphabet.split("").forEach(function(chr) {
                B[chr] = chr;
              });
              return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join("") != alphabet;
            }) ? function assign(target, source) {
              var T = toObject(target);
              var argumentsLength = arguments.length;
              var index = 1;
              var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
              var propertyIsEnumerable = propertyIsEnumerableModule.f;
              while (argumentsLength > index) {
                var S = IndexedObject(arguments[index++]);
                var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
                var length = keys.length;
                var j = 0;
                var key2;
                while (length > j) {
                  key2 = keys[j++];
                  if (!DESCRIPTORS || propertyIsEnumerable.call(S, key2))
                    T[key2] = S[key2];
                }
              }
              return T;
            } : nativeAssign;
          },
          {
            "../internals/descriptors": 61,
            "../internals/fails": 69,
            "../internals/indexed-object": 84,
            "../internals/object-get-own-property-symbols": 114,
            "../internals/object-keys": 117,
            "../internals/object-property-is-enumerable": 118,
            "../internals/to-object": 153
          }
        ],
        108: [
          function(_dereq_2, module2, exports2) {
            var anObject = _dereq_2("../internals/an-object");
            var defineProperties = _dereq_2("../internals/object-define-properties");
            var enumBugKeys = _dereq_2("../internals/enum-bug-keys");
            var hiddenKeys = _dereq_2("../internals/hidden-keys");
            var html = _dereq_2("../internals/html");
            var documentCreateElement = _dereq_2("../internals/document-create-element");
            var sharedKey = _dereq_2("../internals/shared-key");
            var GT = ">";
            var LT = "<";
            var PROTOTYPE = "prototype";
            var SCRIPT = "script";
            var IE_PROTO = sharedKey("IE_PROTO");
            var EmptyConstructor = function() {
            };
            var scriptTag = function(content) {
              return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
            };
            var NullProtoObjectViaActiveX = function(activeXDocument2) {
              activeXDocument2.write(scriptTag(""));
              activeXDocument2.close();
              var temp = activeXDocument2.parentWindow.Object;
              activeXDocument2 = null;
              return temp;
            };
            var NullProtoObjectViaIFrame = function() {
              var iframe = documentCreateElement("iframe");
              var JS = "java" + SCRIPT + ":";
              var iframeDocument;
              iframe.style.display = "none";
              html.appendChild(iframe);
              iframe.src = String(JS);
              iframeDocument = iframe.contentWindow.document;
              iframeDocument.open();
              iframeDocument.write(scriptTag("document.F=Object"));
              iframeDocument.close();
              return iframeDocument.F;
            };
            var activeXDocument;
            var NullProtoObject = function() {
              try {
                activeXDocument = document.domain && new ActiveXObject("htmlfile");
              } catch (error) {
              }
              NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
              var length = enumBugKeys.length;
              while (length--)
                delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
              return NullProtoObject();
            };
            hiddenKeys[IE_PROTO] = true;
            module2.exports = Object.create || function create(O, Properties) {
              var result;
              if (O !== null) {
                EmptyConstructor[PROTOTYPE] = anObject(O);
                result = new EmptyConstructor();
                EmptyConstructor[PROTOTYPE] = null;
                result[IE_PROTO] = O;
              } else
                result = NullProtoObject();
              return Properties === void 0 ? result : defineProperties(result, Properties);
            };
          },
          {
            "../internals/an-object": 28,
            "../internals/document-create-element": 62,
            "../internals/enum-bug-keys": 67,
            "../internals/hidden-keys": 79,
            "../internals/html": 81,
            "../internals/object-define-properties": 109,
            "../internals/shared-key": 136
          }
        ],
        109: [
          function(_dereq_2, module2, exports2) {
            var DESCRIPTORS = _dereq_2("../internals/descriptors");
            var definePropertyModule = _dereq_2("../internals/object-define-property");
            var anObject = _dereq_2("../internals/an-object");
            var objectKeys = _dereq_2("../internals/object-keys");
            module2.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
              anObject(O);
              var keys = objectKeys(Properties);
              var length = keys.length;
              var index = 0;
              var key2;
              while (length > index)
                definePropertyModule.f(O, key2 = keys[index++], Properties[key2]);
              return O;
            };
          },
          {
            "../internals/an-object": 28,
            "../internals/descriptors": 61,
            "../internals/object-define-property": 110,
            "../internals/object-keys": 117
          }
        ],
        110: [
          function(_dereq_2, module2, exports2) {
            var DESCRIPTORS = _dereq_2("../internals/descriptors");
            var IE8_DOM_DEFINE = _dereq_2("../internals/ie8-dom-define");
            var anObject = _dereq_2("../internals/an-object");
            var toPrimitive = _dereq_2("../internals/to-primitive");
            var nativeDefineProperty = Object.defineProperty;
            exports2.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
              anObject(O);
              P = toPrimitive(P, true);
              anObject(Attributes);
              if (IE8_DOM_DEFINE)
                try {
                  return nativeDefineProperty(O, P, Attributes);
                } catch (error) {
                }
              if ("get" in Attributes || "set" in Attributes)
                throw TypeError("Accessors not supported");
              if ("value" in Attributes)
                O[P] = Attributes.value;
              return O;
            };
          },
          {
            "../internals/an-object": 28,
            "../internals/descriptors": 61,
            "../internals/ie8-dom-define": 82,
            "../internals/to-primitive": 156
          }
        ],
        111: [
          function(_dereq_2, module2, exports2) {
            var DESCRIPTORS = _dereq_2("../internals/descriptors");
            var propertyIsEnumerableModule = _dereq_2("../internals/object-property-is-enumerable");
            var createPropertyDescriptor = _dereq_2("../internals/create-property-descriptor");
            var toIndexedObject = _dereq_2("../internals/to-indexed-object");
            var toPrimitive = _dereq_2("../internals/to-primitive");
            var has = _dereq_2("../internals/has");
            var IE8_DOM_DEFINE = _dereq_2("../internals/ie8-dom-define");
            var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
            exports2.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
              O = toIndexedObject(O);
              P = toPrimitive(P, true);
              if (IE8_DOM_DEFINE)
                try {
                  return nativeGetOwnPropertyDescriptor(O, P);
                } catch (error) {
                }
              if (has(O, P))
                return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
            };
          },
          {
            "../internals/create-property-descriptor": 57,
            "../internals/descriptors": 61,
            "../internals/has": 78,
            "../internals/ie8-dom-define": 82,
            "../internals/object-property-is-enumerable": 118,
            "../internals/to-indexed-object": 150,
            "../internals/to-primitive": 156
          }
        ],
        112: [
          function(_dereq_2, module2, exports2) {
            var toIndexedObject = _dereq_2("../internals/to-indexed-object");
            var nativeGetOwnPropertyNames = _dereq_2("../internals/object-get-own-property-names").f;
            var toString = {}.toString;
            var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
            var getWindowNames = function(it) {
              try {
                return nativeGetOwnPropertyNames(it);
              } catch (error) {
                return windowNames.slice();
              }
            };
            module2.exports.f = function getOwnPropertyNames(it) {
              return windowNames && toString.call(it) == "[object Window]" ? getWindowNames(it) : nativeGetOwnPropertyNames(toIndexedObject(it));
            };
          },
          {
            "../internals/object-get-own-property-names": 113,
            "../internals/to-indexed-object": 150
          }
        ],
        113: [
          function(_dereq_2, module2, exports2) {
            var internalObjectKeys = _dereq_2("../internals/object-keys-internal");
            var enumBugKeys = _dereq_2("../internals/enum-bug-keys");
            var hiddenKeys = enumBugKeys.concat("length", "prototype");
            exports2.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
              return internalObjectKeys(O, hiddenKeys);
            };
          },
          {
            "../internals/enum-bug-keys": 67,
            "../internals/object-keys-internal": 116
          }
        ],
        114: [
          function(_dereq_2, module2, exports2) {
            exports2.f = Object.getOwnPropertySymbols;
          },
          {}
        ],
        115: [
          function(_dereq_2, module2, exports2) {
            var has = _dereq_2("../internals/has");
            var toObject = _dereq_2("../internals/to-object");
            var sharedKey = _dereq_2("../internals/shared-key");
            var CORRECT_PROTOTYPE_GETTER = _dereq_2("../internals/correct-prototype-getter");
            var IE_PROTO = sharedKey("IE_PROTO");
            var ObjectPrototype = Object.prototype;
            module2.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function(O) {
              O = toObject(O);
              if (has(O, IE_PROTO))
                return O[IE_PROTO];
              if (typeof O.constructor == "function" && O instanceof O.constructor) {
                return O.constructor.prototype;
              }
              return O instanceof Object ? ObjectPrototype : null;
            };
          },
          {
            "../internals/correct-prototype-getter": 53,
            "../internals/has": 78,
            "../internals/shared-key": 136,
            "../internals/to-object": 153
          }
        ],
        116: [
          function(_dereq_2, module2, exports2) {
            var has = _dereq_2("../internals/has");
            var toIndexedObject = _dereq_2("../internals/to-indexed-object");
            var indexOf = _dereq_2("../internals/array-includes").indexOf;
            var hiddenKeys = _dereq_2("../internals/hidden-keys");
            module2.exports = function(object, names) {
              var O = toIndexedObject(object);
              var i2 = 0;
              var result = [];
              var key2;
              for (key2 in O)
                !has(hiddenKeys, key2) && has(O, key2) && result.push(key2);
              while (names.length > i2)
                if (has(O, key2 = names[i2++])) {
                  ~indexOf(result, key2) || result.push(key2);
                }
              return result;
            };
          },
          {
            "../internals/array-includes": 36,
            "../internals/has": 78,
            "../internals/hidden-keys": 79,
            "../internals/to-indexed-object": 150
          }
        ],
        117: [
          function(_dereq_2, module2, exports2) {
            var internalObjectKeys = _dereq_2("../internals/object-keys-internal");
            var enumBugKeys = _dereq_2("../internals/enum-bug-keys");
            module2.exports = Object.keys || function keys(O) {
              return internalObjectKeys(O, enumBugKeys);
            };
          },
          {
            "../internals/enum-bug-keys": 67,
            "../internals/object-keys-internal": 116
          }
        ],
        118: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
            var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
            var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({
              1: 2
            }, 1);
            exports2.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
              var descriptor = getOwnPropertyDescriptor(this, V);
              return !!descriptor && descriptor.enumerable;
            } : nativePropertyIsEnumerable;
          },
          {}
        ],
        119: [
          function(_dereq_2, module2, exports2) {
            var anObject = _dereq_2("../internals/an-object");
            var aPossiblePrototype = _dereq_2("../internals/a-possible-prototype");
            module2.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
              var CORRECT_SETTER = false;
              var test = {};
              var setter;
              try {
                setter = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set;
                setter.call(test, []);
                CORRECT_SETTER = test instanceof Array;
              } catch (error) {
              }
              return function setPrototypeOf(O, proto) {
                anObject(O);
                aPossiblePrototype(proto);
                if (CORRECT_SETTER)
                  setter.call(O, proto);
                else
                  O.__proto__ = proto;
                return O;
              };
            }() : void 0);
          },
          {
            "../internals/a-possible-prototype": 24,
            "../internals/an-object": 28
          }
        ],
        120: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var TO_STRING_TAG_SUPPORT = _dereq_2("../internals/to-string-tag-support");
            var classof = _dereq_2("../internals/classof");
            module2.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
              return "[object " + classof(this) + "]";
            };
          },
          {
            "../internals/classof": 47,
            "../internals/to-string-tag-support": 157
          }
        ],
        121: [
          function(_dereq_2, module2, exports2) {
            var getBuiltIn = _dereq_2("../internals/get-built-in");
            var getOwnPropertyNamesModule = _dereq_2("../internals/object-get-own-property-names");
            var getOwnPropertySymbolsModule = _dereq_2("../internals/object-get-own-property-symbols");
            var anObject = _dereq_2("../internals/an-object");
            module2.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys(it) {
              var keys = getOwnPropertyNamesModule.f(anObject(it));
              var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
              return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
            };
          },
          {
            "../internals/an-object": 28,
            "../internals/get-built-in": 74,
            "../internals/object-get-own-property-names": 113,
            "../internals/object-get-own-property-symbols": 114
          }
        ],
        122: [
          function(_dereq_2, module2, exports2) {
            var global2 = _dereq_2("../internals/global");
            module2.exports = global2;
          },
          {
            "../internals/global": 77
          }
        ],
        123: [
          function(_dereq_2, module2, exports2) {
            module2.exports = function(exec) {
              try {
                return {
                  error: false,
                  value: exec()
                };
              } catch (error) {
                return {
                  error: true,
                  value: error
                };
              }
            };
          },
          {}
        ],
        124: [
          function(_dereq_2, module2, exports2) {
            var anObject = _dereq_2("../internals/an-object");
            var isObject = _dereq_2("../internals/is-object");
            var newPromiseCapability = _dereq_2("../internals/new-promise-capability");
            module2.exports = function(C, x) {
              anObject(C);
              if (isObject(x) && x.constructor === C)
                return x;
              var promiseCapability = newPromiseCapability.f(C);
              var resolve = promiseCapability.resolve;
              resolve(x);
              return promiseCapability.promise;
            };
          },
          {
            "../internals/an-object": 28,
            "../internals/is-object": 92,
            "../internals/new-promise-capability": 104
          }
        ],
        125: [
          function(_dereq_2, module2, exports2) {
            var redefine = _dereq_2("../internals/redefine");
            module2.exports = function(target, src, options) {
              for (var key2 in src)
                redefine(target, key2, src[key2], options);
              return target;
            };
          },
          {
            "../internals/redefine": 126
          }
        ],
        126: [
          function(_dereq_2, module2, exports2) {
            var global2 = _dereq_2("../internals/global");
            var createNonEnumerableProperty = _dereq_2("../internals/create-non-enumerable-property");
            var has = _dereq_2("../internals/has");
            var setGlobal = _dereq_2("../internals/set-global");
            var inspectSource = _dereq_2("../internals/inspect-source");
            var InternalStateModule = _dereq_2("../internals/internal-state");
            var getInternalState = InternalStateModule.get;
            var enforceInternalState = InternalStateModule.enforce;
            var TEMPLATE = String(String).split("String");
            (module2.exports = function(O, key2, value, options) {
              var unsafe = options ? !!options.unsafe : false;
              var simple = options ? !!options.enumerable : false;
              var noTargetGet = options ? !!options.noTargetGet : false;
              if (typeof value == "function") {
                if (typeof key2 == "string" && !has(value, "name"))
                  createNonEnumerableProperty(value, "name", key2);
                enforceInternalState(value).source = TEMPLATE.join(typeof key2 == "string" ? key2 : "");
              }
              if (O === global2) {
                if (simple)
                  O[key2] = value;
                else
                  setGlobal(key2, value);
                return;
              } else if (!unsafe) {
                delete O[key2];
              } else if (!noTargetGet && O[key2]) {
                simple = true;
              }
              if (simple)
                O[key2] = value;
              else
                createNonEnumerableProperty(O, key2, value);
            })(Function.prototype, "toString", function toString() {
              return typeof this == "function" && getInternalState(this).source || inspectSource(this);
            });
          },
          {
            "../internals/create-non-enumerable-property": 56,
            "../internals/global": 77,
            "../internals/has": 78,
            "../internals/inspect-source": 86,
            "../internals/internal-state": 88,
            "../internals/set-global": 133
          }
        ],
        127: [
          function(_dereq_2, module2, exports2) {
            var classof = _dereq_2("./classof-raw");
            var regexpExec = _dereq_2("./regexp-exec");
            module2.exports = function(R, S) {
              var exec = R.exec;
              if (typeof exec === "function") {
                var result = exec.call(R, S);
                if (typeof result !== "object") {
                  throw TypeError("RegExp exec method returned something other than an Object or null");
                }
                return result;
              }
              if (classof(R) !== "RegExp") {
                throw TypeError("RegExp#exec called on incompatible receiver");
              }
              return regexpExec.call(R, S);
            };
          },
          {
            "./classof-raw": 46,
            "./regexp-exec": 128
          }
        ],
        128: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var regexpFlags = _dereq_2("./regexp-flags");
            var stickyHelpers = _dereq_2("./regexp-sticky-helpers");
            var nativeExec = RegExp.prototype.exec;
            var nativeReplace = String.prototype.replace;
            var patchedExec = nativeExec;
            var UPDATES_LAST_INDEX_WRONG = function() {
              var re1 = /a/;
              var re2 = /b*/g;
              nativeExec.call(re1, "a");
              nativeExec.call(re2, "a");
              return re1.lastIndex !== 0 || re2.lastIndex !== 0;
            }();
            var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;
            var NPCG_INCLUDED = /()??/.exec("")[1] !== void 0;
            var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;
            if (PATCH) {
              patchedExec = function exec(str) {
                var re = this;
                var lastIndex, reCopy, match, i2;
                var sticky = UNSUPPORTED_Y && re.sticky;
                var flags = regexpFlags.call(re);
                var source = re.source;
                var charsAdded = 0;
                var strCopy = str;
                if (sticky) {
                  flags = flags.replace("y", "");
                  if (flags.indexOf("g") === -1) {
                    flags += "g";
                  }
                  strCopy = String(str).slice(re.lastIndex);
                  if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== "\n")) {
                    source = "(?: " + source + ")";
                    strCopy = " " + strCopy;
                    charsAdded++;
                  }
                  reCopy = new RegExp("^(?:" + source + ")", flags);
                }
                if (NPCG_INCLUDED) {
                  reCopy = new RegExp("^" + source + "$(?!\\s)", flags);
                }
                if (UPDATES_LAST_INDEX_WRONG)
                  lastIndex = re.lastIndex;
                match = nativeExec.call(sticky ? reCopy : re, strCopy);
                if (sticky) {
                  if (match) {
                    match.input = match.input.slice(charsAdded);
                    match[0] = match[0].slice(charsAdded);
                    match.index = re.lastIndex;
                    re.lastIndex += match[0].length;
                  } else
                    re.lastIndex = 0;
                } else if (UPDATES_LAST_INDEX_WRONG && match) {
                  re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
                }
                if (NPCG_INCLUDED && match && match.length > 1) {
                  nativeReplace.call(match[0], reCopy, function() {
                    for (i2 = 1; i2 < arguments.length - 2; i2++) {
                      if (arguments[i2] === void 0)
                        match[i2] = void 0;
                    }
                  });
                }
                return match;
              };
            }
            module2.exports = patchedExec;
          },
          {
            "./regexp-flags": 129,
            "./regexp-sticky-helpers": 130
          }
        ],
        129: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var anObject = _dereq_2("../internals/an-object");
            module2.exports = function() {
              var that = anObject(this);
              var result = "";
              if (that.global)
                result += "g";
              if (that.ignoreCase)
                result += "i";
              if (that.multiline)
                result += "m";
              if (that.dotAll)
                result += "s";
              if (that.unicode)
                result += "u";
              if (that.sticky)
                result += "y";
              return result;
            };
          },
          {
            "../internals/an-object": 28
          }
        ],
        130: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var fails = _dereq_2("./fails");
            function RE(s, f) {
              return RegExp(s, f);
            }
            exports2.UNSUPPORTED_Y = fails(function() {
              var re = RE("a", "y");
              re.lastIndex = 2;
              return re.exec("abcd") != null;
            });
            exports2.BROKEN_CARET = fails(function() {
              var re = RE("^r", "gy");
              re.lastIndex = 2;
              return re.exec("str") != null;
            });
          },
          {
            "./fails": 69
          }
        ],
        131: [
          function(_dereq_2, module2, exports2) {
            module2.exports = function(it) {
              if (it == void 0)
                throw TypeError("Can't call method on " + it);
              return it;
            };
          },
          {}
        ],
        132: [
          function(_dereq_2, module2, exports2) {
            module2.exports = Object.is || function is(x, y) {
              return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
            };
          },
          {}
        ],
        133: [
          function(_dereq_2, module2, exports2) {
            var global2 = _dereq_2("../internals/global");
            var createNonEnumerableProperty = _dereq_2("../internals/create-non-enumerable-property");
            module2.exports = function(key2, value) {
              try {
                createNonEnumerableProperty(global2, key2, value);
              } catch (error) {
                global2[key2] = value;
              }
              return value;
            };
          },
          {
            "../internals/create-non-enumerable-property": 56,
            "../internals/global": 77
          }
        ],
        134: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var getBuiltIn = _dereq_2("../internals/get-built-in");
            var definePropertyModule = _dereq_2("../internals/object-define-property");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var DESCRIPTORS = _dereq_2("../internals/descriptors");
            var SPECIES = wellKnownSymbol("species");
            module2.exports = function(CONSTRUCTOR_NAME) {
              var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
              var defineProperty = definePropertyModule.f;
              if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
                defineProperty(Constructor, SPECIES, {
                  configurable: true,
                  get: function() {
                    return this;
                  }
                });
              }
            };
          },
          {
            "../internals/descriptors": 61,
            "../internals/get-built-in": 74,
            "../internals/object-define-property": 110,
            "../internals/well-known-symbol": 164
          }
        ],
        135: [
          function(_dereq_2, module2, exports2) {
            var defineProperty = _dereq_2("../internals/object-define-property").f;
            var has = _dereq_2("../internals/has");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var TO_STRING_TAG = wellKnownSymbol("toStringTag");
            module2.exports = function(it, TAG, STATIC) {
              if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
                defineProperty(it, TO_STRING_TAG, {
                  configurable: true,
                  value: TAG
                });
              }
            };
          },
          {
            "../internals/has": 78,
            "../internals/object-define-property": 110,
            "../internals/well-known-symbol": 164
          }
        ],
        136: [
          function(_dereq_2, module2, exports2) {
            var shared = _dereq_2("../internals/shared");
            var uid = _dereq_2("../internals/uid");
            var keys = shared("keys");
            module2.exports = function(key2) {
              return keys[key2] || (keys[key2] = uid(key2));
            };
          },
          {
            "../internals/shared": 138,
            "../internals/uid": 161
          }
        ],
        137: [
          function(_dereq_2, module2, exports2) {
            var global2 = _dereq_2("../internals/global");
            var setGlobal = _dereq_2("../internals/set-global");
            var SHARED = "__core-js_shared__";
            var store = global2[SHARED] || setGlobal(SHARED, {});
            module2.exports = store;
          },
          {
            "../internals/global": 77,
            "../internals/set-global": 133
          }
        ],
        138: [
          function(_dereq_2, module2, exports2) {
            var IS_PURE = _dereq_2("../internals/is-pure");
            var store = _dereq_2("../internals/shared-store");
            (module2.exports = function(key2, value) {
              return store[key2] || (store[key2] = value !== void 0 ? value : {});
            })("versions", []).push({
              version: "3.6.5",
              mode: IS_PURE ? "pure" : "global",
              copyright: "© 2020 Denis Pushkarev (zloirock.ru)"
            });
          },
          {
            "../internals/is-pure": 93,
            "../internals/shared-store": 137
          }
        ],
        139: [
          function(_dereq_2, module2, exports2) {
            var anObject = _dereq_2("../internals/an-object");
            var aFunction = _dereq_2("../internals/a-function");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var SPECIES = wellKnownSymbol("species");
            module2.exports = function(O, defaultConstructor) {
              var C = anObject(O).constructor;
              var S;
              return C === void 0 || (S = anObject(C)[SPECIES]) == void 0 ? defaultConstructor : aFunction(S);
            };
          },
          {
            "../internals/a-function": 23,
            "../internals/an-object": 28,
            "../internals/well-known-symbol": 164
          }
        ],
        140: [
          function(_dereq_2, module2, exports2) {
            var fails = _dereq_2("../internals/fails");
            module2.exports = function(METHOD_NAME) {
              return fails(function() {
                var test = ""[METHOD_NAME]('"');
                return test !== test.toLowerCase() || test.split('"').length > 3;
              });
            };
          },
          {
            "../internals/fails": 69
          }
        ],
        141: [
          function(_dereq_2, module2, exports2) {
            var toInteger = _dereq_2("../internals/to-integer");
            var requireObjectCoercible = _dereq_2("../internals/require-object-coercible");
            var createMethod = function(CONVERT_TO_STRING) {
              return function($this, pos) {
                var S = String(requireObjectCoercible($this));
                var position = toInteger(pos);
                var size = S.length;
                var first, second;
                if (position < 0 || position >= size)
                  return CONVERT_TO_STRING ? "" : void 0;
                first = S.charCodeAt(position);
                return first < 55296 || first > 56319 || position + 1 === size || (second = S.charCodeAt(position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
              };
            };
            module2.exports = {
              // `String.prototype.codePointAt` method
              // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
              codeAt: createMethod(false),
              // `String.prototype.at` method
              // https://github.com/mathiasbynens/String.prototype.at
              charAt: createMethod(true)
            };
          },
          {
            "../internals/require-object-coercible": 131,
            "../internals/to-integer": 151
          }
        ],
        142: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var maxInt = 2147483647;
            var base = 36;
            var tMin = 1;
            var tMax = 26;
            var skew = 38;
            var damp = 700;
            var initialBias = 72;
            var initialN = 128;
            var delimiter = "-";
            var regexNonASCII = /[^\0-\u007E]/;
            var regexSeparators = /[.\u3002\uFF0E\uFF61]/g;
            var OVERFLOW_ERROR = "Overflow: input needs wider integers to process";
            var baseMinusTMin = base - tMin;
            var floor = Math.floor;
            var stringFromCharCode = String.fromCharCode;
            var ucs2decode = function(string) {
              var output = [];
              var counter = 0;
              var length = string.length;
              while (counter < length) {
                var value = string.charCodeAt(counter++);
                if (value >= 55296 && value <= 56319 && counter < length) {
                  var extra = string.charCodeAt(counter++);
                  if ((extra & 64512) == 56320) {
                    output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
                  } else {
                    output.push(value);
                    counter--;
                  }
                } else {
                  output.push(value);
                }
              }
              return output;
            };
            var digitToBasic = function(digit) {
              return digit + 22 + 75 * (digit < 26);
            };
            var adapt = function(delta, numPoints, firstTime) {
              var k2 = 0;
              delta = firstTime ? floor(delta / damp) : delta >> 1;
              delta += floor(delta / numPoints);
              for (; delta > baseMinusTMin * tMax >> 1; k2 += base) {
                delta = floor(delta / baseMinusTMin);
              }
              return floor(k2 + (baseMinusTMin + 1) * delta / (delta + skew));
            };
            var encode = function(input) {
              var output = [];
              input = ucs2decode(input);
              var inputLength = input.length;
              var n = initialN;
              var delta = 0;
              var bias = initialBias;
              var i2, currentValue;
              for (i2 = 0; i2 < input.length; i2++) {
                currentValue = input[i2];
                if (currentValue < 128) {
                  output.push(stringFromCharCode(currentValue));
                }
              }
              var basicLength = output.length;
              var handledCPCount = basicLength;
              if (basicLength) {
                output.push(delimiter);
              }
              while (handledCPCount < inputLength) {
                var m = maxInt;
                for (i2 = 0; i2 < input.length; i2++) {
                  currentValue = input[i2];
                  if (currentValue >= n && currentValue < m) {
                    m = currentValue;
                  }
                }
                var handledCPCountPlusOne = handledCPCount + 1;
                if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                  throw RangeError(OVERFLOW_ERROR);
                }
                delta += (m - n) * handledCPCountPlusOne;
                n = m;
                for (i2 = 0; i2 < input.length; i2++) {
                  currentValue = input[i2];
                  if (currentValue < n && ++delta > maxInt) {
                    throw RangeError(OVERFLOW_ERROR);
                  }
                  if (currentValue == n) {
                    var q = delta;
                    for (
                      var k2 = base;
                      ;
                      /* no condition */
                      k2 += base
                    ) {
                      var t = k2 <= bias ? tMin : k2 >= bias + tMax ? tMax : k2 - bias;
                      if (q < t)
                        break;
                      var qMinusT = q - t;
                      var baseMinusT = base - t;
                      output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
                      q = floor(qMinusT / baseMinusT);
                    }
                    output.push(stringFromCharCode(digitToBasic(q)));
                    bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                    delta = 0;
                    ++handledCPCount;
                  }
                }
                ++delta;
                ++n;
              }
              return output.join("");
            };
            module2.exports = function(input) {
              var encoded = [];
              var labels = input.toLowerCase().replace(regexSeparators, ".").split(".");
              var i2, label;
              for (i2 = 0; i2 < labels.length; i2++) {
                label = labels[i2];
                encoded.push(regexNonASCII.test(label) ? "xn--" + encode(label) : label);
              }
              return encoded.join(".");
            };
          },
          {}
        ],
        143: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var toInteger = _dereq_2("../internals/to-integer");
            var requireObjectCoercible = _dereq_2("../internals/require-object-coercible");
            module2.exports = "".repeat || function repeat(count) {
              var str = String(requireObjectCoercible(this));
              var result = "";
              var n = toInteger(count);
              if (n < 0 || n == Infinity)
                throw RangeError("Wrong number of repetitions");
              for (; n > 0; (n >>>= 1) && (str += str))
                if (n & 1)
                  result += str;
              return result;
            };
          },
          {
            "../internals/require-object-coercible": 131,
            "../internals/to-integer": 151
          }
        ],
        144: [
          function(_dereq_2, module2, exports2) {
            var fails = _dereq_2("../internals/fails");
            var whitespaces = _dereq_2("../internals/whitespaces");
            var non = "​᠎";
            module2.exports = function(METHOD_NAME) {
              return fails(function() {
                return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
              });
            };
          },
          {
            "../internals/fails": 69,
            "../internals/whitespaces": 165
          }
        ],
        145: [
          function(_dereq_2, module2, exports2) {
            var requireObjectCoercible = _dereq_2("../internals/require-object-coercible");
            var whitespaces = _dereq_2("../internals/whitespaces");
            var whitespace = "[" + whitespaces + "]";
            var ltrim = RegExp("^" + whitespace + whitespace + "*");
            var rtrim = RegExp(whitespace + whitespace + "*$");
            var createMethod = function(TYPE) {
              return function($this) {
                var string = String(requireObjectCoercible($this));
                if (TYPE & 1)
                  string = string.replace(ltrim, "");
                if (TYPE & 2)
                  string = string.replace(rtrim, "");
                return string;
              };
            };
            module2.exports = {
              // `String.prototype.{ trimLeft, trimStart }` methods
              // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
              start: createMethod(1),
              // `String.prototype.{ trimRight, trimEnd }` methods
              // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
              end: createMethod(2),
              // `String.prototype.trim` method
              // https://tc39.github.io/ecma262/#sec-string.prototype.trim
              trim: createMethod(3)
            };
          },
          {
            "../internals/require-object-coercible": 131,
            "../internals/whitespaces": 165
          }
        ],
        146: [
          function(_dereq_2, module2, exports2) {
            var global2 = _dereq_2("../internals/global");
            var fails = _dereq_2("../internals/fails");
            var classof = _dereq_2("../internals/classof-raw");
            var bind = _dereq_2("../internals/function-bind-context");
            var html = _dereq_2("../internals/html");
            var createElement = _dereq_2("../internals/document-create-element");
            var IS_IOS = _dereq_2("../internals/engine-is-ios");
            var location2 = global2.location;
            var set = global2.setImmediate;
            var clear = global2.clearImmediate;
            var process = global2.process;
            var MessageChannel2 = global2.MessageChannel;
            var Dispatch = global2.Dispatch;
            var counter = 0;
            var queue = {};
            var ONREADYSTATECHANGE = "onreadystatechange";
            var defer, channel, port;
            var run = function(id) {
              if (queue.hasOwnProperty(id)) {
                var fn = queue[id];
                delete queue[id];
                fn();
              }
            };
            var runner = function(id) {
              return function() {
                run(id);
              };
            };
            var listener = function(event) {
              run(event.data);
            };
            var post = function(id) {
              global2.postMessage(id + "", location2.protocol + "//" + location2.host);
            };
            if (!set || !clear) {
              set = function setImmediate(fn) {
                var args = [];
                var i2 = 1;
                while (arguments.length > i2)
                  args.push(arguments[i2++]);
                queue[++counter] = function() {
                  (typeof fn == "function" ? fn : Function(fn)).apply(void 0, args);
                };
                defer(counter);
                return counter;
              };
              clear = function clearImmediate(id) {
                delete queue[id];
              };
              if (classof(process) == "process") {
                defer = function(id) {
                  process.nextTick(runner(id));
                };
              } else if (Dispatch && Dispatch.now) {
                defer = function(id) {
                  Dispatch.now(runner(id));
                };
              } else if (MessageChannel2 && !IS_IOS) {
                channel = new MessageChannel2();
                port = channel.port2;
                channel.port1.onmessage = listener;
                defer = bind(port.postMessage, port, 1);
              } else if (global2.addEventListener && typeof postMessage == "function" && !global2.importScripts && !fails(post) && location2.protocol !== "file:") {
                defer = post;
                global2.addEventListener("message", listener, false);
              } else if (ONREADYSTATECHANGE in createElement("script")) {
                defer = function(id) {
                  html.appendChild(createElement("script"))[ONREADYSTATECHANGE] = function() {
                    html.removeChild(this);
                    run(id);
                  };
                };
              } else {
                defer = function(id) {
                  setTimeout(runner(id), 0);
                };
              }
            }
            module2.exports = {
              set,
              clear
            };
          },
          {
            "../internals/classof-raw": 46,
            "../internals/document-create-element": 62,
            "../internals/engine-is-ios": 64,
            "../internals/fails": 69,
            "../internals/function-bind-context": 72,
            "../internals/global": 77,
            "../internals/html": 81
          }
        ],
        147: [
          function(_dereq_2, module2, exports2) {
            var classof = _dereq_2("../internals/classof-raw");
            module2.exports = function(value) {
              if (typeof value != "number" && classof(value) != "Number") {
                throw TypeError("Incorrect invocation");
              }
              return +value;
            };
          },
          {
            "../internals/classof-raw": 46
          }
        ],
        148: [
          function(_dereq_2, module2, exports2) {
            var toInteger = _dereq_2("../internals/to-integer");
            var max = Math.max;
            var min = Math.min;
            module2.exports = function(index, length) {
              var integer = toInteger(index);
              return integer < 0 ? max(integer + length, 0) : min(integer, length);
            };
          },
          {
            "../internals/to-integer": 151
          }
        ],
        149: [
          function(_dereq_2, module2, exports2) {
            var toInteger = _dereq_2("../internals/to-integer");
            var toLength = _dereq_2("../internals/to-length");
            module2.exports = function(it) {
              if (it === void 0)
                return 0;
              var number = toInteger(it);
              var length = toLength(number);
              if (number !== length)
                throw RangeError("Wrong length or index");
              return length;
            };
          },
          {
            "../internals/to-integer": 151,
            "../internals/to-length": 152
          }
        ],
        150: [
          function(_dereq_2, module2, exports2) {
            var IndexedObject = _dereq_2("../internals/indexed-object");
            var requireObjectCoercible = _dereq_2("../internals/require-object-coercible");
            module2.exports = function(it) {
              return IndexedObject(requireObjectCoercible(it));
            };
          },
          {
            "../internals/indexed-object": 84,
            "../internals/require-object-coercible": 131
          }
        ],
        151: [
          function(_dereq_2, module2, exports2) {
            var ceil = Math.ceil;
            var floor = Math.floor;
            module2.exports = function(argument) {
              return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
            };
          },
          {}
        ],
        152: [
          function(_dereq_2, module2, exports2) {
            var toInteger = _dereq_2("../internals/to-integer");
            var min = Math.min;
            module2.exports = function(argument) {
              return argument > 0 ? min(toInteger(argument), 9007199254740991) : 0;
            };
          },
          {
            "../internals/to-integer": 151
          }
        ],
        153: [
          function(_dereq_2, module2, exports2) {
            var requireObjectCoercible = _dereq_2("../internals/require-object-coercible");
            module2.exports = function(argument) {
              return Object(requireObjectCoercible(argument));
            };
          },
          {
            "../internals/require-object-coercible": 131
          }
        ],
        154: [
          function(_dereq_2, module2, exports2) {
            var toPositiveInteger = _dereq_2("../internals/to-positive-integer");
            module2.exports = function(it, BYTES) {
              var offset = toPositiveInteger(it);
              if (offset % BYTES)
                throw RangeError("Wrong offset");
              return offset;
            };
          },
          {
            "../internals/to-positive-integer": 155
          }
        ],
        155: [
          function(_dereq_2, module2, exports2) {
            var toInteger = _dereq_2("../internals/to-integer");
            module2.exports = function(it) {
              var result = toInteger(it);
              if (result < 0)
                throw RangeError("The argument can't be less than 0");
              return result;
            };
          },
          {
            "../internals/to-integer": 151
          }
        ],
        156: [
          function(_dereq_2, module2, exports2) {
            var isObject = _dereq_2("../internals/is-object");
            module2.exports = function(input, PREFERRED_STRING) {
              if (!isObject(input))
                return input;
              var fn, val;
              if (PREFERRED_STRING && typeof (fn = input.toString) == "function" && !isObject(val = fn.call(input)))
                return val;
              if (typeof (fn = input.valueOf) == "function" && !isObject(val = fn.call(input)))
                return val;
              if (!PREFERRED_STRING && typeof (fn = input.toString) == "function" && !isObject(val = fn.call(input)))
                return val;
              throw TypeError("Can't convert object to primitive value");
            };
          },
          {
            "../internals/is-object": 92
          }
        ],
        157: [
          function(_dereq_2, module2, exports2) {
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var TO_STRING_TAG = wellKnownSymbol("toStringTag");
            var test = {};
            test[TO_STRING_TAG] = "z";
            module2.exports = String(test) === "[object z]";
          },
          {
            "../internals/well-known-symbol": 164
          }
        ],
        158: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var global2 = _dereq_2("../internals/global");
            var DESCRIPTORS = _dereq_2("../internals/descriptors");
            var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = _dereq_2("../internals/typed-array-constructors-require-wrappers");
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var ArrayBufferModule = _dereq_2("../internals/array-buffer");
            var anInstance = _dereq_2("../internals/an-instance");
            var createPropertyDescriptor = _dereq_2("../internals/create-property-descriptor");
            var createNonEnumerableProperty = _dereq_2("../internals/create-non-enumerable-property");
            var toLength = _dereq_2("../internals/to-length");
            var toIndex = _dereq_2("../internals/to-index");
            var toOffset = _dereq_2("../internals/to-offset");
            var toPrimitive = _dereq_2("../internals/to-primitive");
            var has = _dereq_2("../internals/has");
            var classof = _dereq_2("../internals/classof");
            var isObject = _dereq_2("../internals/is-object");
            var create = _dereq_2("../internals/object-create");
            var setPrototypeOf = _dereq_2("../internals/object-set-prototype-of");
            var getOwnPropertyNames = _dereq_2("../internals/object-get-own-property-names").f;
            var typedArrayFrom = _dereq_2("../internals/typed-array-from");
            var forEach = _dereq_2("../internals/array-iteration").forEach;
            var setSpecies = _dereq_2("../internals/set-species");
            var definePropertyModule = _dereq_2("../internals/object-define-property");
            var getOwnPropertyDescriptorModule = _dereq_2("../internals/object-get-own-property-descriptor");
            var InternalStateModule = _dereq_2("../internals/internal-state");
            var inheritIfRequired = _dereq_2("../internals/inherit-if-required");
            var getInternalState = InternalStateModule.get;
            var setInternalState = InternalStateModule.set;
            var nativeDefineProperty = definePropertyModule.f;
            var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
            var round = Math.round;
            var RangeError2 = global2.RangeError;
            var ArrayBuffer2 = ArrayBufferModule.ArrayBuffer;
            var DataView2 = ArrayBufferModule.DataView;
            var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
            var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;
            var TypedArray = ArrayBufferViewCore.TypedArray;
            var TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;
            var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
            var isTypedArray = ArrayBufferViewCore.isTypedArray;
            var BYTES_PER_ELEMENT = "BYTES_PER_ELEMENT";
            var WRONG_LENGTH = "Wrong length";
            var fromList = function(C, list) {
              var index = 0;
              var length = list.length;
              var result = new (aTypedArrayConstructor(C))(length);
              while (length > index)
                result[index] = list[index++];
              return result;
            };
            var addGetter = function(it, key2) {
              nativeDefineProperty(it, key2, {
                get: function() {
                  return getInternalState(this)[key2];
                }
              });
            };
            var isArrayBuffer = function(it) {
              var klass;
              return it instanceof ArrayBuffer2 || (klass = classof(it)) == "ArrayBuffer" || klass == "SharedArrayBuffer";
            };
            var isTypedArrayIndex = function(target, key2) {
              return isTypedArray(target) && typeof key2 != "symbol" && key2 in target && String(+key2) == String(key2);
            };
            var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key2) {
              return isTypedArrayIndex(target, key2 = toPrimitive(key2, true)) ? createPropertyDescriptor(2, target[key2]) : nativeGetOwnPropertyDescriptor(target, key2);
            };
            var wrappedDefineProperty = function defineProperty(target, key2, descriptor) {
              if (isTypedArrayIndex(target, key2 = toPrimitive(key2, true)) && isObject(descriptor) && has(descriptor, "value") && !has(descriptor, "get") && !has(descriptor, "set") && !descriptor.configurable && (!has(descriptor, "writable") || descriptor.writable) && (!has(descriptor, "enumerable") || descriptor.enumerable)) {
                target[key2] = descriptor.value;
                return target;
              }
              return nativeDefineProperty(target, key2, descriptor);
            };
            if (DESCRIPTORS) {
              if (!NATIVE_ARRAY_BUFFER_VIEWS) {
                getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
                definePropertyModule.f = wrappedDefineProperty;
                addGetter(TypedArrayPrototype, "buffer");
                addGetter(TypedArrayPrototype, "byteOffset");
                addGetter(TypedArrayPrototype, "byteLength");
                addGetter(TypedArrayPrototype, "length");
              }
              $({
                target: "Object",
                stat: true,
                forced: !NATIVE_ARRAY_BUFFER_VIEWS
              }, {
                getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
                defineProperty: wrappedDefineProperty
              });
              module2.exports = function(TYPE, wrapper, CLAMPED) {
                var BYTES = TYPE.match(/\d+$/)[0] / 8;
                var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? "Clamped" : "") + "Array";
                var GETTER = "get" + TYPE;
                var SETTER = "set" + TYPE;
                var NativeTypedArrayConstructor = global2[CONSTRUCTOR_NAME];
                var TypedArrayConstructor = NativeTypedArrayConstructor;
                var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
                var exported = {};
                var getter = function(that, index) {
                  var data = getInternalState(that);
                  return data.view[GETTER](index * BYTES + data.byteOffset, true);
                };
                var setter = function(that, index, value) {
                  var data = getInternalState(that);
                  if (CLAMPED)
                    value = (value = round(value)) < 0 ? 0 : value > 255 ? 255 : value & 255;
                  data.view[SETTER](index * BYTES + data.byteOffset, value, true);
                };
                var addElement = function(that, index) {
                  nativeDefineProperty(that, index, {
                    get: function() {
                      return getter(this, index);
                    },
                    set: function(value) {
                      return setter(this, index, value);
                    },
                    enumerable: true
                  });
                };
                if (!NATIVE_ARRAY_BUFFER_VIEWS) {
                  TypedArrayConstructor = wrapper(function(that, data, offset, $length) {
                    anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
                    var index = 0;
                    var byteOffset = 0;
                    var buffer, byteLength, length;
                    if (!isObject(data)) {
                      length = toIndex(data);
                      byteLength = length * BYTES;
                      buffer = new ArrayBuffer2(byteLength);
                    } else if (isArrayBuffer(data)) {
                      buffer = data;
                      byteOffset = toOffset(offset, BYTES);
                      var $len = data.byteLength;
                      if ($length === void 0) {
                        if ($len % BYTES)
                          throw RangeError2(WRONG_LENGTH);
                        byteLength = $len - byteOffset;
                        if (byteLength < 0)
                          throw RangeError2(WRONG_LENGTH);
                      } else {
                        byteLength = toLength($length) * BYTES;
                        if (byteLength + byteOffset > $len)
                          throw RangeError2(WRONG_LENGTH);
                      }
                      length = byteLength / BYTES;
                    } else if (isTypedArray(data)) {
                      return fromList(TypedArrayConstructor, data);
                    } else {
                      return typedArrayFrom.call(TypedArrayConstructor, data);
                    }
                    setInternalState(that, {
                      buffer,
                      byteOffset,
                      byteLength,
                      length,
                      view: new DataView2(buffer)
                    });
                    while (index < length)
                      addElement(that, index++);
                  });
                  if (setPrototypeOf)
                    setPrototypeOf(TypedArrayConstructor, TypedArray);
                  TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);
                } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
                  TypedArrayConstructor = wrapper(function(dummy, data, typedArrayOffset, $length) {
                    anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
                    return inheritIfRequired(function() {
                      if (!isObject(data))
                        return new NativeTypedArrayConstructor(toIndex(data));
                      if (isArrayBuffer(data))
                        return $length !== void 0 ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length) : typedArrayOffset !== void 0 ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES)) : new NativeTypedArrayConstructor(data);
                      if (isTypedArray(data))
                        return fromList(TypedArrayConstructor, data);
                      return typedArrayFrom.call(TypedArrayConstructor, data);
                    }(), dummy, TypedArrayConstructor);
                  });
                  if (setPrototypeOf)
                    setPrototypeOf(TypedArrayConstructor, TypedArray);
                  forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function(key2) {
                    if (!(key2 in TypedArrayConstructor)) {
                      createNonEnumerableProperty(TypedArrayConstructor, key2, NativeTypedArrayConstructor[key2]);
                    }
                  });
                  TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
                }
                if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
                  createNonEnumerableProperty(TypedArrayConstructorPrototype, "constructor", TypedArrayConstructor);
                }
                if (TYPED_ARRAY_TAG) {
                  createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
                }
                exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;
                $({
                  global: true,
                  forced: TypedArrayConstructor != NativeTypedArrayConstructor,
                  sham: !NATIVE_ARRAY_BUFFER_VIEWS
                }, exported);
                if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
                  createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
                }
                if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
                  createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
                }
                setSpecies(CONSTRUCTOR_NAME);
              };
            } else
              module2.exports = function() {
              };
          },
          {
            "../internals/an-instance": 27,
            "../internals/array-buffer": 31,
            "../internals/array-buffer-view-core": 30,
            "../internals/array-iteration": 37,
            "../internals/classof": 47,
            "../internals/create-non-enumerable-property": 56,
            "../internals/create-property-descriptor": 57,
            "../internals/descriptors": 61,
            "../internals/export": 68,
            "../internals/global": 77,
            "../internals/has": 78,
            "../internals/inherit-if-required": 85,
            "../internals/internal-state": 88,
            "../internals/is-object": 92,
            "../internals/object-create": 108,
            "../internals/object-define-property": 110,
            "../internals/object-get-own-property-descriptor": 111,
            "../internals/object-get-own-property-names": 113,
            "../internals/object-set-prototype-of": 119,
            "../internals/set-species": 134,
            "../internals/to-index": 149,
            "../internals/to-length": 152,
            "../internals/to-offset": 154,
            "../internals/to-primitive": 156,
            "../internals/typed-array-constructors-require-wrappers": 159,
            "../internals/typed-array-from": 160
          }
        ],
        159: [
          function(_dereq_2, module2, exports2) {
            var global2 = _dereq_2("../internals/global");
            var fails = _dereq_2("../internals/fails");
            var checkCorrectnessOfIteration = _dereq_2("../internals/check-correctness-of-iteration");
            var NATIVE_ARRAY_BUFFER_VIEWS = _dereq_2("../internals/array-buffer-view-core").NATIVE_ARRAY_BUFFER_VIEWS;
            var ArrayBuffer2 = global2.ArrayBuffer;
            var Int8Array2 = global2.Int8Array;
            module2.exports = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function() {
              Int8Array2(1);
            }) || !fails(function() {
              new Int8Array2(-1);
            }) || !checkCorrectnessOfIteration(function(iterable) {
              new Int8Array2();
              new Int8Array2(null);
              new Int8Array2(1.5);
              new Int8Array2(iterable);
            }, true) || fails(function() {
              return new Int8Array2(new ArrayBuffer2(2), 1, void 0).length !== 1;
            });
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/check-correctness-of-iteration": 45,
            "../internals/fails": 69,
            "../internals/global": 77
          }
        ],
        160: [
          function(_dereq_2, module2, exports2) {
            var toObject = _dereq_2("../internals/to-object");
            var toLength = _dereq_2("../internals/to-length");
            var getIteratorMethod = _dereq_2("../internals/get-iterator-method");
            var isArrayIteratorMethod = _dereq_2("../internals/is-array-iterator-method");
            var bind = _dereq_2("../internals/function-bind-context");
            var aTypedArrayConstructor = _dereq_2("../internals/array-buffer-view-core").aTypedArrayConstructor;
            module2.exports = function from(source) {
              var O = toObject(source);
              var argumentsLength = arguments.length;
              var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
              var mapping = mapfn !== void 0;
              var iteratorMethod = getIteratorMethod(O);
              var i2, length, result, step, iterator, next;
              if (iteratorMethod != void 0 && !isArrayIteratorMethod(iteratorMethod)) {
                iterator = iteratorMethod.call(O);
                next = iterator.next;
                O = [];
                while (!(step = next.call(iterator)).done) {
                  O.push(step.value);
                }
              }
              if (mapping && argumentsLength > 2) {
                mapfn = bind(mapfn, arguments[2], 2);
              }
              length = toLength(O.length);
              result = new (aTypedArrayConstructor(this))(length);
              for (i2 = 0; length > i2; i2++) {
                result[i2] = mapping ? mapfn(O[i2], i2) : O[i2];
              }
              return result;
            };
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/function-bind-context": 72,
            "../internals/get-iterator-method": 75,
            "../internals/is-array-iterator-method": 89,
            "../internals/to-length": 152,
            "../internals/to-object": 153
          }
        ],
        161: [
          function(_dereq_2, module2, exports2) {
            var id = 0;
            var postfix = Math.random();
            module2.exports = function(key2) {
              return "Symbol(" + String(key2 === void 0 ? "" : key2) + ")_" + (++id + postfix).toString(36);
            };
          },
          {}
        ],
        162: [
          function(_dereq_2, module2, exports2) {
            var NATIVE_SYMBOL = _dereq_2("../internals/native-symbol");
            module2.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
          },
          {
            "../internals/native-symbol": 101
          }
        ],
        163: [
          function(_dereq_2, module2, exports2) {
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            exports2.f = wellKnownSymbol;
          },
          {
            "../internals/well-known-symbol": 164
          }
        ],
        164: [
          function(_dereq_2, module2, exports2) {
            var global2 = _dereq_2("../internals/global");
            var shared = _dereq_2("../internals/shared");
            var has = _dereq_2("../internals/has");
            var uid = _dereq_2("../internals/uid");
            var NATIVE_SYMBOL = _dereq_2("../internals/native-symbol");
            var USE_SYMBOL_AS_UID = _dereq_2("../internals/use-symbol-as-uid");
            var WellKnownSymbolsStore = shared("wks");
            var Symbol2 = global2.Symbol;
            var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
            module2.exports = function(name) {
              if (!has(WellKnownSymbolsStore, name)) {
                if (NATIVE_SYMBOL && has(Symbol2, name))
                  WellKnownSymbolsStore[name] = Symbol2[name];
                else
                  WellKnownSymbolsStore[name] = createWellKnownSymbol("Symbol." + name);
              }
              return WellKnownSymbolsStore[name];
            };
          },
          {
            "../internals/global": 77,
            "../internals/has": 78,
            "../internals/native-symbol": 101,
            "../internals/shared": 138,
            "../internals/uid": 161,
            "../internals/use-symbol-as-uid": 162
          }
        ],
        165: [
          function(_dereq_2, module2, exports2) {
            module2.exports = "	\n\v\f\r                　\u2028\u2029\uFEFF";
          },
          {}
        ],
        166: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var global2 = _dereq_2("../internals/global");
            var arrayBufferModule = _dereq_2("../internals/array-buffer");
            var setSpecies = _dereq_2("../internals/set-species");
            var ARRAY_BUFFER = "ArrayBuffer";
            var ArrayBuffer2 = arrayBufferModule[ARRAY_BUFFER];
            var NativeArrayBuffer = global2[ARRAY_BUFFER];
            $({
              global: true,
              forced: NativeArrayBuffer !== ArrayBuffer2
            }, {
              ArrayBuffer: ArrayBuffer2
            });
            setSpecies(ARRAY_BUFFER);
          },
          {
            "../internals/array-buffer": 31,
            "../internals/export": 68,
            "../internals/global": 77,
            "../internals/set-species": 134
          }
        ],
        167: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var fails = _dereq_2("../internals/fails");
            var isArray = _dereq_2("../internals/is-array");
            var isObject = _dereq_2("../internals/is-object");
            var toObject = _dereq_2("../internals/to-object");
            var toLength = _dereq_2("../internals/to-length");
            var createProperty = _dereq_2("../internals/create-property");
            var arraySpeciesCreate = _dereq_2("../internals/array-species-create");
            var arrayMethodHasSpeciesSupport = _dereq_2("../internals/array-method-has-species-support");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var V8_VERSION = _dereq_2("../internals/engine-v8-version");
            var IS_CONCAT_SPREADABLE = wellKnownSymbol("isConcatSpreadable");
            var MAX_SAFE_INTEGER = 9007199254740991;
            var MAXIMUM_ALLOWED_INDEX_EXCEEDED = "Maximum allowed index exceeded";
            var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function() {
              var array = [];
              array[IS_CONCAT_SPREADABLE] = false;
              return array.concat()[0] !== array;
            });
            var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("concat");
            var isConcatSpreadable = function(O) {
              if (!isObject(O))
                return false;
              var spreadable = O[IS_CONCAT_SPREADABLE];
              return spreadable !== void 0 ? !!spreadable : isArray(O);
            };
            var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;
            $({
              target: "Array",
              proto: true,
              forced: FORCED
            }, {
              concat: function concat(arg) {
                var O = toObject(this);
                var A = arraySpeciesCreate(O, 0);
                var n = 0;
                var i2, k2, length, len, E;
                for (i2 = -1, length = arguments.length; i2 < length; i2++) {
                  E = i2 === -1 ? O : arguments[i2];
                  if (isConcatSpreadable(E)) {
                    len = toLength(E.length);
                    if (n + len > MAX_SAFE_INTEGER)
                      throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                    for (k2 = 0; k2 < len; k2++, n++)
                      if (k2 in E)
                        createProperty(A, n, E[k2]);
                  } else {
                    if (n >= MAX_SAFE_INTEGER)
                      throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                    createProperty(A, n++, E);
                  }
                }
                A.length = n;
                return A;
              }
            });
          },
          {
            "../internals/array-method-has-species-support": 39,
            "../internals/array-species-create": 43,
            "../internals/create-property": 58,
            "../internals/engine-v8-version": 66,
            "../internals/export": 68,
            "../internals/fails": 69,
            "../internals/is-array": 90,
            "../internals/is-object": 92,
            "../internals/to-length": 152,
            "../internals/to-object": 153,
            "../internals/well-known-symbol": 164
          }
        ],
        168: [
          function(_dereq_2, module2, exports2) {
            var $ = _dereq_2("../internals/export");
            var copyWithin = _dereq_2("../internals/array-copy-within");
            var addToUnscopables = _dereq_2("../internals/add-to-unscopables");
            $({
              target: "Array",
              proto: true
            }, {
              copyWithin
            });
            addToUnscopables("copyWithin");
          },
          {
            "../internals/add-to-unscopables": 25,
            "../internals/array-copy-within": 32,
            "../internals/export": 68
          }
        ],
        169: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var $every = _dereq_2("../internals/array-iteration").every;
            var arrayMethodIsStrict = _dereq_2("../internals/array-method-is-strict");
            var arrayMethodUsesToLength = _dereq_2("../internals/array-method-uses-to-length");
            var STRICT_METHOD = arrayMethodIsStrict("every");
            var USES_TO_LENGTH = arrayMethodUsesToLength("every");
            $({
              target: "Array",
              proto: true,
              forced: !STRICT_METHOD || !USES_TO_LENGTH
            }, {
              every: function every(callbackfn) {
                return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
              }
            });
          },
          {
            "../internals/array-iteration": 37,
            "../internals/array-method-is-strict": 40,
            "../internals/array-method-uses-to-length": 41,
            "../internals/export": 68
          }
        ],
        170: [
          function(_dereq_2, module2, exports2) {
            var $ = _dereq_2("../internals/export");
            var fill = _dereq_2("../internals/array-fill");
            var addToUnscopables = _dereq_2("../internals/add-to-unscopables");
            $({
              target: "Array",
              proto: true
            }, {
              fill
            });
            addToUnscopables("fill");
          },
          {
            "../internals/add-to-unscopables": 25,
            "../internals/array-fill": 33,
            "../internals/export": 68
          }
        ],
        171: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var $filter = _dereq_2("../internals/array-iteration").filter;
            var arrayMethodHasSpeciesSupport = _dereq_2("../internals/array-method-has-species-support");
            var arrayMethodUsesToLength = _dereq_2("../internals/array-method-uses-to-length");
            var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("filter");
            var USES_TO_LENGTH = arrayMethodUsesToLength("filter");
            $({
              target: "Array",
              proto: true,
              forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
            }, {
              filter: function filter(callbackfn) {
                return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
              }
            });
          },
          {
            "../internals/array-iteration": 37,
            "../internals/array-method-has-species-support": 39,
            "../internals/array-method-uses-to-length": 41,
            "../internals/export": 68
          }
        ],
        172: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var forEach = _dereq_2("../internals/array-for-each");
            $({
              target: "Array",
              proto: true,
              forced: [].forEach != forEach
            }, {
              forEach
            });
          },
          {
            "../internals/array-for-each": 34,
            "../internals/export": 68
          }
        ],
        173: [
          function(_dereq_2, module2, exports2) {
            var $ = _dereq_2("../internals/export");
            var from = _dereq_2("../internals/array-from");
            var checkCorrectnessOfIteration = _dereq_2("../internals/check-correctness-of-iteration");
            var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
              Array.from(iterable);
            });
            $({
              target: "Array",
              stat: true,
              forced: INCORRECT_ITERATION
            }, {
              from
            });
          },
          {
            "../internals/array-from": 35,
            "../internals/check-correctness-of-iteration": 45,
            "../internals/export": 68
          }
        ],
        174: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var $includes = _dereq_2("../internals/array-includes").includes;
            var addToUnscopables = _dereq_2("../internals/add-to-unscopables");
            var arrayMethodUsesToLength = _dereq_2("../internals/array-method-uses-to-length");
            var USES_TO_LENGTH = arrayMethodUsesToLength("indexOf", {
              ACCESSORS: true,
              1: 0
            });
            $({
              target: "Array",
              proto: true,
              forced: !USES_TO_LENGTH
            }, {
              includes: function includes(el) {
                return $includes(this, el, arguments.length > 1 ? arguments[1] : void 0);
              }
            });
            addToUnscopables("includes");
          },
          {
            "../internals/add-to-unscopables": 25,
            "../internals/array-includes": 36,
            "../internals/array-method-uses-to-length": 41,
            "../internals/export": 68
          }
        ],
        175: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var $indexOf = _dereq_2("../internals/array-includes").indexOf;
            var arrayMethodIsStrict = _dereq_2("../internals/array-method-is-strict");
            var arrayMethodUsesToLength = _dereq_2("../internals/array-method-uses-to-length");
            var nativeIndexOf = [].indexOf;
            var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [
              1
            ].indexOf(1, -0) < 0;
            var STRICT_METHOD = arrayMethodIsStrict("indexOf");
            var USES_TO_LENGTH = arrayMethodUsesToLength("indexOf", {
              ACCESSORS: true,
              1: 0
            });
            $({
              target: "Array",
              proto: true,
              forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH
            }, {
              indexOf: function indexOf(searchElement) {
                return NEGATIVE_ZERO ? nativeIndexOf.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : void 0);
              }
            });
          },
          {
            "../internals/array-includes": 36,
            "../internals/array-method-is-strict": 40,
            "../internals/array-method-uses-to-length": 41,
            "../internals/export": 68
          }
        ],
        176: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var toIndexedObject = _dereq_2("../internals/to-indexed-object");
            var addToUnscopables = _dereq_2("../internals/add-to-unscopables");
            var Iterators = _dereq_2("../internals/iterators");
            var InternalStateModule = _dereq_2("../internals/internal-state");
            var defineIterator = _dereq_2("../internals/define-iterator");
            var ARRAY_ITERATOR = "Array Iterator";
            var setInternalState = InternalStateModule.set;
            var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
            module2.exports = defineIterator(Array, "Array", function(iterated, kind) {
              setInternalState(this, {
                type: ARRAY_ITERATOR,
                target: toIndexedObject(iterated),
                // target
                index: 0,
                // next index
                kind
                // kind
              });
            }, function() {
              var state = getInternalState(this);
              var target = state.target;
              var kind = state.kind;
              var index = state.index++;
              if (!target || index >= target.length) {
                state.target = void 0;
                return {
                  value: void 0,
                  done: true
                };
              }
              if (kind == "keys")
                return {
                  value: index,
                  done: false
                };
              if (kind == "values")
                return {
                  value: target[index],
                  done: false
                };
              return {
                value: [
                  index,
                  target[index]
                ],
                done: false
              };
            }, "values");
            Iterators.Arguments = Iterators.Array;
            addToUnscopables("keys");
            addToUnscopables("values");
            addToUnscopables("entries");
          },
          {
            "../internals/add-to-unscopables": 25,
            "../internals/define-iterator": 59,
            "../internals/internal-state": 88,
            "../internals/iterators": 97,
            "../internals/to-indexed-object": 150
          }
        ],
        177: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var IndexedObject = _dereq_2("../internals/indexed-object");
            var toIndexedObject = _dereq_2("../internals/to-indexed-object");
            var arrayMethodIsStrict = _dereq_2("../internals/array-method-is-strict");
            var nativeJoin = [].join;
            var ES3_STRINGS = IndexedObject != Object;
            var STRICT_METHOD = arrayMethodIsStrict("join", ",");
            $({
              target: "Array",
              proto: true,
              forced: ES3_STRINGS || !STRICT_METHOD
            }, {
              join: function join(separator) {
                return nativeJoin.call(toIndexedObject(this), separator === void 0 ? "," : separator);
              }
            });
          },
          {
            "../internals/array-method-is-strict": 40,
            "../internals/export": 68,
            "../internals/indexed-object": 84,
            "../internals/to-indexed-object": 150
          }
        ],
        178: [
          function(_dereq_2, module2, exports2) {
            var $ = _dereq_2("../internals/export");
            var lastIndexOf = _dereq_2("../internals/array-last-index-of");
            $({
              target: "Array",
              proto: true,
              forced: lastIndexOf !== [].lastIndexOf
            }, {
              lastIndexOf
            });
          },
          {
            "../internals/array-last-index-of": 38,
            "../internals/export": 68
          }
        ],
        179: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var $map = _dereq_2("../internals/array-iteration").map;
            var arrayMethodHasSpeciesSupport = _dereq_2("../internals/array-method-has-species-support");
            var arrayMethodUsesToLength = _dereq_2("../internals/array-method-uses-to-length");
            var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("map");
            var USES_TO_LENGTH = arrayMethodUsesToLength("map");
            $({
              target: "Array",
              proto: true,
              forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
            }, {
              map: function map(callbackfn) {
                return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
              }
            });
          },
          {
            "../internals/array-iteration": 37,
            "../internals/array-method-has-species-support": 39,
            "../internals/array-method-uses-to-length": 41,
            "../internals/export": 68
          }
        ],
        180: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var isObject = _dereq_2("../internals/is-object");
            var isArray = _dereq_2("../internals/is-array");
            var toAbsoluteIndex = _dereq_2("../internals/to-absolute-index");
            var toLength = _dereq_2("../internals/to-length");
            var toIndexedObject = _dereq_2("../internals/to-indexed-object");
            var createProperty = _dereq_2("../internals/create-property");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var arrayMethodHasSpeciesSupport = _dereq_2("../internals/array-method-has-species-support");
            var arrayMethodUsesToLength = _dereq_2("../internals/array-method-uses-to-length");
            var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("slice");
            var USES_TO_LENGTH = arrayMethodUsesToLength("slice", {
              ACCESSORS: true,
              0: 0,
              1: 2
            });
            var SPECIES = wellKnownSymbol("species");
            var nativeSlice = [].slice;
            var max = Math.max;
            $({
              target: "Array",
              proto: true,
              forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
            }, {
              slice: function slice(start, end) {
                var O = toIndexedObject(this);
                var length = toLength(O.length);
                var k2 = toAbsoluteIndex(start, length);
                var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
                var Constructor, result, n;
                if (isArray(O)) {
                  Constructor = O.constructor;
                  if (typeof Constructor == "function" && (Constructor === Array || isArray(Constructor.prototype))) {
                    Constructor = void 0;
                  } else if (isObject(Constructor)) {
                    Constructor = Constructor[SPECIES];
                    if (Constructor === null)
                      Constructor = void 0;
                  }
                  if (Constructor === Array || Constructor === void 0) {
                    return nativeSlice.call(O, k2, fin);
                  }
                }
                result = new (Constructor === void 0 ? Array : Constructor)(max(fin - k2, 0));
                for (n = 0; k2 < fin; k2++, n++)
                  if (k2 in O)
                    createProperty(result, n, O[k2]);
                result.length = n;
                return result;
              }
            });
          },
          {
            "../internals/array-method-has-species-support": 39,
            "../internals/array-method-uses-to-length": 41,
            "../internals/create-property": 58,
            "../internals/export": 68,
            "../internals/is-array": 90,
            "../internals/is-object": 92,
            "../internals/to-absolute-index": 148,
            "../internals/to-indexed-object": 150,
            "../internals/to-length": 152,
            "../internals/well-known-symbol": 164
          }
        ],
        181: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var $some = _dereq_2("../internals/array-iteration").some;
            var arrayMethodIsStrict = _dereq_2("../internals/array-method-is-strict");
            var arrayMethodUsesToLength = _dereq_2("../internals/array-method-uses-to-length");
            var STRICT_METHOD = arrayMethodIsStrict("some");
            var USES_TO_LENGTH = arrayMethodUsesToLength("some");
            $({
              target: "Array",
              proto: true,
              forced: !STRICT_METHOD || !USES_TO_LENGTH
            }, {
              some: function some(callbackfn) {
                return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
              }
            });
          },
          {
            "../internals/array-iteration": 37,
            "../internals/array-method-is-strict": 40,
            "../internals/array-method-uses-to-length": 41,
            "../internals/export": 68
          }
        ],
        182: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var toAbsoluteIndex = _dereq_2("../internals/to-absolute-index");
            var toInteger = _dereq_2("../internals/to-integer");
            var toLength = _dereq_2("../internals/to-length");
            var toObject = _dereq_2("../internals/to-object");
            var arraySpeciesCreate = _dereq_2("../internals/array-species-create");
            var createProperty = _dereq_2("../internals/create-property");
            var arrayMethodHasSpeciesSupport = _dereq_2("../internals/array-method-has-species-support");
            var arrayMethodUsesToLength = _dereq_2("../internals/array-method-uses-to-length");
            var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("splice");
            var USES_TO_LENGTH = arrayMethodUsesToLength("splice", {
              ACCESSORS: true,
              0: 0,
              1: 2
            });
            var max = Math.max;
            var min = Math.min;
            var MAX_SAFE_INTEGER = 9007199254740991;
            var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = "Maximum allowed length exceeded";
            $({
              target: "Array",
              proto: true,
              forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
            }, {
              splice: function splice(start, deleteCount) {
                var O = toObject(this);
                var len = toLength(O.length);
                var actualStart = toAbsoluteIndex(start, len);
                var argumentsLength = arguments.length;
                var insertCount, actualDeleteCount, A, k2, from, to;
                if (argumentsLength === 0) {
                  insertCount = actualDeleteCount = 0;
                } else if (argumentsLength === 1) {
                  insertCount = 0;
                  actualDeleteCount = len - actualStart;
                } else {
                  insertCount = argumentsLength - 2;
                  actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);
                }
                if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
                  throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
                }
                A = arraySpeciesCreate(O, actualDeleteCount);
                for (k2 = 0; k2 < actualDeleteCount; k2++) {
                  from = actualStart + k2;
                  if (from in O)
                    createProperty(A, k2, O[from]);
                }
                A.length = actualDeleteCount;
                if (insertCount < actualDeleteCount) {
                  for (k2 = actualStart; k2 < len - actualDeleteCount; k2++) {
                    from = k2 + actualDeleteCount;
                    to = k2 + insertCount;
                    if (from in O)
                      O[to] = O[from];
                    else
                      delete O[to];
                  }
                  for (k2 = len; k2 > len - actualDeleteCount + insertCount; k2--)
                    delete O[k2 - 1];
                } else if (insertCount > actualDeleteCount) {
                  for (k2 = len - actualDeleteCount; k2 > actualStart; k2--) {
                    from = k2 + actualDeleteCount - 1;
                    to = k2 + insertCount - 1;
                    if (from in O)
                      O[to] = O[from];
                    else
                      delete O[to];
                  }
                }
                for (k2 = 0; k2 < insertCount; k2++) {
                  O[k2 + actualStart] = arguments[k2 + 2];
                }
                O.length = len - actualDeleteCount + insertCount;
                return A;
              }
            });
          },
          {
            "../internals/array-method-has-species-support": 39,
            "../internals/array-method-uses-to-length": 41,
            "../internals/array-species-create": 43,
            "../internals/create-property": 58,
            "../internals/export": 68,
            "../internals/to-absolute-index": 148,
            "../internals/to-integer": 151,
            "../internals/to-length": 152,
            "../internals/to-object": 153
          }
        ],
        183: [
          function(_dereq_2, module2, exports2) {
            var DESCRIPTORS = _dereq_2("../internals/descriptors");
            var defineProperty = _dereq_2("../internals/object-define-property").f;
            var FunctionPrototype = Function.prototype;
            var FunctionPrototypeToString = FunctionPrototype.toString;
            var nameRE = /^\s*function ([^ (]*)/;
            var NAME = "name";
            if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
              defineProperty(FunctionPrototype, NAME, {
                configurable: true,
                get: function() {
                  try {
                    return FunctionPrototypeToString.call(this).match(nameRE)[1];
                  } catch (error) {
                    return "";
                  }
                }
              });
            }
          },
          {
            "../internals/descriptors": 61,
            "../internals/object-define-property": 110
          }
        ],
        184: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var collection = _dereq_2("../internals/collection");
            var collectionStrong = _dereq_2("../internals/collection-strong");
            module2.exports = collection("Map", function(init) {
              return function Map2() {
                return init(this, arguments.length ? arguments[0] : void 0);
              };
            }, collectionStrong);
          },
          {
            "../internals/collection": 50,
            "../internals/collection-strong": 48
          }
        ],
        185: [
          function(_dereq_2, module2, exports2) {
            var $ = _dereq_2("../internals/export");
            var $hypot = Math.hypot;
            var abs = Math.abs;
            var sqrt = Math.sqrt;
            var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;
            $({
              target: "Math",
              stat: true,
              forced: BUGGY
            }, {
              hypot: function hypot(value1, value2) {
                var sum = 0;
                var i2 = 0;
                var aLen = arguments.length;
                var larg = 0;
                var arg, div;
                while (i2 < aLen) {
                  arg = abs(arguments[i2++]);
                  if (larg < arg) {
                    div = larg / arg;
                    sum = sum * div * div + 1;
                    larg = arg;
                  } else if (arg > 0) {
                    div = arg / larg;
                    sum += div * div;
                  } else
                    sum += arg;
                }
                return larg === Infinity ? Infinity : larg * sqrt(sum);
              }
            });
          },
          {
            "../internals/export": 68
          }
        ],
        186: [
          function(_dereq_2, module2, exports2) {
            var $ = _dereq_2("../internals/export");
            var sign = _dereq_2("../internals/math-sign");
            $({
              target: "Math",
              stat: true
            }, {
              sign
            });
          },
          {
            "../internals/export": 68,
            "../internals/math-sign": 98
          }
        ],
        187: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var DESCRIPTORS = _dereq_2("../internals/descriptors");
            var global2 = _dereq_2("../internals/global");
            var isForced = _dereq_2("../internals/is-forced");
            var redefine = _dereq_2("../internals/redefine");
            var has = _dereq_2("../internals/has");
            var classof = _dereq_2("../internals/classof-raw");
            var inheritIfRequired = _dereq_2("../internals/inherit-if-required");
            var toPrimitive = _dereq_2("../internals/to-primitive");
            var fails = _dereq_2("../internals/fails");
            var create = _dereq_2("../internals/object-create");
            var getOwnPropertyNames = _dereq_2("../internals/object-get-own-property-names").f;
            var getOwnPropertyDescriptor = _dereq_2("../internals/object-get-own-property-descriptor").f;
            var defineProperty = _dereq_2("../internals/object-define-property").f;
            var trim = _dereq_2("../internals/string-trim").trim;
            var NUMBER = "Number";
            var NativeNumber = global2[NUMBER];
            var NumberPrototype = NativeNumber.prototype;
            var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;
            var toNumber = function(argument) {
              var it = toPrimitive(argument, false);
              var first, third, radix, maxCode, digits, length, index, code;
              if (typeof it == "string" && it.length > 2) {
                it = trim(it);
                first = it.charCodeAt(0);
                if (first === 43 || first === 45) {
                  third = it.charCodeAt(2);
                  if (third === 88 || third === 120)
                    return NaN;
                } else if (first === 48) {
                  switch (it.charCodeAt(1)) {
                    case 66:
                    case 98:
                      radix = 2;
                      maxCode = 49;
                      break;
                    case 79:
                    case 111:
                      radix = 8;
                      maxCode = 55;
                      break;
                    default:
                      return +it;
                  }
                  digits = it.slice(2);
                  length = digits.length;
                  for (index = 0; index < length; index++) {
                    code = digits.charCodeAt(index);
                    if (code < 48 || code > maxCode)
                      return NaN;
                  }
                  return parseInt(digits, radix);
                }
              }
              return +it;
            };
            if (isForced(NUMBER, !NativeNumber(" 0o1") || !NativeNumber("0b1") || NativeNumber("+0x1"))) {
              var NumberWrapper = function Number2(value) {
                var it = arguments.length < 1 ? 0 : value;
                var dummy = this;
                return dummy instanceof NumberWrapper && (BROKEN_CLASSOF ? fails(function() {
                  NumberPrototype.valueOf.call(dummy);
                }) : classof(dummy) != NUMBER) ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
              };
              for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (
                // ES3:
                "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(",")
              ), j = 0, key2; keys.length > j; j++) {
                if (has(NativeNumber, key2 = keys[j]) && !has(NumberWrapper, key2)) {
                  defineProperty(NumberWrapper, key2, getOwnPropertyDescriptor(NativeNumber, key2));
                }
              }
              NumberWrapper.prototype = NumberPrototype;
              NumberPrototype.constructor = NumberWrapper;
              redefine(global2, NUMBER, NumberWrapper);
            }
          },
          {
            "../internals/classof-raw": 46,
            "../internals/descriptors": 61,
            "../internals/fails": 69,
            "../internals/global": 77,
            "../internals/has": 78,
            "../internals/inherit-if-required": 85,
            "../internals/is-forced": 91,
            "../internals/object-create": 108,
            "../internals/object-define-property": 110,
            "../internals/object-get-own-property-descriptor": 111,
            "../internals/object-get-own-property-names": 113,
            "../internals/redefine": 126,
            "../internals/string-trim": 145,
            "../internals/to-primitive": 156
          }
        ],
        188: [
          function(_dereq_2, module2, exports2) {
            var $ = _dereq_2("../internals/export");
            var numberIsFinite = _dereq_2("../internals/number-is-finite");
            $({
              target: "Number",
              stat: true
            }, {
              isFinite: numberIsFinite
            });
          },
          {
            "../internals/export": 68,
            "../internals/number-is-finite": 106
          }
        ],
        189: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var toInteger = _dereq_2("../internals/to-integer");
            var thisNumberValue = _dereq_2("../internals/this-number-value");
            var repeat = _dereq_2("../internals/string-repeat");
            var fails = _dereq_2("../internals/fails");
            var nativeToFixed = 1 .toFixed;
            var floor = Math.floor;
            var pow = function(x, n, acc) {
              return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
            };
            var log = function(x) {
              var n = 0;
              var x2 = x;
              while (x2 >= 4096) {
                n += 12;
                x2 /= 4096;
              }
              while (x2 >= 2) {
                n += 1;
                x2 /= 2;
              }
              return n;
            };
            var FORCED = nativeToFixed && (8e-5 .toFixed(3) !== "0.000" || 0.9 .toFixed(0) !== "1" || 1.255 .toFixed(2) !== "1.25" || 1000000000000000100 .toFixed(0) !== "1000000000000000128") || !fails(function() {
              nativeToFixed.call({});
            });
            $({
              target: "Number",
              proto: true,
              forced: FORCED
            }, {
              // eslint-disable-next-line max-statements
              toFixed: function toFixed(fractionDigits) {
                var number = thisNumberValue(this);
                var fractDigits = toInteger(fractionDigits);
                var data = [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ];
                var sign = "";
                var result = "0";
                var e2, z, j, k2;
                var multiply = function(n, c) {
                  var index = -1;
                  var c2 = c;
                  while (++index < 6) {
                    c2 += n * data[index];
                    data[index] = c2 % 1e7;
                    c2 = floor(c2 / 1e7);
                  }
                };
                var divide = function(n) {
                  var index = 6;
                  var c = 0;
                  while (--index >= 0) {
                    c += data[index];
                    data[index] = floor(c / n);
                    c = c % n * 1e7;
                  }
                };
                var dataToString = function() {
                  var index = 6;
                  var s = "";
                  while (--index >= 0) {
                    if (s !== "" || index === 0 || data[index] !== 0) {
                      var t = String(data[index]);
                      s = s === "" ? t : s + repeat.call("0", 7 - t.length) + t;
                    }
                  }
                  return s;
                };
                if (fractDigits < 0 || fractDigits > 20)
                  throw RangeError("Incorrect fraction digits");
                if (number != number)
                  return "NaN";
                if (number <= -1e21 || number >= 1e21)
                  return String(number);
                if (number < 0) {
                  sign = "-";
                  number = -number;
                }
                if (number > 1e-21) {
                  e2 = log(number * pow(2, 69, 1)) - 69;
                  z = e2 < 0 ? number * pow(2, -e2, 1) : number / pow(2, e2, 1);
                  z *= 4503599627370496;
                  e2 = 52 - e2;
                  if (e2 > 0) {
                    multiply(0, z);
                    j = fractDigits;
                    while (j >= 7) {
                      multiply(1e7, 0);
                      j -= 7;
                    }
                    multiply(pow(10, j, 1), 0);
                    j = e2 - 1;
                    while (j >= 23) {
                      divide(1 << 23);
                      j -= 23;
                    }
                    divide(1 << j);
                    multiply(1, 1);
                    divide(2);
                    result = dataToString();
                  } else {
                    multiply(0, z);
                    multiply(1 << -e2, 0);
                    result = dataToString() + repeat.call("0", fractDigits);
                  }
                }
                if (fractDigits > 0) {
                  k2 = result.length;
                  result = sign + (k2 <= fractDigits ? "0." + repeat.call("0", fractDigits - k2) + result : result.slice(0, k2 - fractDigits) + "." + result.slice(k2 - fractDigits));
                } else {
                  result = sign + result;
                }
                return result;
              }
            });
          },
          {
            "../internals/export": 68,
            "../internals/fails": 69,
            "../internals/string-repeat": 143,
            "../internals/this-number-value": 147,
            "../internals/to-integer": 151
          }
        ],
        190: [
          function(_dereq_2, module2, exports2) {
            var $ = _dereq_2("../internals/export");
            var assign = _dereq_2("../internals/object-assign");
            $({
              target: "Object",
              stat: true,
              forced: Object.assign !== assign
            }, {
              assign
            });
          },
          {
            "../internals/export": 68,
            "../internals/object-assign": 107
          }
        ],
        191: [
          function(_dereq_2, module2, exports2) {
            var $ = _dereq_2("../internals/export");
            var fails = _dereq_2("../internals/fails");
            var toIndexedObject = _dereq_2("../internals/to-indexed-object");
            var nativeGetOwnPropertyDescriptor = _dereq_2("../internals/object-get-own-property-descriptor").f;
            var DESCRIPTORS = _dereq_2("../internals/descriptors");
            var FAILS_ON_PRIMITIVES = fails(function() {
              nativeGetOwnPropertyDescriptor(1);
            });
            var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;
            $({
              target: "Object",
              stat: true,
              forced: FORCED,
              sham: !DESCRIPTORS
            }, {
              getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key2) {
                return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key2);
              }
            });
          },
          {
            "../internals/descriptors": 61,
            "../internals/export": 68,
            "../internals/fails": 69,
            "../internals/object-get-own-property-descriptor": 111,
            "../internals/to-indexed-object": 150
          }
        ],
        192: [
          function(_dereq_2, module2, exports2) {
            var $ = _dereq_2("../internals/export");
            var fails = _dereq_2("../internals/fails");
            var nativeGetOwnPropertyNames = _dereq_2("../internals/object-get-own-property-names-external").f;
            var FAILS_ON_PRIMITIVES = fails(function() {
              return !Object.getOwnPropertyNames(1);
            });
            $({
              target: "Object",
              stat: true,
              forced: FAILS_ON_PRIMITIVES
            }, {
              getOwnPropertyNames: nativeGetOwnPropertyNames
            });
          },
          {
            "../internals/export": 68,
            "../internals/fails": 69,
            "../internals/object-get-own-property-names-external": 112
          }
        ],
        193: [
          function(_dereq_2, module2, exports2) {
            var $ = _dereq_2("../internals/export");
            var fails = _dereq_2("../internals/fails");
            var toObject = _dereq_2("../internals/to-object");
            var nativeGetPrototypeOf = _dereq_2("../internals/object-get-prototype-of");
            var CORRECT_PROTOTYPE_GETTER = _dereq_2("../internals/correct-prototype-getter");
            var FAILS_ON_PRIMITIVES = fails(function() {
              nativeGetPrototypeOf(1);
            });
            $({
              target: "Object",
              stat: true,
              forced: FAILS_ON_PRIMITIVES,
              sham: !CORRECT_PROTOTYPE_GETTER
            }, {
              getPrototypeOf: function getPrototypeOf(it) {
                return nativeGetPrototypeOf(toObject(it));
              }
            });
          },
          {
            "../internals/correct-prototype-getter": 53,
            "../internals/export": 68,
            "../internals/fails": 69,
            "../internals/object-get-prototype-of": 115,
            "../internals/to-object": 153
          }
        ],
        194: [
          function(_dereq_2, module2, exports2) {
            var $ = _dereq_2("../internals/export");
            var toObject = _dereq_2("../internals/to-object");
            var nativeKeys = _dereq_2("../internals/object-keys");
            var fails = _dereq_2("../internals/fails");
            var FAILS_ON_PRIMITIVES = fails(function() {
              nativeKeys(1);
            });
            $({
              target: "Object",
              stat: true,
              forced: FAILS_ON_PRIMITIVES
            }, {
              keys: function keys(it) {
                return nativeKeys(toObject(it));
              }
            });
          },
          {
            "../internals/export": 68,
            "../internals/fails": 69,
            "../internals/object-keys": 117,
            "../internals/to-object": 153
          }
        ],
        195: [
          function(_dereq_2, module2, exports2) {
            var TO_STRING_TAG_SUPPORT = _dereq_2("../internals/to-string-tag-support");
            var redefine = _dereq_2("../internals/redefine");
            var toString = _dereq_2("../internals/object-to-string");
            if (!TO_STRING_TAG_SUPPORT) {
              redefine(Object.prototype, "toString", toString, {
                unsafe: true
              });
            }
          },
          {
            "../internals/object-to-string": 120,
            "../internals/redefine": 126,
            "../internals/to-string-tag-support": 157
          }
        ],
        196: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var IS_PURE = _dereq_2("../internals/is-pure");
            var global2 = _dereq_2("../internals/global");
            var getBuiltIn = _dereq_2("../internals/get-built-in");
            var NativePromise = _dereq_2("../internals/native-promise-constructor");
            var redefine = _dereq_2("../internals/redefine");
            var redefineAll = _dereq_2("../internals/redefine-all");
            var setToStringTag = _dereq_2("../internals/set-to-string-tag");
            var setSpecies = _dereq_2("../internals/set-species");
            var isObject = _dereq_2("../internals/is-object");
            var aFunction = _dereq_2("../internals/a-function");
            var anInstance = _dereq_2("../internals/an-instance");
            var classof = _dereq_2("../internals/classof-raw");
            var inspectSource = _dereq_2("../internals/inspect-source");
            var iterate = _dereq_2("../internals/iterate");
            var checkCorrectnessOfIteration = _dereq_2("../internals/check-correctness-of-iteration");
            var speciesConstructor = _dereq_2("../internals/species-constructor");
            var task = _dereq_2("../internals/task").set;
            var microtask = _dereq_2("../internals/microtask");
            var promiseResolve = _dereq_2("../internals/promise-resolve");
            var hostReportErrors = _dereq_2("../internals/host-report-errors");
            var newPromiseCapabilityModule = _dereq_2("../internals/new-promise-capability");
            var perform = _dereq_2("../internals/perform");
            var InternalStateModule = _dereq_2("../internals/internal-state");
            var isForced = _dereq_2("../internals/is-forced");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var V8_VERSION = _dereq_2("../internals/engine-v8-version");
            var SPECIES = wellKnownSymbol("species");
            var PROMISE = "Promise";
            var getInternalState = InternalStateModule.get;
            var setInternalState = InternalStateModule.set;
            var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
            var PromiseConstructor = NativePromise;
            var TypeError2 = global2.TypeError;
            var document2 = global2.document;
            var process = global2.process;
            var $fetch = getBuiltIn("fetch");
            var newPromiseCapability = newPromiseCapabilityModule.f;
            var newGenericPromiseCapability = newPromiseCapability;
            var IS_NODE = classof(process) == "process";
            var DISPATCH_EVENT = !!(document2 && document2.createEvent && global2.dispatchEvent);
            var UNHANDLED_REJECTION = "unhandledrejection";
            var REJECTION_HANDLED = "rejectionhandled";
            var PENDING = 0;
            var FULFILLED = 1;
            var REJECTED = 2;
            var HANDLED = 1;
            var UNHANDLED = 2;
            var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;
            var FORCED = isForced(PROMISE, function() {
              var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);
              if (!GLOBAL_CORE_JS_PROMISE) {
                if (V8_VERSION === 66)
                  return true;
                if (!IS_NODE && typeof PromiseRejectionEvent != "function")
                  return true;
              }
              if (IS_PURE && !PromiseConstructor.prototype["finally"])
                return true;
              if (V8_VERSION >= 51 && /native code/.test(PromiseConstructor))
                return false;
              var promise = PromiseConstructor.resolve(1);
              var FakePromise = function(exec) {
                exec(function() {
                }, function() {
                });
              };
              var constructor = promise.constructor = {};
              constructor[SPECIES] = FakePromise;
              return !(promise.then(function() {
              }) instanceof FakePromise);
            });
            var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function(iterable) {
              PromiseConstructor.all(iterable)["catch"](function() {
              });
            });
            var isThenable = function(it) {
              var then;
              return isObject(it) && typeof (then = it.then) == "function" ? then : false;
            };
            var notify = function(promise, state, isReject) {
              if (state.notified)
                return;
              state.notified = true;
              var chain = state.reactions;
              microtask(function() {
                var value = state.value;
                var ok = state.state == FULFILLED;
                var index = 0;
                while (chain.length > index) {
                  var reaction = chain[index++];
                  var handler = ok ? reaction.ok : reaction.fail;
                  var resolve = reaction.resolve;
                  var reject = reaction.reject;
                  var domain = reaction.domain;
                  var result, then, exited;
                  try {
                    if (handler) {
                      if (!ok) {
                        if (state.rejection === UNHANDLED)
                          onHandleUnhandled(promise, state);
                        state.rejection = HANDLED;
                      }
                      if (handler === true)
                        result = value;
                      else {
                        if (domain)
                          domain.enter();
                        result = handler(value);
                        if (domain) {
                          domain.exit();
                          exited = true;
                        }
                      }
                      if (result === reaction.promise) {
                        reject(TypeError2("Promise-chain cycle"));
                      } else if (then = isThenable(result)) {
                        then.call(result, resolve, reject);
                      } else
                        resolve(result);
                    } else
                      reject(value);
                  } catch (error) {
                    if (domain && !exited)
                      domain.exit();
                    reject(error);
                  }
                }
                state.reactions = [];
                state.notified = false;
                if (isReject && !state.rejection)
                  onUnhandled(promise, state);
              });
            };
            var dispatchEvent = function(name, promise, reason) {
              var event, handler;
              if (DISPATCH_EVENT) {
                event = document2.createEvent("Event");
                event.promise = promise;
                event.reason = reason;
                event.initEvent(name, false, true);
                global2.dispatchEvent(event);
              } else
                event = {
                  promise,
                  reason
                };
              if (handler = global2["on" + name])
                handler(event);
              else if (name === UNHANDLED_REJECTION)
                hostReportErrors("Unhandled promise rejection", reason);
            };
            var onUnhandled = function(promise, state) {
              task.call(global2, function() {
                var value = state.value;
                var IS_UNHANDLED = isUnhandled(state);
                var result;
                if (IS_UNHANDLED) {
                  result = perform(function() {
                    if (IS_NODE) {
                      process.emit("unhandledRejection", value, promise);
                    } else
                      dispatchEvent(UNHANDLED_REJECTION, promise, value);
                  });
                  state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
                  if (result.error)
                    throw result.value;
                }
              });
            };
            var isUnhandled = function(state) {
              return state.rejection !== HANDLED && !state.parent;
            };
            var onHandleUnhandled = function(promise, state) {
              task.call(global2, function() {
                if (IS_NODE) {
                  process.emit("rejectionHandled", promise);
                } else
                  dispatchEvent(REJECTION_HANDLED, promise, state.value);
              });
            };
            var bind = function(fn, promise, state, unwrap) {
              return function(value) {
                fn(promise, state, value, unwrap);
              };
            };
            var internalReject = function(promise, state, value, unwrap) {
              if (state.done)
                return;
              state.done = true;
              if (unwrap)
                state = unwrap;
              state.value = value;
              state.state = REJECTED;
              notify(promise, state, true);
            };
            var internalResolve = function(promise, state, value, unwrap) {
              if (state.done)
                return;
              state.done = true;
              if (unwrap)
                state = unwrap;
              try {
                if (promise === value)
                  throw TypeError2("Promise can't be resolved itself");
                var then = isThenable(value);
                if (then) {
                  microtask(function() {
                    var wrapper = {
                      done: false
                    };
                    try {
                      then.call(value, bind(internalResolve, promise, wrapper, state), bind(internalReject, promise, wrapper, state));
                    } catch (error) {
                      internalReject(promise, wrapper, error, state);
                    }
                  });
                } else {
                  state.value = value;
                  state.state = FULFILLED;
                  notify(promise, state, false);
                }
              } catch (error) {
                internalReject(promise, {
                  done: false
                }, error, state);
              }
            };
            if (FORCED) {
              PromiseConstructor = function Promise2(executor) {
                anInstance(this, PromiseConstructor, PROMISE);
                aFunction(executor);
                Internal.call(this);
                var state = getInternalState(this);
                try {
                  executor(bind(internalResolve, this, state), bind(internalReject, this, state));
                } catch (error) {
                  internalReject(this, state, error);
                }
              };
              Internal = function Promise2(executor) {
                setInternalState(this, {
                  type: PROMISE,
                  done: false,
                  notified: false,
                  parent: false,
                  reactions: [],
                  rejection: false,
                  state: PENDING,
                  value: void 0
                });
              };
              Internal.prototype = redefineAll(PromiseConstructor.prototype, {
                // `Promise.prototype.then` method
                // https://tc39.github.io/ecma262/#sec-promise.prototype.then
                then: function then(onFulfilled, onRejected) {
                  var state = getInternalPromiseState(this);
                  var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
                  reaction.ok = typeof onFulfilled == "function" ? onFulfilled : true;
                  reaction.fail = typeof onRejected == "function" && onRejected;
                  reaction.domain = IS_NODE ? process.domain : void 0;
                  state.parent = true;
                  state.reactions.push(reaction);
                  if (state.state != PENDING)
                    notify(this, state, false);
                  return reaction.promise;
                },
                // `Promise.prototype.catch` method
                // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
                "catch": function(onRejected) {
                  return this.then(void 0, onRejected);
                }
              });
              OwnPromiseCapability = function() {
                var promise = new Internal();
                var state = getInternalState(promise);
                this.promise = promise;
                this.resolve = bind(internalResolve, promise, state);
                this.reject = bind(internalReject, promise, state);
              };
              newPromiseCapabilityModule.f = newPromiseCapability = function(C) {
                return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
              };
              if (!IS_PURE && typeof NativePromise == "function") {
                nativeThen = NativePromise.prototype.then;
                redefine(NativePromise.prototype, "then", function then(onFulfilled, onRejected) {
                  var that = this;
                  return new PromiseConstructor(function(resolve, reject) {
                    nativeThen.call(that, resolve, reject);
                  }).then(onFulfilled, onRejected);
                }, {
                  unsafe: true
                });
                if (typeof $fetch == "function")
                  $({
                    global: true,
                    enumerable: true,
                    forced: true
                  }, {
                    // eslint-disable-next-line no-unused-vars
                    fetch: function fetch2(input) {
                      return promiseResolve(PromiseConstructor, $fetch.apply(global2, arguments));
                    }
                  });
              }
            }
            $({
              global: true,
              wrap: true,
              forced: FORCED
            }, {
              Promise: PromiseConstructor
            });
            setToStringTag(PromiseConstructor, PROMISE, false, true);
            setSpecies(PROMISE);
            PromiseWrapper = getBuiltIn(PROMISE);
            $({
              target: PROMISE,
              stat: true,
              forced: FORCED
            }, {
              // `Promise.reject` method
              // https://tc39.github.io/ecma262/#sec-promise.reject
              reject: function reject(r) {
                var capability = newPromiseCapability(this);
                capability.reject.call(void 0, r);
                return capability.promise;
              }
            });
            $({
              target: PROMISE,
              stat: true,
              forced: IS_PURE || FORCED
            }, {
              // `Promise.resolve` method
              // https://tc39.github.io/ecma262/#sec-promise.resolve
              resolve: function resolve(x) {
                return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
              }
            });
            $({
              target: PROMISE,
              stat: true,
              forced: INCORRECT_ITERATION
            }, {
              // `Promise.all` method
              // https://tc39.github.io/ecma262/#sec-promise.all
              all: function all(iterable) {
                var C = this;
                var capability = newPromiseCapability(C);
                var resolve = capability.resolve;
                var reject = capability.reject;
                var result = perform(function() {
                  var $promiseResolve = aFunction(C.resolve);
                  var values = [];
                  var counter = 0;
                  var remaining = 1;
                  iterate(iterable, function(promise) {
                    var index = counter++;
                    var alreadyCalled = false;
                    values.push(void 0);
                    remaining++;
                    $promiseResolve.call(C, promise).then(function(value) {
                      if (alreadyCalled)
                        return;
                      alreadyCalled = true;
                      values[index] = value;
                      --remaining || resolve(values);
                    }, reject);
                  });
                  --remaining || resolve(values);
                });
                if (result.error)
                  reject(result.value);
                return capability.promise;
              },
              // `Promise.race` method
              // https://tc39.github.io/ecma262/#sec-promise.race
              race: function race(iterable) {
                var C = this;
                var capability = newPromiseCapability(C);
                var reject = capability.reject;
                var result = perform(function() {
                  var $promiseResolve = aFunction(C.resolve);
                  iterate(iterable, function(promise) {
                    $promiseResolve.call(C, promise).then(capability.resolve, reject);
                  });
                });
                if (result.error)
                  reject(result.value);
                return capability.promise;
              }
            });
          },
          {
            "../internals/a-function": 23,
            "../internals/an-instance": 27,
            "../internals/check-correctness-of-iteration": 45,
            "../internals/classof-raw": 46,
            "../internals/engine-v8-version": 66,
            "../internals/export": 68,
            "../internals/get-built-in": 74,
            "../internals/global": 77,
            "../internals/host-report-errors": 80,
            "../internals/inspect-source": 86,
            "../internals/internal-state": 88,
            "../internals/is-forced": 91,
            "../internals/is-object": 92,
            "../internals/is-pure": 93,
            "../internals/iterate": 95,
            "../internals/microtask": 99,
            "../internals/native-promise-constructor": 100,
            "../internals/new-promise-capability": 104,
            "../internals/perform": 123,
            "../internals/promise-resolve": 124,
            "../internals/redefine": 126,
            "../internals/redefine-all": 125,
            "../internals/set-species": 134,
            "../internals/set-to-string-tag": 135,
            "../internals/species-constructor": 139,
            "../internals/task": 146,
            "../internals/well-known-symbol": 164
          }
        ],
        197: [
          function(_dereq_2, module2, exports2) {
            var $ = _dereq_2("../internals/export");
            var getBuiltIn = _dereq_2("../internals/get-built-in");
            var aFunction = _dereq_2("../internals/a-function");
            var anObject = _dereq_2("../internals/an-object");
            var isObject = _dereq_2("../internals/is-object");
            var create = _dereq_2("../internals/object-create");
            var bind = _dereq_2("../internals/function-bind");
            var fails = _dereq_2("../internals/fails");
            var nativeConstruct = getBuiltIn("Reflect", "construct");
            var NEW_TARGET_BUG = fails(function() {
              function F() {
              }
              return !(nativeConstruct(function() {
              }, [], F) instanceof F);
            });
            var ARGS_BUG = !fails(function() {
              nativeConstruct(function() {
              });
            });
            var FORCED = NEW_TARGET_BUG || ARGS_BUG;
            $({
              target: "Reflect",
              stat: true,
              forced: FORCED,
              sham: FORCED
            }, {
              construct: function construct(Target, args) {
                aFunction(Target);
                anObject(args);
                var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
                if (ARGS_BUG && !NEW_TARGET_BUG)
                  return nativeConstruct(Target, args, newTarget);
                if (Target == newTarget) {
                  switch (args.length) {
                    case 0:
                      return new Target();
                    case 1:
                      return new Target(args[0]);
                    case 2:
                      return new Target(args[0], args[1]);
                    case 3:
                      return new Target(args[0], args[1], args[2]);
                    case 4:
                      return new Target(args[0], args[1], args[2], args[3]);
                  }
                  var $args = [
                    null
                  ];
                  $args.push.apply($args, args);
                  return new (bind.apply(Target, $args))();
                }
                var proto = newTarget.prototype;
                var instance = create(isObject(proto) ? proto : Object.prototype);
                var result = Function.apply.call(Target, instance, args);
                return isObject(result) ? result : instance;
              }
            });
          },
          {
            "../internals/a-function": 23,
            "../internals/an-object": 28,
            "../internals/export": 68,
            "../internals/fails": 69,
            "../internals/function-bind": 73,
            "../internals/get-built-in": 74,
            "../internals/is-object": 92,
            "../internals/object-create": 108
          }
        ],
        198: [
          function(_dereq_2, module2, exports2) {
            var DESCRIPTORS = _dereq_2("../internals/descriptors");
            var global2 = _dereq_2("../internals/global");
            var isForced = _dereq_2("../internals/is-forced");
            var inheritIfRequired = _dereq_2("../internals/inherit-if-required");
            var defineProperty = _dereq_2("../internals/object-define-property").f;
            var getOwnPropertyNames = _dereq_2("../internals/object-get-own-property-names").f;
            var isRegExp = _dereq_2("../internals/is-regexp");
            var getFlags = _dereq_2("../internals/regexp-flags");
            var stickyHelpers = _dereq_2("../internals/regexp-sticky-helpers");
            var redefine = _dereq_2("../internals/redefine");
            var fails = _dereq_2("../internals/fails");
            var setInternalState = _dereq_2("../internals/internal-state").set;
            var setSpecies = _dereq_2("../internals/set-species");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var MATCH = wellKnownSymbol("match");
            var NativeRegExp = global2.RegExp;
            var RegExpPrototype = NativeRegExp.prototype;
            var re1 = /a/g;
            var re2 = /a/g;
            var CORRECT_NEW = new NativeRegExp(re1) !== re1;
            var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
            var FORCED = DESCRIPTORS && isForced("RegExp", !CORRECT_NEW || UNSUPPORTED_Y || fails(function() {
              re2[MATCH] = false;
              return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, "i") != "/a/i";
            }));
            if (FORCED) {
              var RegExpWrapper = function RegExp2(pattern, flags) {
                var thisIsRegExp = this instanceof RegExpWrapper;
                var patternIsRegExp = isRegExp(pattern);
                var flagsAreUndefined = flags === void 0;
                var sticky;
                if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined) {
                  return pattern;
                }
                if (CORRECT_NEW) {
                  if (patternIsRegExp && !flagsAreUndefined)
                    pattern = pattern.source;
                } else if (pattern instanceof RegExpWrapper) {
                  if (flagsAreUndefined)
                    flags = getFlags.call(pattern);
                  pattern = pattern.source;
                }
                if (UNSUPPORTED_Y) {
                  sticky = !!flags && flags.indexOf("y") > -1;
                  if (sticky)
                    flags = flags.replace(/y/g, "");
                }
                var result = inheritIfRequired(CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern, flags), thisIsRegExp ? this : RegExpPrototype, RegExpWrapper);
                if (UNSUPPORTED_Y && sticky)
                  setInternalState(result, {
                    sticky
                  });
                return result;
              };
              var proxy = function(key2) {
                key2 in RegExpWrapper || defineProperty(RegExpWrapper, key2, {
                  configurable: true,
                  get: function() {
                    return NativeRegExp[key2];
                  },
                  set: function(it) {
                    NativeRegExp[key2] = it;
                  }
                });
              };
              var keys = getOwnPropertyNames(NativeRegExp);
              var index = 0;
              while (keys.length > index)
                proxy(keys[index++]);
              RegExpPrototype.constructor = RegExpWrapper;
              RegExpWrapper.prototype = RegExpPrototype;
              redefine(global2, "RegExp", RegExpWrapper);
            }
            setSpecies("RegExp");
          },
          {
            "../internals/descriptors": 61,
            "../internals/fails": 69,
            "../internals/global": 77,
            "../internals/inherit-if-required": 85,
            "../internals/internal-state": 88,
            "../internals/is-forced": 91,
            "../internals/is-regexp": 94,
            "../internals/object-define-property": 110,
            "../internals/object-get-own-property-names": 113,
            "../internals/redefine": 126,
            "../internals/regexp-flags": 129,
            "../internals/regexp-sticky-helpers": 130,
            "../internals/set-species": 134,
            "../internals/well-known-symbol": 164
          }
        ],
        199: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var exec = _dereq_2("../internals/regexp-exec");
            $({
              target: "RegExp",
              proto: true,
              forced: /./.exec !== exec
            }, {
              exec
            });
          },
          {
            "../internals/export": 68,
            "../internals/regexp-exec": 128
          }
        ],
        200: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var redefine = _dereq_2("../internals/redefine");
            var anObject = _dereq_2("../internals/an-object");
            var fails = _dereq_2("../internals/fails");
            var flags = _dereq_2("../internals/regexp-flags");
            var TO_STRING = "toString";
            var RegExpPrototype = RegExp.prototype;
            var nativeToString = RegExpPrototype[TO_STRING];
            var NOT_GENERIC = fails(function() {
              return nativeToString.call({
                source: "a",
                flags: "b"
              }) != "/a/b";
            });
            var INCORRECT_NAME = nativeToString.name != TO_STRING;
            if (NOT_GENERIC || INCORRECT_NAME) {
              redefine(RegExp.prototype, TO_STRING, function toString() {
                var R = anObject(this);
                var p = String(R.source);
                var rf = R.flags;
                var f = String(rf === void 0 && R instanceof RegExp && !("flags" in RegExpPrototype) ? flags.call(R) : rf);
                return "/" + p + "/" + f;
              }, {
                unsafe: true
              });
            }
          },
          {
            "../internals/an-object": 28,
            "../internals/fails": 69,
            "../internals/redefine": 126,
            "../internals/regexp-flags": 129
          }
        ],
        201: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var collection = _dereq_2("../internals/collection");
            var collectionStrong = _dereq_2("../internals/collection-strong");
            module2.exports = collection("Set", function(init) {
              return function Set2() {
                return init(this, arguments.length ? arguments[0] : void 0);
              };
            }, collectionStrong);
          },
          {
            "../internals/collection": 50,
            "../internals/collection-strong": 48
          }
        ],
        202: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var getOwnPropertyDescriptor = _dereq_2("../internals/object-get-own-property-descriptor").f;
            var toLength = _dereq_2("../internals/to-length");
            var notARegExp = _dereq_2("../internals/not-a-regexp");
            var requireObjectCoercible = _dereq_2("../internals/require-object-coercible");
            var correctIsRegExpLogic = _dereq_2("../internals/correct-is-regexp-logic");
            var IS_PURE = _dereq_2("../internals/is-pure");
            var nativeEndsWith = "".endsWith;
            var min = Math.min;
            var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic("endsWith");
            var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function() {
              var descriptor = getOwnPropertyDescriptor(String.prototype, "endsWith");
              return descriptor && !descriptor.writable;
            }();
            $({
              target: "String",
              proto: true,
              forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC
            }, {
              endsWith: function endsWith(searchString) {
                var that = String(requireObjectCoercible(this));
                notARegExp(searchString);
                var endPosition = arguments.length > 1 ? arguments[1] : void 0;
                var len = toLength(that.length);
                var end = endPosition === void 0 ? len : min(toLength(endPosition), len);
                var search = String(searchString);
                return nativeEndsWith ? nativeEndsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
              }
            });
          },
          {
            "../internals/correct-is-regexp-logic": 52,
            "../internals/export": 68,
            "../internals/is-pure": 93,
            "../internals/not-a-regexp": 105,
            "../internals/object-get-own-property-descriptor": 111,
            "../internals/require-object-coercible": 131,
            "../internals/to-length": 152
          }
        ],
        203: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var notARegExp = _dereq_2("../internals/not-a-regexp");
            var requireObjectCoercible = _dereq_2("../internals/require-object-coercible");
            var correctIsRegExpLogic = _dereq_2("../internals/correct-is-regexp-logic");
            $({
              target: "String",
              proto: true,
              forced: !correctIsRegExpLogic("includes")
            }, {
              includes: function includes(searchString) {
                return !!~String(requireObjectCoercible(this)).indexOf(notARegExp(searchString), arguments.length > 1 ? arguments[1] : void 0);
              }
            });
          },
          {
            "../internals/correct-is-regexp-logic": 52,
            "../internals/export": 68,
            "../internals/not-a-regexp": 105,
            "../internals/require-object-coercible": 131
          }
        ],
        204: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var charAt = _dereq_2("../internals/string-multibyte").charAt;
            var InternalStateModule = _dereq_2("../internals/internal-state");
            var defineIterator = _dereq_2("../internals/define-iterator");
            var STRING_ITERATOR = "String Iterator";
            var setInternalState = InternalStateModule.set;
            var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
            defineIterator(String, "String", function(iterated) {
              setInternalState(this, {
                type: STRING_ITERATOR,
                string: String(iterated),
                index: 0
              });
            }, function next() {
              var state = getInternalState(this);
              var string = state.string;
              var index = state.index;
              var point;
              if (index >= string.length)
                return {
                  value: void 0,
                  done: true
                };
              point = charAt(string, index);
              state.index += point.length;
              return {
                value: point,
                done: false
              };
            });
          },
          {
            "../internals/define-iterator": 59,
            "../internals/internal-state": 88,
            "../internals/string-multibyte": 141
          }
        ],
        205: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var fixRegExpWellKnownSymbolLogic = _dereq_2("../internals/fix-regexp-well-known-symbol-logic");
            var anObject = _dereq_2("../internals/an-object");
            var toLength = _dereq_2("../internals/to-length");
            var requireObjectCoercible = _dereq_2("../internals/require-object-coercible");
            var advanceStringIndex = _dereq_2("../internals/advance-string-index");
            var regExpExec = _dereq_2("../internals/regexp-exec-abstract");
            fixRegExpWellKnownSymbolLogic("match", 1, function(MATCH, nativeMatch, maybeCallNative) {
              return [
                // `String.prototype.match` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.match
                function match(regexp) {
                  var O = requireObjectCoercible(this);
                  var matcher = regexp == void 0 ? void 0 : regexp[MATCH];
                  return matcher !== void 0 ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
                },
                // `RegExp.prototype[@@match]` method
                // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
                function(regexp) {
                  var res = maybeCallNative(nativeMatch, regexp, this);
                  if (res.done)
                    return res.value;
                  var rx = anObject(regexp);
                  var S = String(this);
                  if (!rx.global)
                    return regExpExec(rx, S);
                  var fullUnicode = rx.unicode;
                  rx.lastIndex = 0;
                  var A = [];
                  var n = 0;
                  var result;
                  while ((result = regExpExec(rx, S)) !== null) {
                    var matchStr = String(result[0]);
                    A[n] = matchStr;
                    if (matchStr === "")
                      rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
                    n++;
                  }
                  return n === 0 ? null : A;
                }
              ];
            });
          },
          {
            "../internals/advance-string-index": 26,
            "../internals/an-object": 28,
            "../internals/fix-regexp-well-known-symbol-logic": 70,
            "../internals/regexp-exec-abstract": 127,
            "../internals/require-object-coercible": 131,
            "../internals/to-length": 152
          }
        ],
        206: [
          function(_dereq_2, module2, exports2) {
            var $ = _dereq_2("../internals/export");
            var repeat = _dereq_2("../internals/string-repeat");
            $({
              target: "String",
              proto: true
            }, {
              repeat
            });
          },
          {
            "../internals/export": 68,
            "../internals/string-repeat": 143
          }
        ],
        207: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var fixRegExpWellKnownSymbolLogic = _dereq_2("../internals/fix-regexp-well-known-symbol-logic");
            var anObject = _dereq_2("../internals/an-object");
            var toObject = _dereq_2("../internals/to-object");
            var toLength = _dereq_2("../internals/to-length");
            var toInteger = _dereq_2("../internals/to-integer");
            var requireObjectCoercible = _dereq_2("../internals/require-object-coercible");
            var advanceStringIndex = _dereq_2("../internals/advance-string-index");
            var regExpExec = _dereq_2("../internals/regexp-exec-abstract");
            var max = Math.max;
            var min = Math.min;
            var floor = Math.floor;
            var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
            var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;
            var maybeToString = function(it) {
              return it === void 0 ? it : String(it);
            };
            fixRegExpWellKnownSymbolLogic("replace", 2, function(REPLACE, nativeReplace, maybeCallNative, reason) {
              var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
              var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
              var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? "$" : "$0";
              return [
                // `String.prototype.replace` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.replace
                function replace(searchValue, replaceValue) {
                  var O = requireObjectCoercible(this);
                  var replacer = searchValue == void 0 ? void 0 : searchValue[REPLACE];
                  return replacer !== void 0 ? replacer.call(searchValue, O, replaceValue) : nativeReplace.call(String(O), searchValue, replaceValue);
                },
                // `RegExp.prototype[@@replace]` method
                // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
                function(regexp, replaceValue) {
                  if (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0 || typeof replaceValue === "string" && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1) {
                    var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
                    if (res.done)
                      return res.value;
                  }
                  var rx = anObject(regexp);
                  var S = String(this);
                  var functionalReplace = typeof replaceValue === "function";
                  if (!functionalReplace)
                    replaceValue = String(replaceValue);
                  var global2 = rx.global;
                  if (global2) {
                    var fullUnicode = rx.unicode;
                    rx.lastIndex = 0;
                  }
                  var results = [];
                  while (true) {
                    var result = regExpExec(rx, S);
                    if (result === null)
                      break;
                    results.push(result);
                    if (!global2)
                      break;
                    var matchStr = String(result[0]);
                    if (matchStr === "")
                      rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
                  }
                  var accumulatedResult = "";
                  var nextSourcePosition = 0;
                  for (var i2 = 0; i2 < results.length; i2++) {
                    result = results[i2];
                    var matched = String(result[0]);
                    var position = max(min(toInteger(result.index), S.length), 0);
                    var captures = [];
                    for (var j = 1; j < result.length; j++)
                      captures.push(maybeToString(result[j]));
                    var namedCaptures = result.groups;
                    if (functionalReplace) {
                      var replacerArgs = [
                        matched
                      ].concat(captures, position, S);
                      if (namedCaptures !== void 0)
                        replacerArgs.push(namedCaptures);
                      var replacement = String(replaceValue.apply(void 0, replacerArgs));
                    } else {
                      replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
                    }
                    if (position >= nextSourcePosition) {
                      accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
                      nextSourcePosition = position + matched.length;
                    }
                  }
                  return accumulatedResult + S.slice(nextSourcePosition);
                }
              ];
              function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
                var tailPos = position + matched.length;
                var m = captures.length;
                var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
                if (namedCaptures !== void 0) {
                  namedCaptures = toObject(namedCaptures);
                  symbols = SUBSTITUTION_SYMBOLS;
                }
                return nativeReplace.call(replacement, symbols, function(match, ch) {
                  var capture;
                  switch (ch.charAt(0)) {
                    case "$":
                      return "$";
                    case "&":
                      return matched;
                    case "`":
                      return str.slice(0, position);
                    case "'":
                      return str.slice(tailPos);
                    case "<":
                      capture = namedCaptures[ch.slice(1, -1)];
                      break;
                    default:
                      var n = +ch;
                      if (n === 0)
                        return match;
                      if (n > m) {
                        var f = floor(n / 10);
                        if (f === 0)
                          return match;
                        if (f <= m)
                          return captures[f - 1] === void 0 ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                        return match;
                      }
                      capture = captures[n - 1];
                  }
                  return capture === void 0 ? "" : capture;
                });
              }
            });
          },
          {
            "../internals/advance-string-index": 26,
            "../internals/an-object": 28,
            "../internals/fix-regexp-well-known-symbol-logic": 70,
            "../internals/regexp-exec-abstract": 127,
            "../internals/require-object-coercible": 131,
            "../internals/to-integer": 151,
            "../internals/to-length": 152,
            "../internals/to-object": 153
          }
        ],
        208: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var fixRegExpWellKnownSymbolLogic = _dereq_2("../internals/fix-regexp-well-known-symbol-logic");
            var anObject = _dereq_2("../internals/an-object");
            var requireObjectCoercible = _dereq_2("../internals/require-object-coercible");
            var sameValue = _dereq_2("../internals/same-value");
            var regExpExec = _dereq_2("../internals/regexp-exec-abstract");
            fixRegExpWellKnownSymbolLogic("search", 1, function(SEARCH, nativeSearch, maybeCallNative) {
              return [
                // `String.prototype.search` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.search
                function search(regexp) {
                  var O = requireObjectCoercible(this);
                  var searcher = regexp == void 0 ? void 0 : regexp[SEARCH];
                  return searcher !== void 0 ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
                },
                // `RegExp.prototype[@@search]` method
                // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
                function(regexp) {
                  var res = maybeCallNative(nativeSearch, regexp, this);
                  if (res.done)
                    return res.value;
                  var rx = anObject(regexp);
                  var S = String(this);
                  var previousLastIndex = rx.lastIndex;
                  if (!sameValue(previousLastIndex, 0))
                    rx.lastIndex = 0;
                  var result = regExpExec(rx, S);
                  if (!sameValue(rx.lastIndex, previousLastIndex))
                    rx.lastIndex = previousLastIndex;
                  return result === null ? -1 : result.index;
                }
              ];
            });
          },
          {
            "../internals/an-object": 28,
            "../internals/fix-regexp-well-known-symbol-logic": 70,
            "../internals/regexp-exec-abstract": 127,
            "../internals/require-object-coercible": 131,
            "../internals/same-value": 132
          }
        ],
        209: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var fixRegExpWellKnownSymbolLogic = _dereq_2("../internals/fix-regexp-well-known-symbol-logic");
            var isRegExp = _dereq_2("../internals/is-regexp");
            var anObject = _dereq_2("../internals/an-object");
            var requireObjectCoercible = _dereq_2("../internals/require-object-coercible");
            var speciesConstructor = _dereq_2("../internals/species-constructor");
            var advanceStringIndex = _dereq_2("../internals/advance-string-index");
            var toLength = _dereq_2("../internals/to-length");
            var callRegExpExec = _dereq_2("../internals/regexp-exec-abstract");
            var regexpExec = _dereq_2("../internals/regexp-exec");
            var fails = _dereq_2("../internals/fails");
            var arrayPush = [].push;
            var min = Math.min;
            var MAX_UINT32 = 4294967295;
            var SUPPORTS_Y = !fails(function() {
              return !RegExp(MAX_UINT32, "y");
            });
            fixRegExpWellKnownSymbolLogic("split", 2, function(SPLIT, nativeSplit, maybeCallNative) {
              var internalSplit;
              if ("abbc".split(/(b)*/)[1] == "c" || "test".split(/(?:)/, -1).length != 4 || "ab".split(/(?:ab)*/).length != 2 || ".".split(/(.?)(.?)/).length != 4 || ".".split(/()()/).length > 1 || "".split(/.?/).length) {
                internalSplit = function(separator, limit) {
                  var string = String(requireObjectCoercible(this));
                  var lim = limit === void 0 ? MAX_UINT32 : limit >>> 0;
                  if (lim === 0)
                    return [];
                  if (separator === void 0)
                    return [string];
                  if (!isRegExp(separator)) {
                    return nativeSplit.call(string, separator, lim);
                  }
                  var output = [];
                  var flags = (separator.ignoreCase ? "i" : "") + (separator.multiline ? "m" : "") + (separator.unicode ? "u" : "") + (separator.sticky ? "y" : "");
                  var lastLastIndex = 0;
                  var separatorCopy = new RegExp(separator.source, flags + "g");
                  var match, lastIndex, lastLength;
                  while (match = regexpExec.call(separatorCopy, string)) {
                    lastIndex = separatorCopy.lastIndex;
                    if (lastIndex > lastLastIndex) {
                      output.push(string.slice(lastLastIndex, match.index));
                      if (match.length > 1 && match.index < string.length)
                        arrayPush.apply(output, match.slice(1));
                      lastLength = match[0].length;
                      lastLastIndex = lastIndex;
                      if (output.length >= lim)
                        break;
                    }
                    if (separatorCopy.lastIndex === match.index)
                      separatorCopy.lastIndex++;
                  }
                  if (lastLastIndex === string.length) {
                    if (lastLength || !separatorCopy.test(""))
                      output.push("");
                  } else
                    output.push(string.slice(lastLastIndex));
                  return output.length > lim ? output.slice(0, lim) : output;
                };
              } else if ("0".split(void 0, 0).length) {
                internalSplit = function(separator, limit) {
                  return separator === void 0 && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
                };
              } else
                internalSplit = nativeSplit;
              return [
                // `String.prototype.split` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.split
                function split(separator, limit) {
                  var O = requireObjectCoercible(this);
                  var splitter = separator == void 0 ? void 0 : separator[SPLIT];
                  return splitter !== void 0 ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
                },
                // `RegExp.prototype[@@split]` method
                // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
                //
                // NOTE: This cannot be properly polyfilled in engines that don't support
                // the 'y' flag.
                function(regexp, limit) {
                  var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
                  if (res.done)
                    return res.value;
                  var rx = anObject(regexp);
                  var S = String(this);
                  var C = speciesConstructor(rx, RegExp);
                  var unicodeMatching = rx.unicode;
                  var flags = (rx.ignoreCase ? "i" : "") + (rx.multiline ? "m" : "") + (rx.unicode ? "u" : "") + (SUPPORTS_Y ? "y" : "g");
                  var splitter = new C(SUPPORTS_Y ? rx : "^(?:" + rx.source + ")", flags);
                  var lim = limit === void 0 ? MAX_UINT32 : limit >>> 0;
                  if (lim === 0)
                    return [];
                  if (S.length === 0)
                    return callRegExpExec(splitter, S) === null ? [
                      S
                    ] : [];
                  var p = 0;
                  var q = 0;
                  var A = [];
                  while (q < S.length) {
                    splitter.lastIndex = SUPPORTS_Y ? q : 0;
                    var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
                    var e2;
                    if (z === null || (e2 = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) {
                      q = advanceStringIndex(S, q, unicodeMatching);
                    } else {
                      A.push(S.slice(p, q));
                      if (A.length === lim)
                        return A;
                      for (var i2 = 1; i2 <= z.length - 1; i2++) {
                        A.push(z[i2]);
                        if (A.length === lim)
                          return A;
                      }
                      q = p = e2;
                    }
                  }
                  A.push(S.slice(p));
                  return A;
                }
              ];
            }, !SUPPORTS_Y);
          },
          {
            "../internals/advance-string-index": 26,
            "../internals/an-object": 28,
            "../internals/fails": 69,
            "../internals/fix-regexp-well-known-symbol-logic": 70,
            "../internals/is-regexp": 94,
            "../internals/regexp-exec": 128,
            "../internals/regexp-exec-abstract": 127,
            "../internals/require-object-coercible": 131,
            "../internals/species-constructor": 139,
            "../internals/to-length": 152
          }
        ],
        210: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var createHTML = _dereq_2("../internals/create-html");
            var forcedStringHTMLMethod = _dereq_2("../internals/string-html-forced");
            $({
              target: "String",
              proto: true,
              forced: forcedStringHTMLMethod("sub")
            }, {
              sub: function sub() {
                return createHTML(this, "sub", "", "");
              }
            });
          },
          {
            "../internals/create-html": 54,
            "../internals/export": 68,
            "../internals/string-html-forced": 140
          }
        ],
        211: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var $trim = _dereq_2("../internals/string-trim").trim;
            var forcedStringTrimMethod = _dereq_2("../internals/string-trim-forced");
            $({
              target: "String",
              proto: true,
              forced: forcedStringTrimMethod("trim")
            }, {
              trim: function trim() {
                return $trim(this);
              }
            });
          },
          {
            "../internals/export": 68,
            "../internals/string-trim": 145,
            "../internals/string-trim-forced": 144
          }
        ],
        212: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var DESCRIPTORS = _dereq_2("../internals/descriptors");
            var global2 = _dereq_2("../internals/global");
            var has = _dereq_2("../internals/has");
            var isObject = _dereq_2("../internals/is-object");
            var defineProperty = _dereq_2("../internals/object-define-property").f;
            var copyConstructorProperties = _dereq_2("../internals/copy-constructor-properties");
            var NativeSymbol = global2.Symbol;
            if (DESCRIPTORS && typeof NativeSymbol == "function" && (!("description" in NativeSymbol.prototype) || // Safari 12 bug
            NativeSymbol().description !== void 0)) {
              var EmptyStringDescriptionStore = {};
              var SymbolWrapper = function Symbol2() {
                var description = arguments.length < 1 || arguments[0] === void 0 ? void 0 : String(arguments[0]);
                var result = this instanceof SymbolWrapper ? new NativeSymbol(description) : description === void 0 ? NativeSymbol() : NativeSymbol(description);
                if (description === "")
                  EmptyStringDescriptionStore[result] = true;
                return result;
              };
              copyConstructorProperties(SymbolWrapper, NativeSymbol);
              var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
              symbolPrototype.constructor = SymbolWrapper;
              var symbolToString = symbolPrototype.toString;
              var native = String(NativeSymbol("test")) == "Symbol(test)";
              var regexp = /^Symbol\((.*)\)[^)]+$/;
              defineProperty(symbolPrototype, "description", {
                configurable: true,
                get: function description() {
                  var symbol = isObject(this) ? this.valueOf() : this;
                  var string = symbolToString.call(symbol);
                  if (has(EmptyStringDescriptionStore, symbol))
                    return "";
                  var desc = native ? string.slice(7, -1) : string.replace(regexp, "$1");
                  return desc === "" ? void 0 : desc;
                }
              });
              $({
                global: true,
                forced: true
              }, {
                Symbol: SymbolWrapper
              });
            }
          },
          {
            "../internals/copy-constructor-properties": 51,
            "../internals/descriptors": 61,
            "../internals/export": 68,
            "../internals/global": 77,
            "../internals/has": 78,
            "../internals/is-object": 92,
            "../internals/object-define-property": 110
          }
        ],
        213: [
          function(_dereq_2, module2, exports2) {
            var defineWellKnownSymbol = _dereq_2("../internals/define-well-known-symbol");
            defineWellKnownSymbol("iterator");
          },
          {
            "../internals/define-well-known-symbol": 60
          }
        ],
        214: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var $ = _dereq_2("../internals/export");
            var global2 = _dereq_2("../internals/global");
            var getBuiltIn = _dereq_2("../internals/get-built-in");
            var IS_PURE = _dereq_2("../internals/is-pure");
            var DESCRIPTORS = _dereq_2("../internals/descriptors");
            var NATIVE_SYMBOL = _dereq_2("../internals/native-symbol");
            var USE_SYMBOL_AS_UID = _dereq_2("../internals/use-symbol-as-uid");
            var fails = _dereq_2("../internals/fails");
            var has = _dereq_2("../internals/has");
            var isArray = _dereq_2("../internals/is-array");
            var isObject = _dereq_2("../internals/is-object");
            var anObject = _dereq_2("../internals/an-object");
            var toObject = _dereq_2("../internals/to-object");
            var toIndexedObject = _dereq_2("../internals/to-indexed-object");
            var toPrimitive = _dereq_2("../internals/to-primitive");
            var createPropertyDescriptor = _dereq_2("../internals/create-property-descriptor");
            var nativeObjectCreate = _dereq_2("../internals/object-create");
            var objectKeys = _dereq_2("../internals/object-keys");
            var getOwnPropertyNamesModule = _dereq_2("../internals/object-get-own-property-names");
            var getOwnPropertyNamesExternal = _dereq_2("../internals/object-get-own-property-names-external");
            var getOwnPropertySymbolsModule = _dereq_2("../internals/object-get-own-property-symbols");
            var getOwnPropertyDescriptorModule = _dereq_2("../internals/object-get-own-property-descriptor");
            var definePropertyModule = _dereq_2("../internals/object-define-property");
            var propertyIsEnumerableModule = _dereq_2("../internals/object-property-is-enumerable");
            var createNonEnumerableProperty = _dereq_2("../internals/create-non-enumerable-property");
            var redefine = _dereq_2("../internals/redefine");
            var shared = _dereq_2("../internals/shared");
            var sharedKey = _dereq_2("../internals/shared-key");
            var hiddenKeys = _dereq_2("../internals/hidden-keys");
            var uid = _dereq_2("../internals/uid");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var wrappedWellKnownSymbolModule = _dereq_2("../internals/well-known-symbol-wrapped");
            var defineWellKnownSymbol = _dereq_2("../internals/define-well-known-symbol");
            var setToStringTag = _dereq_2("../internals/set-to-string-tag");
            var InternalStateModule = _dereq_2("../internals/internal-state");
            var $forEach = _dereq_2("../internals/array-iteration").forEach;
            var HIDDEN = sharedKey("hidden");
            var SYMBOL = "Symbol";
            var PROTOTYPE = "prototype";
            var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
            var setInternalState = InternalStateModule.set;
            var getInternalState = InternalStateModule.getterFor(SYMBOL);
            var ObjectPrototype = Object[PROTOTYPE];
            var $Symbol = global2.Symbol;
            var $stringify = getBuiltIn("JSON", "stringify");
            var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
            var nativeDefineProperty = definePropertyModule.f;
            var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
            var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
            var AllSymbols = shared("symbols");
            var ObjectPrototypeSymbols = shared("op-symbols");
            var StringToSymbolRegistry = shared("string-to-symbol-registry");
            var SymbolToStringRegistry = shared("symbol-to-string-registry");
            var WellKnownSymbolsStore = shared("wks");
            var QObject = global2.QObject;
            var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
            var setSymbolDescriptor = DESCRIPTORS && fails(function() {
              return nativeObjectCreate(nativeDefineProperty({}, "a", {
                get: function() {
                  return nativeDefineProperty(this, "a", {
                    value: 7
                  }).a;
                }
              })).a != 7;
            }) ? function(O, P, Attributes) {
              var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
              if (ObjectPrototypeDescriptor)
                delete ObjectPrototype[P];
              nativeDefineProperty(O, P, Attributes);
              if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
                nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
              }
            } : nativeDefineProperty;
            var wrap = function(tag, description) {
              var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
              setInternalState(symbol, {
                type: SYMBOL,
                tag,
                description
              });
              if (!DESCRIPTORS)
                symbol.description = description;
              return symbol;
            };
            var isSymbol = USE_SYMBOL_AS_UID ? function(it) {
              return typeof it == "symbol";
            } : function(it) {
              return Object(it) instanceof $Symbol;
            };
            var $defineProperty = function defineProperty(O, P, Attributes) {
              if (O === ObjectPrototype)
                $defineProperty(ObjectPrototypeSymbols, P, Attributes);
              anObject(O);
              var key2 = toPrimitive(P, true);
              anObject(Attributes);
              if (has(AllSymbols, key2)) {
                if (!Attributes.enumerable) {
                  if (!has(O, HIDDEN))
                    nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
                  O[HIDDEN][key2] = true;
                } else {
                  if (has(O, HIDDEN) && O[HIDDEN][key2])
                    O[HIDDEN][key2] = false;
                  Attributes = nativeObjectCreate(Attributes, {
                    enumerable: createPropertyDescriptor(0, false)
                  });
                }
                return setSymbolDescriptor(O, key2, Attributes);
              }
              return nativeDefineProperty(O, key2, Attributes);
            };
            var $defineProperties = function defineProperties(O, Properties) {
              anObject(O);
              var properties = toIndexedObject(Properties);
              var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
              $forEach(keys, function(key2) {
                if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key2))
                  $defineProperty(O, key2, properties[key2]);
              });
              return O;
            };
            var $create = function create(O, Properties) {
              return Properties === void 0 ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
            };
            var $propertyIsEnumerable = function propertyIsEnumerable(V) {
              var P = toPrimitive(V, true);
              var enumerable = nativePropertyIsEnumerable.call(this, P);
              if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P))
                return false;
              return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
            };
            var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
              var it = toIndexedObject(O);
              var key2 = toPrimitive(P, true);
              if (it === ObjectPrototype && has(AllSymbols, key2) && !has(ObjectPrototypeSymbols, key2))
                return;
              var descriptor = nativeGetOwnPropertyDescriptor(it, key2);
              if (descriptor && has(AllSymbols, key2) && !(has(it, HIDDEN) && it[HIDDEN][key2])) {
                descriptor.enumerable = true;
              }
              return descriptor;
            };
            var $getOwnPropertyNames = function getOwnPropertyNames(O) {
              var names = nativeGetOwnPropertyNames(toIndexedObject(O));
              var result = [];
              $forEach(names, function(key2) {
                if (!has(AllSymbols, key2) && !has(hiddenKeys, key2))
                  result.push(key2);
              });
              return result;
            };
            var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
              var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
              var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
              var result = [];
              $forEach(names, function(key2) {
                if (has(AllSymbols, key2) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key2))) {
                  result.push(AllSymbols[key2]);
                }
              });
              return result;
            };
            if (!NATIVE_SYMBOL) {
              $Symbol = function Symbol2() {
                if (this instanceof $Symbol)
                  throw TypeError("Symbol is not a constructor");
                var description = !arguments.length || arguments[0] === void 0 ? void 0 : String(arguments[0]);
                var tag = uid(description);
                var setter = function(value) {
                  if (this === ObjectPrototype)
                    setter.call(ObjectPrototypeSymbols, value);
                  if (has(this, HIDDEN) && has(this[HIDDEN], tag))
                    this[HIDDEN][tag] = false;
                  setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
                };
                if (DESCRIPTORS && USE_SETTER)
                  setSymbolDescriptor(ObjectPrototype, tag, {
                    configurable: true,
                    set: setter
                  });
                return wrap(tag, description);
              };
              redefine($Symbol[PROTOTYPE], "toString", function toString() {
                return getInternalState(this).tag;
              });
              redefine($Symbol, "withoutSetter", function(description) {
                return wrap(uid(description), description);
              });
              propertyIsEnumerableModule.f = $propertyIsEnumerable;
              definePropertyModule.f = $defineProperty;
              getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
              getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
              getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;
              wrappedWellKnownSymbolModule.f = function(name) {
                return wrap(wellKnownSymbol(name), name);
              };
              if (DESCRIPTORS) {
                nativeDefineProperty($Symbol[PROTOTYPE], "description", {
                  configurable: true,
                  get: function description() {
                    return getInternalState(this).description;
                  }
                });
                if (!IS_PURE) {
                  redefine(ObjectPrototype, "propertyIsEnumerable", $propertyIsEnumerable, {
                    unsafe: true
                  });
                }
              }
            }
            $({
              global: true,
              wrap: true,
              forced: !NATIVE_SYMBOL,
              sham: !NATIVE_SYMBOL
            }, {
              Symbol: $Symbol
            });
            $forEach(objectKeys(WellKnownSymbolsStore), function(name) {
              defineWellKnownSymbol(name);
            });
            $({
              target: SYMBOL,
              stat: true,
              forced: !NATIVE_SYMBOL
            }, {
              // `Symbol.for` method
              // https://tc39.github.io/ecma262/#sec-symbol.for
              "for": function(key2) {
                var string = String(key2);
                if (has(StringToSymbolRegistry, string))
                  return StringToSymbolRegistry[string];
                var symbol = $Symbol(string);
                StringToSymbolRegistry[string] = symbol;
                SymbolToStringRegistry[symbol] = string;
                return symbol;
              },
              // `Symbol.keyFor` method
              // https://tc39.github.io/ecma262/#sec-symbol.keyfor
              keyFor: function keyFor(sym) {
                if (!isSymbol(sym))
                  throw TypeError(sym + " is not a symbol");
                if (has(SymbolToStringRegistry, sym))
                  return SymbolToStringRegistry[sym];
              },
              useSetter: function() {
                USE_SETTER = true;
              },
              useSimple: function() {
                USE_SETTER = false;
              }
            });
            $({
              target: "Object",
              stat: true,
              forced: !NATIVE_SYMBOL,
              sham: !DESCRIPTORS
            }, {
              // `Object.create` method
              // https://tc39.github.io/ecma262/#sec-object.create
              create: $create,
              // `Object.defineProperty` method
              // https://tc39.github.io/ecma262/#sec-object.defineproperty
              defineProperty: $defineProperty,
              // `Object.defineProperties` method
              // https://tc39.github.io/ecma262/#sec-object.defineproperties
              defineProperties: $defineProperties,
              // `Object.getOwnPropertyDescriptor` method
              // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
              getOwnPropertyDescriptor: $getOwnPropertyDescriptor
            });
            $({
              target: "Object",
              stat: true,
              forced: !NATIVE_SYMBOL
            }, {
              // `Object.getOwnPropertyNames` method
              // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
              getOwnPropertyNames: $getOwnPropertyNames,
              // `Object.getOwnPropertySymbols` method
              // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
              getOwnPropertySymbols: $getOwnPropertySymbols
            });
            $({
              target: "Object",
              stat: true,
              forced: fails(function() {
                getOwnPropertySymbolsModule.f(1);
              })
            }, {
              getOwnPropertySymbols: function getOwnPropertySymbols(it) {
                return getOwnPropertySymbolsModule.f(toObject(it));
              }
            });
            if ($stringify) {
              var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function() {
                var symbol = $Symbol();
                return $stringify([symbol]) != "[null]" || $stringify({
                  a: symbol
                }) != "{}" || $stringify(Object(symbol)) != "{}";
              });
              $({
                target: "JSON",
                stat: true,
                forced: FORCED_JSON_STRINGIFY
              }, {
                // eslint-disable-next-line no-unused-vars
                stringify: function stringify(it, replacer, space) {
                  var args = [
                    it
                  ];
                  var index = 1;
                  var $replacer;
                  while (arguments.length > index)
                    args.push(arguments[index++]);
                  $replacer = replacer;
                  if (!isObject(replacer) && it === void 0 || isSymbol(it))
                    return;
                  if (!isArray(replacer))
                    replacer = function(key2, value) {
                      if (typeof $replacer == "function")
                        value = $replacer.call(this, key2, value);
                      if (!isSymbol(value))
                        return value;
                    };
                  args[1] = replacer;
                  return $stringify.apply(null, args);
                }
              });
            }
            if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
              createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
            }
            setToStringTag($Symbol, SYMBOL);
            hiddenKeys[HIDDEN] = true;
          },
          {
            "../internals/an-object": 28,
            "../internals/array-iteration": 37,
            "../internals/create-non-enumerable-property": 56,
            "../internals/create-property-descriptor": 57,
            "../internals/define-well-known-symbol": 60,
            "../internals/descriptors": 61,
            "../internals/export": 68,
            "../internals/fails": 69,
            "../internals/get-built-in": 74,
            "../internals/global": 77,
            "../internals/has": 78,
            "../internals/hidden-keys": 79,
            "../internals/internal-state": 88,
            "../internals/is-array": 90,
            "../internals/is-object": 92,
            "../internals/is-pure": 93,
            "../internals/native-symbol": 101,
            "../internals/object-create": 108,
            "../internals/object-define-property": 110,
            "../internals/object-get-own-property-descriptor": 111,
            "../internals/object-get-own-property-names": 113,
            "../internals/object-get-own-property-names-external": 112,
            "../internals/object-get-own-property-symbols": 114,
            "../internals/object-keys": 117,
            "../internals/object-property-is-enumerable": 118,
            "../internals/redefine": 126,
            "../internals/set-to-string-tag": 135,
            "../internals/shared": 138,
            "../internals/shared-key": 136,
            "../internals/to-indexed-object": 150,
            "../internals/to-object": 153,
            "../internals/to-primitive": 156,
            "../internals/uid": 161,
            "../internals/use-symbol-as-uid": 162,
            "../internals/well-known-symbol": 164,
            "../internals/well-known-symbol-wrapped": 163
          }
        ],
        215: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var $copyWithin = _dereq_2("../internals/array-copy-within");
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            exportTypedArrayMethod("copyWithin", function copyWithin(target, start) {
              return $copyWithin.call(aTypedArray(this), target, start, arguments.length > 2 ? arguments[2] : void 0);
            });
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/array-copy-within": 32
          }
        ],
        216: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var $every = _dereq_2("../internals/array-iteration").every;
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            exportTypedArrayMethod("every", function every(callbackfn) {
              return $every(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : void 0);
            });
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/array-iteration": 37
          }
        ],
        217: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var $fill = _dereq_2("../internals/array-fill");
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            exportTypedArrayMethod("fill", function fill(value) {
              return $fill.apply(aTypedArray(this), arguments);
            });
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/array-fill": 33
          }
        ],
        218: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var $filter = _dereq_2("../internals/array-iteration").filter;
            var speciesConstructor = _dereq_2("../internals/species-constructor");
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            exportTypedArrayMethod("filter", function filter(callbackfn) {
              var list = $filter(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : void 0);
              var C = speciesConstructor(this, this.constructor);
              var index = 0;
              var length = list.length;
              var result = new (aTypedArrayConstructor(C))(length);
              while (length > index)
                result[index] = list[index++];
              return result;
            });
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/array-iteration": 37,
            "../internals/species-constructor": 139
          }
        ],
        219: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var $findIndex = _dereq_2("../internals/array-iteration").findIndex;
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            exportTypedArrayMethod("findIndex", function findIndex(predicate) {
              return $findIndex(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : void 0);
            });
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/array-iteration": 37
          }
        ],
        220: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var $find = _dereq_2("../internals/array-iteration").find;
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            exportTypedArrayMethod("find", function find(predicate) {
              return $find(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : void 0);
            });
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/array-iteration": 37
          }
        ],
        221: [
          function(_dereq_2, module2, exports2) {
            var createTypedArrayConstructor = _dereq_2("../internals/typed-array-constructor");
            createTypedArrayConstructor("Float32", function(init) {
              return function Float32Array2(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
              };
            });
          },
          {
            "../internals/typed-array-constructor": 158
          }
        ],
        222: [
          function(_dereq_2, module2, exports2) {
            var createTypedArrayConstructor = _dereq_2("../internals/typed-array-constructor");
            createTypedArrayConstructor("Float64", function(init) {
              return function Float64Array2(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
              };
            });
          },
          {
            "../internals/typed-array-constructor": 158
          }
        ],
        223: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var $forEach = _dereq_2("../internals/array-iteration").forEach;
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            exportTypedArrayMethod("forEach", function forEach(callbackfn) {
              $forEach(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : void 0);
            });
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/array-iteration": 37
          }
        ],
        224: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var $includes = _dereq_2("../internals/array-includes").includes;
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            exportTypedArrayMethod("includes", function includes(searchElement) {
              return $includes(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : void 0);
            });
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/array-includes": 36
          }
        ],
        225: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var $indexOf = _dereq_2("../internals/array-includes").indexOf;
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            exportTypedArrayMethod("indexOf", function indexOf(searchElement) {
              return $indexOf(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : void 0);
            });
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/array-includes": 36
          }
        ],
        226: [
          function(_dereq_2, module2, exports2) {
            var createTypedArrayConstructor = _dereq_2("../internals/typed-array-constructor");
            createTypedArrayConstructor("Int16", function(init) {
              return function Int16Array2(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
              };
            });
          },
          {
            "../internals/typed-array-constructor": 158
          }
        ],
        227: [
          function(_dereq_2, module2, exports2) {
            var createTypedArrayConstructor = _dereq_2("../internals/typed-array-constructor");
            createTypedArrayConstructor("Int32", function(init) {
              return function Int32Array2(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
              };
            });
          },
          {
            "../internals/typed-array-constructor": 158
          }
        ],
        228: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var global2 = _dereq_2("../internals/global");
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var ArrayIterators = _dereq_2("../modules/es.array.iterator");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var ITERATOR = wellKnownSymbol("iterator");
            var Uint8Array2 = global2.Uint8Array;
            var arrayValues = ArrayIterators.values;
            var arrayKeys = ArrayIterators.keys;
            var arrayEntries = ArrayIterators.entries;
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            var nativeTypedArrayIterator = Uint8Array2 && Uint8Array2.prototype[ITERATOR];
            var CORRECT_ITER_NAME = !!nativeTypedArrayIterator && (nativeTypedArrayIterator.name == "values" || nativeTypedArrayIterator.name == void 0);
            var typedArrayValues = function values() {
              return arrayValues.call(aTypedArray(this));
            };
            exportTypedArrayMethod("entries", function entries() {
              return arrayEntries.call(aTypedArray(this));
            });
            exportTypedArrayMethod("keys", function keys() {
              return arrayKeys.call(aTypedArray(this));
            });
            exportTypedArrayMethod("values", typedArrayValues, !CORRECT_ITER_NAME);
            exportTypedArrayMethod(ITERATOR, typedArrayValues, !CORRECT_ITER_NAME);
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/global": 77,
            "../internals/well-known-symbol": 164,
            "../modules/es.array.iterator": 176
          }
        ],
        229: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            var $join = [].join;
            exportTypedArrayMethod("join", function join(separator) {
              return $join.apply(aTypedArray(this), arguments);
            });
          },
          {
            "../internals/array-buffer-view-core": 30
          }
        ],
        230: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var $lastIndexOf = _dereq_2("../internals/array-last-index-of");
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            exportTypedArrayMethod("lastIndexOf", function lastIndexOf(searchElement) {
              return $lastIndexOf.apply(aTypedArray(this), arguments);
            });
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/array-last-index-of": 38
          }
        ],
        231: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var $map = _dereq_2("../internals/array-iteration").map;
            var speciesConstructor = _dereq_2("../internals/species-constructor");
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            exportTypedArrayMethod("map", function map(mapfn) {
              return $map(aTypedArray(this), mapfn, arguments.length > 1 ? arguments[1] : void 0, function(O, length) {
                return new (aTypedArrayConstructor(speciesConstructor(O, O.constructor)))(length);
              });
            });
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/array-iteration": 37,
            "../internals/species-constructor": 139
          }
        ],
        232: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var $reduceRight = _dereq_2("../internals/array-reduce").right;
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            exportTypedArrayMethod("reduceRight", function reduceRight(callbackfn) {
              return $reduceRight(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
            });
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/array-reduce": 42
          }
        ],
        233: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var $reduce = _dereq_2("../internals/array-reduce").left;
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            exportTypedArrayMethod("reduce", function reduce(callbackfn) {
              return $reduce(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
            });
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/array-reduce": 42
          }
        ],
        234: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            var floor = Math.floor;
            exportTypedArrayMethod("reverse", function reverse() {
              var that = this;
              var length = aTypedArray(that).length;
              var middle = floor(length / 2);
              var index = 0;
              var value;
              while (index < middle) {
                value = that[index];
                that[index++] = that[--length];
                that[length] = value;
              }
              return that;
            });
          },
          {
            "../internals/array-buffer-view-core": 30
          }
        ],
        235: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var toLength = _dereq_2("../internals/to-length");
            var toOffset = _dereq_2("../internals/to-offset");
            var toObject = _dereq_2("../internals/to-object");
            var fails = _dereq_2("../internals/fails");
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            var FORCED = fails(function() {
              new Int8Array(1).set({});
            });
            exportTypedArrayMethod("set", function set(arrayLike) {
              aTypedArray(this);
              var offset = toOffset(arguments.length > 1 ? arguments[1] : void 0, 1);
              var length = this.length;
              var src = toObject(arrayLike);
              var len = toLength(src.length);
              var index = 0;
              if (len + offset > length)
                throw RangeError("Wrong length");
              while (index < len)
                this[offset + index] = src[index++];
            }, FORCED);
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/fails": 69,
            "../internals/to-length": 152,
            "../internals/to-object": 153,
            "../internals/to-offset": 154
          }
        ],
        236: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var speciesConstructor = _dereq_2("../internals/species-constructor");
            var fails = _dereq_2("../internals/fails");
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            var $slice = [].slice;
            var FORCED = fails(function() {
              new Int8Array(1).slice();
            });
            exportTypedArrayMethod("slice", function slice(start, end) {
              var list = $slice.call(aTypedArray(this), start, end);
              var C = speciesConstructor(this, this.constructor);
              var index = 0;
              var length = list.length;
              var result = new (aTypedArrayConstructor(C))(length);
              while (length > index)
                result[index] = list[index++];
              return result;
            }, FORCED);
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/fails": 69,
            "../internals/species-constructor": 139
          }
        ],
        237: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var $some = _dereq_2("../internals/array-iteration").some;
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            exportTypedArrayMethod("some", function some(callbackfn) {
              return $some(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : void 0);
            });
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/array-iteration": 37
          }
        ],
        238: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            var $sort = [].sort;
            exportTypedArrayMethod("sort", function sort(comparefn) {
              return $sort.call(aTypedArray(this), comparefn);
            });
          },
          {
            "../internals/array-buffer-view-core": 30
          }
        ],
        239: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var toLength = _dereq_2("../internals/to-length");
            var toAbsoluteIndex = _dereq_2("../internals/to-absolute-index");
            var speciesConstructor = _dereq_2("../internals/species-constructor");
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            exportTypedArrayMethod("subarray", function subarray(begin, end) {
              var O = aTypedArray(this);
              var length = O.length;
              var beginIndex = toAbsoluteIndex(begin, length);
              return new (speciesConstructor(O, O.constructor))(O.buffer, O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT, toLength((end === void 0 ? length : toAbsoluteIndex(end, length)) - beginIndex));
            });
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/species-constructor": 139,
            "../internals/to-absolute-index": 148,
            "../internals/to-length": 152
          }
        ],
        240: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var global2 = _dereq_2("../internals/global");
            var ArrayBufferViewCore = _dereq_2("../internals/array-buffer-view-core");
            var fails = _dereq_2("../internals/fails");
            var Int8Array2 = global2.Int8Array;
            var aTypedArray = ArrayBufferViewCore.aTypedArray;
            var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
            var $toLocaleString = [].toLocaleString;
            var $slice = [].slice;
            var TO_LOCALE_STRING_BUG = !!Int8Array2 && fails(function() {
              $toLocaleString.call(new Int8Array2(1));
            });
            var FORCED = fails(function() {
              return [
                1,
                2
              ].toLocaleString() != new Int8Array2([
                1,
                2
              ]).toLocaleString();
            }) || !fails(function() {
              Int8Array2.prototype.toLocaleString.call([
                1,
                2
              ]);
            });
            exportTypedArrayMethod("toLocaleString", function toLocaleString() {
              return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice.call(aTypedArray(this)) : aTypedArray(this), arguments);
            }, FORCED);
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/fails": 69,
            "../internals/global": 77
          }
        ],
        241: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var exportTypedArrayMethod = _dereq_2("../internals/array-buffer-view-core").exportTypedArrayMethod;
            var fails = _dereq_2("../internals/fails");
            var global2 = _dereq_2("../internals/global");
            var Uint8Array2 = global2.Uint8Array;
            var Uint8ArrayPrototype = Uint8Array2 && Uint8Array2.prototype || {};
            var arrayToString = [].toString;
            var arrayJoin = [].join;
            if (fails(function() {
              arrayToString.call({});
            })) {
              arrayToString = function toString() {
                return arrayJoin.call(this);
              };
            }
            var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;
            exportTypedArrayMethod("toString", arrayToString, IS_NOT_ARRAY_METHOD);
          },
          {
            "../internals/array-buffer-view-core": 30,
            "../internals/fails": 69,
            "../internals/global": 77
          }
        ],
        242: [
          function(_dereq_2, module2, exports2) {
            var createTypedArrayConstructor = _dereq_2("../internals/typed-array-constructor");
            createTypedArrayConstructor("Uint16", function(init) {
              return function Uint16Array2(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
              };
            });
          },
          {
            "../internals/typed-array-constructor": 158
          }
        ],
        243: [
          function(_dereq_2, module2, exports2) {
            var createTypedArrayConstructor = _dereq_2("../internals/typed-array-constructor");
            createTypedArrayConstructor("Uint32", function(init) {
              return function Uint32Array2(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
              };
            });
          },
          {
            "../internals/typed-array-constructor": 158
          }
        ],
        244: [
          function(_dereq_2, module2, exports2) {
            var createTypedArrayConstructor = _dereq_2("../internals/typed-array-constructor");
            createTypedArrayConstructor("Uint8", function(init) {
              return function Uint8Array2(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
              };
            });
          },
          {
            "../internals/typed-array-constructor": 158
          }
        ],
        245: [
          function(_dereq_2, module2, exports2) {
            var createTypedArrayConstructor = _dereq_2("../internals/typed-array-constructor");
            createTypedArrayConstructor("Uint8", function(init) {
              return function Uint8ClampedArray2(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
              };
            }, true);
          },
          {
            "../internals/typed-array-constructor": 158
          }
        ],
        246: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var global2 = _dereq_2("../internals/global");
            var redefineAll = _dereq_2("../internals/redefine-all");
            var InternalMetadataModule = _dereq_2("../internals/internal-metadata");
            var collection = _dereq_2("../internals/collection");
            var collectionWeak = _dereq_2("../internals/collection-weak");
            var isObject = _dereq_2("../internals/is-object");
            var enforceIternalState = _dereq_2("../internals/internal-state").enforce;
            var NATIVE_WEAK_MAP = _dereq_2("../internals/native-weak-map");
            var IS_IE11 = !global2.ActiveXObject && "ActiveXObject" in global2;
            var isExtensible = Object.isExtensible;
            var InternalWeakMap;
            var wrapper = function(init) {
              return function WeakMap2() {
                return init(this, arguments.length ? arguments[0] : void 0);
              };
            };
            var $WeakMap = module2.exports = collection("WeakMap", wrapper, collectionWeak);
            if (NATIVE_WEAK_MAP && IS_IE11) {
              InternalWeakMap = collectionWeak.getConstructor(wrapper, "WeakMap", true);
              InternalMetadataModule.REQUIRED = true;
              var WeakMapPrototype = $WeakMap.prototype;
              var nativeDelete = WeakMapPrototype["delete"];
              var nativeHas = WeakMapPrototype.has;
              var nativeGet = WeakMapPrototype.get;
              var nativeSet = WeakMapPrototype.set;
              redefineAll(WeakMapPrototype, {
                "delete": function(key2) {
                  if (isObject(key2) && !isExtensible(key2)) {
                    var state = enforceIternalState(this);
                    if (!state.frozen)
                      state.frozen = new InternalWeakMap();
                    return nativeDelete.call(this, key2) || state.frozen["delete"](key2);
                  }
                  return nativeDelete.call(this, key2);
                },
                has: function has(key2) {
                  if (isObject(key2) && !isExtensible(key2)) {
                    var state = enforceIternalState(this);
                    if (!state.frozen)
                      state.frozen = new InternalWeakMap();
                    return nativeHas.call(this, key2) || state.frozen.has(key2);
                  }
                  return nativeHas.call(this, key2);
                },
                get: function get(key2) {
                  if (isObject(key2) && !isExtensible(key2)) {
                    var state = enforceIternalState(this);
                    if (!state.frozen)
                      state.frozen = new InternalWeakMap();
                    return nativeHas.call(this, key2) ? nativeGet.call(this, key2) : state.frozen.get(key2);
                  }
                  return nativeGet.call(this, key2);
                },
                set: function set(key2, value) {
                  if (isObject(key2) && !isExtensible(key2)) {
                    var state = enforceIternalState(this);
                    if (!state.frozen)
                      state.frozen = new InternalWeakMap();
                    nativeHas.call(this, key2) ? nativeSet.call(this, key2, value) : state.frozen.set(key2, value);
                  } else
                    nativeSet.call(this, key2, value);
                  return this;
                }
              });
            }
          },
          {
            "../internals/collection": 50,
            "../internals/collection-weak": 49,
            "../internals/global": 77,
            "../internals/internal-metadata": 87,
            "../internals/internal-state": 88,
            "../internals/is-object": 92,
            "../internals/native-weak-map": 103,
            "../internals/redefine-all": 125
          }
        ],
        247: [
          function(_dereq_2, module2, exports2) {
            var global2 = _dereq_2("../internals/global");
            var DOMIterables = _dereq_2("../internals/dom-iterables");
            var forEach = _dereq_2("../internals/array-for-each");
            var createNonEnumerableProperty = _dereq_2("../internals/create-non-enumerable-property");
            for (var COLLECTION_NAME in DOMIterables) {
              var Collection = global2[COLLECTION_NAME];
              var CollectionPrototype = Collection && Collection.prototype;
              if (CollectionPrototype && CollectionPrototype.forEach !== forEach)
                try {
                  createNonEnumerableProperty(CollectionPrototype, "forEach", forEach);
                } catch (error) {
                  CollectionPrototype.forEach = forEach;
                }
            }
          },
          {
            "../internals/array-for-each": 34,
            "../internals/create-non-enumerable-property": 56,
            "../internals/dom-iterables": 63,
            "../internals/global": 77
          }
        ],
        248: [
          function(_dereq_2, module2, exports2) {
            var global2 = _dereq_2("../internals/global");
            var DOMIterables = _dereq_2("../internals/dom-iterables");
            var ArrayIteratorMethods = _dereq_2("../modules/es.array.iterator");
            var createNonEnumerableProperty = _dereq_2("../internals/create-non-enumerable-property");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var ITERATOR = wellKnownSymbol("iterator");
            var TO_STRING_TAG = wellKnownSymbol("toStringTag");
            var ArrayValues = ArrayIteratorMethods.values;
            for (var COLLECTION_NAME in DOMIterables) {
              var Collection = global2[COLLECTION_NAME];
              var CollectionPrototype = Collection && Collection.prototype;
              if (CollectionPrototype) {
                if (CollectionPrototype[ITERATOR] !== ArrayValues)
                  try {
                    createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
                  } catch (error) {
                    CollectionPrototype[ITERATOR] = ArrayValues;
                  }
                if (!CollectionPrototype[TO_STRING_TAG]) {
                  createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
                }
                if (DOMIterables[COLLECTION_NAME])
                  for (var METHOD_NAME in ArrayIteratorMethods) {
                    if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME])
                      try {
                        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
                      } catch (error) {
                        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
                      }
                  }
              }
            }
          },
          {
            "../internals/create-non-enumerable-property": 56,
            "../internals/dom-iterables": 63,
            "../internals/global": 77,
            "../internals/well-known-symbol": 164,
            "../modules/es.array.iterator": 176
          }
        ],
        249: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("../modules/es.array.iterator");
            var $ = _dereq_2("../internals/export");
            var getBuiltIn = _dereq_2("../internals/get-built-in");
            var USE_NATIVE_URL = _dereq_2("../internals/native-url");
            var redefine = _dereq_2("../internals/redefine");
            var redefineAll = _dereq_2("../internals/redefine-all");
            var setToStringTag = _dereq_2("../internals/set-to-string-tag");
            var createIteratorConstructor = _dereq_2("../internals/create-iterator-constructor");
            var InternalStateModule = _dereq_2("../internals/internal-state");
            var anInstance = _dereq_2("../internals/an-instance");
            var hasOwn = _dereq_2("../internals/has");
            var bind = _dereq_2("../internals/function-bind-context");
            var classof = _dereq_2("../internals/classof");
            var anObject = _dereq_2("../internals/an-object");
            var isObject = _dereq_2("../internals/is-object");
            var create = _dereq_2("../internals/object-create");
            var createPropertyDescriptor = _dereq_2("../internals/create-property-descriptor");
            var getIterator = _dereq_2("../internals/get-iterator");
            var getIteratorMethod = _dereq_2("../internals/get-iterator-method");
            var wellKnownSymbol = _dereq_2("../internals/well-known-symbol");
            var $fetch = getBuiltIn("fetch");
            var Headers2 = getBuiltIn("Headers");
            var ITERATOR = wellKnownSymbol("iterator");
            var URL_SEARCH_PARAMS = "URLSearchParams";
            var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + "Iterator";
            var setInternalState = InternalStateModule.set;
            var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
            var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);
            var plus = /\+/g;
            var sequences = Array(4);
            var percentSequence = function(bytes) {
              return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp("((?:%[\\da-f]{2}){" + bytes + "})", "gi"));
            };
            var percentDecode = function(sequence) {
              try {
                return decodeURIComponent(sequence);
              } catch (error) {
                return sequence;
              }
            };
            var deserialize = function(it) {
              var result = it.replace(plus, " ");
              var bytes = 4;
              try {
                return decodeURIComponent(result);
              } catch (error) {
                while (bytes) {
                  result = result.replace(percentSequence(bytes--), percentDecode);
                }
                return result;
              }
            };
            var find = /[!'()~]|%20/g;
            var replace = {
              "!": "%21",
              "'": "%27",
              "(": "%28",
              ")": "%29",
              "~": "%7E",
              "%20": "+"
            };
            var replacer = function(match) {
              return replace[match];
            };
            var serialize = function(it) {
              return encodeURIComponent(it).replace(find, replacer);
            };
            var parseSearchParams = function(result, query) {
              if (query) {
                var attributes = query.split("&");
                var index = 0;
                var attribute, entry;
                while (index < attributes.length) {
                  attribute = attributes[index++];
                  if (attribute.length) {
                    entry = attribute.split("=");
                    result.push({
                      key: deserialize(entry.shift()),
                      value: deserialize(entry.join("="))
                    });
                  }
                }
              }
            };
            var updateSearchParams = function(query) {
              this.entries.length = 0;
              parseSearchParams(this.entries, query);
            };
            var validateArgumentsLength = function(passed, required) {
              if (passed < required)
                throw TypeError("Not enough arguments");
            };
            var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
              setInternalState(this, {
                type: URL_SEARCH_PARAMS_ITERATOR,
                iterator: getIterator(getInternalParamsState(params).entries),
                kind
              });
            }, "Iterator", function next() {
              var state = getInternalIteratorState(this);
              var kind = state.kind;
              var step = state.iterator.next();
              var entry = step.value;
              if (!step.done) {
                step.value = kind === "keys" ? entry.key : kind === "values" ? entry.value : [
                  entry.key,
                  entry.value
                ];
              }
              return step;
            });
            var URLSearchParamsConstructor = function URLSearchParams2() {
              anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
              var init = arguments.length > 0 ? arguments[0] : void 0;
              var that = this;
              var entries = [];
              var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key2;
              setInternalState(that, {
                type: URL_SEARCH_PARAMS,
                entries,
                updateURL: function() {
                },
                updateSearchParams
              });
              if (init !== void 0) {
                if (isObject(init)) {
                  iteratorMethod = getIteratorMethod(init);
                  if (typeof iteratorMethod === "function") {
                    iterator = iteratorMethod.call(init);
                    next = iterator.next;
                    while (!(step = next.call(iterator)).done) {
                      entryIterator = getIterator(anObject(step.value));
                      entryNext = entryIterator.next;
                      if ((first = entryNext.call(entryIterator)).done || (second = entryNext.call(entryIterator)).done || !entryNext.call(entryIterator).done)
                        throw TypeError("Expected sequence with length 2");
                      entries.push({
                        key: first.value + "",
                        value: second.value + ""
                      });
                    }
                  } else
                    for (key2 in init)
                      if (hasOwn(init, key2))
                        entries.push({
                          key: key2,
                          value: init[key2] + ""
                        });
                } else {
                  parseSearchParams(entries, typeof init === "string" ? init.charAt(0) === "?" ? init.slice(1) : init : init + "");
                }
              }
            };
            var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;
            redefineAll(URLSearchParamsPrototype, {
              // `URLSearchParams.prototype.appent` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-append
              append: function append(name, value) {
                validateArgumentsLength(arguments.length, 2);
                var state = getInternalParamsState(this);
                state.entries.push({
                  key: name + "",
                  value: value + ""
                });
                state.updateURL();
              },
              // `URLSearchParams.prototype.delete` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
              "delete": function(name) {
                validateArgumentsLength(arguments.length, 1);
                var state = getInternalParamsState(this);
                var entries = state.entries;
                var key2 = name + "";
                var index = 0;
                while (index < entries.length) {
                  if (entries[index].key === key2)
                    entries.splice(index, 1);
                  else
                    index++;
                }
                state.updateURL();
              },
              // `URLSearchParams.prototype.get` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-get
              get: function get(name) {
                validateArgumentsLength(arguments.length, 1);
                var entries = getInternalParamsState(this).entries;
                var key2 = name + "";
                var index = 0;
                for (; index < entries.length; index++) {
                  if (entries[index].key === key2)
                    return entries[index].value;
                }
                return null;
              },
              // `URLSearchParams.prototype.getAll` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
              getAll: function getAll(name) {
                validateArgumentsLength(arguments.length, 1);
                var entries = getInternalParamsState(this).entries;
                var key2 = name + "";
                var result = [];
                var index = 0;
                for (; index < entries.length; index++) {
                  if (entries[index].key === key2)
                    result.push(entries[index].value);
                }
                return result;
              },
              // `URLSearchParams.prototype.has` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-has
              has: function has(name) {
                validateArgumentsLength(arguments.length, 1);
                var entries = getInternalParamsState(this).entries;
                var key2 = name + "";
                var index = 0;
                while (index < entries.length) {
                  if (entries[index++].key === key2)
                    return true;
                }
                return false;
              },
              // `URLSearchParams.prototype.set` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-set
              set: function set(name, value) {
                validateArgumentsLength(arguments.length, 1);
                var state = getInternalParamsState(this);
                var entries = state.entries;
                var found = false;
                var key2 = name + "";
                var val = value + "";
                var index = 0;
                var entry;
                for (; index < entries.length; index++) {
                  entry = entries[index];
                  if (entry.key === key2) {
                    if (found)
                      entries.splice(index--, 1);
                    else {
                      found = true;
                      entry.value = val;
                    }
                  }
                }
                if (!found)
                  entries.push({
                    key: key2,
                    value: val
                  });
                state.updateURL();
              },
              // `URLSearchParams.prototype.sort` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
              sort: function sort() {
                var state = getInternalParamsState(this);
                var entries = state.entries;
                var slice = entries.slice();
                var entry, entriesIndex, sliceIndex;
                entries.length = 0;
                for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
                  entry = slice[sliceIndex];
                  for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {
                    if (entries[entriesIndex].key > entry.key) {
                      entries.splice(entriesIndex, 0, entry);
                      break;
                    }
                  }
                  if (entriesIndex === sliceIndex)
                    entries.push(entry);
                }
                state.updateURL();
              },
              // `URLSearchParams.prototype.forEach` method
              forEach: function forEach(callback) {
                var entries = getInternalParamsState(this).entries;
                var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : void 0, 3);
                var index = 0;
                var entry;
                while (index < entries.length) {
                  entry = entries[index++];
                  boundFunction(entry.value, entry.key, this);
                }
              },
              // `URLSearchParams.prototype.keys` method
              keys: function keys() {
                return new URLSearchParamsIterator(this, "keys");
              },
              // `URLSearchParams.prototype.values` method
              values: function values() {
                return new URLSearchParamsIterator(this, "values");
              },
              // `URLSearchParams.prototype.entries` method
              entries: function entries() {
                return new URLSearchParamsIterator(this, "entries");
              }
            }, {
              enumerable: true
            });
            redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries);
            redefine(URLSearchParamsPrototype, "toString", function toString() {
              var entries = getInternalParamsState(this).entries;
              var result = [];
              var index = 0;
              var entry;
              while (index < entries.length) {
                entry = entries[index++];
                result.push(serialize(entry.key) + "=" + serialize(entry.value));
              }
              return result.join("&");
            }, {
              enumerable: true
            });
            setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);
            $({
              global: true,
              forced: !USE_NATIVE_URL
            }, {
              URLSearchParams: URLSearchParamsConstructor
            });
            if (!USE_NATIVE_URL && typeof $fetch == "function" && typeof Headers2 == "function") {
              $({
                global: true,
                enumerable: true,
                forced: true
              }, {
                fetch: function fetch2(input) {
                  var args = [
                    input
                  ];
                  var init, body, headers;
                  if (arguments.length > 1) {
                    init = arguments[1];
                    if (isObject(init)) {
                      body = init.body;
                      if (classof(body) === URL_SEARCH_PARAMS) {
                        headers = init.headers ? new Headers2(init.headers) : new Headers2();
                        if (!headers.has("content-type")) {
                          headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
                        }
                        init = create(init, {
                          body: createPropertyDescriptor(0, String(body)),
                          headers: createPropertyDescriptor(0, headers)
                        });
                      }
                    }
                    args.push(init);
                  }
                  return $fetch.apply(this, args);
                }
              });
            }
            module2.exports = {
              URLSearchParams: URLSearchParamsConstructor,
              getState: getInternalParamsState
            };
          },
          {
            "../internals/an-instance": 27,
            "../internals/an-object": 28,
            "../internals/classof": 47,
            "../internals/create-iterator-constructor": 55,
            "../internals/create-property-descriptor": 57,
            "../internals/export": 68,
            "../internals/function-bind-context": 72,
            "../internals/get-built-in": 74,
            "../internals/get-iterator": 76,
            "../internals/get-iterator-method": 75,
            "../internals/has": 78,
            "../internals/internal-state": 88,
            "../internals/is-object": 92,
            "../internals/native-url": 102,
            "../internals/object-create": 108,
            "../internals/redefine": 126,
            "../internals/redefine-all": 125,
            "../internals/set-to-string-tag": 135,
            "../internals/well-known-symbol": 164,
            "../modules/es.array.iterator": 176
          }
        ],
        250: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("../modules/es.string.iterator");
            var $ = _dereq_2("../internals/export");
            var DESCRIPTORS = _dereq_2("../internals/descriptors");
            var USE_NATIVE_URL = _dereq_2("../internals/native-url");
            var global2 = _dereq_2("../internals/global");
            var defineProperties = _dereq_2("../internals/object-define-properties");
            var redefine = _dereq_2("../internals/redefine");
            var anInstance = _dereq_2("../internals/an-instance");
            var has = _dereq_2("../internals/has");
            var assign = _dereq_2("../internals/object-assign");
            var arrayFrom = _dereq_2("../internals/array-from");
            var codeAt = _dereq_2("../internals/string-multibyte").codeAt;
            var toASCII = _dereq_2("../internals/string-punycode-to-ascii");
            var setToStringTag = _dereq_2("../internals/set-to-string-tag");
            var URLSearchParamsModule = _dereq_2("../modules/web.url-search-params");
            var InternalStateModule = _dereq_2("../internals/internal-state");
            var NativeURL = global2.URL;
            var URLSearchParams2 = URLSearchParamsModule.URLSearchParams;
            var getInternalSearchParamsState = URLSearchParamsModule.getState;
            var setInternalState = InternalStateModule.set;
            var getInternalURLState = InternalStateModule.getterFor("URL");
            var floor = Math.floor;
            var pow = Math.pow;
            var INVALID_AUTHORITY = "Invalid authority";
            var INVALID_SCHEME = "Invalid scheme";
            var INVALID_HOST = "Invalid host";
            var INVALID_PORT = "Invalid port";
            var ALPHA = /[A-Za-z]/;
            var ALPHANUMERIC = /[\d+-.A-Za-z]/;
            var DIGIT = /\d/;
            var HEX_START = /^(0x|0X)/;
            var OCT = /^[0-7]+$/;
            var DEC = /^\d+$/;
            var HEX = /^[\dA-Fa-f]+$/;
            var FORBIDDEN_HOST_CODE_POINT = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/;
            var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/;
            var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g;
            var TAB_AND_NEW_LINE = /[\u0009\u000A\u000D]/g;
            var EOF;
            var parseHost = function(url2, input) {
              var result, codePoints, index;
              if (input.charAt(0) == "[") {
                if (input.charAt(input.length - 1) != "]")
                  return INVALID_HOST;
                result = parseIPv6(input.slice(1, -1));
                if (!result)
                  return INVALID_HOST;
                url2.host = result;
              } else if (!isSpecial(url2)) {
                if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input))
                  return INVALID_HOST;
                result = "";
                codePoints = arrayFrom(input);
                for (index = 0; index < codePoints.length; index++) {
                  result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
                }
                url2.host = result;
              } else {
                input = toASCII(input);
                if (FORBIDDEN_HOST_CODE_POINT.test(input))
                  return INVALID_HOST;
                result = parseIPv4(input);
                if (result === null)
                  return INVALID_HOST;
                url2.host = result;
              }
            };
            var parseIPv4 = function(input) {
              var parts = input.split(".");
              var partsLength, numbers, index, part, radix, number, ipv4;
              if (parts.length && parts[parts.length - 1] == "") {
                parts.pop();
              }
              partsLength = parts.length;
              if (partsLength > 4)
                return input;
              numbers = [];
              for (index = 0; index < partsLength; index++) {
                part = parts[index];
                if (part == "")
                  return input;
                radix = 10;
                if (part.length > 1 && part.charAt(0) == "0") {
                  radix = HEX_START.test(part) ? 16 : 8;
                  part = part.slice(radix == 8 ? 1 : 2);
                }
                if (part === "") {
                  number = 0;
                } else {
                  if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part))
                    return input;
                  number = parseInt(part, radix);
                }
                numbers.push(number);
              }
              for (index = 0; index < partsLength; index++) {
                number = numbers[index];
                if (index == partsLength - 1) {
                  if (number >= pow(256, 5 - partsLength))
                    return null;
                } else if (number > 255)
                  return null;
              }
              ipv4 = numbers.pop();
              for (index = 0; index < numbers.length; index++) {
                ipv4 += numbers[index] * pow(256, 3 - index);
              }
              return ipv4;
            };
            var parseIPv6 = function(input) {
              var address = [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ];
              var pieceIndex = 0;
              var compress = null;
              var pointer = 0;
              var value, length, numbersSeen, ipv4Piece, number, swaps, swap;
              var char = function() {
                return input.charAt(pointer);
              };
              if (char() == ":") {
                if (input.charAt(1) != ":")
                  return;
                pointer += 2;
                pieceIndex++;
                compress = pieceIndex;
              }
              while (char()) {
                if (pieceIndex == 8)
                  return;
                if (char() == ":") {
                  if (compress !== null)
                    return;
                  pointer++;
                  pieceIndex++;
                  compress = pieceIndex;
                  continue;
                }
                value = length = 0;
                while (length < 4 && HEX.test(char())) {
                  value = value * 16 + parseInt(char(), 16);
                  pointer++;
                  length++;
                }
                if (char() == ".") {
                  if (length == 0)
                    return;
                  pointer -= length;
                  if (pieceIndex > 6)
                    return;
                  numbersSeen = 0;
                  while (char()) {
                    ipv4Piece = null;
                    if (numbersSeen > 0) {
                      if (char() == "." && numbersSeen < 4)
                        pointer++;
                      else
                        return;
                    }
                    if (!DIGIT.test(char()))
                      return;
                    while (DIGIT.test(char())) {
                      number = parseInt(char(), 10);
                      if (ipv4Piece === null)
                        ipv4Piece = number;
                      else if (ipv4Piece == 0)
                        return;
                      else
                        ipv4Piece = ipv4Piece * 10 + number;
                      if (ipv4Piece > 255)
                        return;
                      pointer++;
                    }
                    address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
                    numbersSeen++;
                    if (numbersSeen == 2 || numbersSeen == 4)
                      pieceIndex++;
                  }
                  if (numbersSeen != 4)
                    return;
                  break;
                } else if (char() == ":") {
                  pointer++;
                  if (!char())
                    return;
                } else if (char())
                  return;
                address[pieceIndex++] = value;
              }
              if (compress !== null) {
                swaps = pieceIndex - compress;
                pieceIndex = 7;
                while (pieceIndex != 0 && swaps > 0) {
                  swap = address[pieceIndex];
                  address[pieceIndex--] = address[compress + swaps - 1];
                  address[compress + --swaps] = swap;
                }
              } else if (pieceIndex != 8)
                return;
              return address;
            };
            var findLongestZeroSequence = function(ipv6) {
              var maxIndex = null;
              var maxLength = 1;
              var currStart = null;
              var currLength = 0;
              var index = 0;
              for (; index < 8; index++) {
                if (ipv6[index] !== 0) {
                  if (currLength > maxLength) {
                    maxIndex = currStart;
                    maxLength = currLength;
                  }
                  currStart = null;
                  currLength = 0;
                } else {
                  if (currStart === null)
                    currStart = index;
                  ++currLength;
                }
              }
              if (currLength > maxLength) {
                maxIndex = currStart;
                maxLength = currLength;
              }
              return maxIndex;
            };
            var serializeHost = function(host) {
              var result, index, compress, ignore0;
              if (typeof host == "number") {
                result = [];
                for (index = 0; index < 4; index++) {
                  result.unshift(host % 256);
                  host = floor(host / 256);
                }
                return result.join(".");
              } else if (typeof host == "object") {
                result = "";
                compress = findLongestZeroSequence(host);
                for (index = 0; index < 8; index++) {
                  if (ignore0 && host[index] === 0)
                    continue;
                  if (ignore0)
                    ignore0 = false;
                  if (compress === index) {
                    result += index ? ":" : "::";
                    ignore0 = true;
                  } else {
                    result += host[index].toString(16);
                    if (index < 7)
                      result += ":";
                  }
                }
                return "[" + result + "]";
              }
              return host;
            };
            var C0ControlPercentEncodeSet = {};
            var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
              " ": 1,
              '"': 1,
              "<": 1,
              ">": 1,
              "`": 1
            });
            var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
              "#": 1,
              "?": 1,
              "{": 1,
              "}": 1
            });
            var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
              "/": 1,
              ":": 1,
              ";": 1,
              "=": 1,
              "@": 1,
              "[": 1,
              "\\": 1,
              "]": 1,
              "^": 1,
              "|": 1
            });
            var percentEncode = function(char, set) {
              var code = codeAt(char, 0);
              return code > 32 && code < 127 && !has(set, char) ? char : encodeURIComponent(char);
            };
            var specialSchemes = {
              ftp: 21,
              file: null,
              http: 80,
              https: 443,
              ws: 80,
              wss: 443
            };
            var isSpecial = function(url2) {
              return has(specialSchemes, url2.scheme);
            };
            var includesCredentials = function(url2) {
              return url2.username != "" || url2.password != "";
            };
            var cannotHaveUsernamePasswordPort = function(url2) {
              return !url2.host || url2.cannotBeABaseURL || url2.scheme == "file";
            };
            var isWindowsDriveLetter = function(string, normalized) {
              var second;
              return string.length == 2 && ALPHA.test(string.charAt(0)) && ((second = string.charAt(1)) == ":" || !normalized && second == "|");
            };
            var startsWithWindowsDriveLetter = function(string) {
              var third;
              return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (string.length == 2 || (third = string.charAt(2)) === "/" || third === "\\" || third === "?" || third === "#");
            };
            var shortenURLsPath = function(url2) {
              var path = url2.path;
              var pathSize = path.length;
              if (pathSize && (url2.scheme != "file" || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
                path.pop();
              }
            };
            var isSingleDot = function(segment) {
              return segment === "." || segment.toLowerCase() === "%2e";
            };
            var isDoubleDot = function(segment) {
              segment = segment.toLowerCase();
              return segment === ".." || segment === "%2e." || segment === ".%2e" || segment === "%2e%2e";
            };
            var SCHEME_START = {};
            var SCHEME = {};
            var NO_SCHEME = {};
            var SPECIAL_RELATIVE_OR_AUTHORITY = {};
            var PATH_OR_AUTHORITY = {};
            var RELATIVE = {};
            var RELATIVE_SLASH = {};
            var SPECIAL_AUTHORITY_SLASHES = {};
            var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
            var AUTHORITY = {};
            var HOST = {};
            var HOSTNAME = {};
            var PORT = {};
            var FILE = {};
            var FILE_SLASH = {};
            var FILE_HOST = {};
            var PATH_START = {};
            var PATH = {};
            var CANNOT_BE_A_BASE_URL_PATH = {};
            var QUERY = {};
            var FRAGMENT = {};
            var parseURL = function(url2, input, stateOverride, base) {
              var state = stateOverride || SCHEME_START;
              var pointer = 0;
              var buffer = "";
              var seenAt = false;
              var seenBracket = false;
              var seenPasswordToken = false;
              var codePoints, char, bufferCodePoints, failure;
              if (!stateOverride) {
                url2.scheme = "";
                url2.username = "";
                url2.password = "";
                url2.host = null;
                url2.port = null;
                url2.path = [];
                url2.query = null;
                url2.fragment = null;
                url2.cannotBeABaseURL = false;
                input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, "");
              }
              input = input.replace(TAB_AND_NEW_LINE, "");
              codePoints = arrayFrom(input);
              while (pointer <= codePoints.length) {
                char = codePoints[pointer];
                switch (state) {
                  case SCHEME_START:
                    if (char && ALPHA.test(char)) {
                      buffer += char.toLowerCase();
                      state = SCHEME;
                    } else if (!stateOverride) {
                      state = NO_SCHEME;
                      continue;
                    } else
                      return INVALID_SCHEME;
                    break;
                  case SCHEME:
                    if (char && (ALPHANUMERIC.test(char) || char == "+" || char == "-" || char == ".")) {
                      buffer += char.toLowerCase();
                    } else if (char == ":") {
                      if (stateOverride && (isSpecial(url2) != has(specialSchemes, buffer) || buffer == "file" && (includesCredentials(url2) || url2.port !== null) || url2.scheme == "file" && !url2.host))
                        return;
                      url2.scheme = buffer;
                      if (stateOverride) {
                        if (isSpecial(url2) && specialSchemes[url2.scheme] == url2.port)
                          url2.port = null;
                        return;
                      }
                      buffer = "";
                      if (url2.scheme == "file") {
                        state = FILE;
                      } else if (isSpecial(url2) && base && base.scheme == url2.scheme) {
                        state = SPECIAL_RELATIVE_OR_AUTHORITY;
                      } else if (isSpecial(url2)) {
                        state = SPECIAL_AUTHORITY_SLASHES;
                      } else if (codePoints[pointer + 1] == "/") {
                        state = PATH_OR_AUTHORITY;
                        pointer++;
                      } else {
                        url2.cannotBeABaseURL = true;
                        url2.path.push("");
                        state = CANNOT_BE_A_BASE_URL_PATH;
                      }
                    } else if (!stateOverride) {
                      buffer = "";
                      state = NO_SCHEME;
                      pointer = 0;
                      continue;
                    } else
                      return INVALID_SCHEME;
                    break;
                  case NO_SCHEME:
                    if (!base || base.cannotBeABaseURL && char != "#")
                      return INVALID_SCHEME;
                    if (base.cannotBeABaseURL && char == "#") {
                      url2.scheme = base.scheme;
                      url2.path = base.path.slice();
                      url2.query = base.query;
                      url2.fragment = "";
                      url2.cannotBeABaseURL = true;
                      state = FRAGMENT;
                      break;
                    }
                    state = base.scheme == "file" ? FILE : RELATIVE;
                    continue;
                  case SPECIAL_RELATIVE_OR_AUTHORITY:
                    if (char == "/" && codePoints[pointer + 1] == "/") {
                      state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                      pointer++;
                    } else {
                      state = RELATIVE;
                      continue;
                    }
                    break;
                  case PATH_OR_AUTHORITY:
                    if (char == "/") {
                      state = AUTHORITY;
                      break;
                    } else {
                      state = PATH;
                      continue;
                    }
                  case RELATIVE:
                    url2.scheme = base.scheme;
                    if (char == EOF) {
                      url2.username = base.username;
                      url2.password = base.password;
                      url2.host = base.host;
                      url2.port = base.port;
                      url2.path = base.path.slice();
                      url2.query = base.query;
                    } else if (char == "/" || char == "\\" && isSpecial(url2)) {
                      state = RELATIVE_SLASH;
                    } else if (char == "?") {
                      url2.username = base.username;
                      url2.password = base.password;
                      url2.host = base.host;
                      url2.port = base.port;
                      url2.path = base.path.slice();
                      url2.query = "";
                      state = QUERY;
                    } else if (char == "#") {
                      url2.username = base.username;
                      url2.password = base.password;
                      url2.host = base.host;
                      url2.port = base.port;
                      url2.path = base.path.slice();
                      url2.query = base.query;
                      url2.fragment = "";
                      state = FRAGMENT;
                    } else {
                      url2.username = base.username;
                      url2.password = base.password;
                      url2.host = base.host;
                      url2.port = base.port;
                      url2.path = base.path.slice();
                      url2.path.pop();
                      state = PATH;
                      continue;
                    }
                    break;
                  case RELATIVE_SLASH:
                    if (isSpecial(url2) && (char == "/" || char == "\\")) {
                      state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                    } else if (char == "/") {
                      state = AUTHORITY;
                    } else {
                      url2.username = base.username;
                      url2.password = base.password;
                      url2.host = base.host;
                      url2.port = base.port;
                      state = PATH;
                      continue;
                    }
                    break;
                  case SPECIAL_AUTHORITY_SLASHES:
                    state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                    if (char != "/" || buffer.charAt(pointer + 1) != "/")
                      continue;
                    pointer++;
                    break;
                  case SPECIAL_AUTHORITY_IGNORE_SLASHES:
                    if (char != "/" && char != "\\") {
                      state = AUTHORITY;
                      continue;
                    }
                    break;
                  case AUTHORITY:
                    if (char == "@") {
                      if (seenAt)
                        buffer = "%40" + buffer;
                      seenAt = true;
                      bufferCodePoints = arrayFrom(buffer);
                      for (var i2 = 0; i2 < bufferCodePoints.length; i2++) {
                        var codePoint = bufferCodePoints[i2];
                        if (codePoint == ":" && !seenPasswordToken) {
                          seenPasswordToken = true;
                          continue;
                        }
                        var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
                        if (seenPasswordToken)
                          url2.password += encodedCodePoints;
                        else
                          url2.username += encodedCodePoints;
                      }
                      buffer = "";
                    } else if (char == EOF || char == "/" || char == "?" || char == "#" || char == "\\" && isSpecial(url2)) {
                      if (seenAt && buffer == "")
                        return INVALID_AUTHORITY;
                      pointer -= arrayFrom(buffer).length + 1;
                      buffer = "";
                      state = HOST;
                    } else
                      buffer += char;
                    break;
                  case HOST:
                  case HOSTNAME:
                    if (stateOverride && url2.scheme == "file") {
                      state = FILE_HOST;
                      continue;
                    } else if (char == ":" && !seenBracket) {
                      if (buffer == "")
                        return INVALID_HOST;
                      failure = parseHost(url2, buffer);
                      if (failure)
                        return failure;
                      buffer = "";
                      state = PORT;
                      if (stateOverride == HOSTNAME)
                        return;
                    } else if (char == EOF || char == "/" || char == "?" || char == "#" || char == "\\" && isSpecial(url2)) {
                      if (isSpecial(url2) && buffer == "")
                        return INVALID_HOST;
                      if (stateOverride && buffer == "" && (includesCredentials(url2) || url2.port !== null))
                        return;
                      failure = parseHost(url2, buffer);
                      if (failure)
                        return failure;
                      buffer = "";
                      state = PATH_START;
                      if (stateOverride)
                        return;
                      continue;
                    } else {
                      if (char == "[")
                        seenBracket = true;
                      else if (char == "]")
                        seenBracket = false;
                      buffer += char;
                    }
                    break;
                  case PORT:
                    if (DIGIT.test(char)) {
                      buffer += char;
                    } else if (char == EOF || char == "/" || char == "?" || char == "#" || char == "\\" && isSpecial(url2) || stateOverride) {
                      if (buffer != "") {
                        var port = parseInt(buffer, 10);
                        if (port > 65535)
                          return INVALID_PORT;
                        url2.port = isSpecial(url2) && port === specialSchemes[url2.scheme] ? null : port;
                        buffer = "";
                      }
                      if (stateOverride)
                        return;
                      state = PATH_START;
                      continue;
                    } else
                      return INVALID_PORT;
                    break;
                  case FILE:
                    url2.scheme = "file";
                    if (char == "/" || char == "\\")
                      state = FILE_SLASH;
                    else if (base && base.scheme == "file") {
                      if (char == EOF) {
                        url2.host = base.host;
                        url2.path = base.path.slice();
                        url2.query = base.query;
                      } else if (char == "?") {
                        url2.host = base.host;
                        url2.path = base.path.slice();
                        url2.query = "";
                        state = QUERY;
                      } else if (char == "#") {
                        url2.host = base.host;
                        url2.path = base.path.slice();
                        url2.query = base.query;
                        url2.fragment = "";
                        state = FRAGMENT;
                      } else {
                        if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(""))) {
                          url2.host = base.host;
                          url2.path = base.path.slice();
                          shortenURLsPath(url2);
                        }
                        state = PATH;
                        continue;
                      }
                    } else {
                      state = PATH;
                      continue;
                    }
                    break;
                  case FILE_SLASH:
                    if (char == "/" || char == "\\") {
                      state = FILE_HOST;
                      break;
                    }
                    if (base && base.scheme == "file" && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(""))) {
                      if (isWindowsDriveLetter(base.path[0], true))
                        url2.path.push(base.path[0]);
                      else
                        url2.host = base.host;
                    }
                    state = PATH;
                    continue;
                  case FILE_HOST:
                    if (char == EOF || char == "/" || char == "\\" || char == "?" || char == "#") {
                      if (!stateOverride && isWindowsDriveLetter(buffer)) {
                        state = PATH;
                      } else if (buffer == "") {
                        url2.host = "";
                        if (stateOverride)
                          return;
                        state = PATH_START;
                      } else {
                        failure = parseHost(url2, buffer);
                        if (failure)
                          return failure;
                        if (url2.host == "localhost")
                          url2.host = "";
                        if (stateOverride)
                          return;
                        buffer = "";
                        state = PATH_START;
                      }
                      continue;
                    } else
                      buffer += char;
                    break;
                  case PATH_START:
                    if (isSpecial(url2)) {
                      state = PATH;
                      if (char != "/" && char != "\\")
                        continue;
                    } else if (!stateOverride && char == "?") {
                      url2.query = "";
                      state = QUERY;
                    } else if (!stateOverride && char == "#") {
                      url2.fragment = "";
                      state = FRAGMENT;
                    } else if (char != EOF) {
                      state = PATH;
                      if (char != "/")
                        continue;
                    }
                    break;
                  case PATH:
                    if (char == EOF || char == "/" || char == "\\" && isSpecial(url2) || !stateOverride && (char == "?" || char == "#")) {
                      if (isDoubleDot(buffer)) {
                        shortenURLsPath(url2);
                        if (char != "/" && !(char == "\\" && isSpecial(url2))) {
                          url2.path.push("");
                        }
                      } else if (isSingleDot(buffer)) {
                        if (char != "/" && !(char == "\\" && isSpecial(url2))) {
                          url2.path.push("");
                        }
                      } else {
                        if (url2.scheme == "file" && !url2.path.length && isWindowsDriveLetter(buffer)) {
                          if (url2.host)
                            url2.host = "";
                          buffer = buffer.charAt(0) + ":";
                        }
                        url2.path.push(buffer);
                      }
                      buffer = "";
                      if (url2.scheme == "file" && (char == EOF || char == "?" || char == "#")) {
                        while (url2.path.length > 1 && url2.path[0] === "") {
                          url2.path.shift();
                        }
                      }
                      if (char == "?") {
                        url2.query = "";
                        state = QUERY;
                      } else if (char == "#") {
                        url2.fragment = "";
                        state = FRAGMENT;
                      }
                    } else {
                      buffer += percentEncode(char, pathPercentEncodeSet);
                    }
                    break;
                  case CANNOT_BE_A_BASE_URL_PATH:
                    if (char == "?") {
                      url2.query = "";
                      state = QUERY;
                    } else if (char == "#") {
                      url2.fragment = "";
                      state = FRAGMENT;
                    } else if (char != EOF) {
                      url2.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
                    }
                    break;
                  case QUERY:
                    if (!stateOverride && char == "#") {
                      url2.fragment = "";
                      state = FRAGMENT;
                    } else if (char != EOF) {
                      if (char == "'" && isSpecial(url2))
                        url2.query += "%27";
                      else if (char == "#")
                        url2.query += "%23";
                      else
                        url2.query += percentEncode(char, C0ControlPercentEncodeSet);
                    }
                    break;
                  case FRAGMENT:
                    if (char != EOF)
                      url2.fragment += percentEncode(char, fragmentPercentEncodeSet);
                    break;
                }
                pointer++;
              }
            };
            var URLConstructor = function URL2(url2) {
              var that = anInstance(this, URLConstructor, "URL");
              var base = arguments.length > 1 ? arguments[1] : void 0;
              var urlString = String(url2);
              var state = setInternalState(that, {
                type: "URL"
              });
              var baseState, failure;
              if (base !== void 0) {
                if (base instanceof URLConstructor)
                  baseState = getInternalURLState(base);
                else {
                  failure = parseURL(baseState = {}, String(base));
                  if (failure)
                    throw TypeError(failure);
                }
              }
              failure = parseURL(state, urlString, null, baseState);
              if (failure)
                throw TypeError(failure);
              var searchParams = state.searchParams = new URLSearchParams2();
              var searchParamsState = getInternalSearchParamsState(searchParams);
              searchParamsState.updateSearchParams(state.query);
              searchParamsState.updateURL = function() {
                state.query = String(searchParams) || null;
              };
              if (!DESCRIPTORS) {
                that.href = serializeURL.call(that);
                that.origin = getOrigin.call(that);
                that.protocol = getProtocol.call(that);
                that.username = getUsername.call(that);
                that.password = getPassword.call(that);
                that.host = getHost.call(that);
                that.hostname = getHostname.call(that);
                that.port = getPort.call(that);
                that.pathname = getPathname.call(that);
                that.search = getSearch.call(that);
                that.searchParams = getSearchParams.call(that);
                that.hash = getHash.call(that);
              }
            };
            var URLPrototype = URLConstructor.prototype;
            var serializeURL = function() {
              var url2 = getInternalURLState(this);
              var scheme = url2.scheme;
              var username = url2.username;
              var password = url2.password;
              var host = url2.host;
              var port = url2.port;
              var path = url2.path;
              var query = url2.query;
              var fragment = url2.fragment;
              var output = scheme + ":";
              if (host !== null) {
                output += "//";
                if (includesCredentials(url2)) {
                  output += username + (password ? ":" + password : "") + "@";
                }
                output += serializeHost(host);
                if (port !== null)
                  output += ":" + port;
              } else if (scheme == "file")
                output += "//";
              output += url2.cannotBeABaseURL ? path[0] : path.length ? "/" + path.join("/") : "";
              if (query !== null)
                output += "?" + query;
              if (fragment !== null)
                output += "#" + fragment;
              return output;
            };
            var getOrigin = function() {
              var url2 = getInternalURLState(this);
              var scheme = url2.scheme;
              var port = url2.port;
              if (scheme == "blob")
                try {
                  return new URL(scheme.path[0]).origin;
                } catch (error) {
                  return "null";
                }
              if (scheme == "file" || !isSpecial(url2))
                return "null";
              return scheme + "://" + serializeHost(url2.host) + (port !== null ? ":" + port : "");
            };
            var getProtocol = function() {
              return getInternalURLState(this).scheme + ":";
            };
            var getUsername = function() {
              return getInternalURLState(this).username;
            };
            var getPassword = function() {
              return getInternalURLState(this).password;
            };
            var getHost = function() {
              var url2 = getInternalURLState(this);
              var host = url2.host;
              var port = url2.port;
              return host === null ? "" : port === null ? serializeHost(host) : serializeHost(host) + ":" + port;
            };
            var getHostname = function() {
              var host = getInternalURLState(this).host;
              return host === null ? "" : serializeHost(host);
            };
            var getPort = function() {
              var port = getInternalURLState(this).port;
              return port === null ? "" : String(port);
            };
            var getPathname = function() {
              var url2 = getInternalURLState(this);
              var path = url2.path;
              return url2.cannotBeABaseURL ? path[0] : path.length ? "/" + path.join("/") : "";
            };
            var getSearch = function() {
              var query = getInternalURLState(this).query;
              return query ? "?" + query : "";
            };
            var getSearchParams = function() {
              return getInternalURLState(this).searchParams;
            };
            var getHash = function() {
              var fragment = getInternalURLState(this).fragment;
              return fragment ? "#" + fragment : "";
            };
            var accessorDescriptor = function(getter, setter) {
              return {
                get: getter,
                set: setter,
                configurable: true,
                enumerable: true
              };
            };
            if (DESCRIPTORS) {
              defineProperties(URLPrototype, {
                // `URL.prototype.href` accessors pair
                // https://url.spec.whatwg.org/#dom-url-href
                href: accessorDescriptor(serializeURL, function(href) {
                  var url2 = getInternalURLState(this);
                  var urlString = String(href);
                  var failure = parseURL(url2, urlString);
                  if (failure)
                    throw TypeError(failure);
                  getInternalSearchParamsState(url2.searchParams).updateSearchParams(url2.query);
                }),
                // `URL.prototype.origin` getter
                // https://url.spec.whatwg.org/#dom-url-origin
                origin: accessorDescriptor(getOrigin),
                // `URL.prototype.protocol` accessors pair
                // https://url.spec.whatwg.org/#dom-url-protocol
                protocol: accessorDescriptor(getProtocol, function(protocol) {
                  var url2 = getInternalURLState(this);
                  parseURL(url2, String(protocol) + ":", SCHEME_START);
                }),
                // `URL.prototype.username` accessors pair
                // https://url.spec.whatwg.org/#dom-url-username
                username: accessorDescriptor(getUsername, function(username) {
                  var url2 = getInternalURLState(this);
                  var codePoints = arrayFrom(String(username));
                  if (cannotHaveUsernamePasswordPort(url2))
                    return;
                  url2.username = "";
                  for (var i2 = 0; i2 < codePoints.length; i2++) {
                    url2.username += percentEncode(codePoints[i2], userinfoPercentEncodeSet);
                  }
                }),
                // `URL.prototype.password` accessors pair
                // https://url.spec.whatwg.org/#dom-url-password
                password: accessorDescriptor(getPassword, function(password) {
                  var url2 = getInternalURLState(this);
                  var codePoints = arrayFrom(String(password));
                  if (cannotHaveUsernamePasswordPort(url2))
                    return;
                  url2.password = "";
                  for (var i2 = 0; i2 < codePoints.length; i2++) {
                    url2.password += percentEncode(codePoints[i2], userinfoPercentEncodeSet);
                  }
                }),
                // `URL.prototype.host` accessors pair
                // https://url.spec.whatwg.org/#dom-url-host
                host: accessorDescriptor(getHost, function(host) {
                  var url2 = getInternalURLState(this);
                  if (url2.cannotBeABaseURL)
                    return;
                  parseURL(url2, String(host), HOST);
                }),
                // `URL.prototype.hostname` accessors pair
                // https://url.spec.whatwg.org/#dom-url-hostname
                hostname: accessorDescriptor(getHostname, function(hostname) {
                  var url2 = getInternalURLState(this);
                  if (url2.cannotBeABaseURL)
                    return;
                  parseURL(url2, String(hostname), HOSTNAME);
                }),
                // `URL.prototype.port` accessors pair
                // https://url.spec.whatwg.org/#dom-url-port
                port: accessorDescriptor(getPort, function(port) {
                  var url2 = getInternalURLState(this);
                  if (cannotHaveUsernamePasswordPort(url2))
                    return;
                  port = String(port);
                  if (port == "")
                    url2.port = null;
                  else
                    parseURL(url2, port, PORT);
                }),
                // `URL.prototype.pathname` accessors pair
                // https://url.spec.whatwg.org/#dom-url-pathname
                pathname: accessorDescriptor(getPathname, function(pathname) {
                  var url2 = getInternalURLState(this);
                  if (url2.cannotBeABaseURL)
                    return;
                  url2.path = [];
                  parseURL(url2, pathname + "", PATH_START);
                }),
                // `URL.prototype.search` accessors pair
                // https://url.spec.whatwg.org/#dom-url-search
                search: accessorDescriptor(getSearch, function(search) {
                  var url2 = getInternalURLState(this);
                  search = String(search);
                  if (search == "") {
                    url2.query = null;
                  } else {
                    if ("?" == search.charAt(0))
                      search = search.slice(1);
                    url2.query = "";
                    parseURL(url2, search, QUERY);
                  }
                  getInternalSearchParamsState(url2.searchParams).updateSearchParams(url2.query);
                }),
                // `URL.prototype.searchParams` getter
                // https://url.spec.whatwg.org/#dom-url-searchparams
                searchParams: accessorDescriptor(getSearchParams),
                // `URL.prototype.hash` accessors pair
                // https://url.spec.whatwg.org/#dom-url-hash
                hash: accessorDescriptor(getHash, function(hash) {
                  var url2 = getInternalURLState(this);
                  hash = String(hash);
                  if (hash == "") {
                    url2.fragment = null;
                    return;
                  }
                  if ("#" == hash.charAt(0))
                    hash = hash.slice(1);
                  url2.fragment = "";
                  parseURL(url2, hash, FRAGMENT);
                })
              });
            }
            redefine(URLPrototype, "toJSON", function toJSON() {
              return serializeURL.call(this);
            }, {
              enumerable: true
            });
            redefine(URLPrototype, "toString", function toString() {
              return serializeURL.call(this);
            }, {
              enumerable: true
            });
            if (NativeURL) {
              var nativeCreateObjectURL = NativeURL.createObjectURL;
              var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
              if (nativeCreateObjectURL)
                redefine(URLConstructor, "createObjectURL", function createObjectURL(blob) {
                  return nativeCreateObjectURL.apply(NativeURL, arguments);
                });
              if (nativeRevokeObjectURL)
                redefine(URLConstructor, "revokeObjectURL", function revokeObjectURL(url2) {
                  return nativeRevokeObjectURL.apply(NativeURL, arguments);
                });
            }
            setToStringTag(URLConstructor, "URL");
            $({
              global: true,
              forced: !USE_NATIVE_URL,
              sham: !DESCRIPTORS
            }, {
              URL: URLConstructor
            });
          },
          {
            "../internals/an-instance": 27,
            "../internals/array-from": 35,
            "../internals/descriptors": 61,
            "../internals/export": 68,
            "../internals/global": 77,
            "../internals/has": 78,
            "../internals/internal-state": 88,
            "../internals/native-url": 102,
            "../internals/object-assign": 107,
            "../internals/object-define-properties": 109,
            "../internals/redefine": 126,
            "../internals/set-to-string-tag": 135,
            "../internals/string-multibyte": 141,
            "../internals/string-punycode-to-ascii": 142,
            "../modules/es.string.iterator": 204,
            "../modules/web.url-search-params": 249
          }
        ],
        251: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            module2.exports = _dereq_2("./").polyfill();
          },
          {
            "./": 252
          }
        ],
        252: [
          function(_dereq_2, module2, exports2) {
            (function(process, global2) {
              (function(global3, factory) {
                typeof exports2 === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global3.ES6Promise = factory();
              })(this, function() {
                "use strict";
                function objectOrFunction(x) {
                  var type = typeof x;
                  return x !== null && (type === "object" || type === "function");
                }
                function isFunction(x) {
                  return typeof x === "function";
                }
                var _isArray = void 0;
                if (Array.isArray) {
                  _isArray = Array.isArray;
                } else {
                  _isArray = function(x) {
                    return Object.prototype.toString.call(x) === "[object Array]";
                  };
                }
                var isArray = _isArray;
                var len = 0;
                var vertxNext = void 0;
                var customSchedulerFn = void 0;
                var asap = function asap2(callback, arg) {
                  queue[len] = callback;
                  queue[len + 1] = arg;
                  len += 2;
                  if (len === 2) {
                    if (customSchedulerFn) {
                      customSchedulerFn(flush);
                    } else {
                      scheduleFlush();
                    }
                  }
                };
                function setScheduler(scheduleFn) {
                  customSchedulerFn = scheduleFn;
                }
                function setAsap(asapFn) {
                  asap = asapFn;
                }
                var browserWindow = typeof window !== "undefined" ? window : void 0;
                var browserGlobal = browserWindow || {};
                var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
                var isNode = typeof self === "undefined" && typeof process !== "undefined" && {}.toString.call(process) === "[object process]";
                var isWorker = typeof Uint8ClampedArray !== "undefined" && typeof importScripts !== "undefined" && typeof MessageChannel !== "undefined";
                function useNextTick() {
                  return function() {
                    return process.nextTick(flush);
                  };
                }
                function useVertxTimer() {
                  if (typeof vertxNext !== "undefined") {
                    return function() {
                      vertxNext(flush);
                    };
                  }
                  return useSetTimeout();
                }
                function useMutationObserver() {
                  var iterations = 0;
                  var observer = new BrowserMutationObserver(flush);
                  var node = document.createTextNode("");
                  observer.observe(node, {
                    characterData: true
                  });
                  return function() {
                    node.data = iterations = ++iterations % 2;
                  };
                }
                function useMessageChannel() {
                  var channel = new MessageChannel();
                  channel.port1.onmessage = flush;
                  return function() {
                    return channel.port2.postMessage(0);
                  };
                }
                function useSetTimeout() {
                  var globalSetTimeout = setTimeout;
                  return function() {
                    return globalSetTimeout(flush, 1);
                  };
                }
                var queue = new Array(1e3);
                function flush() {
                  for (var i2 = 0; i2 < len; i2 += 2) {
                    var callback = queue[i2];
                    var arg = queue[i2 + 1];
                    callback(arg);
                    queue[i2] = void 0;
                    queue[i2 + 1] = void 0;
                  }
                  len = 0;
                }
                function attemptVertx() {
                  try {
                    var vertx = Function("return this")().require("vertx");
                    vertxNext = vertx.runOnLoop || vertx.runOnContext;
                    return useVertxTimer();
                  } catch (e2) {
                    return useSetTimeout();
                  }
                }
                var scheduleFlush = void 0;
                if (isNode) {
                  scheduleFlush = useNextTick();
                } else if (BrowserMutationObserver) {
                  scheduleFlush = useMutationObserver();
                } else if (isWorker) {
                  scheduleFlush = useMessageChannel();
                } else if (browserWindow === void 0 && typeof _dereq_2 === "function") {
                  scheduleFlush = attemptVertx();
                } else {
                  scheduleFlush = useSetTimeout();
                }
                function then(onFulfillment, onRejection) {
                  var parent = this;
                  var child = new this.constructor(noop);
                  if (child[PROMISE_ID] === void 0) {
                    makePromise(child);
                  }
                  var _state = parent._state;
                  if (_state) {
                    var callback = arguments[_state - 1];
                    asap(function() {
                      return invokeCallback(_state, child, callback, parent._result);
                    });
                  } else {
                    subscribe(parent, child, onFulfillment, onRejection);
                  }
                  return child;
                }
                function resolve$1(object) {
                  var Constructor = this;
                  if (object && typeof object === "object" && object.constructor === Constructor) {
                    return object;
                  }
                  var promise = new Constructor(noop);
                  resolve(promise, object);
                  return promise;
                }
                var PROMISE_ID = Math.random().toString(36).substring(2);
                function noop() {
                }
                var PENDING = void 0;
                var FULFILLED = 1;
                var REJECTED = 2;
                function selfFulfillment() {
                  return new TypeError("You cannot resolve a promise with itself");
                }
                function cannotReturnOwn() {
                  return new TypeError("A promises callback cannot return that same promise.");
                }
                function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
                  try {
                    then$$1.call(value, fulfillmentHandler, rejectionHandler);
                  } catch (e2) {
                    return e2;
                  }
                }
                function handleForeignThenable(promise, thenable, then$$1) {
                  asap(function(promise2) {
                    var sealed = false;
                    var error = tryThen(then$$1, thenable, function(value) {
                      if (sealed) {
                        return;
                      }
                      sealed = true;
                      if (thenable !== value) {
                        resolve(promise2, value);
                      } else {
                        fulfill(promise2, value);
                      }
                    }, function(reason) {
                      if (sealed) {
                        return;
                      }
                      sealed = true;
                      reject(promise2, reason);
                    }, "Settle: " + (promise2._label || " unknown promise"));
                    if (!sealed && error) {
                      sealed = true;
                      reject(promise2, error);
                    }
                  }, promise);
                }
                function handleOwnThenable(promise, thenable) {
                  if (thenable._state === FULFILLED) {
                    fulfill(promise, thenable._result);
                  } else if (thenable._state === REJECTED) {
                    reject(promise, thenable._result);
                  } else {
                    subscribe(thenable, void 0, function(value) {
                      return resolve(promise, value);
                    }, function(reason) {
                      return reject(promise, reason);
                    });
                  }
                }
                function handleMaybeThenable(promise, maybeThenable, then$$1) {
                  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
                    handleOwnThenable(promise, maybeThenable);
                  } else {
                    if (then$$1 === void 0) {
                      fulfill(promise, maybeThenable);
                    } else if (isFunction(then$$1)) {
                      handleForeignThenable(promise, maybeThenable, then$$1);
                    } else {
                      fulfill(promise, maybeThenable);
                    }
                  }
                }
                function resolve(promise, value) {
                  if (promise === value) {
                    reject(promise, selfFulfillment());
                  } else if (objectOrFunction(value)) {
                    var then$$1 = void 0;
                    try {
                      then$$1 = value.then;
                    } catch (error) {
                      reject(promise, error);
                      return;
                    }
                    handleMaybeThenable(promise, value, then$$1);
                  } else {
                    fulfill(promise, value);
                  }
                }
                function publishRejection(promise) {
                  if (promise._onerror) {
                    promise._onerror(promise._result);
                  }
                  publish(promise);
                }
                function fulfill(promise, value) {
                  if (promise._state !== PENDING) {
                    return;
                  }
                  promise._result = value;
                  promise._state = FULFILLED;
                  if (promise._subscribers.length !== 0) {
                    asap(publish, promise);
                  }
                }
                function reject(promise, reason) {
                  if (promise._state !== PENDING) {
                    return;
                  }
                  promise._state = REJECTED;
                  promise._result = reason;
                  asap(publishRejection, promise);
                }
                function subscribe(parent, child, onFulfillment, onRejection) {
                  var _subscribers = parent._subscribers;
                  var length = _subscribers.length;
                  parent._onerror = null;
                  _subscribers[length] = child;
                  _subscribers[length + FULFILLED] = onFulfillment;
                  _subscribers[length + REJECTED] = onRejection;
                  if (length === 0 && parent._state) {
                    asap(publish, parent);
                  }
                }
                function publish(promise) {
                  var subscribers = promise._subscribers;
                  var settled = promise._state;
                  if (subscribers.length === 0) {
                    return;
                  }
                  var child = void 0, callback = void 0, detail = promise._result;
                  for (var i2 = 0; i2 < subscribers.length; i2 += 3) {
                    child = subscribers[i2];
                    callback = subscribers[i2 + settled];
                    if (child) {
                      invokeCallback(settled, child, callback, detail);
                    } else {
                      callback(detail);
                    }
                  }
                  promise._subscribers.length = 0;
                }
                function invokeCallback(settled, promise, callback, detail) {
                  var hasCallback = isFunction(callback), value = void 0, error = void 0, succeeded = true;
                  if (hasCallback) {
                    try {
                      value = callback(detail);
                    } catch (e2) {
                      succeeded = false;
                      error = e2;
                    }
                    if (promise === value) {
                      reject(promise, cannotReturnOwn());
                      return;
                    }
                  } else {
                    value = detail;
                  }
                  if (promise._state !== PENDING) {
                  } else if (hasCallback && succeeded) {
                    resolve(promise, value);
                  } else if (succeeded === false) {
                    reject(promise, error);
                  } else if (settled === FULFILLED) {
                    fulfill(promise, value);
                  } else if (settled === REJECTED) {
                    reject(promise, value);
                  }
                }
                function initializePromise(promise, resolver) {
                  try {
                    resolver(function resolvePromise(value) {
                      resolve(promise, value);
                    }, function rejectPromise(reason) {
                      reject(promise, reason);
                    });
                  } catch (e2) {
                    reject(promise, e2);
                  }
                }
                var id = 0;
                function nextId() {
                  return id++;
                }
                function makePromise(promise) {
                  promise[PROMISE_ID] = id++;
                  promise._state = void 0;
                  promise._result = void 0;
                  promise._subscribers = [];
                }
                function validationError() {
                  return new Error("Array Methods must be provided an Array");
                }
                var Enumerator = function() {
                  function Enumerator2(Constructor, input) {
                    this._instanceConstructor = Constructor;
                    this.promise = new Constructor(noop);
                    if (!this.promise[PROMISE_ID]) {
                      makePromise(this.promise);
                    }
                    if (isArray(input)) {
                      this.length = input.length;
                      this._remaining = input.length;
                      this._result = new Array(this.length);
                      if (this.length === 0) {
                        fulfill(this.promise, this._result);
                      } else {
                        this.length = this.length || 0;
                        this._enumerate(input);
                        if (this._remaining === 0) {
                          fulfill(this.promise, this._result);
                        }
                      }
                    } else {
                      reject(this.promise, validationError());
                    }
                  }
                  Enumerator2.prototype._enumerate = function _enumerate(input) {
                    for (var i2 = 0; this._state === PENDING && i2 < input.length; i2++) {
                      this._eachEntry(input[i2], i2);
                    }
                  };
                  Enumerator2.prototype._eachEntry = function _eachEntry(entry, i2) {
                    var c = this._instanceConstructor;
                    var resolve$$1 = c.resolve;
                    if (resolve$$1 === resolve$1) {
                      var _then = void 0;
                      var error = void 0;
                      var didError = false;
                      try {
                        _then = entry.then;
                      } catch (e2) {
                        didError = true;
                        error = e2;
                      }
                      if (_then === then && entry._state !== PENDING) {
                        this._settledAt(entry._state, i2, entry._result);
                      } else if (typeof _then !== "function") {
                        this._remaining--;
                        this._result[i2] = entry;
                      } else if (c === Promise$1) {
                        var promise = new c(noop);
                        if (didError) {
                          reject(promise, error);
                        } else {
                          handleMaybeThenable(promise, entry, _then);
                        }
                        this._willSettleAt(promise, i2);
                      } else {
                        this._willSettleAt(new c(function(resolve$$12) {
                          return resolve$$12(entry);
                        }), i2);
                      }
                    } else {
                      this._willSettleAt(resolve$$1(entry), i2);
                    }
                  };
                  Enumerator2.prototype._settledAt = function _settledAt(state, i2, value) {
                    var promise = this.promise;
                    if (promise._state === PENDING) {
                      this._remaining--;
                      if (state === REJECTED) {
                        reject(promise, value);
                      } else {
                        this._result[i2] = value;
                      }
                    }
                    if (this._remaining === 0) {
                      fulfill(promise, this._result);
                    }
                  };
                  Enumerator2.prototype._willSettleAt = function _willSettleAt(promise, i2) {
                    var enumerator = this;
                    subscribe(promise, void 0, function(value) {
                      return enumerator._settledAt(FULFILLED, i2, value);
                    }, function(reason) {
                      return enumerator._settledAt(REJECTED, i2, reason);
                    });
                  };
                  return Enumerator2;
                }();
                function all(entries) {
                  return new Enumerator(this, entries).promise;
                }
                function race(entries) {
                  var Constructor = this;
                  if (!isArray(entries)) {
                    return new Constructor(function(_, reject2) {
                      return reject2(new TypeError("You must pass an array to race."));
                    });
                  } else {
                    return new Constructor(function(resolve2, reject2) {
                      var length = entries.length;
                      for (var i2 = 0; i2 < length; i2++) {
                        Constructor.resolve(entries[i2]).then(resolve2, reject2);
                      }
                    });
                  }
                }
                function reject$1(reason) {
                  var Constructor = this;
                  var promise = new Constructor(noop);
                  reject(promise, reason);
                  return promise;
                }
                function needsResolver() {
                  throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
                }
                function needsNew() {
                  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
                }
                var Promise$1 = function() {
                  function Promise2(resolver) {
                    this[PROMISE_ID] = nextId();
                    this._result = this._state = void 0;
                    this._subscribers = [];
                    if (noop !== resolver) {
                      typeof resolver !== "function" && needsResolver();
                      this instanceof Promise2 ? initializePromise(this, resolver) : needsNew();
                    }
                  }
                  Promise2.prototype.catch = function _catch(onRejection) {
                    return this.then(null, onRejection);
                  };
                  Promise2.prototype.finally = function _finally(callback) {
                    var promise = this;
                    var constructor = promise.constructor;
                    if (isFunction(callback)) {
                      return promise.then(function(value) {
                        return constructor.resolve(callback()).then(function() {
                          return value;
                        });
                      }, function(reason) {
                        return constructor.resolve(callback()).then(function() {
                          throw reason;
                        });
                      });
                    }
                    return promise.then(callback, callback);
                  };
                  return Promise2;
                }();
                Promise$1.prototype.then = then;
                Promise$1.all = all;
                Promise$1.race = race;
                Promise$1.resolve = resolve$1;
                Promise$1.reject = reject$1;
                Promise$1._setScheduler = setScheduler;
                Promise$1._setAsap = setAsap;
                Promise$1._asap = asap;
                function polyfill() {
                  var local = void 0;
                  if (typeof global2 !== "undefined") {
                    local = global2;
                  } else if (typeof self !== "undefined") {
                    local = self;
                  } else {
                    try {
                      local = Function("return this")();
                    } catch (e2) {
                      throw new Error("polyfill failed because global object is unavailable in this environment");
                    }
                  }
                  var P = local.Promise;
                  if (P) {
                    var promiseToString = null;
                    try {
                      promiseToString = Object.prototype.toString.call(P.resolve());
                    } catch (e2) {
                    }
                    if (promiseToString === "[object Promise]" && !P.cast) {
                      return;
                    }
                  }
                  local.Promise = Promise$1;
                }
                Promise$1.polyfill = polyfill;
                Promise$1.Promise = Promise$1;
                return Promise$1;
              });
            }).call(this, _dereq_2("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
          },
          {
            "_process": 265
          }
        ],
        253: [
          function(_dereq_2, module2, exports2) {
            (function(global2, factory) {
              if (typeof define === "function" && define.amd) {
                define([
                  "exports",
                  "module"
                ], factory);
              } else if (typeof exports2 !== "undefined" && typeof module2 !== "undefined") {
                factory(exports2, module2);
              } else {
                var mod = {
                  exports: {}
                };
                factory(mod.exports, mod);
                global2.fetchJsonp = mod.exports;
              }
            })(this, function(exports3, module3) {
              "use strict";
              var defaultOptions = {
                timeout: 5e3,
                jsonpCallback: "callback",
                jsonpCallbackFunction: null
              };
              function generateCallbackFunction() {
                return "jsonp_" + Date.now() + "_" + Math.ceil(Math.random() * 1e5);
              }
              function clearFunction(functionName) {
                try {
                  delete window[functionName];
                } catch (e2) {
                  window[functionName] = void 0;
                }
              }
              function removeScript(scriptId) {
                var script = document.getElementById(scriptId);
                if (script) {
                  document.getElementsByTagName("head")[0].removeChild(script);
                }
              }
              function fetchJsonp(_url) {
                var options = arguments.length <= 1 || arguments[1] === void 0 ? {} : arguments[1];
                var url2 = _url;
                var timeout = options.timeout || defaultOptions.timeout;
                var jsonpCallback = options.jsonpCallback || defaultOptions.jsonpCallback;
                var timeoutId = void 0;
                return new Promise(function(resolve, reject) {
                  var callbackFunction = options.jsonpCallbackFunction || generateCallbackFunction();
                  var scriptId = jsonpCallback + "_" + callbackFunction;
                  window[callbackFunction] = function(response) {
                    resolve({
                      ok: true,
                      // keep consistent with fetch API
                      json: function json() {
                        return Promise.resolve(response);
                      }
                    });
                    if (timeoutId)
                      clearTimeout(timeoutId);
                    removeScript(scriptId);
                    clearFunction(callbackFunction);
                  };
                  url2 += url2.indexOf("?") === -1 ? "?" : "&";
                  var jsonpScript = document.createElement("script");
                  jsonpScript.setAttribute("src", "" + url2 + jsonpCallback + "=" + callbackFunction);
                  if (options.charset) {
                    jsonpScript.setAttribute("charset", options.charset);
                  }
                  jsonpScript.id = scriptId;
                  document.getElementsByTagName("head")[0].appendChild(jsonpScript);
                  timeoutId = setTimeout(function() {
                    reject(new Error("JSONP request to " + _url + " timed out"));
                    clearFunction(callbackFunction);
                    removeScript(scriptId);
                    window[callbackFunction] = function() {
                      clearFunction(callbackFunction);
                    };
                  }, timeout);
                  jsonpScript.onerror = function() {
                    reject(new Error("JSONP request to " + _url + " failed"));
                    clearFunction(callbackFunction);
                    removeScript(scriptId);
                    if (timeoutId)
                      clearTimeout(timeoutId);
                  };
                });
              }
              module3.exports = fetchJsonp;
            });
          },
          {}
        ],
        254: [
          function(_dereq_2, module2, exports2) {
            var saveAs = saveAs || function(view) {
              "use strict";
              if (typeof view === "undefined" || typeof navigator !== "undefined" && /MSIE [1-9]\./.test(navigator.userAgent)) {
                return;
              }
              var doc = view.document, get_URL = function() {
                return view.URL || view.webkitURL || view;
              }, save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a"), can_use_save_link = "download" in save_link, click = function(node) {
                var event = new MouseEvent("click");
                node.dispatchEvent(event);
              }, is_safari = /constructor/i.test(view.HTMLElement) || view.safari, is_chrome_ios = /CriOS\/[\d]+/.test(navigator.userAgent), throw_outside = function(ex) {
                (view.setImmediate || view.setTimeout)(function() {
                  throw ex;
                }, 0);
              }, force_saveable_type = "application/octet-stream", arbitrary_revoke_timeout = 1e3 * 40, revoke = function(file) {
                var revoker = function() {
                  if (typeof file === "string") {
                    get_URL().revokeObjectURL(file);
                  } else {
                    file.remove();
                  }
                };
                setTimeout(revoker, arbitrary_revoke_timeout);
              }, dispatch = function(filesaver, event_types, event) {
                event_types = [].concat(event_types);
                var i2 = event_types.length;
                while (i2--) {
                  var listener = filesaver["on" + event_types[i2]];
                  if (typeof listener === "function") {
                    try {
                      listener.call(filesaver, event || filesaver);
                    } catch (ex) {
                      throw_outside(ex);
                    }
                  }
                }
              }, auto_bom = function(blob) {
                if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
                  return new Blob([
                    String.fromCharCode(65279),
                    blob
                  ], {
                    type: blob.type
                  });
                }
                return blob;
              }, FileSaver = function(blob, name, no_auto_bom) {
                if (!no_auto_bom) {
                  blob = auto_bom(blob);
                }
                var filesaver = this, type = blob.type, force = type === force_saveable_type, object_url, dispatch_all = function() {
                  dispatch(filesaver, "writestart progress write writeend".split(" "));
                }, fs_error = function() {
                  if ((is_chrome_ios || force && is_safari) && view.FileReader) {
                    var reader = new FileReader();
                    reader.onloadend = function() {
                      var url2 = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, "data:attachment/file;");
                      var popup = view.open(url2, "_blank");
                      if (!popup)
                        view.location.href = url2;
                      url2 = void 0;
                      filesaver.readyState = filesaver.DONE;
                      dispatch_all();
                    };
                    reader.readAsDataURL(blob);
                    filesaver.readyState = filesaver.INIT;
                    return;
                  }
                  if (!object_url) {
                    object_url = get_URL().createObjectURL(blob);
                  }
                  if (force) {
                    view.location.href = object_url;
                  } else {
                    var opened = view.open(object_url, "_blank");
                    if (!opened) {
                      view.location.href = object_url;
                    }
                  }
                  filesaver.readyState = filesaver.DONE;
                  dispatch_all();
                  revoke(object_url);
                };
                filesaver.readyState = filesaver.INIT;
                if (can_use_save_link) {
                  object_url = get_URL().createObjectURL(blob);
                  setTimeout(function() {
                    save_link.href = object_url;
                    save_link.download = name;
                    click(save_link);
                    dispatch_all();
                    revoke(object_url);
                    filesaver.readyState = filesaver.DONE;
                  });
                  return;
                }
                fs_error();
              }, FS_proto = FileSaver.prototype, saveAs2 = function(blob, name, no_auto_bom) {
                return new FileSaver(blob, name || blob.name || "download", no_auto_bom);
              };
              if (typeof navigator !== "undefined" && navigator.msSaveOrOpenBlob) {
                return function(blob, name, no_auto_bom) {
                  name = name || blob.name || "download";
                  if (!no_auto_bom) {
                    blob = auto_bom(blob);
                  }
                  return navigator.msSaveOrOpenBlob(blob, name);
                };
              }
              FS_proto.abort = function() {
              };
              FS_proto.readyState = FS_proto.INIT = 0;
              FS_proto.WRITING = 1;
              FS_proto.DONE = 2;
              FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null;
              return saveAs2;
            }(typeof self !== "undefined" && self || typeof window !== "undefined" && window || this.content);
            if (typeof module2 !== "undefined" && module2.exports) {
              module2.exports.saveAs = saveAs;
            } else if (typeof define !== "undefined" && define !== null && define.amd !== null) {
              define("FileSaver.js", function() {
                return saveAs;
              });
            }
          },
          {}
        ],
        255: [
          function(_dereq_2, module2, exports2) {
            var __defProp = Object.defineProperty;
            var __markAsModule = (target) => __defProp(target, "__esModule", {
              value: true
            });
            var __export = (target, all) => {
              for (var name in all)
                __defProp(target, name, {
                  get: all[name],
                  enumerable: true
                });
            };
            __markAsModule(exports2);
            __export(exports2, {
              GIFEncoder: () => GIFEncoder,
              applyPalette: () => applyPalette,
              default: () => src_default,
              nearestColor: () => nearestColor,
              nearestColorIndex: () => nearestColorIndex,
              nearestColorIndexWithDistance: () => nearestColorIndexWithDistance,
              prequantize: () => prequantize,
              quantize: () => quantize,
              snapColorsToPalette: () => snapColorsToPalette
            });
            var constants_default = {
              signature: "GIF",
              version: "89a",
              trailer: 59,
              extensionIntroducer: 33,
              applicationExtensionLabel: 255,
              graphicControlExtensionLabel: 249,
              imageSeparator: 44,
              signatureSize: 3,
              versionSize: 3,
              globalColorTableFlagMask: 128,
              colorResolutionMask: 112,
              sortFlagMask: 8,
              globalColorTableSizeMask: 7,
              applicationIdentifierSize: 8,
              applicationAuthCodeSize: 3,
              disposalMethodMask: 28,
              userInputFlagMask: 2,
              transparentColorFlagMask: 1,
              localColorTableFlagMask: 128,
              interlaceFlagMask: 64,
              idSortFlagMask: 32,
              localColorTableSizeMask: 7
            };
            function createStream(initialCapacity = 256) {
              let cursor = 0;
              let contents = new Uint8Array(initialCapacity);
              return {
                get buffer() {
                  return contents.buffer;
                },
                reset() {
                  cursor = 0;
                },
                bytesView() {
                  return contents.subarray(0, cursor);
                },
                bytes() {
                  return contents.slice(0, cursor);
                },
                writeByte(byte) {
                  expand(cursor + 1);
                  contents[cursor] = byte;
                  cursor++;
                },
                writeBytes(data, offset = 0, byteLength = data.length) {
                  expand(cursor + byteLength);
                  for (let i2 = 0; i2 < byteLength; i2++) {
                    contents[cursor++] = data[i2 + offset];
                  }
                },
                writeBytesView(data, offset = 0, byteLength = data.byteLength) {
                  expand(cursor + byteLength);
                  contents.set(data.subarray(offset, offset + byteLength), cursor);
                  cursor += byteLength;
                }
              };
              function expand(newCapacity) {
                var prevCapacity = contents.length;
                if (prevCapacity >= newCapacity)
                  return;
                var CAPACITY_DOUBLING_MAX = 1024 * 1024;
                newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) >>> 0);
                if (prevCapacity != 0)
                  newCapacity = Math.max(newCapacity, 256);
                const oldContents = contents;
                contents = new Uint8Array(newCapacity);
                if (cursor > 0)
                  contents.set(oldContents.subarray(0, cursor), 0);
              }
            }
            var BITS = 12;
            var DEFAULT_HSIZE = 5003;
            var MASKS = [
              0,
              1,
              3,
              7,
              15,
              31,
              63,
              127,
              255,
              511,
              1023,
              2047,
              4095,
              8191,
              16383,
              32767,
              65535
            ];
            function lzwEncode(width2, height2, pixels, colorDepth, outStream = createStream(512), accum = new Uint8Array(256), htab = new Int32Array(DEFAULT_HSIZE), codetab = new Int32Array(DEFAULT_HSIZE)) {
              const hsize = htab.length;
              const initCodeSize = Math.max(2, colorDepth);
              accum.fill(0);
              codetab.fill(0);
              htab.fill(-1);
              let cur_accum = 0;
              let cur_bits = 0;
              const init_bits = initCodeSize + 1;
              const g_init_bits = init_bits;
              let clear_flg = false;
              let n_bits = g_init_bits;
              let maxcode = (1 << n_bits) - 1;
              const ClearCode = 1 << init_bits - 1;
              const EOFCode = ClearCode + 1;
              let free_ent = ClearCode + 2;
              let a_count = 0;
              let ent = pixels[0];
              let hshift = 0;
              for (let fcode = hsize; fcode < 65536; fcode *= 2) {
                ++hshift;
              }
              hshift = 8 - hshift;
              outStream.writeByte(initCodeSize);
              output(ClearCode);
              const length = pixels.length;
              for (let idx = 1; idx < length; idx++) {
                next_block: {
                  const c = pixels[idx];
                  const fcode = (c << BITS) + ent;
                  let i2 = c << hshift ^ ent;
                  if (htab[i2] === fcode) {
                    ent = codetab[i2];
                    break next_block;
                  }
                  const disp = i2 === 0 ? 1 : hsize - i2;
                  while (htab[i2] >= 0) {
                    i2 -= disp;
                    if (i2 < 0)
                      i2 += hsize;
                    if (htab[i2] === fcode) {
                      ent = codetab[i2];
                      break next_block;
                    }
                  }
                  output(ent);
                  ent = c;
                  if (free_ent < 1 << BITS) {
                    codetab[i2] = free_ent++;
                    htab[i2] = fcode;
                  } else {
                    htab.fill(-1);
                    free_ent = ClearCode + 2;
                    clear_flg = true;
                    output(ClearCode);
                  }
                }
              }
              output(ent);
              output(EOFCode);
              outStream.writeByte(0);
              return outStream.bytesView();
              function output(code) {
                cur_accum &= MASKS[cur_bits];
                if (cur_bits > 0)
                  cur_accum |= code << cur_bits;
                else
                  cur_accum = code;
                cur_bits += n_bits;
                while (cur_bits >= 8) {
                  accum[a_count++] = cur_accum & 255;
                  if (a_count >= 254) {
                    outStream.writeByte(a_count);
                    outStream.writeBytesView(accum, 0, a_count);
                    a_count = 0;
                  }
                  cur_accum >>= 8;
                  cur_bits -= 8;
                }
                if (free_ent > maxcode || clear_flg) {
                  if (clear_flg) {
                    n_bits = g_init_bits;
                    maxcode = (1 << n_bits) - 1;
                    clear_flg = false;
                  } else {
                    ++n_bits;
                    maxcode = n_bits === BITS ? 1 << n_bits : (1 << n_bits) - 1;
                  }
                }
                if (code == EOFCode) {
                  while (cur_bits > 0) {
                    accum[a_count++] = cur_accum & 255;
                    if (a_count >= 254) {
                      outStream.writeByte(a_count);
                      outStream.writeBytesView(accum, 0, a_count);
                      a_count = 0;
                    }
                    cur_accum >>= 8;
                    cur_bits -= 8;
                  }
                  if (a_count > 0) {
                    outStream.writeByte(a_count);
                    outStream.writeBytesView(accum, 0, a_count);
                    a_count = 0;
                  }
                }
              }
            }
            var lzwEncode_default = lzwEncode;
            function rgb888_to_rgb565(r, g, b) {
              return r << 8 & 63488 | g << 2 & 992 | b >> 3;
            }
            function rgba8888_to_rgba4444(r, g, b, a) {
              return r >> 4 | g & 240 | (b & 240) << 4 | (a & 240) << 8;
            }
            function rgb888_to_rgb444(r, g, b) {
              return r >> 4 << 8 | g & 240 | b >> 4;
            }
            function clamp(value, min, max) {
              return value < min ? min : value > max ? max : value;
            }
            function sqr(value) {
              return value * value;
            }
            function find_nn(bins, idx, hasAlpha) {
              var nn = 0;
              var err = 1e100;
              const bin1 = bins[idx];
              const n1 = bin1.cnt;
              const wa = bin1.ac;
              const wr = bin1.rc;
              const wg = bin1.gc;
              const wb = bin1.bc;
              for (var i2 = bin1.fw; i2 != 0; i2 = bins[i2].fw) {
                const bin = bins[i2];
                const n2 = bin.cnt;
                const nerr2 = n1 * n2 / (n1 + n2);
                if (nerr2 >= err)
                  continue;
                var nerr = 0;
                if (hasAlpha) {
                  nerr += nerr2 * sqr(bin.ac - wa);
                  if (nerr >= err)
                    continue;
                }
                nerr += nerr2 * sqr(bin.rc - wr);
                if (nerr >= err)
                  continue;
                nerr += nerr2 * sqr(bin.gc - wg);
                if (nerr >= err)
                  continue;
                nerr += nerr2 * sqr(bin.bc - wb);
                if (nerr >= err)
                  continue;
                err = nerr;
                nn = i2;
              }
              bin1.err = err;
              bin1.nn = nn;
            }
            function create_bin() {
              return {
                ac: 0,
                rc: 0,
                gc: 0,
                bc: 0,
                cnt: 0,
                nn: 0,
                fw: 0,
                bk: 0,
                tm: 0,
                mtm: 0,
                err: 0
              };
            }
            function create_bin_list(data, format) {
              const bincount = format === "rgb444" ? 4096 : 65536;
              const bins = new Array(bincount);
              const size = data.length;
              if (format === "rgba4444") {
                for (let i2 = 0; i2 < size; ++i2) {
                  const color = data[i2];
                  const a = color >> 24 & 255;
                  const b = color >> 16 & 255;
                  const g = color >> 8 & 255;
                  const r = color & 255;
                  const index = rgba8888_to_rgba4444(r, g, b, a);
                  let bin = index in bins ? bins[index] : bins[index] = create_bin();
                  bin.rc += r;
                  bin.gc += g;
                  bin.bc += b;
                  bin.ac += a;
                  bin.cnt++;
                }
              } else if (format === "rgb444") {
                for (let i2 = 0; i2 < size; ++i2) {
                  const color = data[i2];
                  const b = color >> 16 & 255;
                  const g = color >> 8 & 255;
                  const r = color & 255;
                  const index = rgb888_to_rgb444(r, g, b);
                  let bin = index in bins ? bins[index] : bins[index] = create_bin();
                  bin.rc += r;
                  bin.gc += g;
                  bin.bc += b;
                  bin.cnt++;
                }
              } else {
                for (let i2 = 0; i2 < size; ++i2) {
                  const color = data[i2];
                  const b = color >> 16 & 255;
                  const g = color >> 8 & 255;
                  const r = color & 255;
                  const index = rgb888_to_rgb565(r, g, b);
                  let bin = index in bins ? bins[index] : bins[index] = create_bin();
                  bin.rc += r;
                  bin.gc += g;
                  bin.bc += b;
                  bin.cnt++;
                }
              }
              return bins;
            }
            function quantize(rgba, maxColors, opts = {}) {
              const {
                format = "rgb565",
                clearAlpha = true,
                clearAlphaColor = 0,
                clearAlphaThreshold = 0,
                oneBitAlpha = false
              } = opts;
              if (!rgba || !rgba.buffer) {
                throw new Error("quantize() expected RGBA Uint8Array data");
              }
              if (!(rgba instanceof Uint8Array) && !(rgba instanceof Uint8ClampedArray)) {
                throw new Error("quantize() expected RGBA Uint8Array data");
              }
              const data = new Uint32Array(rgba.buffer);
              let useSqrt = opts.useSqrt !== false;
              const hasAlpha = format === "rgba4444";
              const bins = create_bin_list(data, format);
              const bincount = bins.length;
              const bincountMinusOne = bincount - 1;
              const heap = new Uint32Array(bincount + 1);
              var maxbins = 0;
              for (var i2 = 0; i2 < bincount; ++i2) {
                const bin = bins[i2];
                if (bin != null) {
                  var d = 1 / bin.cnt;
                  if (hasAlpha)
                    bin.ac *= d;
                  bin.rc *= d;
                  bin.gc *= d;
                  bin.bc *= d;
                  bins[maxbins++] = bin;
                }
              }
              if (sqr(maxColors) / maxbins < 0.022) {
                useSqrt = false;
              }
              var i2 = 0;
              for (; i2 < maxbins - 1; ++i2) {
                bins[i2].fw = i2 + 1;
                bins[i2 + 1].bk = i2;
                if (useSqrt)
                  bins[i2].cnt = Math.sqrt(bins[i2].cnt);
              }
              if (useSqrt)
                bins[i2].cnt = Math.sqrt(bins[i2].cnt);
              var h, l, l2;
              for (i2 = 0; i2 < maxbins; ++i2) {
                find_nn(bins, i2, false);
                var err = bins[i2].err;
                for (l = ++heap[0]; l > 1; l = l2) {
                  l2 = l >> 1;
                  if (bins[h = heap[l2]].err <= err)
                    break;
                  heap[l] = h;
                }
                heap[l] = i2;
              }
              var extbins = maxbins - maxColors;
              for (i2 = 0; i2 < extbins; ) {
                var tb;
                for (; ; ) {
                  var b1 = heap[1];
                  tb = bins[b1];
                  if (tb.tm >= tb.mtm && bins[tb.nn].mtm <= tb.tm)
                    break;
                  if (tb.mtm == bincountMinusOne)
                    b1 = heap[1] = heap[heap[0]--];
                  else {
                    find_nn(bins, b1, false);
                    tb.tm = i2;
                  }
                  var err = bins[b1].err;
                  for (l = 1; (l2 = l + l) <= heap[0]; l = l2) {
                    if (l2 < heap[0] && bins[heap[l2]].err > bins[heap[l2 + 1]].err)
                      l2++;
                    if (err <= bins[h = heap[l2]].err)
                      break;
                    heap[l] = h;
                  }
                  heap[l] = b1;
                }
                var nb = bins[tb.nn];
                var n1 = tb.cnt;
                var n2 = nb.cnt;
                var d = 1 / (n1 + n2);
                if (hasAlpha)
                  tb.ac = d * (n1 * tb.ac + n2 * nb.ac);
                tb.rc = d * (n1 * tb.rc + n2 * nb.rc);
                tb.gc = d * (n1 * tb.gc + n2 * nb.gc);
                tb.bc = d * (n1 * tb.bc + n2 * nb.bc);
                tb.cnt += nb.cnt;
                tb.mtm = ++i2;
                bins[nb.bk].fw = nb.fw;
                bins[nb.fw].bk = nb.bk;
                nb.mtm = bincountMinusOne;
              }
              let palette = [];
              var k2 = 0;
              for (i2 = 0; ; ++k2) {
                let r = clamp(Math.round(bins[i2].rc), 0, 255);
                let g = clamp(Math.round(bins[i2].gc), 0, 255);
                let b = clamp(Math.round(bins[i2].bc), 0, 255);
                let a = 255;
                if (hasAlpha) {
                  a = clamp(Math.round(bins[i2].ac), 0, 255);
                  if (oneBitAlpha) {
                    const threshold = typeof oneBitAlpha === "number" ? oneBitAlpha : 127;
                    a = a <= threshold ? 0 : 255;
                  }
                  if (clearAlpha && a <= clearAlphaThreshold) {
                    r = g = b = clearAlphaColor;
                    a = 0;
                  }
                }
                const color = hasAlpha ? [
                  r,
                  g,
                  b,
                  a
                ] : [
                  r,
                  g,
                  b
                ];
                const exists = existsInPalette(palette, color);
                if (!exists)
                  palette.push(color);
                if ((i2 = bins[i2].fw) == 0)
                  break;
              }
              return palette;
            }
            function existsInPalette(palette, color) {
              for (let i2 = 0; i2 < palette.length; i2++) {
                const p = palette[i2];
                let matchesRGB = p[0] === color[0] && p[1] === color[1] && p[2] === color[2];
                let matchesAlpha = p.length >= 4 && color.length >= 4 ? p[3] === color[3] : true;
                if (matchesRGB && matchesAlpha)
                  return true;
              }
              return false;
            }
            function euclideanDistanceSquared(a, b) {
              var sum = 0;
              var n;
              for (n = 0; n < a.length; n++) {
                const dx = a[n] - b[n];
                sum += dx * dx;
              }
              return sum;
            }
            function roundStep(byte, step) {
              return step > 1 ? Math.round(byte / step) * step : byte;
            }
            function prequantize(rgba, {
              roundRGB = 5,
              roundAlpha = 10,
              oneBitAlpha = null
            } = {}) {
              const data = new Uint32Array(rgba.buffer);
              for (let i2 = 0; i2 < data.length; i2++) {
                const color = data[i2];
                let a = color >> 24 & 255;
                let b = color >> 16 & 255;
                let g = color >> 8 & 255;
                let r = color & 255;
                a = roundStep(a, roundAlpha);
                if (oneBitAlpha) {
                  const threshold = typeof oneBitAlpha === "number" ? oneBitAlpha : 127;
                  a = a <= threshold ? 0 : 255;
                }
                r = roundStep(r, roundRGB);
                g = roundStep(g, roundRGB);
                b = roundStep(b, roundRGB);
                data[i2] = a << 24 | b << 16 | g << 8 | r << 0;
              }
            }
            function applyPalette(rgba, palette, format = "rgb565") {
              if (!rgba || !rgba.buffer) {
                throw new Error("quantize() expected RGBA Uint8Array data");
              }
              if (!(rgba instanceof Uint8Array) && !(rgba instanceof Uint8ClampedArray)) {
                throw new Error("quantize() expected RGBA Uint8Array data");
              }
              if (palette.length > 256) {
                throw new Error("applyPalette() only works with 256 colors or less");
              }
              const data = new Uint32Array(rgba.buffer);
              const length = data.length;
              const bincount = format === "rgb444" ? 4096 : 65536;
              const index = new Uint8Array(length);
              const cache = new Array(bincount);
              const hasAlpha = format === "rgba4444";
              if (format === "rgba4444") {
                for (let i2 = 0; i2 < length; i2++) {
                  const color = data[i2];
                  const a = color >> 24 & 255;
                  const b = color >> 16 & 255;
                  const g = color >> 8 & 255;
                  const r = color & 255;
                  const key2 = rgba8888_to_rgba4444(r, g, b, a);
                  const idx = key2 in cache ? cache[key2] : cache[key2] = nearestColorIndexRGBA(r, g, b, a, palette);
                  index[i2] = idx;
                }
              } else {
                const rgb888_to_key = format === "rgb444" ? rgb888_to_rgb444 : rgb888_to_rgb565;
                for (let i2 = 0; i2 < length; i2++) {
                  const color = data[i2];
                  const b = color >> 16 & 255;
                  const g = color >> 8 & 255;
                  const r = color & 255;
                  const key2 = rgb888_to_key(r, g, b);
                  const idx = key2 in cache ? cache[key2] : cache[key2] = nearestColorIndexRGB(r, g, b, palette);
                  index[i2] = idx;
                }
              }
              return index;
            }
            function nearestColorIndexRGBA(r, g, b, a, palette) {
              let k2 = 0;
              let mindist = 1e100;
              for (let i2 = 0; i2 < palette.length; i2++) {
                const px2 = palette[i2];
                const a2 = px2[3];
                let curdist = sqr2(a2 - a);
                if (curdist > mindist)
                  continue;
                const r2 = px2[0];
                curdist += sqr2(r2 - r);
                if (curdist > mindist)
                  continue;
                const g2 = px2[1];
                curdist += sqr2(g2 - g);
                if (curdist > mindist)
                  continue;
                const b2 = px2[2];
                curdist += sqr2(b2 - b);
                if (curdist > mindist)
                  continue;
                mindist = curdist;
                k2 = i2;
              }
              return k2;
            }
            function nearestColorIndexRGB(r, g, b, palette) {
              let k2 = 0;
              let mindist = 1e100;
              for (let i2 = 0; i2 < palette.length; i2++) {
                const px2 = palette[i2];
                const r2 = px2[0];
                let curdist = sqr2(r2 - r);
                if (curdist > mindist)
                  continue;
                const g2 = px2[1];
                curdist += sqr2(g2 - g);
                if (curdist > mindist)
                  continue;
                const b2 = px2[2];
                curdist += sqr2(b2 - b);
                if (curdist > mindist)
                  continue;
                mindist = curdist;
                k2 = i2;
              }
              return k2;
            }
            function snapColorsToPalette(palette, knownColors, threshold = 5) {
              if (!palette.length || !knownColors.length)
                return;
              const paletteRGB = palette.map((p) => p.slice(0, 3));
              const thresholdSq = threshold * threshold;
              const dim = palette[0].length;
              for (let i2 = 0; i2 < knownColors.length; i2++) {
                let color = knownColors[i2];
                if (color.length < dim) {
                  color = [
                    color[0],
                    color[1],
                    color[2],
                    255
                  ];
                } else if (color.length > dim) {
                  color = color.slice(0, 3);
                } else {
                  color = color.slice();
                }
                const r = nearestColorIndexWithDistance(paletteRGB, color.slice(0, 3), euclideanDistanceSquared);
                const idx = r[0];
                const distanceSq = r[1];
                if (distanceSq > 0 && distanceSq <= thresholdSq) {
                  palette[idx] = color;
                }
              }
            }
            function sqr2(a) {
              return a * a;
            }
            function nearestColorIndex(colors, pixel, distanceFn = euclideanDistanceSquared) {
              let minDist = Infinity;
              let minDistIndex = -1;
              for (let j = 0; j < colors.length; j++) {
                const paletteColor = colors[j];
                const dist = distanceFn(pixel, paletteColor);
                if (dist < minDist) {
                  minDist = dist;
                  minDistIndex = j;
                }
              }
              return minDistIndex;
            }
            function nearestColorIndexWithDistance(colors, pixel, distanceFn = euclideanDistanceSquared) {
              let minDist = Infinity;
              let minDistIndex = -1;
              for (let j = 0; j < colors.length; j++) {
                const paletteColor = colors[j];
                const dist = distanceFn(pixel, paletteColor);
                if (dist < minDist) {
                  minDist = dist;
                  minDistIndex = j;
                }
              }
              return [
                minDistIndex,
                minDist
              ];
            }
            function nearestColor(colors, pixel, distanceFn = euclideanDistanceSquared) {
              return colors[nearestColorIndex(colors, pixel, distanceFn)];
            }
            function GIFEncoder(opt = {}) {
              const {
                initialCapacity = 4096,
                auto = true
              } = opt;
              const stream = createStream(initialCapacity);
              const HSIZE = 5003;
              const accum = new Uint8Array(256);
              const htab = new Int32Array(HSIZE);
              const codetab = new Int32Array(HSIZE);
              let hasInit = false;
              return {
                reset() {
                  stream.reset();
                  hasInit = false;
                },
                finish() {
                  stream.writeByte(constants_default.trailer);
                },
                bytes() {
                  return stream.bytes();
                },
                bytesView() {
                  return stream.bytesView();
                },
                get buffer() {
                  return stream.buffer;
                },
                get stream() {
                  return stream;
                },
                writeHeader,
                writeFrame(index, width2, height2, opts = {}) {
                  const {
                    transparent = false,
                    transparentIndex = 0,
                    delay = 0,
                    palette = null,
                    repeat = 0,
                    colorDepth = 8,
                    dispose = -1
                  } = opts;
                  let first = false;
                  if (auto) {
                    if (!hasInit) {
                      first = true;
                      writeHeader();
                      hasInit = true;
                    }
                  } else {
                    first = Boolean(opts.first);
                  }
                  width2 = Math.max(0, Math.floor(width2));
                  height2 = Math.max(0, Math.floor(height2));
                  if (first) {
                    if (!palette) {
                      throw new Error("First frame must include a { palette } option");
                    }
                    encodeLogicalScreenDescriptor(stream, width2, height2, palette, colorDepth);
                    encodeColorTable(stream, palette);
                    if (repeat >= 0) {
                      encodeNetscapeExt(stream, repeat);
                    }
                  }
                  const delayTime = Math.round(delay / 10);
                  encodeGraphicControlExt(stream, dispose, delayTime, transparent, transparentIndex);
                  const useLocalColorTable = Boolean(palette) && !first;
                  encodeImageDescriptor(stream, width2, height2, useLocalColorTable ? palette : null);
                  if (useLocalColorTable)
                    encodeColorTable(stream, palette);
                  encodePixels(stream, index, width2, height2, colorDepth, accum, htab, codetab);
                }
              };
              function writeHeader() {
                writeUTFBytes(stream, "GIF89a");
              }
            }
            function encodeGraphicControlExt(stream, dispose, delay, transparent, transparentIndex) {
              stream.writeByte(33);
              stream.writeByte(249);
              stream.writeByte(4);
              if (transparentIndex < 0) {
                transparentIndex = 0;
                transparent = false;
              }
              var transp, disp;
              if (!transparent) {
                transp = 0;
                disp = 0;
              } else {
                transp = 1;
                disp = 2;
              }
              if (dispose >= 0) {
                disp = dispose & 7;
              }
              disp <<= 2;
              const userInput = 0;
              stream.writeByte(0 | disp | userInput | transp);
              writeUInt16(stream, delay);
              stream.writeByte(transparentIndex || 0);
              stream.writeByte(0);
            }
            function encodeLogicalScreenDescriptor(stream, width2, height2, palette, colorDepth = 8) {
              const globalColorTableFlag = 1;
              const sortFlag = 0;
              const globalColorTableSize = colorTableSize(palette.length) - 1;
              const fields = globalColorTableFlag << 7 | colorDepth - 1 << 4 | sortFlag << 3 | globalColorTableSize;
              const backgroundColorIndex = 0;
              const pixelAspectRatio = 0;
              writeUInt16(stream, width2);
              writeUInt16(stream, height2);
              stream.writeBytes([
                fields,
                backgroundColorIndex,
                pixelAspectRatio
              ]);
            }
            function encodeNetscapeExt(stream, repeat) {
              stream.writeByte(33);
              stream.writeByte(255);
              stream.writeByte(11);
              writeUTFBytes(stream, "NETSCAPE2.0");
              stream.writeByte(3);
              stream.writeByte(1);
              writeUInt16(stream, repeat);
              stream.writeByte(0);
            }
            function encodeColorTable(stream, palette) {
              const colorTableLength = 1 << colorTableSize(palette.length);
              for (let i2 = 0; i2 < colorTableLength; i2++) {
                let color = [
                  0,
                  0,
                  0
                ];
                if (i2 < palette.length) {
                  color = palette[i2];
                }
                stream.writeByte(color[0]);
                stream.writeByte(color[1]);
                stream.writeByte(color[2]);
              }
            }
            function encodeImageDescriptor(stream, width2, height2, localPalette) {
              stream.writeByte(44);
              writeUInt16(stream, 0);
              writeUInt16(stream, 0);
              writeUInt16(stream, width2);
              writeUInt16(stream, height2);
              if (localPalette) {
                const interlace = 0;
                const sorted = 0;
                const palSize = colorTableSize(localPalette.length) - 1;
                stream.writeByte(128 | interlace | sorted | 0 | palSize);
              } else {
                stream.writeByte(0);
              }
            }
            function encodePixels(stream, index, width2, height2, colorDepth = 8, accum, htab, codetab) {
              lzwEncode_default(width2, height2, index, colorDepth, stream, accum, htab, codetab);
            }
            function writeUInt16(stream, short) {
              stream.writeByte(short & 255);
              stream.writeByte(short >> 8 & 255);
            }
            function writeUTFBytes(stream, text) {
              for (var i2 = 0; i2 < text.length; i2++) {
                stream.writeByte(text.charCodeAt(i2));
              }
            }
            function colorTableSize(length) {
              return Math.max(Math.ceil(Math.log2(length)), 1);
            }
            var src_default = GIFEncoder;
          },
          {}
        ],
        256: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            function _interopDefault(ex) {
              return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
            }
            var _classCallCheck = _interopDefault(_dereq_2("@babel/runtime/helpers/classCallCheck"));
            var _createClass = _interopDefault(_dereq_2("@babel/runtime/helpers/createClass"));
            var arr = [];
            var each = arr.forEach;
            var slice = arr.slice;
            function defaults(obj) {
              each.call(slice.call(arguments, 1), function(source) {
                if (source) {
                  for (var prop in source) {
                    if (obj[prop] === void 0)
                      obj[prop] = source[prop];
                  }
                }
              });
              return obj;
            }
            var cookie = {
              create: function create(name, value, minutes, domain) {
                var expires;
                if (minutes) {
                  var date = new Date();
                  date.setTime(date.getTime() + minutes * 60 * 1e3);
                  expires = "; expires=" + date.toGMTString();
                } else
                  expires = "";
                domain = domain ? "domain=" + domain + ";" : "";
                document.cookie = name + "=" + value + expires + ";" + domain + "path=/";
              },
              read: function read(name) {
                var nameEQ = name + "=";
                var ca = document.cookie.split(";");
                for (var i2 = 0; i2 < ca.length; i2++) {
                  var c = ca[i2];
                  while (c.charAt(0) === " ") {
                    c = c.substring(1, c.length);
                  }
                  if (c.indexOf(nameEQ) === 0)
                    return c.substring(nameEQ.length, c.length);
                }
                return null;
              },
              remove: function remove(name) {
                this.create(name, "", -1);
              }
            };
            var cookie$1 = {
              name: "cookie",
              lookup: function lookup(options) {
                var found;
                if (options.lookupCookie && typeof document !== "undefined") {
                  var c = cookie.read(options.lookupCookie);
                  if (c)
                    found = c;
                }
                return found;
              },
              cacheUserLanguage: function cacheUserLanguage(lng, options) {
                if (options.lookupCookie && typeof document !== "undefined") {
                  cookie.create(options.lookupCookie, lng, options.cookieMinutes, options.cookieDomain);
                }
              }
            };
            var querystring = {
              name: "querystring",
              lookup: function lookup(options) {
                var found;
                if (typeof window !== "undefined") {
                  var query = window.location.search.substring(1);
                  var params = query.split("&");
                  for (var i2 = 0; i2 < params.length; i2++) {
                    var pos = params[i2].indexOf("=");
                    if (pos > 0) {
                      var key2 = params[i2].substring(0, pos);
                      if (key2 === options.lookupQuerystring) {
                        found = params[i2].substring(pos + 1);
                      }
                    }
                  }
                }
                return found;
              }
            };
            var hasLocalStorageSupport;
            try {
              hasLocalStorageSupport = window !== "undefined" && window.localStorage !== null;
              var testKey = "i18next.translate.boo";
              window.localStorage.setItem(testKey, "foo");
              window.localStorage.removeItem(testKey);
            } catch (e2) {
              hasLocalStorageSupport = false;
            }
            var localStorage2 = {
              name: "localStorage",
              lookup: function lookup(options) {
                var found;
                if (options.lookupLocalStorage && hasLocalStorageSupport) {
                  var lng = window.localStorage.getItem(options.lookupLocalStorage);
                  if (lng)
                    found = lng;
                }
                return found;
              },
              cacheUserLanguage: function cacheUserLanguage(lng, options) {
                if (options.lookupLocalStorage && hasLocalStorageSupport) {
                  window.localStorage.setItem(options.lookupLocalStorage, lng);
                }
              }
            };
            var navigator$1 = {
              name: "navigator",
              lookup: function lookup(options) {
                var found = [];
                if (typeof navigator !== "undefined") {
                  if (navigator.languages) {
                    for (var i2 = 0; i2 < navigator.languages.length; i2++) {
                      found.push(navigator.languages[i2]);
                    }
                  }
                  if (navigator.userLanguage) {
                    found.push(navigator.userLanguage);
                  }
                  if (navigator.language) {
                    found.push(navigator.language);
                  }
                }
                return found.length > 0 ? found : void 0;
              }
            };
            var htmlTag = {
              name: "htmlTag",
              lookup: function lookup(options) {
                var found;
                var htmlTag2 = options.htmlTag || (typeof document !== "undefined" ? document.documentElement : null);
                if (htmlTag2 && typeof htmlTag2.getAttribute === "function") {
                  found = htmlTag2.getAttribute("lang");
                }
                return found;
              }
            };
            var path = {
              name: "path",
              lookup: function lookup(options) {
                var found;
                if (typeof window !== "undefined") {
                  var language = window.location.pathname.match(/\/([a-zA-Z-]*)/g);
                  if (language instanceof Array) {
                    if (typeof options.lookupFromPathIndex === "number") {
                      if (typeof language[options.lookupFromPathIndex] !== "string") {
                        return void 0;
                      }
                      found = language[options.lookupFromPathIndex].replace("/", "");
                    } else {
                      found = language[0].replace("/", "");
                    }
                  }
                }
                return found;
              }
            };
            var subdomain = {
              name: "subdomain",
              lookup: function lookup(options) {
                var found;
                if (typeof window !== "undefined") {
                  var language = window.location.href.match(/(?:http[s]*\:\/\/)*(.*?)\.(?=[^\/]*\..{2,5})/gi);
                  if (language instanceof Array) {
                    if (typeof options.lookupFromSubdomainIndex === "number") {
                      found = language[options.lookupFromSubdomainIndex].replace("http://", "").replace("https://", "").replace(".", "");
                    } else {
                      found = language[0].replace("http://", "").replace("https://", "").replace(".", "");
                    }
                  }
                }
                return found;
              }
            };
            function getDefaults() {
              return {
                order: [
                  "querystring",
                  "cookie",
                  "localStorage",
                  "navigator",
                  "htmlTag"
                ],
                lookupQuerystring: "lng",
                lookupCookie: "i18next",
                lookupLocalStorage: "i18nextLng",
                // cache user language
                caches: [
                  "localStorage"
                ],
                excludeCacheFor: [
                  "cimode"
                ],
                //cookieMinutes: 10,
                //cookieDomain: 'myDomain'
                checkWhitelist: true
              };
            }
            var Browser = function() {
              function Browser2(services) {
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                _classCallCheck(this, Browser2);
                this.type = "languageDetector";
                this.detectors = {};
                this.init(services, options);
              }
              _createClass(Browser2, [
                {
                  key: "init",
                  value: function init(services) {
                    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                    var i18nOptions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                    this.services = services;
                    this.options = defaults(options, this.options || {}, getDefaults());
                    if (this.options.lookupFromUrlIndex)
                      this.options.lookupFromPathIndex = this.options.lookupFromUrlIndex;
                    this.i18nOptions = i18nOptions;
                    this.addDetector(cookie$1);
                    this.addDetector(querystring);
                    this.addDetector(localStorage2);
                    this.addDetector(navigator$1);
                    this.addDetector(htmlTag);
                    this.addDetector(path);
                    this.addDetector(subdomain);
                  }
                },
                {
                  key: "addDetector",
                  value: function addDetector(detector) {
                    this.detectors[detector.name] = detector;
                  }
                },
                {
                  key: "detect",
                  value: function detect(detectionOrder) {
                    var _this = this;
                    if (!detectionOrder)
                      detectionOrder = this.options.order;
                    var detected = [];
                    detectionOrder.forEach(function(detectorName) {
                      if (_this.detectors[detectorName]) {
                        var lookup = _this.detectors[detectorName].lookup(_this.options);
                        if (lookup && typeof lookup === "string")
                          lookup = [
                            lookup
                          ];
                        if (lookup)
                          detected = detected.concat(lookup);
                      }
                    });
                    var found;
                    detected.forEach(function(lng) {
                      if (found)
                        return;
                      var cleanedLng = _this.services.languageUtils.formatLanguageCode(lng);
                      if (!_this.options.checkWhitelist || _this.services.languageUtils.isWhitelisted(cleanedLng))
                        found = cleanedLng;
                    });
                    if (!found) {
                      var fallbacks = this.i18nOptions.fallbackLng;
                      if (typeof fallbacks === "string")
                        fallbacks = [
                          fallbacks
                        ];
                      if (!fallbacks)
                        fallbacks = [];
                      if (Object.prototype.toString.apply(fallbacks) === "[object Array]") {
                        found = fallbacks[0];
                      } else {
                        found = fallbacks[0] || fallbacks["default"] && fallbacks["default"][0];
                      }
                    }
                    return found;
                  }
                },
                {
                  key: "cacheUserLanguage",
                  value: function cacheUserLanguage(lng, caches) {
                    var _this2 = this;
                    if (!caches)
                      caches = this.options.caches;
                    if (!caches)
                      return;
                    if (this.options.excludeCacheFor && this.options.excludeCacheFor.indexOf(lng) > -1)
                      return;
                    caches.forEach(function(cacheName) {
                      if (_this2.detectors[cacheName])
                        _this2.detectors[cacheName].cacheUserLanguage(lng, _this2.options);
                    });
                  }
                }
              ]);
              return Browser2;
            }();
            Browser.type = "languageDetector";
            module2.exports = Browser;
          },
          {
            "@babel/runtime/helpers/classCallCheck": 257,
            "@babel/runtime/helpers/createClass": 258
          }
        ],
        257: [
          function(_dereq_2, module2, exports2) {
            arguments[4][5][0].apply(exports2, arguments);
          },
          {
            "dup": 5
          }
        ],
        258: [
          function(_dereq_2, module2, exports2) {
            arguments[4][6][0].apply(exports2, arguments);
          },
          {
            "dup": 6
          }
        ],
        259: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            function _interopDefault(ex) {
              return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
            }
            var _typeof3 = _interopDefault(_dereq_2("@babel/runtime/helpers/typeof"));
            var _objectSpread = _interopDefault(_dereq_2("@babel/runtime/helpers/objectSpread"));
            var _classCallCheck = _interopDefault(_dereq_2("@babel/runtime/helpers/classCallCheck"));
            var _createClass = _interopDefault(_dereq_2("@babel/runtime/helpers/createClass"));
            var _possibleConstructorReturn = _interopDefault(_dereq_2("@babel/runtime/helpers/possibleConstructorReturn"));
            var _getPrototypeOf = _interopDefault(_dereq_2("@babel/runtime/helpers/getPrototypeOf"));
            var _assertThisInitialized = _interopDefault(_dereq_2("@babel/runtime/helpers/assertThisInitialized"));
            var _inherits = _interopDefault(_dereq_2("@babel/runtime/helpers/inherits"));
            var _toConsumableArray2 = _interopDefault(_dereq_2("@babel/runtime/helpers/toConsumableArray"));
            var _slicedToArray = _interopDefault(_dereq_2("@babel/runtime/helpers/slicedToArray"));
            var consoleLogger = {
              type: "logger",
              log: function log(args) {
                this.output("log", args);
              },
              warn: function warn(args) {
                this.output("warn", args);
              },
              error: function error(args) {
                this.output("error", args);
              },
              output: function output(type, args) {
                var _console;
                if (console && console[type])
                  (_console = console)[type].apply(_console, _toConsumableArray2(args));
              }
            };
            var Logger = function() {
              function Logger2(concreteLogger) {
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                _classCallCheck(this, Logger2);
                this.init(concreteLogger, options);
              }
              _createClass(Logger2, [
                {
                  key: "init",
                  value: function init(concreteLogger) {
                    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                    this.prefix = options.prefix || "i18next:";
                    this.logger = concreteLogger || consoleLogger;
                    this.options = options;
                    this.debug = options.debug;
                  }
                },
                {
                  key: "setDebug",
                  value: function setDebug(bool) {
                    this.debug = bool;
                  }
                },
                {
                  key: "log",
                  value: function log() {
                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                    return this.forward(args, "log", "", true);
                  }
                },
                {
                  key: "warn",
                  value: function warn() {
                    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                      args[_key2] = arguments[_key2];
                    }
                    return this.forward(args, "warn", "", true);
                  }
                },
                {
                  key: "error",
                  value: function error() {
                    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                      args[_key3] = arguments[_key3];
                    }
                    return this.forward(args, "error", "");
                  }
                },
                {
                  key: "deprecate",
                  value: function deprecate() {
                    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                      args[_key4] = arguments[_key4];
                    }
                    return this.forward(args, "warn", "WARNING DEPRECATED: ", true);
                  }
                },
                {
                  key: "forward",
                  value: function forward(args, lvl, prefix, debugOnly) {
                    if (debugOnly && !this.debug)
                      return null;
                    if (typeof args[0] === "string")
                      args[0] = "".concat(prefix).concat(this.prefix, " ").concat(args[0]);
                    return this.logger[lvl](args);
                  }
                },
                {
                  key: "create",
                  value: function create(moduleName) {
                    return new Logger2(this.logger, _objectSpread({}, {
                      prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
                    }, this.options));
                  }
                }
              ]);
              return Logger2;
            }();
            var baseLogger = new Logger();
            var EventEmitter = function() {
              function EventEmitter2() {
                _classCallCheck(this, EventEmitter2);
                this.observers = {};
              }
              _createClass(EventEmitter2, [
                {
                  key: "on",
                  value: function on(events, listener) {
                    var _this = this;
                    events.split(" ").forEach(function(event) {
                      _this.observers[event] = _this.observers[event] || [];
                      _this.observers[event].push(listener);
                    });
                    return this;
                  }
                },
                {
                  key: "off",
                  value: function off(event, listener) {
                    if (!this.observers[event])
                      return;
                    if (!listener) {
                      delete this.observers[event];
                      return;
                    }
                    this.observers[event] = this.observers[event].filter(function(l) {
                      return l !== listener;
                    });
                  }
                },
                {
                  key: "emit",
                  value: function emit(event) {
                    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                      args[_key - 1] = arguments[_key];
                    }
                    if (this.observers[event]) {
                      var cloned = [].concat(this.observers[event]);
                      cloned.forEach(function(observer) {
                        observer.apply(void 0, args);
                      });
                    }
                    if (this.observers["*"]) {
                      var _cloned = [].concat(this.observers["*"]);
                      _cloned.forEach(function(observer) {
                        observer.apply(observer, [
                          event
                        ].concat(args));
                      });
                    }
                  }
                }
              ]);
              return EventEmitter2;
            }();
            function defer() {
              var res;
              var rej;
              var promise = new Promise(function(resolve, reject) {
                res = resolve;
                rej = reject;
              });
              promise.resolve = res;
              promise.reject = rej;
              return promise;
            }
            function makeString(object) {
              if (object == null)
                return "";
              return "" + object;
            }
            function copy(a, s, t) {
              a.forEach(function(m) {
                if (s[m])
                  t[m] = s[m];
              });
            }
            function getLastOfPath(object, path, Empty) {
              function cleanKey(key3) {
                return key3 && key3.indexOf("###") > -1 ? key3.replace(/###/g, ".") : key3;
              }
              function canNotTraverseDeeper() {
                return !object || typeof object === "string";
              }
              var stack = typeof path !== "string" ? [].concat(path) : path.split(".");
              while (stack.length > 1) {
                if (canNotTraverseDeeper())
                  return {};
                var key2 = cleanKey(stack.shift());
                if (!object[key2] && Empty)
                  object[key2] = new Empty();
                object = object[key2];
              }
              if (canNotTraverseDeeper())
                return {};
              return {
                obj: object,
                k: cleanKey(stack.shift())
              };
            }
            function setPath(object, path, newValue) {
              var _getLastOfPath = getLastOfPath(object, path, Object), obj = _getLastOfPath.obj, k2 = _getLastOfPath.k;
              obj[k2] = newValue;
            }
            function pushPath(object, path, newValue, concat) {
              var _getLastOfPath2 = getLastOfPath(object, path, Object), obj = _getLastOfPath2.obj, k2 = _getLastOfPath2.k;
              obj[k2] = obj[k2] || [];
              if (concat)
                obj[k2] = obj[k2].concat(newValue);
              if (!concat)
                obj[k2].push(newValue);
            }
            function getPath(object, path) {
              var _getLastOfPath3 = getLastOfPath(object, path), obj = _getLastOfPath3.obj, k2 = _getLastOfPath3.k;
              if (!obj)
                return void 0;
              return obj[k2];
            }
            function getPathWithDefaults(data, defaultData, key2) {
              var value = getPath(data, key2);
              if (value !== void 0) {
                return value;
              }
              return getPath(defaultData, key2);
            }
            function deepExtend(target, source, overwrite) {
              for (var prop in source) {
                if (prop in target) {
                  if (typeof target[prop] === "string" || target[prop] instanceof String || typeof source[prop] === "string" || source[prop] instanceof String) {
                    if (overwrite)
                      target[prop] = source[prop];
                  } else {
                    deepExtend(target[prop], source[prop], overwrite);
                  }
                } else {
                  target[prop] = source[prop];
                }
              }
              return target;
            }
            function regexEscape(str) {
              return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
            }
            var _entityMap = {
              "&": "&amp;",
              "<": "&lt;",
              ">": "&gt;",
              '"': "&quot;",
              "'": "&#39;",
              "/": "&#x2F;"
            };
            function escape(data) {
              if (typeof data === "string") {
                return data.replace(/[&<>"'\/]/g, function(s) {
                  return _entityMap[s];
                });
              }
              return data;
            }
            var ResourceStore = function(_EventEmitter) {
              _inherits(ResourceStore2, _EventEmitter);
              function ResourceStore2(data) {
                var _this;
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                  ns: [
                    "translation"
                  ],
                  defaultNS: "translation"
                };
                _classCallCheck(this, ResourceStore2);
                _this = _possibleConstructorReturn(this, _getPrototypeOf(ResourceStore2).call(this));
                EventEmitter.call(_assertThisInitialized(_this));
                _this.data = data || {};
                _this.options = options;
                if (_this.options.keySeparator === void 0) {
                  _this.options.keySeparator = ".";
                }
                return _this;
              }
              _createClass(ResourceStore2, [
                {
                  key: "addNamespaces",
                  value: function addNamespaces(ns) {
                    if (this.options.ns.indexOf(ns) < 0) {
                      this.options.ns.push(ns);
                    }
                  }
                },
                {
                  key: "removeNamespaces",
                  value: function removeNamespaces(ns) {
                    var index = this.options.ns.indexOf(ns);
                    if (index > -1) {
                      this.options.ns.splice(index, 1);
                    }
                  }
                },
                {
                  key: "getResource",
                  value: function getResource(lng, ns, key2) {
                    var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
                    var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
                    var path = [
                      lng,
                      ns
                    ];
                    if (key2 && typeof key2 !== "string")
                      path = path.concat(key2);
                    if (key2 && typeof key2 === "string")
                      path = path.concat(keySeparator ? key2.split(keySeparator) : key2);
                    if (lng.indexOf(".") > -1) {
                      path = lng.split(".");
                    }
                    return getPath(this.data, path);
                  }
                },
                {
                  key: "addResource",
                  value: function addResource(lng, ns, key2, value) {
                    var options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
                      silent: false
                    };
                    var keySeparator = this.options.keySeparator;
                    if (keySeparator === void 0)
                      keySeparator = ".";
                    var path = [
                      lng,
                      ns
                    ];
                    if (key2)
                      path = path.concat(keySeparator ? key2.split(keySeparator) : key2);
                    if (lng.indexOf(".") > -1) {
                      path = lng.split(".");
                      value = ns;
                      ns = path[1];
                    }
                    this.addNamespaces(ns);
                    setPath(this.data, path, value);
                    if (!options.silent)
                      this.emit("added", lng, ns, key2, value);
                  }
                },
                {
                  key: "addResources",
                  value: function addResources(lng, ns, resources) {
                    var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
                      silent: false
                    };
                    for (var m in resources) {
                      if (typeof resources[m] === "string" || Object.prototype.toString.apply(resources[m]) === "[object Array]")
                        this.addResource(lng, ns, m, resources[m], {
                          silent: true
                        });
                    }
                    if (!options.silent)
                      this.emit("added", lng, ns, resources);
                  }
                },
                {
                  key: "addResourceBundle",
                  value: function addResourceBundle(lng, ns, resources, deep, overwrite) {
                    var options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
                      silent: false
                    };
                    var path = [
                      lng,
                      ns
                    ];
                    if (lng.indexOf(".") > -1) {
                      path = lng.split(".");
                      deep = resources;
                      resources = ns;
                      ns = path[1];
                    }
                    this.addNamespaces(ns);
                    var pack = getPath(this.data, path) || {};
                    if (deep) {
                      deepExtend(pack, resources, overwrite);
                    } else {
                      pack = _objectSpread({}, pack, resources);
                    }
                    setPath(this.data, path, pack);
                    if (!options.silent)
                      this.emit("added", lng, ns, resources);
                  }
                },
                {
                  key: "removeResourceBundle",
                  value: function removeResourceBundle(lng, ns) {
                    if (this.hasResourceBundle(lng, ns)) {
                      delete this.data[lng][ns];
                    }
                    this.removeNamespaces(ns);
                    this.emit("removed", lng, ns);
                  }
                },
                {
                  key: "hasResourceBundle",
                  value: function hasResourceBundle(lng, ns) {
                    return this.getResource(lng, ns) !== void 0;
                  }
                },
                {
                  key: "getResourceBundle",
                  value: function getResourceBundle(lng, ns) {
                    if (!ns)
                      ns = this.options.defaultNS;
                    if (this.options.compatibilityAPI === "v1")
                      return _objectSpread({}, {}, this.getResource(lng, ns));
                    return this.getResource(lng, ns);
                  }
                },
                {
                  key: "getDataByLanguage",
                  value: function getDataByLanguage(lng) {
                    return this.data[lng];
                  }
                },
                {
                  key: "toJSON",
                  value: function toJSON() {
                    return this.data;
                  }
                }
              ]);
              return ResourceStore2;
            }(EventEmitter);
            var postProcessor = {
              processors: {},
              addPostProcessor: function addPostProcessor(module3) {
                this.processors[module3.name] = module3;
              },
              handle: function handle(processors, value, key2, options, translator) {
                var _this = this;
                processors.forEach(function(processor) {
                  if (_this.processors[processor])
                    value = _this.processors[processor].process(value, key2, options, translator);
                });
                return value;
              }
            };
            var checkedLoadedFor = {};
            var Translator = function(_EventEmitter) {
              _inherits(Translator2, _EventEmitter);
              function Translator2(services) {
                var _this;
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                _classCallCheck(this, Translator2);
                _this = _possibleConstructorReturn(this, _getPrototypeOf(Translator2).call(this));
                EventEmitter.call(_assertThisInitialized(_this));
                copy([
                  "resourceStore",
                  "languageUtils",
                  "pluralResolver",
                  "interpolator",
                  "backendConnector",
                  "i18nFormat",
                  "utils"
                ], services, _assertThisInitialized(_this));
                _this.options = options;
                if (_this.options.keySeparator === void 0) {
                  _this.options.keySeparator = ".";
                }
                _this.logger = baseLogger.create("translator");
                return _this;
              }
              _createClass(Translator2, [
                {
                  key: "changeLanguage",
                  value: function changeLanguage(lng) {
                    if (lng)
                      this.language = lng;
                  }
                },
                {
                  key: "exists",
                  value: function exists(key2) {
                    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                      interpolation: {}
                    };
                    var resolved = this.resolve(key2, options);
                    return resolved && resolved.res !== void 0;
                  }
                },
                {
                  key: "extractFromKey",
                  value: function extractFromKey(key2, options) {
                    var nsSeparator = options.nsSeparator || this.options.nsSeparator;
                    if (nsSeparator === void 0)
                      nsSeparator = ":";
                    var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
                    var namespaces = options.ns || this.options.defaultNS;
                    if (nsSeparator && key2.indexOf(nsSeparator) > -1) {
                      var parts = key2.split(nsSeparator);
                      if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1)
                        namespaces = parts.shift();
                      key2 = parts.join(keySeparator);
                    }
                    if (typeof namespaces === "string")
                      namespaces = [
                        namespaces
                      ];
                    return {
                      key: key2,
                      namespaces
                    };
                  }
                },
                {
                  key: "translate",
                  value: function translate(keys, options) {
                    var _this2 = this;
                    if (_typeof3(options) !== "object" && this.options.overloadTranslationOptionHandler) {
                      options = this.options.overloadTranslationOptionHandler(arguments);
                    }
                    if (!options)
                      options = {};
                    if (keys === void 0 || keys === null)
                      return "";
                    if (!Array.isArray(keys))
                      keys = [
                        String(keys)
                      ];
                    var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
                    var _this$extractFromKey = this.extractFromKey(keys[keys.length - 1], options), key2 = _this$extractFromKey.key, namespaces = _this$extractFromKey.namespaces;
                    var namespace = namespaces[namespaces.length - 1];
                    var lng = options.lng || this.language;
                    var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
                    if (lng && lng.toLowerCase() === "cimode") {
                      if (appendNamespaceToCIMode) {
                        var nsSeparator = options.nsSeparator || this.options.nsSeparator;
                        return namespace + nsSeparator + key2;
                      }
                      return key2;
                    }
                    var resolved = this.resolve(keys, options);
                    var res = resolved && resolved.res;
                    var resUsedKey = resolved && resolved.usedKey || key2;
                    var resExactUsedKey = resolved && resolved.exactUsedKey || key2;
                    var resType = Object.prototype.toString.apply(res);
                    var noObject = [
                      "[object Number]",
                      "[object Function]",
                      "[object RegExp]"
                    ];
                    var joinArrays = options.joinArrays !== void 0 ? options.joinArrays : this.options.joinArrays;
                    var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
                    var handleAsObject = typeof res !== "string" && typeof res !== "boolean" && typeof res !== "number";
                    if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === "string" && resType === "[object Array]")) {
                      if (!options.returnObjects && !this.options.returnObjects) {
                        this.logger.warn("accessing an object - but returnObjects options is not enabled!");
                        return this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, options) : "key '".concat(key2, " (").concat(this.language, ")' returned an object instead of string.");
                      }
                      if (keySeparator) {
                        var resTypeIsArray = resType === "[object Array]";
                        var copy$$1 = resTypeIsArray ? [] : {};
                        var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
                        for (var m in res) {
                          if (Object.prototype.hasOwnProperty.call(res, m)) {
                            var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m);
                            copy$$1[m] = this.translate(deepKey, _objectSpread({}, options, {
                              joinArrays: false,
                              ns: namespaces
                            }));
                            if (copy$$1[m] === deepKey)
                              copy$$1[m] = res[m];
                          }
                        }
                        res = copy$$1;
                      }
                    } else if (handleAsObjectInI18nFormat && typeof joinArrays === "string" && resType === "[object Array]") {
                      res = res.join(joinArrays);
                      if (res)
                        res = this.extendTranslation(res, keys, options);
                    } else {
                      var usedDefault = false;
                      var usedKey = false;
                      if (!this.isValidLookup(res) && options.defaultValue !== void 0) {
                        usedDefault = true;
                        if (options.count !== void 0) {
                          var suffix = this.pluralResolver.getSuffix(lng, options.count);
                          res = options["defaultValue".concat(suffix)];
                        }
                        if (!res)
                          res = options.defaultValue;
                      }
                      if (!this.isValidLookup(res)) {
                        usedKey = true;
                        res = key2;
                      }
                      var updateMissing = options.defaultValue && options.defaultValue !== res && this.options.updateMissing;
                      if (usedKey || usedDefault || updateMissing) {
                        this.logger.log(updateMissing ? "updateKey" : "missingKey", lng, namespace, key2, updateMissing ? options.defaultValue : res);
                        var lngs = [];
                        var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
                        if (this.options.saveMissingTo === "fallback" && fallbackLngs && fallbackLngs[0]) {
                          for (var i2 = 0; i2 < fallbackLngs.length; i2++) {
                            lngs.push(fallbackLngs[i2]);
                          }
                        } else if (this.options.saveMissingTo === "all") {
                          lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
                        } else {
                          lngs.push(options.lng || this.language);
                        }
                        var send = function send2(l, k2) {
                          if (_this2.options.missingKeyHandler) {
                            _this2.options.missingKeyHandler(l, namespace, k2, updateMissing ? options.defaultValue : res, updateMissing, options);
                          } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
                            _this2.backendConnector.saveMissing(l, namespace, k2, updateMissing ? options.defaultValue : res, updateMissing, options);
                          }
                          _this2.emit("missingKey", l, namespace, k2, res);
                        };
                        if (this.options.saveMissing) {
                          var needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
                          if (this.options.saveMissingPlurals && needsPluralHandling) {
                            lngs.forEach(function(l) {
                              var plurals = _this2.pluralResolver.getPluralFormsOfKey(l, key2);
                              plurals.forEach(function(p) {
                                return send([l], p);
                              });
                            });
                          } else {
                            send(lngs, key2);
                          }
                        }
                      }
                      res = this.extendTranslation(res, keys, options, resolved);
                      if (usedKey && res === key2 && this.options.appendNamespaceToMissingKey)
                        res = "".concat(namespace, ":").concat(key2);
                      if (usedKey && this.options.parseMissingKeyHandler)
                        res = this.options.parseMissingKeyHandler(res);
                    }
                    return res;
                  }
                },
                {
                  key: "extendTranslation",
                  value: function extendTranslation(res, key2, options, resolved) {
                    var _this3 = this;
                    if (this.i18nFormat && this.i18nFormat.parse) {
                      res = this.i18nFormat.parse(res, options, resolved.usedLng, resolved.usedNS, resolved.usedKey, {
                        resolved
                      });
                    } else if (!options.skipInterpolation) {
                      if (options.interpolation)
                        this.interpolator.init(_objectSpread({}, options, {
                          interpolation: _objectSpread({}, this.options.interpolation, options.interpolation)
                        }));
                      var data = options.replace && typeof options.replace !== "string" ? options.replace : options;
                      if (this.options.interpolation.defaultVariables)
                        data = _objectSpread({}, this.options.interpolation.defaultVariables, data);
                      res = this.interpolator.interpolate(res, data, options.lng || this.language, options);
                      if (options.nest !== false)
                        res = this.interpolator.nest(res, function() {
                          return _this3.translate.apply(_this3, arguments);
                        }, options);
                      if (options.interpolation)
                        this.interpolator.reset();
                    }
                    var postProcess = options.postProcess || this.options.postProcess;
                    var postProcessorNames = typeof postProcess === "string" ? [
                      postProcess
                    ] : postProcess;
                    if (res !== void 0 && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
                      res = postProcessor.handle(postProcessorNames, res, key2, this.options && this.options.postProcessPassResolved ? _objectSpread({
                        i18nResolved: resolved
                      }, options) : options, this);
                    }
                    return res;
                  }
                },
                {
                  key: "resolve",
                  value: function resolve(keys) {
                    var _this4 = this;
                    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                    var found;
                    var usedKey;
                    var exactUsedKey;
                    var usedLng;
                    var usedNS;
                    if (typeof keys === "string")
                      keys = [
                        keys
                      ];
                    keys.forEach(function(k2) {
                      if (_this4.isValidLookup(found))
                        return;
                      var extracted = _this4.extractFromKey(k2, options);
                      var key2 = extracted.key;
                      usedKey = key2;
                      var namespaces = extracted.namespaces;
                      if (_this4.options.fallbackNS)
                        namespaces = namespaces.concat(_this4.options.fallbackNS);
                      var needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
                      var needsContextHandling = options.context !== void 0 && typeof options.context === "string" && options.context !== "";
                      var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);
                      namespaces.forEach(function(ns) {
                        if (_this4.isValidLookup(found))
                          return;
                        usedNS = ns;
                        if (!checkedLoadedFor["".concat(codes[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
                          checkedLoadedFor["".concat(codes[0], "-").concat(ns)] = true;
                          _this4.logger.warn('key "'.concat(usedKey, '" for namespace "').concat(usedNS, '" for languages "').concat(codes.join(", "), `" won't get resolved as namespace was not yet loaded`), "This means something IS WRONG in your application setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
                        }
                        codes.forEach(function(code) {
                          if (_this4.isValidLookup(found))
                            return;
                          usedLng = code;
                          var finalKey = key2;
                          var finalKeys = [
                            finalKey
                          ];
                          if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
                            _this4.i18nFormat.addLookupKeys(finalKeys, key2, code, ns, options);
                          } else {
                            var pluralSuffix;
                            if (needsPluralHandling)
                              pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count);
                            if (needsPluralHandling && needsContextHandling)
                              finalKeys.push(finalKey + pluralSuffix);
                            if (needsContextHandling)
                              finalKeys.push(finalKey += "".concat(_this4.options.contextSeparator).concat(options.context));
                            if (needsPluralHandling)
                              finalKeys.push(finalKey += pluralSuffix);
                          }
                          var possibleKey;
                          while (possibleKey = finalKeys.pop()) {
                            if (!_this4.isValidLookup(found)) {
                              exactUsedKey = possibleKey;
                              found = _this4.getResource(code, ns, possibleKey, options);
                            }
                          }
                        });
                      });
                    });
                    return {
                      res: found,
                      usedKey,
                      exactUsedKey,
                      usedLng,
                      usedNS
                    };
                  }
                },
                {
                  key: "isValidLookup",
                  value: function isValidLookup(res) {
                    return res !== void 0 && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === "");
                  }
                },
                {
                  key: "getResource",
                  value: function getResource(code, ns, key2) {
                    var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
                    if (this.i18nFormat && this.i18nFormat.getResource)
                      return this.i18nFormat.getResource(code, ns, key2, options);
                    return this.resourceStore.getResource(code, ns, key2, options);
                  }
                }
              ]);
              return Translator2;
            }(EventEmitter);
            function capitalize(string) {
              return string.charAt(0).toUpperCase() + string.slice(1);
            }
            var LanguageUtil = function() {
              function LanguageUtil2(options) {
                _classCallCheck(this, LanguageUtil2);
                this.options = options;
                this.whitelist = this.options.whitelist || false;
                this.logger = baseLogger.create("languageUtils");
              }
              _createClass(LanguageUtil2, [
                {
                  key: "getScriptPartFromCode",
                  value: function getScriptPartFromCode(code) {
                    if (!code || code.indexOf("-") < 0)
                      return null;
                    var p = code.split("-");
                    if (p.length === 2)
                      return null;
                    p.pop();
                    return this.formatLanguageCode(p.join("-"));
                  }
                },
                {
                  key: "getLanguagePartFromCode",
                  value: function getLanguagePartFromCode(code) {
                    if (!code || code.indexOf("-") < 0)
                      return code;
                    var p = code.split("-");
                    return this.formatLanguageCode(p[0]);
                  }
                },
                {
                  key: "formatLanguageCode",
                  value: function formatLanguageCode(code) {
                    if (typeof code === "string" && code.indexOf("-") > -1) {
                      var specialCases = [
                        "hans",
                        "hant",
                        "latn",
                        "cyrl",
                        "cans",
                        "mong",
                        "arab"
                      ];
                      var p = code.split("-");
                      if (this.options.lowerCaseLng) {
                        p = p.map(function(part) {
                          return part.toLowerCase();
                        });
                      } else if (p.length === 2) {
                        p[0] = p[0].toLowerCase();
                        p[1] = p[1].toUpperCase();
                        if (specialCases.indexOf(p[1].toLowerCase()) > -1)
                          p[1] = capitalize(p[1].toLowerCase());
                      } else if (p.length === 3) {
                        p[0] = p[0].toLowerCase();
                        if (p[1].length === 2)
                          p[1] = p[1].toUpperCase();
                        if (p[0] !== "sgn" && p[2].length === 2)
                          p[2] = p[2].toUpperCase();
                        if (specialCases.indexOf(p[1].toLowerCase()) > -1)
                          p[1] = capitalize(p[1].toLowerCase());
                        if (specialCases.indexOf(p[2].toLowerCase()) > -1)
                          p[2] = capitalize(p[2].toLowerCase());
                      }
                      return p.join("-");
                    }
                    return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
                  }
                },
                {
                  key: "isWhitelisted",
                  value: function isWhitelisted(code) {
                    if (this.options.load === "languageOnly" || this.options.nonExplicitWhitelist) {
                      code = this.getLanguagePartFromCode(code);
                    }
                    return !this.whitelist || !this.whitelist.length || this.whitelist.indexOf(code) > -1;
                  }
                },
                {
                  key: "getFallbackCodes",
                  value: function getFallbackCodes(fallbacks, code) {
                    if (!fallbacks)
                      return [];
                    if (typeof fallbacks === "string")
                      fallbacks = [
                        fallbacks
                      ];
                    if (Object.prototype.toString.apply(fallbacks) === "[object Array]")
                      return fallbacks;
                    if (!code)
                      return fallbacks["default"] || [];
                    var found = fallbacks[code];
                    if (!found)
                      found = fallbacks[this.getScriptPartFromCode(code)];
                    if (!found)
                      found = fallbacks[this.formatLanguageCode(code)];
                    if (!found)
                      found = fallbacks["default"];
                    return found || [];
                  }
                },
                {
                  key: "toResolveHierarchy",
                  value: function toResolveHierarchy(code, fallbackCode) {
                    var _this = this;
                    var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
                    var codes = [];
                    var addCode = function addCode2(c) {
                      if (!c)
                        return;
                      if (_this.isWhitelisted(c)) {
                        codes.push(c);
                      } else {
                        _this.logger.warn("rejecting non-whitelisted language code: ".concat(c));
                      }
                    };
                    if (typeof code === "string" && code.indexOf("-") > -1) {
                      if (this.options.load !== "languageOnly")
                        addCode(this.formatLanguageCode(code));
                      if (this.options.load !== "languageOnly" && this.options.load !== "currentOnly")
                        addCode(this.getScriptPartFromCode(code));
                      if (this.options.load !== "currentOnly")
                        addCode(this.getLanguagePartFromCode(code));
                    } else if (typeof code === "string") {
                      addCode(this.formatLanguageCode(code));
                    }
                    fallbackCodes.forEach(function(fc) {
                      if (codes.indexOf(fc) < 0)
                        addCode(_this.formatLanguageCode(fc));
                    });
                    return codes;
                  }
                }
              ]);
              return LanguageUtil2;
            }();
            var sets = [
              {
                lngs: [
                  "ach",
                  "ak",
                  "am",
                  "arn",
                  "br",
                  "fil",
                  "gun",
                  "ln",
                  "mfe",
                  "mg",
                  "mi",
                  "oc",
                  "pt",
                  "pt-BR",
                  "tg",
                  "ti",
                  "tr",
                  "uz",
                  "wa"
                ],
                nr: [
                  1,
                  2
                ],
                fc: 1
              },
              {
                lngs: [
                  "af",
                  "an",
                  "ast",
                  "az",
                  "bg",
                  "bn",
                  "ca",
                  "da",
                  "de",
                  "dev",
                  "el",
                  "en",
                  "eo",
                  "es",
                  "et",
                  "eu",
                  "fi",
                  "fo",
                  "fur",
                  "fy",
                  "gl",
                  "gu",
                  "ha",
                  "hi",
                  "hu",
                  "hy",
                  "ia",
                  "it",
                  "kn",
                  "ku",
                  "lb",
                  "mai",
                  "ml",
                  "mn",
                  "mr",
                  "nah",
                  "nap",
                  "nb",
                  "ne",
                  "nl",
                  "nn",
                  "no",
                  "nso",
                  "pa",
                  "pap",
                  "pms",
                  "ps",
                  "pt-PT",
                  "rm",
                  "sco",
                  "se",
                  "si",
                  "so",
                  "son",
                  "sq",
                  "sv",
                  "sw",
                  "ta",
                  "te",
                  "tk",
                  "ur",
                  "yo"
                ],
                nr: [
                  1,
                  2
                ],
                fc: 2
              },
              {
                lngs: [
                  "ay",
                  "bo",
                  "cgg",
                  "fa",
                  "id",
                  "ja",
                  "jbo",
                  "ka",
                  "kk",
                  "km",
                  "ko",
                  "ky",
                  "lo",
                  "ms",
                  "sah",
                  "su",
                  "th",
                  "tt",
                  "ug",
                  "vi",
                  "wo",
                  "zh"
                ],
                nr: [
                  1
                ],
                fc: 3
              },
              {
                lngs: [
                  "be",
                  "bs",
                  "cnr",
                  "dz",
                  "hr",
                  "ru",
                  "sr",
                  "uk"
                ],
                nr: [
                  1,
                  2,
                  5
                ],
                fc: 4
              },
              {
                lngs: [
                  "ar"
                ],
                nr: [
                  0,
                  1,
                  2,
                  3,
                  11,
                  100
                ],
                fc: 5
              },
              {
                lngs: [
                  "cs",
                  "sk"
                ],
                nr: [
                  1,
                  2,
                  5
                ],
                fc: 6
              },
              {
                lngs: [
                  "csb",
                  "pl"
                ],
                nr: [
                  1,
                  2,
                  5
                ],
                fc: 7
              },
              {
                lngs: [
                  "cy"
                ],
                nr: [
                  1,
                  2,
                  3,
                  8
                ],
                fc: 8
              },
              {
                lngs: [
                  "fr"
                ],
                nr: [
                  1,
                  2
                ],
                fc: 9
              },
              {
                lngs: [
                  "ga"
                ],
                nr: [
                  1,
                  2,
                  3,
                  7,
                  11
                ],
                fc: 10
              },
              {
                lngs: [
                  "gd"
                ],
                nr: [
                  1,
                  2,
                  3,
                  20
                ],
                fc: 11
              },
              {
                lngs: [
                  "is"
                ],
                nr: [
                  1,
                  2
                ],
                fc: 12
              },
              {
                lngs: [
                  "jv"
                ],
                nr: [
                  0,
                  1
                ],
                fc: 13
              },
              {
                lngs: [
                  "kw"
                ],
                nr: [
                  1,
                  2,
                  3,
                  4
                ],
                fc: 14
              },
              {
                lngs: [
                  "lt"
                ],
                nr: [
                  1,
                  2,
                  10
                ],
                fc: 15
              },
              {
                lngs: [
                  "lv"
                ],
                nr: [
                  1,
                  2,
                  0
                ],
                fc: 16
              },
              {
                lngs: [
                  "mk"
                ],
                nr: [
                  1,
                  2
                ],
                fc: 17
              },
              {
                lngs: [
                  "mnk"
                ],
                nr: [
                  0,
                  1,
                  2
                ],
                fc: 18
              },
              {
                lngs: [
                  "mt"
                ],
                nr: [
                  1,
                  2,
                  11,
                  20
                ],
                fc: 19
              },
              {
                lngs: [
                  "or"
                ],
                nr: [
                  2,
                  1
                ],
                fc: 2
              },
              {
                lngs: [
                  "ro"
                ],
                nr: [
                  1,
                  2,
                  20
                ],
                fc: 20
              },
              {
                lngs: [
                  "sl"
                ],
                nr: [
                  5,
                  1,
                  2,
                  3
                ],
                fc: 21
              },
              {
                lngs: [
                  "he"
                ],
                nr: [
                  1,
                  2,
                  20,
                  21
                ],
                fc: 22
              }
            ];
            var _rulesPluralsTypes = {
              1: function _(n) {
                return Number(n > 1);
              },
              2: function _(n) {
                return Number(n != 1);
              },
              3: function _(n) {
                return 0;
              },
              4: function _(n) {
                return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
              },
              5: function _(n) {
                return Number(n === 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
              },
              6: function _(n) {
                return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
              },
              7: function _(n) {
                return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
              },
              8: function _(n) {
                return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
              },
              9: function _(n) {
                return Number(n >= 2);
              },
              10: function _(n) {
                return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
              },
              11: function _(n) {
                return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
              },
              12: function _(n) {
                return Number(n % 10 != 1 || n % 100 == 11);
              },
              13: function _(n) {
                return Number(n !== 0);
              },
              14: function _(n) {
                return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
              },
              15: function _(n) {
                return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
              },
              16: function _(n) {
                return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
              },
              17: function _(n) {
                return Number(n == 1 || n % 10 == 1 ? 0 : 1);
              },
              18: function _(n) {
                return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
              },
              19: function _(n) {
                return Number(n == 1 ? 0 : n === 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
              },
              20: function _(n) {
                return Number(n == 1 ? 0 : n === 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
              },
              21: function _(n) {
                return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
              },
              22: function _(n) {
                return Number(n === 1 ? 0 : n === 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
              }
            };
            function createRules() {
              var rules = {};
              sets.forEach(function(set) {
                set.lngs.forEach(function(l) {
                  rules[l] = {
                    numbers: set.nr,
                    plurals: _rulesPluralsTypes[set.fc]
                  };
                });
              });
              return rules;
            }
            var PluralResolver = function() {
              function PluralResolver2(languageUtils) {
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                _classCallCheck(this, PluralResolver2);
                this.languageUtils = languageUtils;
                this.options = options;
                this.logger = baseLogger.create("pluralResolver");
                this.rules = createRules();
              }
              _createClass(PluralResolver2, [
                {
                  key: "addRule",
                  value: function addRule(lng, obj) {
                    this.rules[lng] = obj;
                  }
                },
                {
                  key: "getRule",
                  value: function getRule(code) {
                    return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
                  }
                },
                {
                  key: "needsPlural",
                  value: function needsPlural(code) {
                    var rule = this.getRule(code);
                    return rule && rule.numbers.length > 1;
                  }
                },
                {
                  key: "getPluralFormsOfKey",
                  value: function getPluralFormsOfKey(code, key2) {
                    var _this = this;
                    var ret = [];
                    var rule = this.getRule(code);
                    if (!rule)
                      return ret;
                    rule.numbers.forEach(function(n) {
                      var suffix = _this.getSuffix(code, n);
                      ret.push("".concat(key2).concat(suffix));
                    });
                    return ret;
                  }
                },
                {
                  key: "getSuffix",
                  value: function getSuffix(code, count) {
                    var _this2 = this;
                    var rule = this.getRule(code);
                    if (rule) {
                      var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
                      var suffix = rule.numbers[idx];
                      if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
                        if (suffix === 2) {
                          suffix = "plural";
                        } else if (suffix === 1) {
                          suffix = "";
                        }
                      }
                      var returnSuffix = function returnSuffix2() {
                        return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
                      };
                      if (this.options.compatibilityJSON === "v1") {
                        if (suffix === 1)
                          return "";
                        if (typeof suffix === "number")
                          return "_plural_".concat(suffix.toString());
                        return returnSuffix();
                      } else if (
                        /* v2 */
                        this.options.compatibilityJSON === "v2"
                      ) {
                        return returnSuffix();
                      } else if (
                        /* v3 - gettext index */
                        this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1
                      ) {
                        return returnSuffix();
                      }
                      return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
                    }
                    this.logger.warn("no plural rule found for: ".concat(code));
                    return "";
                  }
                }
              ]);
              return PluralResolver2;
            }();
            var Interpolator = function() {
              function Interpolator2() {
                var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                _classCallCheck(this, Interpolator2);
                this.logger = baseLogger.create("interpolator");
                this.options = options;
                this.format = options.interpolation && options.interpolation.format || function(value) {
                  return value;
                };
                this.init(options);
              }
              _createClass(Interpolator2, [
                {
                  key: "init",
                  value: function init() {
                    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                    if (!options.interpolation)
                      options.interpolation = {
                        escapeValue: true
                      };
                    var iOpts = options.interpolation;
                    this.escape = iOpts.escape !== void 0 ? iOpts.escape : escape;
                    this.escapeValue = iOpts.escapeValue !== void 0 ? iOpts.escapeValue : true;
                    this.useRawValueToEscape = iOpts.useRawValueToEscape !== void 0 ? iOpts.useRawValueToEscape : false;
                    this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || "{{";
                    this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || "}}";
                    this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
                    this.unescapePrefix = iOpts.unescapeSuffix ? "" : iOpts.unescapePrefix || "-";
                    this.unescapeSuffix = this.unescapePrefix ? "" : iOpts.unescapeSuffix || "";
                    this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape("$t(");
                    this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(")");
                    this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1e3;
                    this.resetRegExp();
                  }
                },
                {
                  key: "reset",
                  value: function reset() {
                    if (this.options)
                      this.init(this.options);
                  }
                },
                {
                  key: "resetRegExp",
                  value: function resetRegExp() {
                    var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
                    this.regexp = new RegExp(regexpStr, "g");
                    var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
                    this.regexpUnescape = new RegExp(regexpUnescapeStr, "g");
                    var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
                    this.nestingRegexp = new RegExp(nestingRegexpStr, "g");
                  }
                },
                {
                  key: "interpolate",
                  value: function interpolate(str, data, lng, options) {
                    var _this = this;
                    var match;
                    var value;
                    var replaces;
                    var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
                    function regexSafe(val) {
                      return val.replace(/\$/g, "$$$$");
                    }
                    var handleFormat = function handleFormat2(key2) {
                      if (key2.indexOf(_this.formatSeparator) < 0) {
                        return getPathWithDefaults(data, defaultData, key2);
                      }
                      var p = key2.split(_this.formatSeparator);
                      var k2 = p.shift().trim();
                      var f = p.join(_this.formatSeparator).trim();
                      return _this.format(getPathWithDefaults(data, defaultData, k2), f, lng);
                    };
                    this.resetRegExp();
                    var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
                    replaces = 0;
                    while (match = this.regexpUnescape.exec(str)) {
                      value = handleFormat(match[1].trim());
                      if (value === void 0) {
                        if (typeof missingInterpolationHandler === "function") {
                          var temp = missingInterpolationHandler(str, match, options);
                          value = typeof temp === "string" ? temp : "";
                        } else {
                          this.logger.warn("missed to pass in variable ".concat(match[1], " for interpolating ").concat(str));
                          value = "";
                        }
                      } else if (typeof value !== "string" && !this.useRawValueToEscape) {
                        value = makeString(value);
                      }
                      str = str.replace(match[0], regexSafe(value));
                      this.regexpUnescape.lastIndex = 0;
                      replaces++;
                      if (replaces >= this.maxReplaces) {
                        break;
                      }
                    }
                    replaces = 0;
                    while (match = this.regexp.exec(str)) {
                      value = handleFormat(match[1].trim());
                      if (value === void 0) {
                        if (typeof missingInterpolationHandler === "function") {
                          var _temp = missingInterpolationHandler(str, match, options);
                          value = typeof _temp === "string" ? _temp : "";
                        } else {
                          this.logger.warn("missed to pass in variable ".concat(match[1], " for interpolating ").concat(str));
                          value = "";
                        }
                      } else if (typeof value !== "string" && !this.useRawValueToEscape) {
                        value = makeString(value);
                      }
                      value = this.escapeValue ? regexSafe(this.escape(value)) : regexSafe(value);
                      str = str.replace(match[0], value);
                      this.regexp.lastIndex = 0;
                      replaces++;
                      if (replaces >= this.maxReplaces) {
                        break;
                      }
                    }
                    return str;
                  }
                },
                {
                  key: "nest",
                  value: function nest(str, fc) {
                    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                    var match;
                    var value;
                    var clonedOptions = _objectSpread({}, options);
                    clonedOptions.applyPostProcessor = false;
                    delete clonedOptions.defaultValue;
                    function handleHasOptions(key2, inheritedOptions) {
                      if (key2.indexOf(",") < 0)
                        return key2;
                      var p = key2.split(",");
                      key2 = p.shift();
                      var optionsString = p.join(",");
                      optionsString = this.interpolate(optionsString, clonedOptions);
                      optionsString = optionsString.replace(/'/g, '"');
                      try {
                        clonedOptions = JSON.parse(optionsString);
                        if (inheritedOptions)
                          clonedOptions = _objectSpread({}, inheritedOptions, clonedOptions);
                      } catch (e2) {
                        this.logger.error("failed parsing options string in nesting for key ".concat(key2), e2);
                      }
                      delete clonedOptions.defaultValue;
                      return key2;
                    }
                    while (match = this.nestingRegexp.exec(str)) {
                      value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
                      if (value && match[0] === str && typeof value !== "string")
                        return value;
                      if (typeof value !== "string")
                        value = makeString(value);
                      if (!value) {
                        this.logger.warn("missed to resolve ".concat(match[1], " for nesting ").concat(str));
                        value = "";
                      }
                      str = str.replace(match[0], value);
                      this.regexp.lastIndex = 0;
                    }
                    return str;
                  }
                }
              ]);
              return Interpolator2;
            }();
            function remove(arr, what) {
              var found = arr.indexOf(what);
              while (found !== -1) {
                arr.splice(found, 1);
                found = arr.indexOf(what);
              }
            }
            var Connector = function(_EventEmitter) {
              _inherits(Connector2, _EventEmitter);
              function Connector2(backend, store, services) {
                var _this;
                var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
                _classCallCheck(this, Connector2);
                _this = _possibleConstructorReturn(this, _getPrototypeOf(Connector2).call(this));
                EventEmitter.call(_assertThisInitialized(_this));
                _this.backend = backend;
                _this.store = store;
                _this.services = services;
                _this.languageUtils = services.languageUtils;
                _this.options = options;
                _this.logger = baseLogger.create("backendConnector");
                _this.state = {};
                _this.queue = [];
                if (_this.backend && _this.backend.init) {
                  _this.backend.init(services, options.backend, options);
                }
                return _this;
              }
              _createClass(Connector2, [
                {
                  key: "queueLoad",
                  value: function queueLoad(languages, namespaces, options, callback) {
                    var _this2 = this;
                    var toLoad = [];
                    var pending = [];
                    var toLoadLanguages = [];
                    var toLoadNamespaces = [];
                    languages.forEach(function(lng) {
                      var hasAllNamespaces = true;
                      namespaces.forEach(function(ns) {
                        var name = "".concat(lng, "|").concat(ns);
                        if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {
                          _this2.state[name] = 2;
                        } else if (_this2.state[name] < 0)
                          ;
                        else if (_this2.state[name] === 1) {
                          if (pending.indexOf(name) < 0)
                            pending.push(name);
                        } else {
                          _this2.state[name] = 1;
                          hasAllNamespaces = false;
                          if (pending.indexOf(name) < 0)
                            pending.push(name);
                          if (toLoad.indexOf(name) < 0)
                            toLoad.push(name);
                          if (toLoadNamespaces.indexOf(ns) < 0)
                            toLoadNamespaces.push(ns);
                        }
                      });
                      if (!hasAllNamespaces)
                        toLoadLanguages.push(lng);
                    });
                    if (toLoad.length || pending.length) {
                      this.queue.push({
                        pending,
                        loaded: {},
                        errors: [],
                        callback
                      });
                    }
                    return {
                      toLoad,
                      pending,
                      toLoadLanguages,
                      toLoadNamespaces
                    };
                  }
                },
                {
                  key: "loaded",
                  value: function loaded(name, err, data) {
                    var _name$split = name.split("|"), _name$split2 = _slicedToArray(_name$split, 2), lng = _name$split2[0], ns = _name$split2[1];
                    if (err)
                      this.emit("failedLoading", lng, ns, err);
                    if (data) {
                      this.store.addResourceBundle(lng, ns, data);
                    }
                    this.state[name] = err ? -1 : 2;
                    var loaded2 = {};
                    this.queue.forEach(function(q) {
                      pushPath(q.loaded, [
                        lng
                      ], ns);
                      remove(q.pending, name);
                      if (err)
                        q.errors.push(err);
                      if (q.pending.length === 0 && !q.done) {
                        Object.keys(q.loaded).forEach(function(l) {
                          if (!loaded2[l])
                            loaded2[l] = [];
                          if (q.loaded[l].length) {
                            q.loaded[l].forEach(function(ns2) {
                              if (loaded2[l].indexOf(ns2) < 0)
                                loaded2[l].push(ns2);
                            });
                          }
                        });
                        q.done = true;
                        if (q.errors.length) {
                          q.callback(q.errors);
                        } else {
                          q.callback();
                        }
                      }
                    });
                    this.emit("loaded", loaded2);
                    this.queue = this.queue.filter(function(q) {
                      return !q.done;
                    });
                  }
                },
                {
                  key: "read",
                  value: function read(lng, ns, fcName) {
                    var _this3 = this;
                    var tried = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
                    var wait = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 250;
                    var callback = arguments.length > 5 ? arguments[5] : void 0;
                    if (!lng.length)
                      return callback(null, {});
                    return this.backend[fcName](lng, ns, function(err, data) {
                      if (err && data && tried < 5) {
                        setTimeout(function() {
                          _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);
                        }, wait);
                        return;
                      }
                      callback(err, data);
                    });
                  }
                  /* eslint consistent-return: 0 */
                },
                {
                  key: "prepareLoading",
                  value: function prepareLoading(languages, namespaces) {
                    var _this4 = this;
                    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                    var callback = arguments.length > 3 ? arguments[3] : void 0;
                    if (!this.backend) {
                      this.logger.warn("No backend was added via i18next.use. Will not load resources.");
                      return callback && callback();
                    }
                    if (typeof languages === "string")
                      languages = this.languageUtils.toResolveHierarchy(languages);
                    if (typeof namespaces === "string")
                      namespaces = [
                        namespaces
                      ];
                    var toLoad = this.queueLoad(languages, namespaces, options, callback);
                    if (!toLoad.toLoad.length) {
                      if (!toLoad.pending.length)
                        callback();
                      return null;
                    }
                    toLoad.toLoad.forEach(function(name) {
                      _this4.loadOne(name);
                    });
                  }
                },
                {
                  key: "load",
                  value: function load(languages, namespaces, callback) {
                    this.prepareLoading(languages, namespaces, {}, callback);
                  }
                },
                {
                  key: "reload",
                  value: function reload(languages, namespaces, callback) {
                    this.prepareLoading(languages, namespaces, {
                      reload: true
                    }, callback);
                  }
                },
                {
                  key: "loadOne",
                  value: function loadOne(name) {
                    var _this5 = this;
                    var prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
                    var _name$split3 = name.split("|"), _name$split4 = _slicedToArray(_name$split3, 2), lng = _name$split4[0], ns = _name$split4[1];
                    this.read(lng, ns, "read", null, null, function(err, data) {
                      if (err)
                        _this5.logger.warn("".concat(prefix, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);
                      if (!err && data)
                        _this5.logger.log("".concat(prefix, "loaded namespace ").concat(ns, " for language ").concat(lng), data);
                      _this5.loaded(name, err, data);
                    });
                  }
                },
                {
                  key: "saveMissing",
                  value: function saveMissing(languages, namespace, key2, fallbackValue, isUpdate) {
                    var options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
                    if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
                      this.logger.warn('did not save key "'.concat(key2, '" for namespace "').concat(namespace, '" as the namespace was not yet loaded'), "This means something IS WRONG in your application setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
                      return;
                    }
                    if (key2 === void 0 || key2 === null || key2 === "")
                      return;
                    if (this.backend && this.backend.create) {
                      this.backend.create(
                        languages,
                        namespace,
                        key2,
                        fallbackValue,
                        null,
                        _objectSpread({}, options, {
                          isUpdate
                        })
                      );
                    }
                    if (!languages || !languages[0])
                      return;
                    this.store.addResource(languages[0], namespace, key2, fallbackValue);
                  }
                }
              ]);
              return Connector2;
            }(EventEmitter);
            function get() {
              return {
                debug: false,
                initImmediate: true,
                ns: [
                  "translation"
                ],
                defaultNS: [
                  "translation"
                ],
                fallbackLng: [
                  "dev"
                ],
                fallbackNS: false,
                // string or array of namespaces
                whitelist: false,
                // array with whitelisted languages
                nonExplicitWhitelist: false,
                load: "all",
                // | currentOnly | languageOnly
                preload: false,
                // array with preload languages
                simplifyPluralSuffix: true,
                keySeparator: ".",
                nsSeparator: ":",
                pluralSeparator: "_",
                contextSeparator: "_",
                partialBundledLanguages: false,
                // allow bundling certain languages that are not remotely fetched
                saveMissing: false,
                // enable to send missing values
                updateMissing: false,
                // enable to update default values if different from translated value (only useful on initial development, or when keeping code as source of truth)
                saveMissingTo: "fallback",
                // 'current' || 'all'
                saveMissingPlurals: true,
                // will save all forms not only singular key
                missingKeyHandler: false,
                // function(lng, ns, key, fallbackValue) -> override if prefer on handling
                missingInterpolationHandler: false,
                // function(str, match)
                postProcess: false,
                // string or array of postProcessor names
                postProcessPassResolved: false,
                // pass resolved object into 'options.i18nResolved' for postprocessor
                returnNull: true,
                // allows null value as valid translation
                returnEmptyString: true,
                // allows empty string value as valid translation
                returnObjects: false,
                joinArrays: false,
                // or string to join array
                returnedObjectHandler: false,
                // function(key, value, options) triggered if key returns object but returnObjects is set to false
                parseMissingKeyHandler: false,
                // function(key) parsed a key that was not found in t() before returning
                appendNamespaceToMissingKey: false,
                appendNamespaceToCIMode: false,
                overloadTranslationOptionHandler: function handle(args) {
                  var ret = {};
                  if (_typeof3(args[1]) === "object")
                    ret = args[1];
                  if (typeof args[1] === "string")
                    ret.defaultValue = args[1];
                  if (typeof args[2] === "string")
                    ret.tDescription = args[2];
                  if (_typeof3(args[2]) === "object" || _typeof3(args[3]) === "object") {
                    var options = args[3] || args[2];
                    Object.keys(options).forEach(function(key2) {
                      ret[key2] = options[key2];
                    });
                  }
                  return ret;
                },
                interpolation: {
                  escapeValue: true,
                  format: function format(value, _format, lng) {
                    return value;
                  },
                  prefix: "{{",
                  suffix: "}}",
                  formatSeparator: ",",
                  // prefixEscaped: '{{',
                  // suffixEscaped: '}}',
                  // unescapeSuffix: '',
                  unescapePrefix: "-",
                  nestingPrefix: "$t(",
                  nestingSuffix: ")",
                  // nestingPrefixEscaped: '$t(',
                  // nestingSuffixEscaped: ')',
                  // defaultVariables: undefined // object that can have values to interpolate on - extends passed in interpolation data
                  maxReplaces: 1e3
                  // max replaces to prevent endless loop
                }
              };
            }
            function transformOptions(options) {
              if (typeof options.ns === "string")
                options.ns = [
                  options.ns
                ];
              if (typeof options.fallbackLng === "string")
                options.fallbackLng = [
                  options.fallbackLng
                ];
              if (typeof options.fallbackNS === "string")
                options.fallbackNS = [
                  options.fallbackNS
                ];
              if (options.whitelist && options.whitelist.indexOf("cimode") < 0) {
                options.whitelist = options.whitelist.concat(["cimode"]);
              }
              return options;
            }
            function noop() {
            }
            var I18n = function(_EventEmitter) {
              _inherits(I18n2, _EventEmitter);
              function I18n2() {
                var _this;
                var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                var callback = arguments.length > 1 ? arguments[1] : void 0;
                _classCallCheck(this, I18n2);
                _this = _possibleConstructorReturn(this, _getPrototypeOf(I18n2).call(this));
                EventEmitter.call(_assertThisInitialized(_this));
                _this.options = transformOptions(options);
                _this.services = {};
                _this.logger = baseLogger;
                _this.modules = {
                  external: []
                };
                if (callback && !_this.isInitialized && !options.isClone) {
                  if (!_this.options.initImmediate) {
                    _this.init(options, callback);
                    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
                  }
                  setTimeout(function() {
                    _this.init(options, callback);
                  }, 0);
                }
                return _this;
              }
              _createClass(I18n2, [
                {
                  key: "init",
                  value: function init() {
                    var _this2 = this;
                    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                    var callback = arguments.length > 1 ? arguments[1] : void 0;
                    if (typeof options === "function") {
                      callback = options;
                      options = {};
                    }
                    this.options = _objectSpread({}, get(), this.options, transformOptions(options));
                    this.format = this.options.interpolation.format;
                    if (!callback)
                      callback = noop;
                    function createClassOnDemand(ClassOrObject) {
                      if (!ClassOrObject)
                        return null;
                      if (typeof ClassOrObject === "function")
                        return new ClassOrObject();
                      return ClassOrObject;
                    }
                    if (!this.options.isClone) {
                      if (this.modules.logger) {
                        baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
                      } else {
                        baseLogger.init(null, this.options);
                      }
                      var lu = new LanguageUtil(this.options);
                      this.store = new ResourceStore(this.options.resources, this.options);
                      var s = this.services;
                      s.logger = baseLogger;
                      s.resourceStore = this.store;
                      s.languageUtils = lu;
                      s.pluralResolver = new PluralResolver(lu, {
                        prepend: this.options.pluralSeparator,
                        compatibilityJSON: this.options.compatibilityJSON,
                        simplifyPluralSuffix: this.options.simplifyPluralSuffix
                      });
                      s.interpolator = new Interpolator(this.options);
                      s.utils = {
                        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
                      };
                      s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
                      s.backendConnector.on("*", function(event) {
                        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                          args[_key - 1] = arguments[_key];
                        }
                        _this2.emit.apply(_this2, [
                          event
                        ].concat(args));
                      });
                      if (this.modules.languageDetector) {
                        s.languageDetector = createClassOnDemand(this.modules.languageDetector);
                        s.languageDetector.init(s, this.options.detection, this.options);
                      }
                      if (this.modules.i18nFormat) {
                        s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
                        if (s.i18nFormat.init)
                          s.i18nFormat.init(this);
                      }
                      this.translator = new Translator(this.services, this.options);
                      this.translator.on("*", function(event) {
                        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                          args[_key2 - 1] = arguments[_key2];
                        }
                        _this2.emit.apply(_this2, [
                          event
                        ].concat(args));
                      });
                      this.modules.external.forEach(function(m) {
                        if (m.init)
                          m.init(_this2);
                      });
                    }
                    var storeApi = [
                      "getResource",
                      "addResource",
                      "addResources",
                      "addResourceBundle",
                      "removeResourceBundle",
                      "hasResourceBundle",
                      "getResourceBundle",
                      "getDataByLanguage"
                    ];
                    storeApi.forEach(function(fcName) {
                      _this2[fcName] = function() {
                        var _this2$store;
                        return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
                      };
                    });
                    var deferred = defer();
                    var load = function load2() {
                      _this2.changeLanguage(_this2.options.lng, function(err, t) {
                        _this2.isInitialized = true;
                        _this2.logger.log("initialized", _this2.options);
                        _this2.emit("initialized", _this2.options);
                        deferred.resolve(t);
                        callback(err, t);
                      });
                    };
                    if (this.options.resources || !this.options.initImmediate) {
                      load();
                    } else {
                      setTimeout(load, 0);
                    }
                    return deferred;
                  }
                  /* eslint consistent-return: 0 */
                },
                {
                  key: "loadResources",
                  value: function loadResources(language) {
                    var _this3 = this;
                    var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
                    var usedCallback = callback;
                    var usedLng = typeof language === "string" ? language : this.language;
                    if (typeof language === "function")
                      usedCallback = language;
                    if (!this.options.resources || this.options.partialBundledLanguages) {
                      if (usedLng && usedLng.toLowerCase() === "cimode")
                        return usedCallback();
                      var toLoad = [];
                      var append = function append2(lng) {
                        if (!lng)
                          return;
                        var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);
                        lngs.forEach(function(l) {
                          if (toLoad.indexOf(l) < 0)
                            toLoad.push(l);
                        });
                      };
                      if (!usedLng) {
                        var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
                        fallbacks.forEach(function(l) {
                          return append(l);
                        });
                      } else {
                        append(usedLng);
                      }
                      if (this.options.preload) {
                        this.options.preload.forEach(function(l) {
                          return append(l);
                        });
                      }
                      this.services.backendConnector.load(toLoad, this.options.ns, usedCallback);
                    } else {
                      usedCallback(null);
                    }
                  }
                },
                {
                  key: "reloadResources",
                  value: function reloadResources(lngs, ns, callback) {
                    var deferred = defer();
                    if (!lngs)
                      lngs = this.languages;
                    if (!ns)
                      ns = this.options.ns;
                    if (!callback)
                      callback = noop;
                    this.services.backendConnector.reload(lngs, ns, function(err) {
                      deferred.resolve();
                      callback(err);
                    });
                    return deferred;
                  }
                },
                {
                  key: "use",
                  value: function use(module3) {
                    if (module3.type === "backend") {
                      this.modules.backend = module3;
                    }
                    if (module3.type === "logger" || module3.log && module3.warn && module3.error) {
                      this.modules.logger = module3;
                    }
                    if (module3.type === "languageDetector") {
                      this.modules.languageDetector = module3;
                    }
                    if (module3.type === "i18nFormat") {
                      this.modules.i18nFormat = module3;
                    }
                    if (module3.type === "postProcessor") {
                      postProcessor.addPostProcessor(module3);
                    }
                    if (module3.type === "3rdParty") {
                      this.modules.external.push(module3);
                    }
                    return this;
                  }
                },
                {
                  key: "changeLanguage",
                  value: function changeLanguage(lng, callback) {
                    var _this4 = this;
                    this.isLanguageChangingTo = lng;
                    var deferred = defer();
                    this.emit("languageChanging", lng);
                    var done = function done2(err, l) {
                      if (l) {
                        _this4.language = l;
                        _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
                        _this4.translator.changeLanguage(l);
                        _this4.isLanguageChangingTo = void 0;
                        _this4.emit("languageChanged", l);
                        _this4.logger.log("languageChanged", l);
                      } else {
                        _this4.isLanguageChangingTo = void 0;
                      }
                      deferred.resolve(function() {
                        return _this4.t.apply(_this4, arguments);
                      });
                      if (callback)
                        callback(err, function() {
                          return _this4.t.apply(_this4, arguments);
                        });
                    };
                    var setLng = function setLng2(l) {
                      if (l) {
                        if (!_this4.language) {
                          _this4.language = l;
                          _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
                        }
                        if (!_this4.translator.language)
                          _this4.translator.changeLanguage(l);
                        if (_this4.services.languageDetector)
                          _this4.services.languageDetector.cacheUserLanguage(l);
                      }
                      _this4.loadResources(l, function(err) {
                        done(err, l);
                      });
                    };
                    if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
                      setLng(this.services.languageDetector.detect());
                    } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
                      this.services.languageDetector.detect(setLng);
                    } else {
                      setLng(lng);
                    }
                    return deferred;
                  }
                },
                {
                  key: "getFixedT",
                  value: function getFixedT(lng, ns) {
                    var _this5 = this;
                    var fixedT = function fixedT2(key2, opts) {
                      var options;
                      if (_typeof3(opts) !== "object") {
                        for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
                          rest[_key3 - 2] = arguments[_key3];
                        }
                        options = _this5.options.overloadTranslationOptionHandler([
                          key2,
                          opts
                        ].concat(rest));
                      } else {
                        options = _objectSpread({}, opts);
                      }
                      options.lng = options.lng || fixedT2.lng;
                      options.lngs = options.lngs || fixedT2.lngs;
                      options.ns = options.ns || fixedT2.ns;
                      return _this5.t(key2, options);
                    };
                    if (typeof lng === "string") {
                      fixedT.lng = lng;
                    } else {
                      fixedT.lngs = lng;
                    }
                    fixedT.ns = ns;
                    return fixedT;
                  }
                },
                {
                  key: "t",
                  value: function t() {
                    var _this$translator;
                    return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
                  }
                },
                {
                  key: "exists",
                  value: function exists() {
                    var _this$translator2;
                    return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
                  }
                },
                {
                  key: "setDefaultNamespace",
                  value: function setDefaultNamespace(ns) {
                    this.options.defaultNS = ns;
                  }
                },
                {
                  key: "hasLoadedNamespace",
                  value: function hasLoadedNamespace(ns) {
                    var _this6 = this;
                    if (!this.isInitialized) {
                      this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages);
                      return false;
                    }
                    if (!this.languages || !this.languages.length) {
                      this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages);
                      return false;
                    }
                    var lng = this.languages[0];
                    var fallbackLng = this.options ? this.options.fallbackLng : false;
                    var lastLng = this.languages[this.languages.length - 1];
                    if (lng.toLowerCase() === "cimode")
                      return true;
                    var loadNotPending = function loadNotPending2(l, n) {
                      var loadState = _this6.services.backendConnector.state["".concat(l, "|").concat(n)];
                      return loadState === -1 || loadState === 2;
                    };
                    if (this.hasResourceBundle(lng, ns))
                      return true;
                    if (!this.services.backendConnector.backend)
                      return true;
                    if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns)))
                      return true;
                    return false;
                  }
                },
                {
                  key: "loadNamespaces",
                  value: function loadNamespaces(ns, callback) {
                    var _this7 = this;
                    var deferred = defer();
                    if (!this.options.ns) {
                      callback && callback();
                      return Promise.resolve();
                    }
                    if (typeof ns === "string")
                      ns = [
                        ns
                      ];
                    ns.forEach(function(n) {
                      if (_this7.options.ns.indexOf(n) < 0)
                        _this7.options.ns.push(n);
                    });
                    this.loadResources(function(err) {
                      deferred.resolve();
                      if (callback)
                        callback(err);
                    });
                    return deferred;
                  }
                },
                {
                  key: "loadLanguages",
                  value: function loadLanguages(lngs, callback) {
                    var deferred = defer();
                    if (typeof lngs === "string")
                      lngs = [
                        lngs
                      ];
                    var preloaded = this.options.preload || [];
                    var newLngs = lngs.filter(function(lng) {
                      return preloaded.indexOf(lng) < 0;
                    });
                    if (!newLngs.length) {
                      if (callback)
                        callback();
                      return Promise.resolve();
                    }
                    this.options.preload = preloaded.concat(newLngs);
                    this.loadResources(function(err) {
                      deferred.resolve();
                      if (callback)
                        callback(err);
                    });
                    return deferred;
                  }
                },
                {
                  key: "dir",
                  value: function dir(lng) {
                    if (!lng)
                      lng = this.languages && this.languages.length > 0 ? this.languages[0] : this.language;
                    if (!lng)
                      return "rtl";
                    var rtlLngs = [
                      "ar",
                      "shu",
                      "sqr",
                      "ssh",
                      "xaa",
                      "yhd",
                      "yud",
                      "aao",
                      "abh",
                      "abv",
                      "acm",
                      "acq",
                      "acw",
                      "acx",
                      "acy",
                      "adf",
                      "ads",
                      "aeb",
                      "aec",
                      "afb",
                      "ajp",
                      "apc",
                      "apd",
                      "arb",
                      "arq",
                      "ars",
                      "ary",
                      "arz",
                      "auz",
                      "avl",
                      "ayh",
                      "ayl",
                      "ayn",
                      "ayp",
                      "bbz",
                      "pga",
                      "he",
                      "iw",
                      "ps",
                      "pbt",
                      "pbu",
                      "pst",
                      "prp",
                      "prd",
                      "ur",
                      "ydd",
                      "yds",
                      "yih",
                      "ji",
                      "yi",
                      "hbo",
                      "men",
                      "xmn",
                      "fa",
                      "jpr",
                      "peo",
                      "pes",
                      "prs",
                      "dv",
                      "sam"
                    ];
                    return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) >= 0 ? "rtl" : "ltr";
                  }
                  /* eslint class-methods-use-this: 0 */
                },
                {
                  key: "createInstance",
                  value: function createInstance() {
                    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                    var callback = arguments.length > 1 ? arguments[1] : void 0;
                    return new I18n2(options, callback);
                  }
                },
                {
                  key: "cloneInstance",
                  value: function cloneInstance() {
                    var _this8 = this;
                    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                    var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
                    var mergedOptions = _objectSpread({}, this.options, options, {
                      isClone: true
                    });
                    var clone = new I18n2(mergedOptions);
                    var membersToCopy = [
                      "store",
                      "services",
                      "language"
                    ];
                    membersToCopy.forEach(function(m) {
                      clone[m] = _this8[m];
                    });
                    clone.translator = new Translator(clone.services, clone.options);
                    clone.translator.on("*", function(event) {
                      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
                        args[_key4 - 1] = arguments[_key4];
                      }
                      clone.emit.apply(clone, [
                        event
                      ].concat(args));
                    });
                    clone.init(mergedOptions, callback);
                    clone.translator.options = clone.options;
                    return clone;
                  }
                }
              ]);
              return I18n2;
            }(EventEmitter);
            var i18next = new I18n();
            module2.exports = i18next;
          },
          {
            "@babel/runtime/helpers/assertThisInitialized": 4,
            "@babel/runtime/helpers/classCallCheck": 5,
            "@babel/runtime/helpers/createClass": 6,
            "@babel/runtime/helpers/getPrototypeOf": 8,
            "@babel/runtime/helpers/inherits": 9,
            "@babel/runtime/helpers/objectSpread": 14,
            "@babel/runtime/helpers/possibleConstructorReturn": 15,
            "@babel/runtime/helpers/slicedToArray": 17,
            "@babel/runtime/helpers/toConsumableArray": 18,
            "@babel/runtime/helpers/typeof": 19
          }
        ],
        260: [
          function(_dereq_2, module2, exports2) {
            exports2.read = function(buffer, offset, isLE, mLen, nBytes) {
              var e2, m;
              var eLen = nBytes * 8 - mLen - 1;
              var eMax = (1 << eLen) - 1;
              var eBias = eMax >> 1;
              var nBits = -7;
              var i2 = isLE ? nBytes - 1 : 0;
              var d = isLE ? -1 : 1;
              var s = buffer[offset + i2];
              i2 += d;
              e2 = s & (1 << -nBits) - 1;
              s >>= -nBits;
              nBits += eLen;
              for (; nBits > 0; e2 = e2 * 256 + buffer[offset + i2], i2 += d, nBits -= 8) {
              }
              m = e2 & (1 << -nBits) - 1;
              e2 >>= -nBits;
              nBits += mLen;
              for (; nBits > 0; m = m * 256 + buffer[offset + i2], i2 += d, nBits -= 8) {
              }
              if (e2 === 0) {
                e2 = 1 - eBias;
              } else if (e2 === eMax) {
                return m ? NaN : (s ? -1 : 1) * Infinity;
              } else {
                m = m + Math.pow(2, mLen);
                e2 = e2 - eBias;
              }
              return (s ? -1 : 1) * m * Math.pow(2, e2 - mLen);
            };
            exports2.write = function(buffer, value, offset, isLE, mLen, nBytes) {
              var e2, m, c;
              var eLen = nBytes * 8 - mLen - 1;
              var eMax = (1 << eLen) - 1;
              var eBias = eMax >> 1;
              var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
              var i2 = isLE ? 0 : nBytes - 1;
              var d = isLE ? 1 : -1;
              var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
              value = Math.abs(value);
              if (isNaN(value) || value === Infinity) {
                m = isNaN(value) ? 1 : 0;
                e2 = eMax;
              } else {
                e2 = Math.floor(Math.log(value) / Math.LN2);
                if (value * (c = Math.pow(2, -e2)) < 1) {
                  e2--;
                  c *= 2;
                }
                if (e2 + eBias >= 1) {
                  value += rt / c;
                } else {
                  value += rt * Math.pow(2, 1 - eBias);
                }
                if (value * c >= 2) {
                  e2++;
                  c /= 2;
                }
                if (e2 + eBias >= eMax) {
                  m = 0;
                  e2 = eMax;
                } else if (e2 + eBias >= 1) {
                  m = (value * c - 1) * Math.pow(2, mLen);
                  e2 = e2 + eBias;
                } else {
                  m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                  e2 = 0;
                }
              }
              for (; mLen >= 8; buffer[offset + i2] = m & 255, i2 += d, m /= 256, mLen -= 8) {
              }
              e2 = e2 << mLen | m;
              eLen += mLen;
              for (; eLen > 0; buffer[offset + i2] = e2 & 255, i2 += d, e2 /= 256, eLen -= 8) {
              }
              buffer[offset + i2 - d] |= s * 128;
            };
          },
          {}
        ],
        261: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var n;
            function t(a, b) {
              return a.b === b.b && a.a === b.a;
            }
            function u(a, b) {
              return a.b < b.b || a.b === b.b && a.a <= b.a;
            }
            function v(a, b, c) {
              var d = b.b - a.b, e2 = c.b - b.b;
              return 0 < d + e2 ? d < e2 ? b.a - a.a + d / (d + e2) * (a.a - c.a) : b.a - c.a + e2 / (d + e2) * (c.a - a.a) : 0;
            }
            function x(a, b, c) {
              var d = b.b - a.b, e2 = c.b - b.b;
              return 0 < d + e2 ? (b.a - c.a) * d + (b.a - a.a) * e2 : 0;
            }
            function z(a, b) {
              return a.a < b.a || a.a === b.a && a.b <= b.b;
            }
            function aa(a, b, c) {
              var d = b.a - a.a, e2 = c.a - b.a;
              return 0 < d + e2 ? d < e2 ? b.b - a.b + d / (d + e2) * (a.b - c.b) : b.b - c.b + e2 / (d + e2) * (c.b - a.b) : 0;
            }
            function ba(a, b, c) {
              var d = b.a - a.a, e2 = c.a - b.a;
              return 0 < d + e2 ? (b.b - c.b) * d + (b.b - a.b) * e2 : 0;
            }
            function ca(a) {
              return u(a.b.a, a.a);
            }
            function da(a) {
              return u(a.a, a.b.a);
            }
            function A(a, b, c, d) {
              a = 0 > a ? 0 : a;
              c = 0 > c ? 0 : c;
              return a <= c ? 0 === c ? (b + d) / 2 : b + a / (a + c) * (d - b) : d + c / (a + c) * (b - d);
            }
            ;
            function ea(a) {
              var b = B(a.b);
              C(b, a.c);
              C(b.b, a.c);
              D(b, a.a);
              return b;
            }
            function E(a, b) {
              var c = false, d = false;
              a !== b && (b.a !== a.a && (d = true, F(b.a, a.a)), b.d !== a.d && (c = true, G(b.d, a.d)), H(b, a), d || (C(b, a.a), a.a.c = a), c || (D(b, a.d), a.d.a = a));
            }
            function I(a) {
              var b = a.b, c = false;
              a.d !== a.b.d && (c = true, G(a.d, a.b.d));
              a.c === a ? F(a.a, null) : (a.b.d.a = J(a), a.a.c = a.c, H(a, J(a)), c || D(a, a.d));
              b.c === b ? (F(b.a, null), G(b.d, null)) : (a.d.a = J(b), b.a.c = b.c, H(b, J(b)));
              fa(a);
            }
            function K(a) {
              var b = B(a), c = b.b;
              H(b, a.e);
              b.a = a.b.a;
              C(c, b.a);
              b.d = c.d = a.d;
              b = b.b;
              H(a.b, J(a.b));
              H(a.b, b);
              a.b.a = b.a;
              b.b.a.c = b.b;
              b.b.d = a.b.d;
              b.f = a.f;
              b.b.f = a.b.f;
              return b;
            }
            function L(a, b) {
              var c = false, d = B(a), e2 = d.b;
              b.d !== a.d && (c = true, G(b.d, a.d));
              H(d, a.e);
              H(e2, b);
              d.a = a.b.a;
              e2.a = b.a;
              d.d = e2.d = a.d;
              a.d.a = e2;
              c || D(d, a.d);
              return d;
            }
            function B(a) {
              var b = new M(), c = new M(), d = a.b.h;
              c.h = d;
              d.b.h = b;
              b.h = a;
              a.b.h = c;
              b.b = c;
              b.c = b;
              b.e = c;
              c.b = b;
              c.c = c;
              return c.e = b;
            }
            function H(a, b) {
              var c = a.c, d = b.c;
              c.b.e = b;
              d.b.e = a;
              a.c = d;
              b.c = c;
            }
            function C(a, b) {
              var c = b.f, d = new N(b, c);
              c.e = d;
              b.f = d;
              c = d.c = a;
              do
                c.a = d, c = c.c;
              while (c !== a);
            }
            function D(a, b) {
              var c = b.d, d = new ga(b, c);
              c.b = d;
              b.d = d;
              d.a = a;
              d.c = b.c;
              c = a;
              do
                c.d = d, c = c.e;
              while (c !== a);
            }
            function fa(a) {
              var b = a.h;
              a = a.b.h;
              b.b.h = a;
              a.b.h = b;
            }
            function F(a, b) {
              var c = a.c, d = c;
              do
                d.a = b, d = d.c;
              while (d !== c);
              c = a.f;
              d = a.e;
              d.f = c;
              c.e = d;
            }
            function G(a, b) {
              var c = a.a, d = c;
              do
                d.d = b, d = d.e;
              while (d !== c);
              c = a.d;
              d = a.b;
              d.d = c;
              c.b = d;
            }
            ;
            function ha(a) {
              var b = 0;
              Math.abs(a[1]) > Math.abs(a[0]) && (b = 1);
              Math.abs(a[2]) > Math.abs(a[b]) && (b = 2);
              return b;
            }
            ;
            var O = 4 * 1e150;
            function P(a, b) {
              a.f += b.f;
              a.b.f += b.b.f;
            }
            function ia(a, b, c) {
              a = a.a;
              b = b.a;
              c = c.a;
              if (b.b.a === a)
                return c.b.a === a ? u(b.a, c.a) ? 0 >= x(c.b.a, b.a, c.a) : 0 <= x(b.b.a, c.a, b.a) : 0 >= x(c.b.a, a, c.a);
              if (c.b.a === a)
                return 0 <= x(b.b.a, a, b.a);
              b = v(b.b.a, a, b.a);
              a = v(c.b.a, a, c.a);
              return b >= a;
            }
            function Q(a) {
              a.a.i = null;
              var b = a.e;
              b.a.c = b.c;
              b.c.a = b.a;
              a.e = null;
            }
            function ja(a, b) {
              I(a.a);
              a.c = false;
              a.a = b;
              b.i = a;
            }
            function ka(a) {
              var b = a.a.a;
              do
                a = R(a);
              while (a.a.a === b);
              a.c && (b = L(S(a).a.b, a.a.e), ja(a, b), a = R(a));
              return a;
            }
            function la(a, b, c) {
              var d = new ma();
              d.a = c;
              d.e = na(a.f, b.e, d);
              return c.i = d;
            }
            function oa(a, b) {
              switch (a.s) {
                case 100130:
                  return 0 !== (b & 1);
                case 100131:
                  return 0 !== b;
                case 100132:
                  return 0 < b;
                case 100133:
                  return 0 > b;
                case 100134:
                  return 2 <= b || -2 >= b;
              }
              return false;
            }
            function pa(a) {
              var b = a.a, c = b.d;
              c.c = a.d;
              c.a = b;
              Q(a);
            }
            function T(a, b, c) {
              a = b;
              for (b = b.a; a !== c; ) {
                a.c = false;
                var d = S(a), e2 = d.a;
                if (e2.a !== b.a) {
                  if (!d.c) {
                    pa(a);
                    break;
                  }
                  e2 = L(b.c.b, e2.b);
                  ja(d, e2);
                }
                b.c !== e2 && (E(J(e2), e2), E(b, e2));
                pa(a);
                b = d.a;
                a = d;
              }
              return b;
            }
            function U(a, b, c, d, e2, f) {
              var g = true;
              do
                la(a, b, c.b), c = c.c;
              while (c !== d);
              for (null === e2 && (e2 = S(b).a.b.c); ; ) {
                d = S(b);
                c = d.a.b;
                if (c.a !== e2.a)
                  break;
                c.c !== e2 && (E(J(c), c), E(J(e2), c));
                d.f = b.f - c.f;
                d.d = oa(a, d.f);
                b.b = true;
                !g && qa(a, b) && (P(c, e2), Q(b), I(e2));
                g = false;
                b = d;
                e2 = c;
              }
              b.b = true;
              f && ra(a, b);
            }
            function sa(a, b, c, d, e2) {
              var f = [
                b.g[0],
                b.g[1],
                b.g[2]
              ];
              b.d = null;
              b.d = a.o ? a.o(f, c, d, a.c) || null : null;
              null === b.d && (e2 ? a.n || (V(a, 100156), a.n = true) : b.d = c[0]);
            }
            function ta(a, b, c) {
              var d = [
                null,
                null,
                null,
                null
              ];
              d[0] = b.a.d;
              d[1] = c.a.d;
              sa(a, b.a, d, [
                0.5,
                0.5,
                0,
                0
              ], false);
              E(b, c);
            }
            function ua(a, b, c, d, e2) {
              var f = Math.abs(b.b - a.b) + Math.abs(b.a - a.a), g = Math.abs(c.b - a.b) + Math.abs(c.a - a.a), h = e2 + 1;
              d[e2] = 0.5 * g / (f + g);
              d[h] = 0.5 * f / (f + g);
              a.g[0] += d[e2] * b.g[0] + d[h] * c.g[0];
              a.g[1] += d[e2] * b.g[1] + d[h] * c.g[1];
              a.g[2] += d[e2] * b.g[2] + d[h] * c.g[2];
            }
            function qa(a, b) {
              var c = S(b), d = b.a, e2 = c.a;
              if (u(d.a, e2.a)) {
                if (0 < x(e2.b.a, d.a, e2.a))
                  return false;
                if (!t(d.a, e2.a))
                  K(e2.b), E(d, J(e2)), b.b = c.b = true;
                else if (d.a !== e2.a) {
                  var c = a.e, f = d.a.h;
                  if (0 <= f) {
                    var c = c.b, g = c.d, h = c.e, k2 = c.c, l = k2[f];
                    g[l] = g[c.a];
                    k2[g[l]] = l;
                    l <= --c.a && (1 >= l ? W(c, l) : u(h[g[l >> 1]], h[g[l]]) ? W(c, l) : va(c, l));
                    h[f] = null;
                    k2[f] = c.b;
                    c.b = f;
                  } else
                    for (c.c[-(f + 1)] = null; 0 < c.a && null === c.c[c.d[c.a - 1]]; )
                      --c.a;
                  ta(a, J(e2), d);
                }
              } else {
                if (0 > x(d.b.a, e2.a, d.a))
                  return false;
                R(b).b = b.b = true;
                K(d.b);
                E(J(e2), d);
              }
              return true;
            }
            function wa(a, b) {
              var c = S(b), d = b.a, e2 = c.a, f = d.a, g = e2.a, h = d.b.a, k2 = e2.b.a, l = new N();
              x(h, a.a, f);
              x(k2, a.a, g);
              if (f === g || Math.min(f.a, h.a) > Math.max(g.a, k2.a))
                return false;
              if (u(f, g)) {
                if (0 < x(k2, f, g))
                  return false;
              } else if (0 > x(h, g, f))
                return false;
              var r = h, p = f, q = k2, y = g, m, w;
              u(r, p) || (m = r, r = p, p = m);
              u(q, y) || (m = q, q = y, y = m);
              u(r, q) || (m = r, r = q, q = m, m = p, p = y, y = m);
              u(q, p) ? u(p, y) ? (m = v(r, q, p), w = v(q, p, y), 0 > m + w && (m = -m, w = -w), l.b = A(m, q.b, w, p.b)) : (m = x(r, q, p), w = -x(r, y, p), 0 > m + w && (m = -m, w = -w), l.b = A(m, q.b, w, y.b)) : l.b = (q.b + p.b) / 2;
              z(r, p) || (m = r, r = p, p = m);
              z(q, y) || (m = q, q = y, y = m);
              z(r, q) || (m = r, r = q, q = m, m = p, p = y, y = m);
              z(q, p) ? z(p, y) ? (m = aa(r, q, p), w = aa(q, p, y), 0 > m + w && (m = -m, w = -w), l.a = A(m, q.a, w, p.a)) : (m = ba(r, q, p), w = -ba(r, y, p), 0 > m + w && (m = -m, w = -w), l.a = A(m, q.a, w, y.a)) : l.a = (q.a + p.a) / 2;
              u(l, a.a) && (l.b = a.a.b, l.a = a.a.a);
              r = u(f, g) ? f : g;
              u(r, l) && (l.b = r.b, l.a = r.a);
              if (t(l, f) || t(l, g))
                return qa(a, b), false;
              if (!t(h, a.a) && 0 <= x(h, a.a, l) || !t(k2, a.a) && 0 >= x(k2, a.a, l)) {
                if (k2 === a.a)
                  return K(d.b), E(e2.b, d), b = ka(b), d = S(b).a, T(a, S(b), c), U(a, b, J(d), d, d, true), true;
                if (h === a.a) {
                  K(e2.b);
                  E(d.e, J(e2));
                  f = c = b;
                  g = f.a.b.a;
                  do
                    f = R(f);
                  while (f.a.b.a === g);
                  b = f;
                  f = S(b).a.b.c;
                  c.a = J(e2);
                  e2 = T(a, c, null);
                  U(a, b, e2.c, d.b.c, f, true);
                  return true;
                }
                0 <= x(h, a.a, l) && (R(b).b = b.b = true, K(d.b), d.a.b = a.a.b, d.a.a = a.a.a);
                0 >= x(k2, a.a, l) && (b.b = c.b = true, K(e2.b), e2.a.b = a.a.b, e2.a.a = a.a.a);
                return false;
              }
              K(d.b);
              K(e2.b);
              E(J(e2), d);
              d.a.b = l.b;
              d.a.a = l.a;
              d.a.h = xa(a.e, d.a);
              d = d.a;
              e2 = [
                0,
                0,
                0,
                0
              ];
              l = [
                f.d,
                h.d,
                g.d,
                k2.d
              ];
              d.g[0] = d.g[1] = d.g[2] = 0;
              ua(d, f, h, e2, 0);
              ua(d, g, k2, e2, 2);
              sa(a, d, l, e2, true);
              R(b).b = b.b = c.b = true;
              return false;
            }
            function ra(a, b) {
              for (var c = S(b); ; ) {
                for (; c.b; )
                  b = c, c = S(c);
                if (!b.b && (c = b, b = R(b), null === b || !b.b))
                  break;
                b.b = false;
                var d = b.a, e2 = c.a, f;
                if (f = d.b.a !== e2.b.a)
                  a: {
                    f = b;
                    var g = S(f), h = f.a, k2 = g.a, l = void 0;
                    if (u(h.b.a, k2.b.a)) {
                      if (0 > x(h.b.a, k2.b.a, h.a)) {
                        f = false;
                        break a;
                      }
                      R(f).b = f.b = true;
                      l = K(h);
                      E(k2.b, l);
                      l.d.c = f.d;
                    } else {
                      if (0 < x(k2.b.a, h.b.a, k2.a)) {
                        f = false;
                        break a;
                      }
                      f.b = g.b = true;
                      l = K(k2);
                      E(h.e, k2.b);
                      l.b.d.c = f.d;
                    }
                    f = true;
                  }
                f && (c.c ? (Q(c), I(e2), c = S(b), e2 = c.a) : b.c && (Q(b), I(d), b = R(c), d = b.a));
                if (d.a !== e2.a) {
                  if (d.b.a === e2.b.a || b.c || c.c || d.b.a !== a.a && e2.b.a !== a.a)
                    qa(a, b);
                  else if (wa(a, b))
                    break;
                }
                d.a === e2.a && d.b.a === e2.b.a && (P(e2, d), Q(b), I(d), b = R(c));
              }
            }
            function ya(a, b) {
              a.a = b;
              for (var c = b.c; null === c.i; )
                if (c = c.c, c === b.c) {
                  var c = a, d = b, e2 = new ma();
                  e2.a = d.c.b;
                  var f = c.f, g = f.a;
                  do
                    g = g.a;
                  while (null !== g.b && !f.c(f.b, e2, g.b));
                  var f = g.b, h = S(f), e2 = f.a, g = h.a;
                  if (0 === x(e2.b.a, d, e2.a))
                    e2 = f.a, t(e2.a, d) || t(e2.b.a, d) || (K(e2.b), f.c && (I(e2.c), f.c = false), E(d.c, e2), ya(c, d));
                  else {
                    var k2 = u(g.b.a, e2.b.a) ? f : h, h = void 0;
                    f.d || k2.c ? (k2 === f ? h = L(d.c.b, e2.e) : h = L(g.b.c.b, d.c).b, k2.c ? ja(k2, h) : (e2 = c, f = la(c, f, h), f.f = R(f).f + f.a.f, f.d = oa(e2, f.f)), ya(c, d)) : U(c, f, d.c, d.c, null, true);
                  }
                  return;
                }
              c = ka(c.i);
              e2 = S(c);
              f = e2.a;
              e2 = T(a, e2, null);
              if (e2.c === f) {
                var f = e2, e2 = f.c, g = S(c), h = c.a, k2 = g.a, l = false;
                h.b.a !== k2.b.a && wa(a, c);
                t(h.a, a.a) && (E(J(e2), h), c = ka(c), e2 = S(c).a, T(a, S(c), g), l = true);
                t(k2.a, a.a) && (E(f, J(k2)), f = T(a, g, null), l = true);
                l ? U(a, c, f.c, e2, e2, true) : (u(k2.a, h.a) ? d = J(k2) : d = h, d = L(f.c.b, d), U(a, c, d, d.c, d.c, false), d.b.i.c = true, ra(a, c));
              } else
                U(a, c, e2.c, f, f, true);
            }
            function za(a, b) {
              var c = new ma(), d = ea(a.b);
              d.a.b = O;
              d.a.a = b;
              d.b.a.b = -O;
              d.b.a.a = b;
              a.a = d.b.a;
              c.a = d;
              c.f = 0;
              c.d = false;
              c.c = false;
              c.h = true;
              c.b = false;
              d = a.f;
              d = na(d, d.a, c);
              c.e = d;
            }
            ;
            function Aa(a) {
              this.a = new Ba();
              this.b = a;
              this.c = ia;
            }
            function na(a, b, c) {
              do
                b = b.c;
              while (null !== b.b && !a.c(a.b, b.b, c));
              a = new Ba(c, b.a, b);
              b.a.c = a;
              return b.a = a;
            }
            ;
            function Ba(a, b, c) {
              this.b = a || null;
              this.a = b || this;
              this.c = c || this;
            }
            ;
            function X() {
              this.d = Y;
              this.p = this.b = this.q = null;
              this.j = [
                0,
                0,
                0
              ];
              this.s = 100130;
              this.n = false;
              this.o = this.a = this.e = this.f = null;
              this.m = false;
              this.c = this.r = this.i = this.k = this.l = this.h = null;
            }
            var Y = 0;
            n = X.prototype;
            n.x = function() {
              Z(this, Y);
            };
            n.B = function(a, b) {
              switch (a) {
                case 100142:
                  return;
                case 100140:
                  switch (b) {
                    case 100130:
                    case 100131:
                    case 100132:
                    case 100133:
                    case 100134:
                      this.s = b;
                      return;
                  }
                  break;
                case 100141:
                  this.m = !!b;
                  return;
                default:
                  V(this, 100900);
                  return;
              }
              V(this, 100901);
            };
            n.y = function(a) {
              switch (a) {
                case 100142:
                  return 0;
                case 100140:
                  return this.s;
                case 100141:
                  return this.m;
                default:
                  V(this, 100900);
              }
              return false;
            };
            n.A = function(a, b, c) {
              this.j[0] = a;
              this.j[1] = b;
              this.j[2] = c;
            };
            n.z = function(a, b) {
              var c = b ? b : null;
              switch (a) {
                case 100100:
                case 100106:
                  this.h = c;
                  break;
                case 100104:
                case 100110:
                  this.l = c;
                  break;
                case 100101:
                case 100107:
                  this.k = c;
                  break;
                case 100102:
                case 100108:
                  this.i = c;
                  break;
                case 100103:
                case 100109:
                  this.p = c;
                  break;
                case 100105:
                case 100111:
                  this.o = c;
                  break;
                case 100112:
                  this.r = c;
                  break;
                default:
                  V(this, 100900);
              }
            };
            n.C = function(a, b) {
              var c = false, d = [
                0,
                0,
                0
              ];
              Z(this, 2);
              for (var e2 = 0; 3 > e2; ++e2) {
                var f = a[e2];
                -1e150 > f && (f = -1e150, c = true);
                1e150 < f && (f = 1e150, c = true);
                d[e2] = f;
              }
              c && V(this, 100155);
              c = this.q;
              null === c ? (c = ea(this.b), E(c, c.b)) : (K(c), c = c.e);
              c.a.d = b;
              c.a.g[0] = d[0];
              c.a.g[1] = d[1];
              c.a.g[2] = d[2];
              c.f = 1;
              c.b.f = -1;
              this.q = c;
            };
            n.u = function(a) {
              Z(this, Y);
              this.d = 1;
              this.b = new Ca();
              this.c = a;
            };
            n.t = function() {
              Z(this, 1);
              this.d = 2;
              this.q = null;
            };
            n.v = function() {
              Z(this, 2);
              this.d = 1;
            };
            n.w = function() {
              Z(this, 1);
              this.d = Y;
              var a = this.j[0], b = this.j[1], c = this.j[2], d = false, e2 = [
                a,
                b,
                c
              ];
              if (0 === a && 0 === b && 0 === c) {
                for (var b = [
                  -2 * 1e150,
                  -2 * 1e150,
                  -2 * 1e150
                ], f = [
                  2 * 1e150,
                  2 * 1e150,
                  2 * 1e150
                ], c = [], g = [], d = this.b.c, a = d.e; a !== d; a = a.e)
                  for (var h = 0; 3 > h; ++h) {
                    var k2 = a.g[h];
                    k2 < f[h] && (f[h] = k2, g[h] = a);
                    k2 > b[h] && (b[h] = k2, c[h] = a);
                  }
                a = 0;
                b[1] - f[1] > b[0] - f[0] && (a = 1);
                b[2] - f[2] > b[a] - f[a] && (a = 2);
                if (f[a] >= b[a])
                  e2[0] = 0, e2[1] = 0, e2[2] = 1;
                else {
                  b = 0;
                  f = g[a];
                  c = c[a];
                  g = [
                    0,
                    0,
                    0
                  ];
                  f = [
                    f.g[0] - c.g[0],
                    f.g[1] - c.g[1],
                    f.g[2] - c.g[2]
                  ];
                  h = [
                    0,
                    0,
                    0
                  ];
                  for (a = d.e; a !== d; a = a.e)
                    h[0] = a.g[0] - c.g[0], h[1] = a.g[1] - c.g[1], h[2] = a.g[2] - c.g[2], g[0] = f[1] * h[2] - f[2] * h[1], g[1] = f[2] * h[0] - f[0] * h[2], g[2] = f[0] * h[1] - f[1] * h[0], k2 = g[0] * g[0] + g[1] * g[1] + g[2] * g[2], k2 > b && (b = k2, e2[0] = g[0], e2[1] = g[1], e2[2] = g[2]);
                  0 >= b && (e2[0] = e2[1] = e2[2] = 0, e2[ha(f)] = 1);
                }
                d = true;
              }
              g = ha(e2);
              a = this.b.c;
              b = (g + 1) % 3;
              c = (g + 2) % 3;
              g = 0 < e2[g] ? 1 : -1;
              for (e2 = a.e; e2 !== a; e2 = e2.e)
                e2.b = e2.g[b], e2.a = g * e2.g[c];
              if (d) {
                e2 = 0;
                d = this.b.a;
                for (a = d.b; a !== d; a = a.b)
                  if (b = a.a, !(0 >= b.f)) {
                    do
                      e2 += (b.a.b - b.b.a.b) * (b.a.a + b.b.a.a), b = b.e;
                    while (b !== a.a);
                  }
                if (0 > e2)
                  for (e2 = this.b.c, d = e2.e; d !== e2; d = d.e)
                    d.a = -d.a;
              }
              this.n = false;
              e2 = this.b.b;
              for (a = e2.h; a !== e2; a = d)
                if (d = a.h, b = a.e, t(a.a, a.b.a) && a.e.e !== a && (ta(this, b, a), I(a), a = b, b = a.e), b.e === a) {
                  if (b !== a) {
                    if (b === d || b === d.b)
                      d = d.h;
                    I(b);
                  }
                  if (a === d || a === d.b)
                    d = d.h;
                  I(a);
                }
              this.e = e2 = new Da();
              d = this.b.c;
              for (a = d.e; a !== d; a = a.e)
                a.h = xa(e2, a);
              Ea(e2);
              this.f = new Aa(this);
              za(this, -O);
              for (za(this, O); null !== (e2 = Fa(this.e)); ) {
                for (; ; ) {
                  a:
                    if (a = this.e, 0 === a.a)
                      d = Ga(a.b);
                    else if (d = a.c[a.d[a.a - 1]], 0 !== a.b.a && (a = Ga(a.b), u(a, d))) {
                      d = a;
                      break a;
                    }
                  if (null === d || !t(d, e2))
                    break;
                  d = Fa(this.e);
                  ta(this, e2.c, d.c);
                }
                ya(this, e2);
              }
              this.a = this.f.a.a.b.a.a;
              for (e2 = 0; null !== (d = this.f.a.a.b); )
                d.h || ++e2, Q(d);
              this.f = null;
              e2 = this.e;
              e2.b = null;
              e2.d = null;
              this.e = e2.c = null;
              e2 = this.b;
              for (a = e2.a.b; a !== e2.a; a = d)
                d = a.b, a = a.a, a.e.e === a && (P(a.c, a), I(a));
              if (!this.n) {
                e2 = this.b;
                if (this.m)
                  for (a = e2.b.h; a !== e2.b; a = d)
                    d = a.h, a.b.d.c !== a.d.c ? a.f = a.d.c ? 1 : -1 : I(a);
                else
                  for (a = e2.a.b; a !== e2.a; a = d)
                    if (d = a.b, a.c) {
                      for (a = a.a; u(a.b.a, a.a); a = a.c.b)
                        ;
                      for (; u(a.a, a.b.a); a = a.e)
                        ;
                      b = a.c.b;
                      for (c = void 0; a.e !== b; )
                        if (u(a.b.a, b.a)) {
                          for (; b.e !== a && (ca(b.e) || 0 >= x(b.a, b.b.a, b.e.b.a)); )
                            c = L(b.e, b), b = c.b;
                          b = b.c.b;
                        } else {
                          for (; b.e !== a && (da(a.c.b) || 0 <= x(a.b.a, a.a, a.c.b.a)); )
                            c = L(a, a.c.b), a = c.b;
                          a = a.e;
                        }
                      for (; b.e.e !== a; )
                        c = L(b.e, b), b = c.b;
                    }
                if (this.h || this.i || this.k || this.l)
                  if (this.m)
                    for (e2 = this.b, d = e2.a.b; d !== e2.a; d = d.b) {
                      if (d.c) {
                        this.h && this.h(2, this.c);
                        a = d.a;
                        do
                          this.k && this.k(a.a.d, this.c), a = a.e;
                        while (a !== d.a);
                        this.i && this.i(this.c);
                      }
                    }
                  else {
                    e2 = this.b;
                    d = !!this.l;
                    a = false;
                    b = -1;
                    for (c = e2.a.d; c !== e2.a; c = c.d)
                      if (c.c) {
                        a || (this.h && this.h(4, this.c), a = true);
                        g = c.a;
                        do
                          d && (f = g.b.d.c ? 0 : 1, b !== f && (b = f, this.l && this.l(!!b, this.c))), this.k && this.k(g.a.d, this.c), g = g.e;
                        while (g !== c.a);
                      }
                    a && this.i && this.i(this.c);
                  }
                if (this.r) {
                  e2 = this.b;
                  for (a = e2.a.b; a !== e2.a; a = d)
                    if (d = a.b, !a.c) {
                      b = a.a;
                      c = b.e;
                      g = void 0;
                      do
                        g = c, c = g.e, g.d = null, null === g.b.d && (g.c === g ? F(g.a, null) : (g.a.c = g.c, H(g, J(g))), f = g.b, f.c === f ? F(f.a, null) : (f.a.c = f.c, H(f, J(f))), fa(g));
                      while (g !== b);
                      b = a.d;
                      a = a.b;
                      a.d = b;
                      b.b = a;
                    }
                  this.r(this.b);
                  this.c = this.b = null;
                  return;
                }
              }
              this.b = this.c = null;
            };
            function Z(a, b) {
              if (a.d !== b)
                for (; a.d !== b; )
                  if (a.d < b)
                    switch (a.d) {
                      case Y:
                        V(a, 100151);
                        a.u(null);
                        break;
                      case 1:
                        V(a, 100152), a.t();
                    }
                  else
                    switch (a.d) {
                      case 2:
                        V(a, 100154);
                        a.v();
                        break;
                      case 1:
                        V(a, 100153), a.w();
                    }
            }
            function V(a, b) {
              a.p && a.p(b, a.c);
            }
            ;
            function ga(a, b) {
              this.b = a || this;
              this.d = b || this;
              this.a = null;
              this.c = false;
            }
            ;
            function M() {
              this.h = this;
              this.i = this.d = this.a = this.e = this.c = this.b = null;
              this.f = 0;
            }
            function J(a) {
              return a.b.e;
            }
            ;
            function Ca() {
              this.c = new N();
              this.a = new ga();
              this.b = new M();
              this.d = new M();
              this.b.b = this.d;
              this.d.b = this.b;
            }
            ;
            function N(a, b) {
              this.e = a || this;
              this.f = b || this;
              this.d = this.c = null;
              this.g = [
                0,
                0,
                0
              ];
              this.h = this.a = this.b = 0;
            }
            ;
            function Da() {
              this.c = [];
              this.d = null;
              this.a = 0;
              this.e = false;
              this.b = new Ha();
            }
            function Ea(a) {
              a.d = [];
              for (var b = 0; b < a.a; b++)
                a.d[b] = b;
              a.d.sort(function(a2) {
                return function(b2, e2) {
                  return u(a2[b2], a2[e2]) ? 1 : -1;
                };
              }(a.c));
              a.e = true;
              Ia(a.b);
            }
            function xa(a, b) {
              if (a.e) {
                var c = a.b, d = ++c.a;
                2 * d > c.f && (c.f *= 2, c.c = Ja(c.c, c.f + 1));
                var e2;
                0 === c.b ? e2 = d : (e2 = c.b, c.b = c.c[c.b]);
                c.e[e2] = b;
                c.c[e2] = d;
                c.d[d] = e2;
                c.h && va(c, d);
                return e2;
              }
              c = a.a++;
              a.c[c] = b;
              return -(c + 1);
            }
            function Fa(a) {
              if (0 === a.a)
                return Ka(a.b);
              var b = a.c[a.d[a.a - 1]];
              if (0 !== a.b.a && u(Ga(a.b), b))
                return Ka(a.b);
              do
                --a.a;
              while (0 < a.a && null === a.c[a.d[a.a - 1]]);
              return b;
            }
            ;
            function Ha() {
              this.d = Ja([0], 33);
              this.e = [
                null,
                null
              ];
              this.c = [
                0,
                0
              ];
              this.a = 0;
              this.f = 32;
              this.b = 0;
              this.h = false;
              this.d[1] = 1;
            }
            function Ja(a, b) {
              for (var c = Array(b), d = 0; d < a.length; d++)
                c[d] = a[d];
              for (; d < b; d++)
                c[d] = 0;
              return c;
            }
            function Ia(a) {
              for (var b = a.a; 1 <= b; --b)
                W(a, b);
              a.h = true;
            }
            function Ga(a) {
              return a.e[a.d[1]];
            }
            function Ka(a) {
              var b = a.d, c = a.e, d = a.c, e2 = b[1], f = c[e2];
              0 < a.a && (b[1] = b[a.a], d[b[1]] = 1, c[e2] = null, d[e2] = a.b, a.b = e2, 0 < --a.a && W(a, 1));
              return f;
            }
            function W(a, b) {
              for (var c = a.d, d = a.e, e2 = a.c, f = b, g = c[f]; ; ) {
                var h = f << 1;
                h < a.a && u(d[c[h + 1]], d[c[h]]) && (h += 1);
                var k2 = c[h];
                if (h > a.a || u(d[g], d[k2])) {
                  c[f] = g;
                  e2[g] = f;
                  break;
                }
                c[f] = k2;
                e2[k2] = f;
                f = h;
              }
            }
            function va(a, b) {
              for (var c = a.d, d = a.e, e2 = a.c, f = b, g = c[f]; ; ) {
                var h = f >> 1, k2 = c[h];
                if (0 === h || u(d[k2], d[g])) {
                  c[f] = g;
                  e2[g] = f;
                  break;
                }
                c[f] = k2;
                e2[k2] = f;
                f = h;
              }
            }
            ;
            function ma() {
              this.e = this.a = null;
              this.f = 0;
              this.c = this.b = this.h = this.d = false;
            }
            function S(a) {
              return a.e.c.b;
            }
            function R(a) {
              return a.e.a.b;
            }
            ;
            this.libtess = {
              GluTesselator: X,
              windingRule: {
                GLU_TESS_WINDING_ODD: 100130,
                GLU_TESS_WINDING_NONZERO: 100131,
                GLU_TESS_WINDING_POSITIVE: 100132,
                GLU_TESS_WINDING_NEGATIVE: 100133,
                GLU_TESS_WINDING_ABS_GEQ_TWO: 100134
              },
              primitiveType: {
                GL_LINE_LOOP: 2,
                GL_TRIANGLES: 4,
                GL_TRIANGLE_STRIP: 5,
                GL_TRIANGLE_FAN: 6
              },
              errorType: {
                GLU_TESS_MISSING_BEGIN_POLYGON: 100151,
                GLU_TESS_MISSING_END_POLYGON: 100153,
                GLU_TESS_MISSING_BEGIN_CONTOUR: 100152,
                GLU_TESS_MISSING_END_CONTOUR: 100154,
                GLU_TESS_COORD_TOO_LARGE: 100155,
                GLU_TESS_NEED_COMBINE_CALLBACK: 100156
              },
              gluEnum: {
                GLU_TESS_MESH: 100112,
                GLU_TESS_TOLERANCE: 100142,
                GLU_TESS_WINDING_RULE: 100140,
                GLU_TESS_BOUNDARY_ONLY: 100141,
                GLU_INVALID_ENUM: 100900,
                GLU_INVALID_VALUE: 100901,
                GLU_TESS_BEGIN: 100100,
                GLU_TESS_VERTEX: 100101,
                GLU_TESS_END: 100102,
                GLU_TESS_ERROR: 100103,
                GLU_TESS_EDGE_FLAG: 100104,
                GLU_TESS_COMBINE: 100105,
                GLU_TESS_BEGIN_DATA: 100106,
                GLU_TESS_VERTEX_DATA: 100107,
                GLU_TESS_END_DATA: 100108,
                GLU_TESS_ERROR_DATA: 100109,
                GLU_TESS_EDGE_FLAG_DATA: 100110,
                GLU_TESS_COMBINE_DATA: 100111
              }
            };
            X.prototype.gluDeleteTess = X.prototype.x;
            X.prototype.gluTessProperty = X.prototype.B;
            X.prototype.gluGetTessProperty = X.prototype.y;
            X.prototype.gluTessNormal = X.prototype.A;
            X.prototype.gluTessCallback = X.prototype.z;
            X.prototype.gluTessVertex = X.prototype.C;
            X.prototype.gluTessBeginPolygon = X.prototype.u;
            X.prototype.gluTessBeginContour = X.prototype.t;
            X.prototype.gluTessEndContour = X.prototype.v;
            X.prototype.gluTessEndPolygon = X.prototype.w;
            if (typeof module2 !== "undefined") {
              module2.exports = this.libtess;
            }
          },
          {}
        ],
        262: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            function GifWriter(buf, width2, height2, gopts) {
              var p = 0;
              var gopts = gopts === void 0 ? {} : gopts;
              var loop_count = gopts.loop === void 0 ? null : gopts.loop;
              var global_palette = gopts.palette === void 0 ? null : gopts.palette;
              if (width2 <= 0 || height2 <= 0 || width2 > 65535 || height2 > 65535)
                throw new Error("Width/Height invalid.");
              function check_palette_and_num_colors(palette) {
                var num_colors = palette.length;
                if (num_colors < 2 || num_colors > 256 || num_colors & num_colors - 1) {
                  throw new Error("Invalid code/color length, must be power of 2 and 2 .. 256.");
                }
                return num_colors;
              }
              buf[p++] = 71;
              buf[p++] = 73;
              buf[p++] = 70;
              buf[p++] = 56;
              buf[p++] = 57;
              buf[p++] = 97;
              var gp_num_colors_pow2 = 0;
              var background = 0;
              if (global_palette !== null) {
                var gp_num_colors = check_palette_and_num_colors(global_palette);
                while (gp_num_colors >>= 1)
                  ++gp_num_colors_pow2;
                gp_num_colors = 1 << gp_num_colors_pow2;
                --gp_num_colors_pow2;
                if (gopts.background !== void 0) {
                  background = gopts.background;
                  if (background >= gp_num_colors)
                    throw new Error("Background index out of range.");
                  if (background === 0)
                    throw new Error("Background index explicitly passed as 0.");
                }
              }
              buf[p++] = width2 & 255;
              buf[p++] = width2 >> 8 & 255;
              buf[p++] = height2 & 255;
              buf[p++] = height2 >> 8 & 255;
              buf[p++] = (global_palette !== null ? 128 : 0) | // Global Color Table Flag.
              gp_num_colors_pow2;
              buf[p++] = background;
              buf[p++] = 0;
              if (global_palette !== null) {
                for (var i2 = 0, il = global_palette.length; i2 < il; ++i2) {
                  var rgb = global_palette[i2];
                  buf[p++] = rgb >> 16 & 255;
                  buf[p++] = rgb >> 8 & 255;
                  buf[p++] = rgb & 255;
                }
              }
              if (loop_count !== null) {
                if (loop_count < 0 || loop_count > 65535)
                  throw new Error("Loop count invalid.");
                buf[p++] = 33;
                buf[p++] = 255;
                buf[p++] = 11;
                buf[p++] = 78;
                buf[p++] = 69;
                buf[p++] = 84;
                buf[p++] = 83;
                buf[p++] = 67;
                buf[p++] = 65;
                buf[p++] = 80;
                buf[p++] = 69;
                buf[p++] = 50;
                buf[p++] = 46;
                buf[p++] = 48;
                buf[p++] = 3;
                buf[p++] = 1;
                buf[p++] = loop_count & 255;
                buf[p++] = loop_count >> 8 & 255;
                buf[p++] = 0;
              }
              var ended = false;
              this.addFrame = function(x, y, w, h, indexed_pixels, opts) {
                if (ended === true) {
                  --p;
                  ended = false;
                }
                opts = opts === void 0 ? {} : opts;
                if (x < 0 || y < 0 || x > 65535 || y > 65535)
                  throw new Error("x/y invalid.");
                if (w <= 0 || h <= 0 || w > 65535 || h > 65535)
                  throw new Error("Width/Height invalid.");
                if (indexed_pixels.length < w * h)
                  throw new Error("Not enough pixels for the frame size.");
                var using_local_palette = true;
                var palette = opts.palette;
                if (palette === void 0 || palette === null) {
                  using_local_palette = false;
                  palette = global_palette;
                }
                if (palette === void 0 || palette === null)
                  throw new Error("Must supply either a local or global palette.");
                var num_colors = check_palette_and_num_colors(palette);
                var min_code_size = 0;
                while (num_colors >>= 1)
                  ++min_code_size;
                num_colors = 1 << min_code_size;
                var delay = opts.delay === void 0 ? 0 : opts.delay;
                var disposal = opts.disposal === void 0 ? 0 : opts.disposal;
                if (disposal < 0 || disposal > 3)
                  throw new Error("Disposal out of range.");
                var use_transparency = false;
                var transparent_index = 0;
                if (opts.transparent !== void 0 && opts.transparent !== null) {
                  use_transparency = true;
                  transparent_index = opts.transparent;
                  if (transparent_index < 0 || transparent_index >= num_colors)
                    throw new Error("Transparent color index.");
                }
                if (disposal !== 0 || use_transparency || delay !== 0) {
                  buf[p++] = 33;
                  buf[p++] = 249;
                  buf[p++] = 4;
                  buf[p++] = disposal << 2 | (use_transparency === true ? 1 : 0);
                  buf[p++] = delay & 255;
                  buf[p++] = delay >> 8 & 255;
                  buf[p++] = transparent_index;
                  buf[p++] = 0;
                }
                buf[p++] = 44;
                buf[p++] = x & 255;
                buf[p++] = x >> 8 & 255;
                buf[p++] = y & 255;
                buf[p++] = y >> 8 & 255;
                buf[p++] = w & 255;
                buf[p++] = w >> 8 & 255;
                buf[p++] = h & 255;
                buf[p++] = h >> 8 & 255;
                buf[p++] = using_local_palette === true ? 128 | min_code_size - 1 : 0;
                if (using_local_palette === true) {
                  for (var i3 = 0, il2 = palette.length; i3 < il2; ++i3) {
                    var rgb2 = palette[i3];
                    buf[p++] = rgb2 >> 16 & 255;
                    buf[p++] = rgb2 >> 8 & 255;
                    buf[p++] = rgb2 & 255;
                  }
                }
                p = GifWriterOutputLZWCodeStream(buf, p, min_code_size < 2 ? 2 : min_code_size, indexed_pixels);
                return p;
              };
              this.end = function() {
                if (ended === false) {
                  buf[p++] = 59;
                  ended = true;
                }
                return p;
              };
              this.getOutputBuffer = function() {
                return buf;
              };
              this.setOutputBuffer = function(v) {
                buf = v;
              };
              this.getOutputBufferPosition = function() {
                return p;
              };
              this.setOutputBufferPosition = function(v) {
                p = v;
              };
            }
            function GifWriterOutputLZWCodeStream(buf, p, min_code_size, index_stream) {
              buf[p++] = min_code_size;
              var cur_subblock = p++;
              var clear_code = 1 << min_code_size;
              var code_mask = clear_code - 1;
              var eoi_code = clear_code + 1;
              var next_code = eoi_code + 1;
              var cur_code_size = min_code_size + 1;
              var cur_shift = 0;
              var cur = 0;
              function emit_bytes_to_buffer(bit_block_size) {
                while (cur_shift >= bit_block_size) {
                  buf[p++] = cur & 255;
                  cur >>= 8;
                  cur_shift -= 8;
                  if (p === cur_subblock + 256) {
                    buf[cur_subblock] = 255;
                    cur_subblock = p++;
                  }
                }
              }
              function emit_code(c) {
                cur |= c << cur_shift;
                cur_shift += cur_code_size;
                emit_bytes_to_buffer(8);
              }
              var ib_code = index_stream[0] & code_mask;
              var code_table = {};
              emit_code(clear_code);
              for (var i2 = 1, il = index_stream.length; i2 < il; ++i2) {
                var k2 = index_stream[i2] & code_mask;
                var cur_key = ib_code << 8 | k2;
                var cur_code = code_table[cur_key];
                if (cur_code === void 0) {
                  cur |= ib_code << cur_shift;
                  cur_shift += cur_code_size;
                  while (cur_shift >= 8) {
                    buf[p++] = cur & 255;
                    cur >>= 8;
                    cur_shift -= 8;
                    if (p === cur_subblock + 256) {
                      buf[cur_subblock] = 255;
                      cur_subblock = p++;
                    }
                  }
                  if (next_code === 4096) {
                    emit_code(clear_code);
                    next_code = eoi_code + 1;
                    cur_code_size = min_code_size + 1;
                    code_table = {};
                  } else {
                    if (next_code >= 1 << cur_code_size)
                      ++cur_code_size;
                    code_table[cur_key] = next_code++;
                  }
                  ib_code = k2;
                } else {
                  ib_code = cur_code;
                }
              }
              emit_code(ib_code);
              emit_code(eoi_code);
              emit_bytes_to_buffer(1);
              if (cur_subblock + 1 === p) {
                buf[cur_subblock] = 0;
              } else {
                buf[cur_subblock] = p - cur_subblock - 1;
                buf[p++] = 0;
              }
              return p;
            }
            function GifReader(buf) {
              var p = 0;
              if (buf[p++] !== 71 || buf[p++] !== 73 || buf[p++] !== 70 || buf[p++] !== 56 || (buf[p++] + 1 & 253) !== 56 || buf[p++] !== 97) {
                throw new Error("Invalid GIF 87a/89a header.");
              }
              var width2 = buf[p++] | buf[p++] << 8;
              var height2 = buf[p++] | buf[p++] << 8;
              var pf0 = buf[p++];
              var global_palette_flag = pf0 >> 7;
              var num_global_colors_pow2 = pf0 & 7;
              var num_global_colors = 1 << num_global_colors_pow2 + 1;
              var background = buf[p++];
              buf[p++];
              var global_palette_offset = null;
              var global_palette_size = null;
              if (global_palette_flag) {
                global_palette_offset = p;
                global_palette_size = num_global_colors;
                p += num_global_colors * 3;
              }
              var no_eof = true;
              var frames = [];
              var delay = 0;
              var transparent_index = null;
              var disposal = 0;
              var loop_count = null;
              this.width = width2;
              this.height = height2;
              while (no_eof && p < buf.length) {
                switch (buf[p++]) {
                  case 33:
                    switch (buf[p++]) {
                      case 255:
                        if (buf[p] !== 11 || // 21 FF already read, check block size.
                        // NETSCAPE2.0
                        buf[p + 1] == 78 && buf[p + 2] == 69 && buf[p + 3] == 84 && buf[p + 4] == 83 && buf[p + 5] == 67 && buf[p + 6] == 65 && buf[p + 7] == 80 && buf[p + 8] == 69 && buf[p + 9] == 50 && buf[p + 10] == 46 && buf[p + 11] == 48 && // Sub-block
                        buf[p + 12] == 3 && buf[p + 13] == 1 && buf[p + 16] == 0) {
                          p += 14;
                          loop_count = buf[p++] | buf[p++] << 8;
                          p++;
                        } else {
                          p += 12;
                          while (true) {
                            var block_size = buf[p++];
                            if (!(block_size >= 0))
                              throw Error("Invalid block size");
                            if (block_size === 0)
                              break;
                            p += block_size;
                          }
                        }
                        break;
                      case 249:
                        if (buf[p++] !== 4 || buf[p + 4] !== 0)
                          throw new Error("Invalid graphics extension block.");
                        var pf1 = buf[p++];
                        delay = buf[p++] | buf[p++] << 8;
                        transparent_index = buf[p++];
                        if ((pf1 & 1) === 0)
                          transparent_index = null;
                        disposal = pf1 >> 2 & 7;
                        p++;
                        break;
                      case 254:
                        while (true) {
                          var block_size = buf[p++];
                          if (!(block_size >= 0))
                            throw Error("Invalid block size");
                          if (block_size === 0)
                            break;
                          p += block_size;
                        }
                        break;
                      default:
                        throw new Error("Unknown graphic control label: 0x" + buf[p - 1].toString(16));
                    }
                    break;
                  case 44:
                    var x = buf[p++] | buf[p++] << 8;
                    var y = buf[p++] | buf[p++] << 8;
                    var w = buf[p++] | buf[p++] << 8;
                    var h = buf[p++] | buf[p++] << 8;
                    var pf2 = buf[p++];
                    var local_palette_flag = pf2 >> 7;
                    var interlace_flag = pf2 >> 6 & 1;
                    var num_local_colors_pow2 = pf2 & 7;
                    var num_local_colors = 1 << num_local_colors_pow2 + 1;
                    var palette_offset = global_palette_offset;
                    var palette_size = global_palette_size;
                    var has_local_palette = false;
                    if (local_palette_flag) {
                      var has_local_palette = true;
                      palette_offset = p;
                      palette_size = num_local_colors;
                      p += num_local_colors * 3;
                    }
                    var data_offset = p;
                    p++;
                    while (true) {
                      var block_size = buf[p++];
                      if (!(block_size >= 0))
                        throw Error("Invalid block size");
                      if (block_size === 0)
                        break;
                      p += block_size;
                    }
                    frames.push({
                      x,
                      y,
                      width: w,
                      height: h,
                      has_local_palette,
                      palette_offset,
                      palette_size,
                      data_offset,
                      data_length: p - data_offset,
                      transparent_index,
                      interlaced: !!interlace_flag,
                      delay,
                      disposal
                    });
                    break;
                  case 59:
                    no_eof = false;
                    break;
                  default:
                    throw new Error("Unknown gif block: 0x" + buf[p - 1].toString(16));
                    break;
                }
              }
              this.numFrames = function() {
                return frames.length;
              };
              this.loopCount = function() {
                return loop_count;
              };
              this.frameInfo = function(frame_num) {
                if (frame_num < 0 || frame_num >= frames.length)
                  throw new Error("Frame index out of range.");
                return frames[frame_num];
              };
              this.decodeAndBlitFrameBGRA = function(frame_num, pixels) {
                var frame = this.frameInfo(frame_num);
                var num_pixels = frame.width * frame.height;
                var index_stream = new Uint8Array(num_pixels);
                GifReaderLZWOutputIndexStream(buf, frame.data_offset, index_stream, num_pixels);
                var palette_offset2 = frame.palette_offset;
                var trans = frame.transparent_index;
                if (trans === null)
                  trans = 256;
                var framewidth = frame.width;
                var framestride = width2 - framewidth;
                var xleft = framewidth;
                var opbeg = (frame.y * width2 + frame.x) * 4;
                var opend = ((frame.y + frame.height) * width2 + frame.x) * 4;
                var op = opbeg;
                var scanstride = framestride * 4;
                if (frame.interlaced === true) {
                  scanstride += width2 * 4 * 7;
                }
                var interlaceskip = 8;
                for (var i2 = 0, il = index_stream.length; i2 < il; ++i2) {
                  var index = index_stream[i2];
                  if (xleft === 0) {
                    op += scanstride;
                    xleft = framewidth;
                    if (op >= opend) {
                      scanstride = framestride * 4 + width2 * 4 * (interlaceskip - 1);
                      op = opbeg + (framewidth + framestride) * (interlaceskip << 1);
                      interlaceskip >>= 1;
                    }
                  }
                  if (index === trans) {
                    op += 4;
                  } else {
                    var r = buf[palette_offset2 + index * 3];
                    var g = buf[palette_offset2 + index * 3 + 1];
                    var b = buf[palette_offset2 + index * 3 + 2];
                    pixels[op++] = b;
                    pixels[op++] = g;
                    pixels[op++] = r;
                    pixels[op++] = 255;
                  }
                  --xleft;
                }
              };
              this.decodeAndBlitFrameRGBA = function(frame_num, pixels) {
                var frame = this.frameInfo(frame_num);
                var num_pixels = frame.width * frame.height;
                var index_stream = new Uint8Array(num_pixels);
                GifReaderLZWOutputIndexStream(buf, frame.data_offset, index_stream, num_pixels);
                var palette_offset2 = frame.palette_offset;
                var trans = frame.transparent_index;
                if (trans === null)
                  trans = 256;
                var framewidth = frame.width;
                var framestride = width2 - framewidth;
                var xleft = framewidth;
                var opbeg = (frame.y * width2 + frame.x) * 4;
                var opend = ((frame.y + frame.height) * width2 + frame.x) * 4;
                var op = opbeg;
                var scanstride = framestride * 4;
                if (frame.interlaced === true) {
                  scanstride += width2 * 4 * 7;
                }
                var interlaceskip = 8;
                for (var i2 = 0, il = index_stream.length; i2 < il; ++i2) {
                  var index = index_stream[i2];
                  if (xleft === 0) {
                    op += scanstride;
                    xleft = framewidth;
                    if (op >= opend) {
                      scanstride = framestride * 4 + width2 * 4 * (interlaceskip - 1);
                      op = opbeg + (framewidth + framestride) * (interlaceskip << 1);
                      interlaceskip >>= 1;
                    }
                  }
                  if (index === trans) {
                    op += 4;
                  } else {
                    var r = buf[palette_offset2 + index * 3];
                    var g = buf[palette_offset2 + index * 3 + 1];
                    var b = buf[palette_offset2 + index * 3 + 2];
                    pixels[op++] = r;
                    pixels[op++] = g;
                    pixels[op++] = b;
                    pixels[op++] = 255;
                  }
                  --xleft;
                }
              };
            }
            function GifReaderLZWOutputIndexStream(code_stream, p, output, output_length) {
              var min_code_size = code_stream[p++];
              var clear_code = 1 << min_code_size;
              var eoi_code = clear_code + 1;
              var next_code = eoi_code + 1;
              var cur_code_size = min_code_size + 1;
              var code_mask = (1 << cur_code_size) - 1;
              var cur_shift = 0;
              var cur = 0;
              var op = 0;
              var subblock_size = code_stream[p++];
              var code_table = new Int32Array(4096);
              var prev_code = null;
              while (true) {
                while (cur_shift < 16) {
                  if (subblock_size === 0)
                    break;
                  cur |= code_stream[p++] << cur_shift;
                  cur_shift += 8;
                  if (subblock_size === 1) {
                    subblock_size = code_stream[p++];
                  } else {
                    --subblock_size;
                  }
                }
                if (cur_shift < cur_code_size)
                  break;
                var code = cur & code_mask;
                cur >>= cur_code_size;
                cur_shift -= cur_code_size;
                if (code === clear_code) {
                  next_code = eoi_code + 1;
                  cur_code_size = min_code_size + 1;
                  code_mask = (1 << cur_code_size) - 1;
                  prev_code = null;
                  continue;
                } else if (code === eoi_code) {
                  break;
                }
                var chase_code = code < next_code ? code : prev_code;
                var chase_length = 0;
                var chase = chase_code;
                while (chase > clear_code) {
                  chase = code_table[chase] >> 8;
                  ++chase_length;
                }
                var k2 = chase;
                var op_end = op + chase_length + (chase_code !== code ? 1 : 0);
                if (op_end > output_length) {
                  console.log("Warning, gif stream longer than expected.");
                  return;
                }
                output[op++] = k2;
                op += chase_length;
                var b = op;
                if (chase_code !== code)
                  output[op++] = k2;
                chase = chase_code;
                while (chase_length--) {
                  chase = code_table[chase];
                  output[--b] = chase & 255;
                  chase >>= 8;
                }
                if (prev_code !== null && next_code < 4096) {
                  code_table[next_code++] = prev_code << 8 | k2;
                  if (next_code >= code_mask + 1 && cur_code_size < 12) {
                    ++cur_code_size;
                    code_mask = code_mask << 1 | 1;
                  }
                }
                prev_code = code;
              }
              if (op !== output_length) {
                console.log("Warning, gif stream shorter than expected.");
              }
              return output;
            }
            try {
              exports2.GifWriter = GifWriter;
              exports2.GifReader = GifReader;
            } catch (e2) {
            }
          },
          {}
        ],
        263: [
          function(_dereq_2, module2, exports2) {
            (function(Buffer) {
              (function(global2, factory) {
                typeof exports2 === "object" && typeof module2 !== "undefined" ? factory(exports2) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global2.opentype = {});
              })(this, function(exports3) {
                "use strict";
                if (!String.prototype.codePointAt) {
                  (function() {
                    var defineProperty = function() {
                      try {
                        var object = {};
                        var $defineProperty = Object.defineProperty;
                        var result = $defineProperty(object, object, object) && $defineProperty;
                      } catch (error) {
                      }
                      return result;
                    }();
                    var codePointAt = function(position) {
                      if (this == null) {
                        throw TypeError();
                      }
                      var string = String(this);
                      var size = string.length;
                      var index = position ? Number(position) : 0;
                      if (index != index) {
                        index = 0;
                      }
                      if (index < 0 || index >= size) {
                        return void 0;
                      }
                      var first = string.charCodeAt(index);
                      var second;
                      if (
                        // check if it’s the start of a surrogate pair
                        first >= 55296 && first <= 56319 && // high surrogate
                        size > index + 1
                      ) {
                        second = string.charCodeAt(index + 1);
                        if (second >= 56320 && second <= 57343) {
                          return (first - 55296) * 1024 + second - 56320 + 65536;
                        }
                      }
                      return first;
                    };
                    if (defineProperty) {
                      defineProperty(String.prototype, "codePointAt", {
                        "value": codePointAt,
                        "configurable": true,
                        "writable": true
                      });
                    } else {
                      String.prototype.codePointAt = codePointAt;
                    }
                  })();
                }
                var TINF_OK = 0;
                var TINF_DATA_ERROR = -3;
                function Tree() {
                  this.table = new Uint16Array(16);
                  this.trans = new Uint16Array(288);
                }
                function Data(source, dest) {
                  this.source = source;
                  this.sourceIndex = 0;
                  this.tag = 0;
                  this.bitcount = 0;
                  this.dest = dest;
                  this.destLen = 0;
                  this.ltree = new Tree();
                  this.dtree = new Tree();
                }
                var sltree = new Tree();
                var sdtree = new Tree();
                var length_bits = new Uint8Array(30);
                var length_base = new Uint16Array(30);
                var dist_bits = new Uint8Array(30);
                var dist_base = new Uint16Array(30);
                var clcidx = new Uint8Array([
                  16,
                  17,
                  18,
                  0,
                  8,
                  7,
                  9,
                  6,
                  10,
                  5,
                  11,
                  4,
                  12,
                  3,
                  13,
                  2,
                  14,
                  1,
                  15
                ]);
                var code_tree = new Tree();
                var lengths = new Uint8Array(288 + 32);
                function tinf_build_bits_base(bits, base, delta, first) {
                  var i2, sum;
                  for (i2 = 0; i2 < delta; ++i2) {
                    bits[i2] = 0;
                  }
                  for (i2 = 0; i2 < 30 - delta; ++i2) {
                    bits[i2 + delta] = i2 / delta | 0;
                  }
                  for (sum = first, i2 = 0; i2 < 30; ++i2) {
                    base[i2] = sum;
                    sum += 1 << bits[i2];
                  }
                }
                function tinf_build_fixed_trees(lt, dt) {
                  var i2;
                  for (i2 = 0; i2 < 7; ++i2) {
                    lt.table[i2] = 0;
                  }
                  lt.table[7] = 24;
                  lt.table[8] = 152;
                  lt.table[9] = 112;
                  for (i2 = 0; i2 < 24; ++i2) {
                    lt.trans[i2] = 256 + i2;
                  }
                  for (i2 = 0; i2 < 144; ++i2) {
                    lt.trans[24 + i2] = i2;
                  }
                  for (i2 = 0; i2 < 8; ++i2) {
                    lt.trans[24 + 144 + i2] = 280 + i2;
                  }
                  for (i2 = 0; i2 < 112; ++i2) {
                    lt.trans[24 + 144 + 8 + i2] = 144 + i2;
                  }
                  for (i2 = 0; i2 < 5; ++i2) {
                    dt.table[i2] = 0;
                  }
                  dt.table[5] = 32;
                  for (i2 = 0; i2 < 32; ++i2) {
                    dt.trans[i2] = i2;
                  }
                }
                var offs = new Uint16Array(16);
                function tinf_build_tree(t, lengths2, off, num) {
                  var i2, sum;
                  for (i2 = 0; i2 < 16; ++i2) {
                    t.table[i2] = 0;
                  }
                  for (i2 = 0; i2 < num; ++i2) {
                    t.table[lengths2[off + i2]]++;
                  }
                  t.table[0] = 0;
                  for (sum = 0, i2 = 0; i2 < 16; ++i2) {
                    offs[i2] = sum;
                    sum += t.table[i2];
                  }
                  for (i2 = 0; i2 < num; ++i2) {
                    if (lengths2[off + i2]) {
                      t.trans[offs[lengths2[off + i2]]++] = i2;
                    }
                  }
                }
                function tinf_getbit(d) {
                  if (!d.bitcount--) {
                    d.tag = d.source[d.sourceIndex++];
                    d.bitcount = 7;
                  }
                  var bit = d.tag & 1;
                  d.tag >>>= 1;
                  return bit;
                }
                function tinf_read_bits(d, num, base) {
                  if (!num) {
                    return base;
                  }
                  while (d.bitcount < 24) {
                    d.tag |= d.source[d.sourceIndex++] << d.bitcount;
                    d.bitcount += 8;
                  }
                  var val = d.tag & 65535 >>> 16 - num;
                  d.tag >>>= num;
                  d.bitcount -= num;
                  return val + base;
                }
                function tinf_decode_symbol(d, t) {
                  while (d.bitcount < 24) {
                    d.tag |= d.source[d.sourceIndex++] << d.bitcount;
                    d.bitcount += 8;
                  }
                  var sum = 0, cur = 0, len = 0;
                  var tag = d.tag;
                  do {
                    cur = 2 * cur + (tag & 1);
                    tag >>>= 1;
                    ++len;
                    sum += t.table[len];
                    cur -= t.table[len];
                  } while (cur >= 0);
                  d.tag = tag;
                  d.bitcount -= len;
                  return t.trans[sum + cur];
                }
                function tinf_decode_trees(d, lt, dt) {
                  var hlit, hdist, hclen;
                  var i2, num, length;
                  hlit = tinf_read_bits(d, 5, 257);
                  hdist = tinf_read_bits(d, 5, 1);
                  hclen = tinf_read_bits(d, 4, 4);
                  for (i2 = 0; i2 < 19; ++i2) {
                    lengths[i2] = 0;
                  }
                  for (i2 = 0; i2 < hclen; ++i2) {
                    var clen = tinf_read_bits(d, 3, 0);
                    lengths[clcidx[i2]] = clen;
                  }
                  tinf_build_tree(code_tree, lengths, 0, 19);
                  for (num = 0; num < hlit + hdist; ) {
                    var sym = tinf_decode_symbol(d, code_tree);
                    switch (sym) {
                      case 16:
                        var prev = lengths[num - 1];
                        for (length = tinf_read_bits(d, 2, 3); length; --length) {
                          lengths[num++] = prev;
                        }
                        break;
                      case 17:
                        for (length = tinf_read_bits(d, 3, 3); length; --length) {
                          lengths[num++] = 0;
                        }
                        break;
                      case 18:
                        for (length = tinf_read_bits(d, 7, 11); length; --length) {
                          lengths[num++] = 0;
                        }
                        break;
                      default:
                        lengths[num++] = sym;
                        break;
                    }
                  }
                  tinf_build_tree(lt, lengths, 0, hlit);
                  tinf_build_tree(dt, lengths, hlit, hdist);
                }
                function tinf_inflate_block_data(d, lt, dt) {
                  while (1) {
                    var sym = tinf_decode_symbol(d, lt);
                    if (sym === 256) {
                      return TINF_OK;
                    }
                    if (sym < 256) {
                      d.dest[d.destLen++] = sym;
                    } else {
                      var length, dist, offs2;
                      var i2;
                      sym -= 257;
                      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);
                      dist = tinf_decode_symbol(d, dt);
                      offs2 = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);
                      for (i2 = offs2; i2 < offs2 + length; ++i2) {
                        d.dest[d.destLen++] = d.dest[i2];
                      }
                    }
                  }
                }
                function tinf_inflate_uncompressed_block(d) {
                  var length, invlength;
                  var i2;
                  while (d.bitcount > 8) {
                    d.sourceIndex--;
                    d.bitcount -= 8;
                  }
                  length = d.source[d.sourceIndex + 1];
                  length = 256 * length + d.source[d.sourceIndex];
                  invlength = d.source[d.sourceIndex + 3];
                  invlength = 256 * invlength + d.source[d.sourceIndex + 2];
                  if (length !== (~invlength & 65535)) {
                    return TINF_DATA_ERROR;
                  }
                  d.sourceIndex += 4;
                  for (i2 = length; i2; --i2) {
                    d.dest[d.destLen++] = d.source[d.sourceIndex++];
                  }
                  d.bitcount = 0;
                  return TINF_OK;
                }
                function tinf_uncompress(source, dest) {
                  var d = new Data(source, dest);
                  var bfinal, btype, res;
                  do {
                    bfinal = tinf_getbit(d);
                    btype = tinf_read_bits(d, 2, 0);
                    switch (btype) {
                      case 0:
                        res = tinf_inflate_uncompressed_block(d);
                        break;
                      case 1:
                        res = tinf_inflate_block_data(d, sltree, sdtree);
                        break;
                      case 2:
                        tinf_decode_trees(d, d.ltree, d.dtree);
                        res = tinf_inflate_block_data(d, d.ltree, d.dtree);
                        break;
                      default:
                        res = TINF_DATA_ERROR;
                    }
                    if (res !== TINF_OK) {
                      throw new Error("Data error");
                    }
                  } while (!bfinal);
                  if (d.destLen < d.dest.length) {
                    if (typeof d.dest.slice === "function") {
                      return d.dest.slice(0, d.destLen);
                    } else {
                      return d.dest.subarray(0, d.destLen);
                    }
                  }
                  return d.dest;
                }
                tinf_build_fixed_trees(sltree, sdtree);
                tinf_build_bits_base(length_bits, length_base, 4, 3);
                tinf_build_bits_base(dist_bits, dist_base, 2, 1);
                length_bits[28] = 0;
                length_base[28] = 258;
                var tinyInflate = tinf_uncompress;
                function derive(v0, v1, v2, v3, t) {
                  return Math.pow(1 - t, 3) * v0 + 3 * Math.pow(1 - t, 2) * t * v1 + 3 * (1 - t) * Math.pow(t, 2) * v2 + Math.pow(t, 3) * v3;
                }
                function BoundingBox() {
                  this.x1 = Number.NaN;
                  this.y1 = Number.NaN;
                  this.x2 = Number.NaN;
                  this.y2 = Number.NaN;
                }
                BoundingBox.prototype.isEmpty = function() {
                  return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);
                };
                BoundingBox.prototype.addPoint = function(x, y) {
                  if (typeof x === "number") {
                    if (isNaN(this.x1) || isNaN(this.x2)) {
                      this.x1 = x;
                      this.x2 = x;
                    }
                    if (x < this.x1) {
                      this.x1 = x;
                    }
                    if (x > this.x2) {
                      this.x2 = x;
                    }
                  }
                  if (typeof y === "number") {
                    if (isNaN(this.y1) || isNaN(this.y2)) {
                      this.y1 = y;
                      this.y2 = y;
                    }
                    if (y < this.y1) {
                      this.y1 = y;
                    }
                    if (y > this.y2) {
                      this.y2 = y;
                    }
                  }
                };
                BoundingBox.prototype.addX = function(x) {
                  this.addPoint(x, null);
                };
                BoundingBox.prototype.addY = function(y) {
                  this.addPoint(null, y);
                };
                BoundingBox.prototype.addBezier = function(x0, y0, x1, y1, x2, y2, x, y) {
                  var this$1 = this;
                  var p0 = [
                    x0,
                    y0
                  ];
                  var p1 = [
                    x1,
                    y1
                  ];
                  var p2 = [
                    x2,
                    y2
                  ];
                  var p3 = [
                    x,
                    y
                  ];
                  this.addPoint(x0, y0);
                  this.addPoint(x, y);
                  for (var i2 = 0; i2 <= 1; i2++) {
                    var b = 6 * p0[i2] - 12 * p1[i2] + 6 * p2[i2];
                    var a = -3 * p0[i2] + 9 * p1[i2] - 9 * p2[i2] + 3 * p3[i2];
                    var c = 3 * p1[i2] - 3 * p0[i2];
                    if (a === 0) {
                      if (b === 0) {
                        continue;
                      }
                      var t = -c / b;
                      if (0 < t && t < 1) {
                        if (i2 === 0) {
                          this$1.addX(derive(p0[i2], p1[i2], p2[i2], p3[i2], t));
                        }
                        if (i2 === 1) {
                          this$1.addY(derive(p0[i2], p1[i2], p2[i2], p3[i2], t));
                        }
                      }
                      continue;
                    }
                    var b2ac = Math.pow(b, 2) - 4 * c * a;
                    if (b2ac < 0) {
                      continue;
                    }
                    var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
                    if (0 < t1 && t1 < 1) {
                      if (i2 === 0) {
                        this$1.addX(derive(p0[i2], p1[i2], p2[i2], p3[i2], t1));
                      }
                      if (i2 === 1) {
                        this$1.addY(derive(p0[i2], p1[i2], p2[i2], p3[i2], t1));
                      }
                    }
                    var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
                    if (0 < t2 && t2 < 1) {
                      if (i2 === 0) {
                        this$1.addX(derive(p0[i2], p1[i2], p2[i2], p3[i2], t2));
                      }
                      if (i2 === 1) {
                        this$1.addY(derive(p0[i2], p1[i2], p2[i2], p3[i2], t2));
                      }
                    }
                  }
                };
                BoundingBox.prototype.addQuad = function(x0, y0, x1, y1, x, y) {
                  var cp1x = x0 + 2 / 3 * (x1 - x0);
                  var cp1y = y0 + 2 / 3 * (y1 - y0);
                  var cp2x = cp1x + 1 / 3 * (x - x0);
                  var cp2y = cp1y + 1 / 3 * (y - y0);
                  this.addBezier(x0, y0, cp1x, cp1y, cp2x, cp2y, x, y);
                };
                function Path() {
                  this.commands = [];
                  this.fill = "black";
                  this.stroke = null;
                  this.strokeWidth = 1;
                }
                Path.prototype.moveTo = function(x, y) {
                  this.commands.push({
                    type: "M",
                    x,
                    y
                  });
                };
                Path.prototype.lineTo = function(x, y) {
                  this.commands.push({
                    type: "L",
                    x,
                    y
                  });
                };
                Path.prototype.curveTo = Path.prototype.bezierCurveTo = function(x1, y1, x2, y2, x, y) {
                  this.commands.push({
                    type: "C",
                    x1,
                    y1,
                    x2,
                    y2,
                    x,
                    y
                  });
                };
                Path.prototype.quadTo = Path.prototype.quadraticCurveTo = function(x1, y1, x, y) {
                  this.commands.push({
                    type: "Q",
                    x1,
                    y1,
                    x,
                    y
                  });
                };
                Path.prototype.close = Path.prototype.closePath = function() {
                  this.commands.push({
                    type: "Z"
                  });
                };
                Path.prototype.extend = function(pathOrCommands) {
                  if (pathOrCommands.commands) {
                    pathOrCommands = pathOrCommands.commands;
                  } else if (pathOrCommands instanceof BoundingBox) {
                    var box = pathOrCommands;
                    this.moveTo(box.x1, box.y1);
                    this.lineTo(box.x2, box.y1);
                    this.lineTo(box.x2, box.y2);
                    this.lineTo(box.x1, box.y2);
                    this.close();
                    return;
                  }
                  Array.prototype.push.apply(this.commands, pathOrCommands);
                };
                Path.prototype.getBoundingBox = function() {
                  var this$1 = this;
                  var box = new BoundingBox();
                  var startX = 0;
                  var startY = 0;
                  var prevX = 0;
                  var prevY = 0;
                  for (var i2 = 0; i2 < this.commands.length; i2++) {
                    var cmd = this$1.commands[i2];
                    switch (cmd.type) {
                      case "M":
                        box.addPoint(cmd.x, cmd.y);
                        startX = prevX = cmd.x;
                        startY = prevY = cmd.y;
                        break;
                      case "L":
                        box.addPoint(cmd.x, cmd.y);
                        prevX = cmd.x;
                        prevY = cmd.y;
                        break;
                      case "Q":
                        box.addQuad(prevX, prevY, cmd.x1, cmd.y1, cmd.x, cmd.y);
                        prevX = cmd.x;
                        prevY = cmd.y;
                        break;
                      case "C":
                        box.addBezier(prevX, prevY, cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
                        prevX = cmd.x;
                        prevY = cmd.y;
                        break;
                      case "Z":
                        prevX = startX;
                        prevY = startY;
                        break;
                      default:
                        throw new Error("Unexpected path command " + cmd.type);
                    }
                  }
                  if (box.isEmpty()) {
                    box.addPoint(0, 0);
                  }
                  return box;
                };
                Path.prototype.draw = function(ctx) {
                  var this$1 = this;
                  ctx.beginPath();
                  for (var i2 = 0; i2 < this.commands.length; i2 += 1) {
                    var cmd = this$1.commands[i2];
                    if (cmd.type === "M") {
                      ctx.moveTo(cmd.x, cmd.y);
                    } else if (cmd.type === "L") {
                      ctx.lineTo(cmd.x, cmd.y);
                    } else if (cmd.type === "C") {
                      ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
                    } else if (cmd.type === "Q") {
                      ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);
                    } else if (cmd.type === "Z") {
                      ctx.closePath();
                    }
                  }
                  if (this.fill) {
                    ctx.fillStyle = this.fill;
                    ctx.fill();
                  }
                  if (this.stroke) {
                    ctx.strokeStyle = this.stroke;
                    ctx.lineWidth = this.strokeWidth;
                    ctx.stroke();
                  }
                };
                Path.prototype.toPathData = function(decimalPlaces) {
                  var this$1 = this;
                  decimalPlaces = decimalPlaces !== void 0 ? decimalPlaces : 2;
                  function floatToString(v) {
                    if (Math.round(v) === v) {
                      return "" + Math.round(v);
                    } else {
                      return v.toFixed(decimalPlaces);
                    }
                  }
                  function packValues() {
                    var arguments$1 = arguments;
                    var s = "";
                    for (var i3 = 0; i3 < arguments.length; i3 += 1) {
                      var v = arguments$1[i3];
                      if (v >= 0 && i3 > 0) {
                        s += " ";
                      }
                      s += floatToString(v);
                    }
                    return s;
                  }
                  var d = "";
                  for (var i2 = 0; i2 < this.commands.length; i2 += 1) {
                    var cmd = this$1.commands[i2];
                    if (cmd.type === "M") {
                      d += "M" + packValues(cmd.x, cmd.y);
                    } else if (cmd.type === "L") {
                      d += "L" + packValues(cmd.x, cmd.y);
                    } else if (cmd.type === "C") {
                      d += "C" + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
                    } else if (cmd.type === "Q") {
                      d += "Q" + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);
                    } else if (cmd.type === "Z") {
                      d += "Z";
                    }
                  }
                  return d;
                };
                Path.prototype.toSVG = function(decimalPlaces) {
                  var svg = '<path d="';
                  svg += this.toPathData(decimalPlaces);
                  svg += '"';
                  if (this.fill && this.fill !== "black") {
                    if (this.fill === null) {
                      svg += ' fill="none"';
                    } else {
                      svg += ' fill="' + this.fill + '"';
                    }
                  }
                  if (this.stroke) {
                    svg += ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"';
                  }
                  svg += "/>";
                  return svg;
                };
                Path.prototype.toDOMElement = function(decimalPlaces) {
                  var temporaryPath = this.toPathData(decimalPlaces);
                  var newPath = document.createElementNS("http://www.w3.org/2000/svg", "path");
                  newPath.setAttribute("d", temporaryPath);
                  return newPath;
                };
                function fail(message) {
                  throw new Error(message);
                }
                function argument(predicate, message) {
                  if (!predicate) {
                    fail(message);
                  }
                }
                var check = {
                  fail,
                  argument,
                  assert: argument
                };
                var LIMIT16 = 32768;
                var LIMIT32 = 2147483648;
                var decode = {};
                var encode = {};
                var sizeOf = {};
                function constant(v) {
                  return function() {
                    return v;
                  };
                }
                encode.BYTE = function(v) {
                  check.argument(v >= 0 && v <= 255, "Byte value should be between 0 and 255.");
                  return [v];
                };
                sizeOf.BYTE = constant(1);
                encode.CHAR = function(v) {
                  return [v.charCodeAt(0)];
                };
                sizeOf.CHAR = constant(1);
                encode.CHARARRAY = function(v) {
                  var b = [];
                  for (var i2 = 0; i2 < v.length; i2 += 1) {
                    b[i2] = v.charCodeAt(i2);
                  }
                  return b;
                };
                sizeOf.CHARARRAY = function(v) {
                  return v.length;
                };
                encode.USHORT = function(v) {
                  return [
                    v >> 8 & 255,
                    v & 255
                  ];
                };
                sizeOf.USHORT = constant(2);
                encode.SHORT = function(v) {
                  if (v >= LIMIT16) {
                    v = -(2 * LIMIT16 - v);
                  }
                  return [
                    v >> 8 & 255,
                    v & 255
                  ];
                };
                sizeOf.SHORT = constant(2);
                encode.UINT24 = function(v) {
                  return [
                    v >> 16 & 255,
                    v >> 8 & 255,
                    v & 255
                  ];
                };
                sizeOf.UINT24 = constant(3);
                encode.ULONG = function(v) {
                  return [
                    v >> 24 & 255,
                    v >> 16 & 255,
                    v >> 8 & 255,
                    v & 255
                  ];
                };
                sizeOf.ULONG = constant(4);
                encode.LONG = function(v) {
                  if (v >= LIMIT32) {
                    v = -(2 * LIMIT32 - v);
                  }
                  return [
                    v >> 24 & 255,
                    v >> 16 & 255,
                    v >> 8 & 255,
                    v & 255
                  ];
                };
                sizeOf.LONG = constant(4);
                encode.FIXED = encode.ULONG;
                sizeOf.FIXED = sizeOf.ULONG;
                encode.FWORD = encode.SHORT;
                sizeOf.FWORD = sizeOf.SHORT;
                encode.UFWORD = encode.USHORT;
                sizeOf.UFWORD = sizeOf.USHORT;
                encode.LONGDATETIME = function(v) {
                  return [
                    0,
                    0,
                    0,
                    0,
                    v >> 24 & 255,
                    v >> 16 & 255,
                    v >> 8 & 255,
                    v & 255
                  ];
                };
                sizeOf.LONGDATETIME = constant(8);
                encode.TAG = function(v) {
                  check.argument(v.length === 4, "Tag should be exactly 4 ASCII characters.");
                  return [
                    v.charCodeAt(0),
                    v.charCodeAt(1),
                    v.charCodeAt(2),
                    v.charCodeAt(3)
                  ];
                };
                sizeOf.TAG = constant(4);
                encode.Card8 = encode.BYTE;
                sizeOf.Card8 = sizeOf.BYTE;
                encode.Card16 = encode.USHORT;
                sizeOf.Card16 = sizeOf.USHORT;
                encode.OffSize = encode.BYTE;
                sizeOf.OffSize = sizeOf.BYTE;
                encode.SID = encode.USHORT;
                sizeOf.SID = sizeOf.USHORT;
                encode.NUMBER = function(v) {
                  if (v >= -107 && v <= 107) {
                    return [v + 139];
                  } else if (v >= 108 && v <= 1131) {
                    v = v - 108;
                    return [
                      (v >> 8) + 247,
                      v & 255
                    ];
                  } else if (v >= -1131 && v <= -108) {
                    v = -v - 108;
                    return [
                      (v >> 8) + 251,
                      v & 255
                    ];
                  } else if (v >= -32768 && v <= 32767) {
                    return encode.NUMBER16(v);
                  } else {
                    return encode.NUMBER32(v);
                  }
                };
                sizeOf.NUMBER = function(v) {
                  return encode.NUMBER(v).length;
                };
                encode.NUMBER16 = function(v) {
                  return [
                    28,
                    v >> 8 & 255,
                    v & 255
                  ];
                };
                sizeOf.NUMBER16 = constant(3);
                encode.NUMBER32 = function(v) {
                  return [
                    29,
                    v >> 24 & 255,
                    v >> 16 & 255,
                    v >> 8 & 255,
                    v & 255
                  ];
                };
                sizeOf.NUMBER32 = constant(5);
                encode.REAL = function(v) {
                  var value = v.toString();
                  var m = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(value);
                  if (m) {
                    var epsilon = parseFloat("1e" + ((m[2] ? +m[2] : 0) + m[1].length));
                    value = (Math.round(v * epsilon) / epsilon).toString();
                  }
                  var nibbles = "";
                  for (var i2 = 0, ii = value.length; i2 < ii; i2 += 1) {
                    var c = value[i2];
                    if (c === "e") {
                      nibbles += value[++i2] === "-" ? "c" : "b";
                    } else if (c === ".") {
                      nibbles += "a";
                    } else if (c === "-") {
                      nibbles += "e";
                    } else {
                      nibbles += c;
                    }
                  }
                  nibbles += nibbles.length & 1 ? "f" : "ff";
                  var out = [
                    30
                  ];
                  for (var i$1 = 0, ii$1 = nibbles.length; i$1 < ii$1; i$1 += 2) {
                    out.push(parseInt(nibbles.substr(i$1, 2), 16));
                  }
                  return out;
                };
                sizeOf.REAL = function(v) {
                  return encode.REAL(v).length;
                };
                encode.NAME = encode.CHARARRAY;
                sizeOf.NAME = sizeOf.CHARARRAY;
                encode.STRING = encode.CHARARRAY;
                sizeOf.STRING = sizeOf.CHARARRAY;
                decode.UTF8 = function(data, offset, numBytes) {
                  var codePoints = [];
                  var numChars = numBytes;
                  for (var j = 0; j < numChars; j++, offset += 1) {
                    codePoints[j] = data.getUint8(offset);
                  }
                  return String.fromCharCode.apply(null, codePoints);
                };
                decode.UTF16 = function(data, offset, numBytes) {
                  var codePoints = [];
                  var numChars = numBytes / 2;
                  for (var j = 0; j < numChars; j++, offset += 2) {
                    codePoints[j] = data.getUint16(offset);
                  }
                  return String.fromCharCode.apply(null, codePoints);
                };
                encode.UTF16 = function(v) {
                  var b = [];
                  for (var i2 = 0; i2 < v.length; i2 += 1) {
                    var codepoint = v.charCodeAt(i2);
                    b[b.length] = codepoint >> 8 & 255;
                    b[b.length] = codepoint & 255;
                  }
                  return b;
                };
                sizeOf.UTF16 = function(v) {
                  return v.length * 2;
                };
                var eightBitMacEncodings = {
                  "x-mac-croatian": (
                    // Python: 'mac_croatian'
                    "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ"
                  ),
                  "x-mac-cyrillic": (
                    // Python: 'mac_cyrillic'
                    "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю"
                  ),
                  "x-mac-gaelic": (
                    // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT
                    "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæøṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ"
                  ),
                  "x-mac-greek": (
                    // Python: 'mac_greek'
                    "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ­"
                  ),
                  "x-mac-icelandic": (
                    // Python: 'mac_iceland'
                    "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
                  ),
                  "x-mac-inuit": (
                    // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT
                    "ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł"
                  ),
                  "x-mac-ce": (
                    // Python: 'mac_latin2'
                    "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ"
                  ),
                  macintosh: (
                    // Python: 'mac_roman'
                    "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
                  ),
                  "x-mac-romanian": (
                    // Python: 'mac_romanian'
                    "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
                  ),
                  "x-mac-turkish": (
                    // Python: 'mac_turkish'
                    "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ"
                  )
                };
                decode.MACSTRING = function(dataView, offset, dataLength, encoding) {
                  var table2 = eightBitMacEncodings[encoding];
                  if (table2 === void 0) {
                    return void 0;
                  }
                  var result = "";
                  for (var i2 = 0; i2 < dataLength; i2++) {
                    var c = dataView.getUint8(offset + i2);
                    if (c <= 127) {
                      result += String.fromCharCode(c);
                    } else {
                      result += table2[c & 127];
                    }
                  }
                  return result;
                };
                var macEncodingTableCache = typeof WeakMap === "function" && /* @__PURE__ */ new WeakMap();
                var macEncodingCacheKeys;
                var getMacEncodingTable = function(encoding) {
                  if (!macEncodingCacheKeys) {
                    macEncodingCacheKeys = {};
                    for (var e2 in eightBitMacEncodings) {
                      macEncodingCacheKeys[e2] = new String(e2);
                    }
                  }
                  var cacheKey = macEncodingCacheKeys[encoding];
                  if (cacheKey === void 0) {
                    return void 0;
                  }
                  if (macEncodingTableCache) {
                    var cachedTable = macEncodingTableCache.get(cacheKey);
                    if (cachedTable !== void 0) {
                      return cachedTable;
                    }
                  }
                  var decodingTable = eightBitMacEncodings[encoding];
                  if (decodingTable === void 0) {
                    return void 0;
                  }
                  var encodingTable = {};
                  for (var i2 = 0; i2 < decodingTable.length; i2++) {
                    encodingTable[decodingTable.charCodeAt(i2)] = i2 + 128;
                  }
                  if (macEncodingTableCache) {
                    macEncodingTableCache.set(cacheKey, encodingTable);
                  }
                  return encodingTable;
                };
                encode.MACSTRING = function(str, encoding) {
                  var table2 = getMacEncodingTable(encoding);
                  if (table2 === void 0) {
                    return void 0;
                  }
                  var result = [];
                  for (var i2 = 0; i2 < str.length; i2++) {
                    var c = str.charCodeAt(i2);
                    if (c >= 128) {
                      c = table2[c];
                      if (c === void 0) {
                        return void 0;
                      }
                    }
                    result[i2] = c;
                  }
                  return result;
                };
                sizeOf.MACSTRING = function(str, encoding) {
                  var b = encode.MACSTRING(str, encoding);
                  if (b !== void 0) {
                    return b.length;
                  } else {
                    return 0;
                  }
                };
                function isByteEncodable(value) {
                  return value >= -128 && value <= 127;
                }
                function encodeVarDeltaRunAsZeroes(deltas, pos, result) {
                  var runLength = 0;
                  var numDeltas = deltas.length;
                  while (pos < numDeltas && runLength < 64 && deltas[pos] === 0) {
                    ++pos;
                    ++runLength;
                  }
                  result.push(128 | runLength - 1);
                  return pos;
                }
                function encodeVarDeltaRunAsBytes(deltas, offset, result) {
                  var runLength = 0;
                  var numDeltas = deltas.length;
                  var pos = offset;
                  while (pos < numDeltas && runLength < 64) {
                    var value = deltas[pos];
                    if (!isByteEncodable(value)) {
                      break;
                    }
                    if (value === 0 && pos + 1 < numDeltas && deltas[pos + 1] === 0) {
                      break;
                    }
                    ++pos;
                    ++runLength;
                  }
                  result.push(runLength - 1);
                  for (var i2 = offset; i2 < pos; ++i2) {
                    result.push(deltas[i2] + 256 & 255);
                  }
                  return pos;
                }
                function encodeVarDeltaRunAsWords(deltas, offset, result) {
                  var runLength = 0;
                  var numDeltas = deltas.length;
                  var pos = offset;
                  while (pos < numDeltas && runLength < 64) {
                    var value = deltas[pos];
                    if (value === 0) {
                      break;
                    }
                    if (isByteEncodable(value) && pos + 1 < numDeltas && isByteEncodable(deltas[pos + 1])) {
                      break;
                    }
                    ++pos;
                    ++runLength;
                  }
                  result.push(64 | runLength - 1);
                  for (var i2 = offset; i2 < pos; ++i2) {
                    var val = deltas[i2];
                    result.push(val + 65536 >> 8 & 255, val + 256 & 255);
                  }
                  return pos;
                }
                encode.VARDELTAS = function(deltas) {
                  var pos = 0;
                  var result = [];
                  while (pos < deltas.length) {
                    var value = deltas[pos];
                    if (value === 0) {
                      pos = encodeVarDeltaRunAsZeroes(deltas, pos, result);
                    } else if (value >= -128 && value <= 127) {
                      pos = encodeVarDeltaRunAsBytes(deltas, pos, result);
                    } else {
                      pos = encodeVarDeltaRunAsWords(deltas, pos, result);
                    }
                  }
                  return result;
                };
                encode.INDEX = function(l) {
                  var offset = 1;
                  var offsets = [
                    offset
                  ];
                  var data = [];
                  for (var i2 = 0; i2 < l.length; i2 += 1) {
                    var v = encode.OBJECT(l[i2]);
                    Array.prototype.push.apply(data, v);
                    offset += v.length;
                    offsets.push(offset);
                  }
                  if (data.length === 0) {
                    return [
                      0,
                      0
                    ];
                  }
                  var encodedOffsets = [];
                  var offSize = 1 + Math.floor(Math.log(offset) / Math.log(2)) / 8 | 0;
                  var offsetEncoder = [
                    void 0,
                    encode.BYTE,
                    encode.USHORT,
                    encode.UINT24,
                    encode.ULONG
                  ][offSize];
                  for (var i$1 = 0; i$1 < offsets.length; i$1 += 1) {
                    var encodedOffset = offsetEncoder(offsets[i$1]);
                    Array.prototype.push.apply(encodedOffsets, encodedOffset);
                  }
                  return Array.prototype.concat(encode.Card16(l.length), encode.OffSize(offSize), encodedOffsets, data);
                };
                sizeOf.INDEX = function(v) {
                  return encode.INDEX(v).length;
                };
                encode.DICT = function(m) {
                  var d = [];
                  var keys = Object.keys(m);
                  var length = keys.length;
                  for (var i2 = 0; i2 < length; i2 += 1) {
                    var k2 = parseInt(keys[i2], 0);
                    var v = m[k2];
                    d = d.concat(encode.OPERAND(v.value, v.type));
                    d = d.concat(encode.OPERATOR(k2));
                  }
                  return d;
                };
                sizeOf.DICT = function(m) {
                  return encode.DICT(m).length;
                };
                encode.OPERATOR = function(v) {
                  if (v < 1200) {
                    return [v];
                  } else {
                    return [
                      12,
                      v - 1200
                    ];
                  }
                };
                encode.OPERAND = function(v, type) {
                  var d = [];
                  if (Array.isArray(type)) {
                    for (var i2 = 0; i2 < type.length; i2 += 1) {
                      check.argument(v.length === type.length, "Not enough arguments given for type" + type);
                      d = d.concat(encode.OPERAND(v[i2], type[i2]));
                    }
                  } else {
                    if (type === "SID") {
                      d = d.concat(encode.NUMBER(v));
                    } else if (type === "offset") {
                      d = d.concat(encode.NUMBER32(v));
                    } else if (type === "number") {
                      d = d.concat(encode.NUMBER(v));
                    } else if (type === "real") {
                      d = d.concat(encode.REAL(v));
                    } else {
                      throw new Error("Unknown operand type " + type);
                    }
                  }
                  return d;
                };
                encode.OP = encode.BYTE;
                sizeOf.OP = sizeOf.BYTE;
                var wmm = typeof WeakMap === "function" && /* @__PURE__ */ new WeakMap();
                encode.CHARSTRING = function(ops) {
                  if (wmm) {
                    var cachedValue = wmm.get(ops);
                    if (cachedValue !== void 0) {
                      return cachedValue;
                    }
                  }
                  var d = [];
                  var length = ops.length;
                  for (var i2 = 0; i2 < length; i2 += 1) {
                    var op = ops[i2];
                    d = d.concat(encode[op.type](op.value));
                  }
                  if (wmm) {
                    wmm.set(ops, d);
                  }
                  return d;
                };
                sizeOf.CHARSTRING = function(ops) {
                  return encode.CHARSTRING(ops).length;
                };
                encode.OBJECT = function(v) {
                  var encodingFunction = encode[v.type];
                  check.argument(encodingFunction !== void 0, "No encoding function for type " + v.type);
                  return encodingFunction(v.value);
                };
                sizeOf.OBJECT = function(v) {
                  var sizeOfFunction = sizeOf[v.type];
                  check.argument(sizeOfFunction !== void 0, "No sizeOf function for type " + v.type);
                  return sizeOfFunction(v.value);
                };
                encode.TABLE = function(table2) {
                  var d = [];
                  var length = table2.fields.length;
                  var subtables = [];
                  var subtableOffsets = [];
                  for (var i2 = 0; i2 < length; i2 += 1) {
                    var field = table2.fields[i2];
                    var encodingFunction = encode[field.type];
                    check.argument(encodingFunction !== void 0, "No encoding function for field type " + field.type + " (" + field.name + ")");
                    var value = table2[field.name];
                    if (value === void 0) {
                      value = field.value;
                    }
                    var bytes = encodingFunction(value);
                    if (field.type === "TABLE") {
                      subtableOffsets.push(d.length);
                      d = d.concat([
                        0,
                        0
                      ]);
                      subtables.push(bytes);
                    } else {
                      d = d.concat(bytes);
                    }
                  }
                  for (var i$1 = 0; i$1 < subtables.length; i$1 += 1) {
                    var o = subtableOffsets[i$1];
                    var offset = d.length;
                    check.argument(offset < 65536, "Table " + table2.tableName + " too big.");
                    d[o] = offset >> 8;
                    d[o + 1] = offset & 255;
                    d = d.concat(subtables[i$1]);
                  }
                  return d;
                };
                sizeOf.TABLE = function(table2) {
                  var numBytes = 0;
                  var length = table2.fields.length;
                  for (var i2 = 0; i2 < length; i2 += 1) {
                    var field = table2.fields[i2];
                    var sizeOfFunction = sizeOf[field.type];
                    check.argument(sizeOfFunction !== void 0, "No sizeOf function for field type " + field.type + " (" + field.name + ")");
                    var value = table2[field.name];
                    if (value === void 0) {
                      value = field.value;
                    }
                    numBytes += sizeOfFunction(value);
                    if (field.type === "TABLE") {
                      numBytes += 2;
                    }
                  }
                  return numBytes;
                };
                encode.RECORD = encode.TABLE;
                sizeOf.RECORD = sizeOf.TABLE;
                encode.LITERAL = function(v) {
                  return v;
                };
                sizeOf.LITERAL = function(v) {
                  return v.length;
                };
                function Table(tableName, fields, options) {
                  var this$1 = this;
                  for (var i2 = 0; i2 < fields.length; i2 += 1) {
                    var field = fields[i2];
                    this$1[field.name] = field.value;
                  }
                  this.tableName = tableName;
                  this.fields = fields;
                  if (options) {
                    var optionKeys = Object.keys(options);
                    for (var i$1 = 0; i$1 < optionKeys.length; i$1 += 1) {
                      var k2 = optionKeys[i$1];
                      var v = options[k2];
                      if (this$1[k2] !== void 0) {
                        this$1[k2] = v;
                      }
                    }
                  }
                }
                Table.prototype.encode = function() {
                  return encode.TABLE(this);
                };
                Table.prototype.sizeOf = function() {
                  return sizeOf.TABLE(this);
                };
                function ushortList(itemName, list, count) {
                  if (count === void 0) {
                    count = list.length;
                  }
                  var fields = new Array(list.length + 1);
                  fields[0] = {
                    name: itemName + "Count",
                    type: "USHORT",
                    value: count
                  };
                  for (var i2 = 0; i2 < list.length; i2++) {
                    fields[i2 + 1] = {
                      name: itemName + i2,
                      type: "USHORT",
                      value: list[i2]
                    };
                  }
                  return fields;
                }
                function tableList(itemName, records, itemCallback) {
                  var count = records.length;
                  var fields = new Array(count + 1);
                  fields[0] = {
                    name: itemName + "Count",
                    type: "USHORT",
                    value: count
                  };
                  for (var i2 = 0; i2 < count; i2++) {
                    fields[i2 + 1] = {
                      name: itemName + i2,
                      type: "TABLE",
                      value: itemCallback(records[i2], i2)
                    };
                  }
                  return fields;
                }
                function recordList(itemName, records, itemCallback) {
                  var count = records.length;
                  var fields = [];
                  fields[0] = {
                    name: itemName + "Count",
                    type: "USHORT",
                    value: count
                  };
                  for (var i2 = 0; i2 < count; i2++) {
                    fields = fields.concat(itemCallback(records[i2], i2));
                  }
                  return fields;
                }
                function Coverage(coverageTable) {
                  if (coverageTable.format === 1) {
                    Table.call(this, "coverageTable", [
                      {
                        name: "coverageFormat",
                        type: "USHORT",
                        value: 1
                      }
                    ].concat(ushortList("glyph", coverageTable.glyphs)));
                  } else {
                    check.assert(false, "Can't create coverage table format 2 yet.");
                  }
                }
                Coverage.prototype = Object.create(Table.prototype);
                Coverage.prototype.constructor = Coverage;
                function ScriptList(scriptListTable) {
                  Table.call(this, "scriptListTable", recordList("scriptRecord", scriptListTable, function(scriptRecord, i2) {
                    var script = scriptRecord.script;
                    var defaultLangSys = script.defaultLangSys;
                    check.assert(!!defaultLangSys, "Unable to write GSUB: script " + scriptRecord.tag + " has no default language system.");
                    return [
                      {
                        name: "scriptTag" + i2,
                        type: "TAG",
                        value: scriptRecord.tag
                      },
                      {
                        name: "script" + i2,
                        type: "TABLE",
                        value: new Table("scriptTable", [
                          {
                            name: "defaultLangSys",
                            type: "TABLE",
                            value: new Table("defaultLangSys", [
                              {
                                name: "lookupOrder",
                                type: "USHORT",
                                value: 0
                              },
                              {
                                name: "reqFeatureIndex",
                                type: "USHORT",
                                value: defaultLangSys.reqFeatureIndex
                              }
                            ].concat(ushortList("featureIndex", defaultLangSys.featureIndexes)))
                          }
                        ].concat(recordList("langSys", script.langSysRecords, function(langSysRecord, i3) {
                          var langSys = langSysRecord.langSys;
                          return [
                            {
                              name: "langSysTag" + i3,
                              type: "TAG",
                              value: langSysRecord.tag
                            },
                            {
                              name: "langSys" + i3,
                              type: "TABLE",
                              value: new Table("langSys", [
                                {
                                  name: "lookupOrder",
                                  type: "USHORT",
                                  value: 0
                                },
                                {
                                  name: "reqFeatureIndex",
                                  type: "USHORT",
                                  value: langSys.reqFeatureIndex
                                }
                              ].concat(ushortList("featureIndex", langSys.featureIndexes)))
                            }
                          ];
                        })))
                      }
                    ];
                  }));
                }
                ScriptList.prototype = Object.create(Table.prototype);
                ScriptList.prototype.constructor = ScriptList;
                function FeatureList(featureListTable) {
                  Table.call(this, "featureListTable", recordList("featureRecord", featureListTable, function(featureRecord, i2) {
                    var feature = featureRecord.feature;
                    return [
                      {
                        name: "featureTag" + i2,
                        type: "TAG",
                        value: featureRecord.tag
                      },
                      {
                        name: "feature" + i2,
                        type: "TABLE",
                        value: new Table("featureTable", [
                          {
                            name: "featureParams",
                            type: "USHORT",
                            value: feature.featureParams
                          }
                        ].concat(ushortList("lookupListIndex", feature.lookupListIndexes)))
                      }
                    ];
                  }));
                }
                FeatureList.prototype = Object.create(Table.prototype);
                FeatureList.prototype.constructor = FeatureList;
                function LookupList(lookupListTable, subtableMakers2) {
                  Table.call(this, "lookupListTable", tableList("lookup", lookupListTable, function(lookupTable) {
                    var subtableCallback = subtableMakers2[lookupTable.lookupType];
                    check.assert(!!subtableCallback, "Unable to write GSUB lookup type " + lookupTable.lookupType + " tables.");
                    return new Table("lookupTable", [
                      {
                        name: "lookupType",
                        type: "USHORT",
                        value: lookupTable.lookupType
                      },
                      {
                        name: "lookupFlag",
                        type: "USHORT",
                        value: lookupTable.lookupFlag
                      }
                    ].concat(tableList("subtable", lookupTable.subtables, subtableCallback)));
                  }));
                }
                LookupList.prototype = Object.create(Table.prototype);
                LookupList.prototype.constructor = LookupList;
                var table = {
                  Table,
                  Record: Table,
                  Coverage,
                  ScriptList,
                  FeatureList,
                  LookupList,
                  ushortList,
                  tableList,
                  recordList
                };
                function getByte(dataView, offset) {
                  return dataView.getUint8(offset);
                }
                function getUShort(dataView, offset) {
                  return dataView.getUint16(offset, false);
                }
                function getShort(dataView, offset) {
                  return dataView.getInt16(offset, false);
                }
                function getULong(dataView, offset) {
                  return dataView.getUint32(offset, false);
                }
                function getFixed(dataView, offset) {
                  var decimal = dataView.getInt16(offset, false);
                  var fraction = dataView.getUint16(offset + 2, false);
                  return decimal + fraction / 65535;
                }
                function getTag(dataView, offset) {
                  var tag = "";
                  for (var i2 = offset; i2 < offset + 4; i2 += 1) {
                    tag += String.fromCharCode(dataView.getInt8(i2));
                  }
                  return tag;
                }
                function getOffset(dataView, offset, offSize) {
                  var v = 0;
                  for (var i2 = 0; i2 < offSize; i2 += 1) {
                    v <<= 8;
                    v += dataView.getUint8(offset + i2);
                  }
                  return v;
                }
                function getBytes(dataView, startOffset, endOffset) {
                  var bytes = [];
                  for (var i2 = startOffset; i2 < endOffset; i2 += 1) {
                    bytes.push(dataView.getUint8(i2));
                  }
                  return bytes;
                }
                function bytesToString(bytes) {
                  var s = "";
                  for (var i2 = 0; i2 < bytes.length; i2 += 1) {
                    s += String.fromCharCode(bytes[i2]);
                  }
                  return s;
                }
                var typeOffsets = {
                  byte: 1,
                  uShort: 2,
                  short: 2,
                  uLong: 4,
                  fixed: 4,
                  longDateTime: 8,
                  tag: 4
                };
                function Parser(data, offset) {
                  this.data = data;
                  this.offset = offset;
                  this.relativeOffset = 0;
                }
                Parser.prototype.parseByte = function() {
                  var v = this.data.getUint8(this.offset + this.relativeOffset);
                  this.relativeOffset += 1;
                  return v;
                };
                Parser.prototype.parseChar = function() {
                  var v = this.data.getInt8(this.offset + this.relativeOffset);
                  this.relativeOffset += 1;
                  return v;
                };
                Parser.prototype.parseCard8 = Parser.prototype.parseByte;
                Parser.prototype.parseUShort = function() {
                  var v = this.data.getUint16(this.offset + this.relativeOffset);
                  this.relativeOffset += 2;
                  return v;
                };
                Parser.prototype.parseCard16 = Parser.prototype.parseUShort;
                Parser.prototype.parseSID = Parser.prototype.parseUShort;
                Parser.prototype.parseOffset16 = Parser.prototype.parseUShort;
                Parser.prototype.parseShort = function() {
                  var v = this.data.getInt16(this.offset + this.relativeOffset);
                  this.relativeOffset += 2;
                  return v;
                };
                Parser.prototype.parseF2Dot14 = function() {
                  var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
                  this.relativeOffset += 2;
                  return v;
                };
                Parser.prototype.parseULong = function() {
                  var v = getULong(this.data, this.offset + this.relativeOffset);
                  this.relativeOffset += 4;
                  return v;
                };
                Parser.prototype.parseOffset32 = Parser.prototype.parseULong;
                Parser.prototype.parseFixed = function() {
                  var v = getFixed(this.data, this.offset + this.relativeOffset);
                  this.relativeOffset += 4;
                  return v;
                };
                Parser.prototype.parseString = function(length) {
                  var dataView = this.data;
                  var offset = this.offset + this.relativeOffset;
                  var string = "";
                  this.relativeOffset += length;
                  for (var i2 = 0; i2 < length; i2++) {
                    string += String.fromCharCode(dataView.getUint8(offset + i2));
                  }
                  return string;
                };
                Parser.prototype.parseTag = function() {
                  return this.parseString(4);
                };
                Parser.prototype.parseLongDateTime = function() {
                  var v = getULong(this.data, this.offset + this.relativeOffset + 4);
                  v -= 2082844800;
                  this.relativeOffset += 8;
                  return v;
                };
                Parser.prototype.parseVersion = function(minorBase) {
                  var major = getUShort(this.data, this.offset + this.relativeOffset);
                  var minor = getUShort(this.data, this.offset + this.relativeOffset + 2);
                  this.relativeOffset += 4;
                  if (minorBase === void 0) {
                    minorBase = 4096;
                  }
                  return major + minor / minorBase / 10;
                };
                Parser.prototype.skip = function(type, amount) {
                  if (amount === void 0) {
                    amount = 1;
                  }
                  this.relativeOffset += typeOffsets[type] * amount;
                };
                Parser.prototype.parseULongList = function(count) {
                  if (count === void 0) {
                    count = this.parseULong();
                  }
                  var offsets = new Array(count);
                  var dataView = this.data;
                  var offset = this.offset + this.relativeOffset;
                  for (var i2 = 0; i2 < count; i2++) {
                    offsets[i2] = dataView.getUint32(offset);
                    offset += 4;
                  }
                  this.relativeOffset += count * 4;
                  return offsets;
                };
                Parser.prototype.parseOffset16List = Parser.prototype.parseUShortList = function(count) {
                  if (count === void 0) {
                    count = this.parseUShort();
                  }
                  var offsets = new Array(count);
                  var dataView = this.data;
                  var offset = this.offset + this.relativeOffset;
                  for (var i2 = 0; i2 < count; i2++) {
                    offsets[i2] = dataView.getUint16(offset);
                    offset += 2;
                  }
                  this.relativeOffset += count * 2;
                  return offsets;
                };
                Parser.prototype.parseShortList = function(count) {
                  var list = new Array(count);
                  var dataView = this.data;
                  var offset = this.offset + this.relativeOffset;
                  for (var i2 = 0; i2 < count; i2++) {
                    list[i2] = dataView.getInt16(offset);
                    offset += 2;
                  }
                  this.relativeOffset += count * 2;
                  return list;
                };
                Parser.prototype.parseByteList = function(count) {
                  var list = new Array(count);
                  var dataView = this.data;
                  var offset = this.offset + this.relativeOffset;
                  for (var i2 = 0; i2 < count; i2++) {
                    list[i2] = dataView.getUint8(offset++);
                  }
                  this.relativeOffset += count;
                  return list;
                };
                Parser.prototype.parseList = function(count, itemCallback) {
                  var this$1 = this;
                  if (!itemCallback) {
                    itemCallback = count;
                    count = this.parseUShort();
                  }
                  var list = new Array(count);
                  for (var i2 = 0; i2 < count; i2++) {
                    list[i2] = itemCallback.call(this$1);
                  }
                  return list;
                };
                Parser.prototype.parseList32 = function(count, itemCallback) {
                  var this$1 = this;
                  if (!itemCallback) {
                    itemCallback = count;
                    count = this.parseULong();
                  }
                  var list = new Array(count);
                  for (var i2 = 0; i2 < count; i2++) {
                    list[i2] = itemCallback.call(this$1);
                  }
                  return list;
                };
                Parser.prototype.parseRecordList = function(count, recordDescription) {
                  var this$1 = this;
                  if (!recordDescription) {
                    recordDescription = count;
                    count = this.parseUShort();
                  }
                  var records = new Array(count);
                  var fields = Object.keys(recordDescription);
                  for (var i2 = 0; i2 < count; i2++) {
                    var rec = {};
                    for (var j = 0; j < fields.length; j++) {
                      var fieldName = fields[j];
                      var fieldType = recordDescription[fieldName];
                      rec[fieldName] = fieldType.call(this$1);
                    }
                    records[i2] = rec;
                  }
                  return records;
                };
                Parser.prototype.parseRecordList32 = function(count, recordDescription) {
                  var this$1 = this;
                  if (!recordDescription) {
                    recordDescription = count;
                    count = this.parseULong();
                  }
                  var records = new Array(count);
                  var fields = Object.keys(recordDescription);
                  for (var i2 = 0; i2 < count; i2++) {
                    var rec = {};
                    for (var j = 0; j < fields.length; j++) {
                      var fieldName = fields[j];
                      var fieldType = recordDescription[fieldName];
                      rec[fieldName] = fieldType.call(this$1);
                    }
                    records[i2] = rec;
                  }
                  return records;
                };
                Parser.prototype.parseStruct = function(description) {
                  var this$1 = this;
                  if (typeof description === "function") {
                    return description.call(this);
                  } else {
                    var fields = Object.keys(description);
                    var struct = {};
                    for (var j = 0; j < fields.length; j++) {
                      var fieldName = fields[j];
                      var fieldType = description[fieldName];
                      struct[fieldName] = fieldType.call(this$1);
                    }
                    return struct;
                  }
                };
                Parser.prototype.parseValueRecord = function(valueFormat) {
                  if (valueFormat === void 0) {
                    valueFormat = this.parseUShort();
                  }
                  if (valueFormat === 0) {
                    return;
                  }
                  var valueRecord = {};
                  if (valueFormat & 1) {
                    valueRecord.xPlacement = this.parseShort();
                  }
                  if (valueFormat & 2) {
                    valueRecord.yPlacement = this.parseShort();
                  }
                  if (valueFormat & 4) {
                    valueRecord.xAdvance = this.parseShort();
                  }
                  if (valueFormat & 8) {
                    valueRecord.yAdvance = this.parseShort();
                  }
                  if (valueFormat & 16) {
                    valueRecord.xPlaDevice = void 0;
                    this.parseShort();
                  }
                  if (valueFormat & 32) {
                    valueRecord.yPlaDevice = void 0;
                    this.parseShort();
                  }
                  if (valueFormat & 64) {
                    valueRecord.xAdvDevice = void 0;
                    this.parseShort();
                  }
                  if (valueFormat & 128) {
                    valueRecord.yAdvDevice = void 0;
                    this.parseShort();
                  }
                  return valueRecord;
                };
                Parser.prototype.parseValueRecordList = function() {
                  var this$1 = this;
                  var valueFormat = this.parseUShort();
                  var valueCount = this.parseUShort();
                  var values = new Array(valueCount);
                  for (var i2 = 0; i2 < valueCount; i2++) {
                    values[i2] = this$1.parseValueRecord(valueFormat);
                  }
                  return values;
                };
                Parser.prototype.parsePointer = function(description) {
                  var structOffset = this.parseOffset16();
                  if (structOffset > 0) {
                    return new Parser(this.data, this.offset + structOffset).parseStruct(description);
                  }
                  return void 0;
                };
                Parser.prototype.parsePointer32 = function(description) {
                  var structOffset = this.parseOffset32();
                  if (structOffset > 0) {
                    return new Parser(this.data, this.offset + structOffset).parseStruct(description);
                  }
                  return void 0;
                };
                Parser.prototype.parseListOfLists = function(itemCallback) {
                  var this$1 = this;
                  var offsets = this.parseOffset16List();
                  var count = offsets.length;
                  var relativeOffset = this.relativeOffset;
                  var list = new Array(count);
                  for (var i2 = 0; i2 < count; i2++) {
                    var start = offsets[i2];
                    if (start === 0) {
                      list[i2] = void 0;
                      continue;
                    }
                    this$1.relativeOffset = start;
                    if (itemCallback) {
                      var subOffsets = this$1.parseOffset16List();
                      var subList = new Array(subOffsets.length);
                      for (var j = 0; j < subOffsets.length; j++) {
                        this$1.relativeOffset = start + subOffsets[j];
                        subList[j] = itemCallback.call(this$1);
                      }
                      list[i2] = subList;
                    } else {
                      list[i2] = this$1.parseUShortList();
                    }
                  }
                  this.relativeOffset = relativeOffset;
                  return list;
                };
                Parser.prototype.parseCoverage = function() {
                  var this$1 = this;
                  var startOffset = this.offset + this.relativeOffset;
                  var format = this.parseUShort();
                  var count = this.parseUShort();
                  if (format === 1) {
                    return {
                      format: 1,
                      glyphs: this.parseUShortList(count)
                    };
                  } else if (format === 2) {
                    var ranges = new Array(count);
                    for (var i2 = 0; i2 < count; i2++) {
                      ranges[i2] = {
                        start: this$1.parseUShort(),
                        end: this$1.parseUShort(),
                        index: this$1.parseUShort()
                      };
                    }
                    return {
                      format: 2,
                      ranges
                    };
                  }
                  throw new Error("0x" + startOffset.toString(16) + ": Coverage format must be 1 or 2.");
                };
                Parser.prototype.parseClassDef = function() {
                  var startOffset = this.offset + this.relativeOffset;
                  var format = this.parseUShort();
                  if (format === 1) {
                    return {
                      format: 1,
                      startGlyph: this.parseUShort(),
                      classes: this.parseUShortList()
                    };
                  } else if (format === 2) {
                    return {
                      format: 2,
                      ranges: this.parseRecordList({
                        start: Parser.uShort,
                        end: Parser.uShort,
                        classId: Parser.uShort
                      })
                    };
                  }
                  throw new Error("0x" + startOffset.toString(16) + ": ClassDef format must be 1 or 2.");
                };
                Parser.list = function(count, itemCallback) {
                  return function() {
                    return this.parseList(count, itemCallback);
                  };
                };
                Parser.list32 = function(count, itemCallback) {
                  return function() {
                    return this.parseList32(count, itemCallback);
                  };
                };
                Parser.recordList = function(count, recordDescription) {
                  return function() {
                    return this.parseRecordList(count, recordDescription);
                  };
                };
                Parser.recordList32 = function(count, recordDescription) {
                  return function() {
                    return this.parseRecordList32(count, recordDescription);
                  };
                };
                Parser.pointer = function(description) {
                  return function() {
                    return this.parsePointer(description);
                  };
                };
                Parser.pointer32 = function(description) {
                  return function() {
                    return this.parsePointer32(description);
                  };
                };
                Parser.tag = Parser.prototype.parseTag;
                Parser.byte = Parser.prototype.parseByte;
                Parser.uShort = Parser.offset16 = Parser.prototype.parseUShort;
                Parser.uShortList = Parser.prototype.parseUShortList;
                Parser.uLong = Parser.offset32 = Parser.prototype.parseULong;
                Parser.uLongList = Parser.prototype.parseULongList;
                Parser.struct = Parser.prototype.parseStruct;
                Parser.coverage = Parser.prototype.parseCoverage;
                Parser.classDef = Parser.prototype.parseClassDef;
                var langSysTable = {
                  reserved: Parser.uShort,
                  reqFeatureIndex: Parser.uShort,
                  featureIndexes: Parser.uShortList
                };
                Parser.prototype.parseScriptList = function() {
                  return this.parsePointer(Parser.recordList({
                    tag: Parser.tag,
                    script: Parser.pointer({
                      defaultLangSys: Parser.pointer(langSysTable),
                      langSysRecords: Parser.recordList({
                        tag: Parser.tag,
                        langSys: Parser.pointer(langSysTable)
                      })
                    })
                  })) || [];
                };
                Parser.prototype.parseFeatureList = function() {
                  return this.parsePointer(Parser.recordList({
                    tag: Parser.tag,
                    feature: Parser.pointer({
                      featureParams: Parser.offset16,
                      lookupListIndexes: Parser.uShortList
                    })
                  })) || [];
                };
                Parser.prototype.parseLookupList = function(lookupTableParsers) {
                  return this.parsePointer(Parser.list(Parser.pointer(function() {
                    var lookupType = this.parseUShort();
                    check.argument(1 <= lookupType && lookupType <= 9, "GPOS/GSUB lookup type " + lookupType + " unknown.");
                    var lookupFlag = this.parseUShort();
                    var useMarkFilteringSet = lookupFlag & 16;
                    return {
                      lookupType,
                      lookupFlag,
                      subtables: this.parseList(Parser.pointer(lookupTableParsers[lookupType])),
                      markFilteringSet: useMarkFilteringSet ? this.parseUShort() : void 0
                    };
                  }))) || [];
                };
                Parser.prototype.parseFeatureVariationsList = function() {
                  return this.parsePointer32(function() {
                    var majorVersion = this.parseUShort();
                    var minorVersion = this.parseUShort();
                    check.argument(majorVersion === 1 && minorVersion < 1, "GPOS/GSUB feature variations table unknown.");
                    var featureVariations = this.parseRecordList32({
                      conditionSetOffset: Parser.offset32,
                      featureTableSubstitutionOffset: Parser.offset32
                    });
                    return featureVariations;
                  }) || [];
                };
                var parse = {
                  getByte,
                  getCard8: getByte,
                  getUShort,
                  getCard16: getUShort,
                  getShort,
                  getULong,
                  getFixed,
                  getTag,
                  getOffset,
                  getBytes,
                  bytesToString,
                  Parser
                };
                function parseCmapTableFormat12(cmap2, p) {
                  p.parseUShort();
                  cmap2.length = p.parseULong();
                  cmap2.language = p.parseULong();
                  var groupCount;
                  cmap2.groupCount = groupCount = p.parseULong();
                  cmap2.glyphIndexMap = {};
                  for (var i2 = 0; i2 < groupCount; i2 += 1) {
                    var startCharCode = p.parseULong();
                    var endCharCode = p.parseULong();
                    var startGlyphId = p.parseULong();
                    for (var c = startCharCode; c <= endCharCode; c += 1) {
                      cmap2.glyphIndexMap[c] = startGlyphId;
                      startGlyphId++;
                    }
                  }
                }
                function parseCmapTableFormat4(cmap2, p, data, start, offset) {
                  cmap2.length = p.parseUShort();
                  cmap2.language = p.parseUShort();
                  var segCount;
                  cmap2.segCount = segCount = p.parseUShort() >> 1;
                  p.skip("uShort", 3);
                  cmap2.glyphIndexMap = {};
                  var endCountParser = new parse.Parser(data, start + offset + 14);
                  var startCountParser = new parse.Parser(data, start + offset + 16 + segCount * 2);
                  var idDeltaParser = new parse.Parser(data, start + offset + 16 + segCount * 4);
                  var idRangeOffsetParser = new parse.Parser(data, start + offset + 16 + segCount * 6);
                  var glyphIndexOffset = start + offset + 16 + segCount * 8;
                  for (var i2 = 0; i2 < segCount - 1; i2 += 1) {
                    var glyphIndex = void 0;
                    var endCount = endCountParser.parseUShort();
                    var startCount = startCountParser.parseUShort();
                    var idDelta = idDeltaParser.parseShort();
                    var idRangeOffset = idRangeOffsetParser.parseUShort();
                    for (var c = startCount; c <= endCount; c += 1) {
                      if (idRangeOffset !== 0) {
                        glyphIndexOffset = idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2;
                        glyphIndexOffset += idRangeOffset;
                        glyphIndexOffset += (c - startCount) * 2;
                        glyphIndex = parse.getUShort(data, glyphIndexOffset);
                        if (glyphIndex !== 0) {
                          glyphIndex = glyphIndex + idDelta & 65535;
                        }
                      } else {
                        glyphIndex = c + idDelta & 65535;
                      }
                      cmap2.glyphIndexMap[c] = glyphIndex;
                    }
                  }
                }
                function parseCmapTable(data, start) {
                  var cmap2 = {};
                  cmap2.version = parse.getUShort(data, start);
                  check.argument(cmap2.version === 0, "cmap table version should be 0.");
                  cmap2.numTables = parse.getUShort(data, start + 2);
                  var offset = -1;
                  for (var i2 = cmap2.numTables - 1; i2 >= 0; i2 -= 1) {
                    var platformId = parse.getUShort(data, start + 4 + i2 * 8);
                    var encodingId = parse.getUShort(data, start + 4 + i2 * 8 + 2);
                    if (platformId === 3 && (encodingId === 0 || encodingId === 1 || encodingId === 10) || platformId === 0 && (encodingId === 0 || encodingId === 1 || encodingId === 2 || encodingId === 3 || encodingId === 4)) {
                      offset = parse.getULong(data, start + 4 + i2 * 8 + 4);
                      break;
                    }
                  }
                  if (offset === -1) {
                    throw new Error("No valid cmap sub-tables found.");
                  }
                  var p = new parse.Parser(data, start + offset);
                  cmap2.format = p.parseUShort();
                  if (cmap2.format === 12) {
                    parseCmapTableFormat12(cmap2, p);
                  } else if (cmap2.format === 4) {
                    parseCmapTableFormat4(cmap2, p, data, start, offset);
                  } else {
                    throw new Error("Only format 4 and 12 cmap tables are supported (found format " + cmap2.format + ").");
                  }
                  return cmap2;
                }
                function addSegment(t, code, glyphIndex) {
                  t.segments.push({
                    end: code,
                    start: code,
                    delta: -(code - glyphIndex),
                    offset: 0,
                    glyphIndex
                  });
                }
                function addTerminatorSegment(t) {
                  t.segments.push({
                    end: 65535,
                    start: 65535,
                    delta: 1,
                    offset: 0
                  });
                }
                function makeCmapTable(glyphs) {
                  var isPlan0Only = true;
                  var i2;
                  for (i2 = glyphs.length - 1; i2 > 0; i2 -= 1) {
                    var g = glyphs.get(i2);
                    if (g.unicode > 65535) {
                      console.log("Adding CMAP format 12 (needed!)");
                      isPlan0Only = false;
                      break;
                    }
                  }
                  var cmapTable = [
                    {
                      name: "version",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "numTables",
                      type: "USHORT",
                      value: isPlan0Only ? 1 : 2
                    },
                    // CMAP 4 header
                    {
                      name: "platformID",
                      type: "USHORT",
                      value: 3
                    },
                    {
                      name: "encodingID",
                      type: "USHORT",
                      value: 1
                    },
                    {
                      name: "offset",
                      type: "ULONG",
                      value: isPlan0Only ? 12 : 12 + 8
                    }
                  ];
                  if (!isPlan0Only) {
                    cmapTable = cmapTable.concat([
                      // CMAP 12 header
                      {
                        name: "cmap12PlatformID",
                        type: "USHORT",
                        value: 3
                      },
                      // We encode only for PlatformID = 3 (Windows) because it is supported everywhere
                      {
                        name: "cmap12EncodingID",
                        type: "USHORT",
                        value: 10
                      },
                      {
                        name: "cmap12Offset",
                        type: "ULONG",
                        value: 0
                      }
                    ]);
                  }
                  cmapTable = cmapTable.concat([
                    // CMAP 4 Subtable
                    {
                      name: "format",
                      type: "USHORT",
                      value: 4
                    },
                    {
                      name: "cmap4Length",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "language",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "segCountX2",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "searchRange",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "entrySelector",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "rangeShift",
                      type: "USHORT",
                      value: 0
                    }
                  ]);
                  var t = new table.Table("cmap", cmapTable);
                  t.segments = [];
                  for (i2 = 0; i2 < glyphs.length; i2 += 1) {
                    var glyph = glyphs.get(i2);
                    for (var j = 0; j < glyph.unicodes.length; j += 1) {
                      addSegment(t, glyph.unicodes[j], i2);
                    }
                    t.segments = t.segments.sort(function(a, b) {
                      return a.start - b.start;
                    });
                  }
                  addTerminatorSegment(t);
                  var segCount = t.segments.length;
                  var segCountToRemove = 0;
                  var endCounts = [];
                  var startCounts = [];
                  var idDeltas = [];
                  var idRangeOffsets = [];
                  var glyphIds = [];
                  var cmap12Groups = [];
                  for (i2 = 0; i2 < segCount; i2 += 1) {
                    var segment = t.segments[i2];
                    if (segment.end <= 65535 && segment.start <= 65535) {
                      endCounts = endCounts.concat({
                        name: "end_" + i2,
                        type: "USHORT",
                        value: segment.end
                      });
                      startCounts = startCounts.concat({
                        name: "start_" + i2,
                        type: "USHORT",
                        value: segment.start
                      });
                      idDeltas = idDeltas.concat({
                        name: "idDelta_" + i2,
                        type: "SHORT",
                        value: segment.delta
                      });
                      idRangeOffsets = idRangeOffsets.concat({
                        name: "idRangeOffset_" + i2,
                        type: "USHORT",
                        value: segment.offset
                      });
                      if (segment.glyphId !== void 0) {
                        glyphIds = glyphIds.concat({
                          name: "glyph_" + i2,
                          type: "USHORT",
                          value: segment.glyphId
                        });
                      }
                    } else {
                      segCountToRemove += 1;
                    }
                    if (!isPlan0Only && segment.glyphIndex !== void 0) {
                      cmap12Groups = cmap12Groups.concat({
                        name: "cmap12Start_" + i2,
                        type: "ULONG",
                        value: segment.start
                      });
                      cmap12Groups = cmap12Groups.concat({
                        name: "cmap12End_" + i2,
                        type: "ULONG",
                        value: segment.end
                      });
                      cmap12Groups = cmap12Groups.concat({
                        name: "cmap12Glyph_" + i2,
                        type: "ULONG",
                        value: segment.glyphIndex
                      });
                    }
                  }
                  t.segCountX2 = (segCount - segCountToRemove) * 2;
                  t.searchRange = Math.pow(2, Math.floor(Math.log(segCount - segCountToRemove) / Math.log(2))) * 2;
                  t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);
                  t.rangeShift = t.segCountX2 - t.searchRange;
                  t.fields = t.fields.concat(endCounts);
                  t.fields.push({
                    name: "reservedPad",
                    type: "USHORT",
                    value: 0
                  });
                  t.fields = t.fields.concat(startCounts);
                  t.fields = t.fields.concat(idDeltas);
                  t.fields = t.fields.concat(idRangeOffsets);
                  t.fields = t.fields.concat(glyphIds);
                  t.cmap4Length = 14 + // Subtable header
                  endCounts.length * 2 + 2 + // reservedPad
                  startCounts.length * 2 + idDeltas.length * 2 + idRangeOffsets.length * 2 + glyphIds.length * 2;
                  if (!isPlan0Only) {
                    var cmap12Length = 16 + // Subtable header
                    cmap12Groups.length * 4;
                    t.cmap12Offset = 12 + 2 * 2 + 4 + t.cmap4Length;
                    t.fields = t.fields.concat([
                      {
                        name: "cmap12Format",
                        type: "USHORT",
                        value: 12
                      },
                      {
                        name: "cmap12Reserved",
                        type: "USHORT",
                        value: 0
                      },
                      {
                        name: "cmap12Length",
                        type: "ULONG",
                        value: cmap12Length
                      },
                      {
                        name: "cmap12Language",
                        type: "ULONG",
                        value: 0
                      },
                      {
                        name: "cmap12nGroups",
                        type: "ULONG",
                        value: cmap12Groups.length / 3
                      }
                    ]);
                    t.fields = t.fields.concat(cmap12Groups);
                  }
                  return t;
                }
                var cmap = {
                  parse: parseCmapTable,
                  make: makeCmapTable
                };
                var cffStandardStrings = [
                  ".notdef",
                  "space",
                  "exclam",
                  "quotedbl",
                  "numbersign",
                  "dollar",
                  "percent",
                  "ampersand",
                  "quoteright",
                  "parenleft",
                  "parenright",
                  "asterisk",
                  "plus",
                  "comma",
                  "hyphen",
                  "period",
                  "slash",
                  "zero",
                  "one",
                  "two",
                  "three",
                  "four",
                  "five",
                  "six",
                  "seven",
                  "eight",
                  "nine",
                  "colon",
                  "semicolon",
                  "less",
                  "equal",
                  "greater",
                  "question",
                  "at",
                  "A",
                  "B",
                  "C",
                  "D",
                  "E",
                  "F",
                  "G",
                  "H",
                  "I",
                  "J",
                  "K",
                  "L",
                  "M",
                  "N",
                  "O",
                  "P",
                  "Q",
                  "R",
                  "S",
                  "T",
                  "U",
                  "V",
                  "W",
                  "X",
                  "Y",
                  "Z",
                  "bracketleft",
                  "backslash",
                  "bracketright",
                  "asciicircum",
                  "underscore",
                  "quoteleft",
                  "a",
                  "b",
                  "c",
                  "d",
                  "e",
                  "f",
                  "g",
                  "h",
                  "i",
                  "j",
                  "k",
                  "l",
                  "m",
                  "n",
                  "o",
                  "p",
                  "q",
                  "r",
                  "s",
                  "t",
                  "u",
                  "v",
                  "w",
                  "x",
                  "y",
                  "z",
                  "braceleft",
                  "bar",
                  "braceright",
                  "asciitilde",
                  "exclamdown",
                  "cent",
                  "sterling",
                  "fraction",
                  "yen",
                  "florin",
                  "section",
                  "currency",
                  "quotesingle",
                  "quotedblleft",
                  "guillemotleft",
                  "guilsinglleft",
                  "guilsinglright",
                  "fi",
                  "fl",
                  "endash",
                  "dagger",
                  "daggerdbl",
                  "periodcentered",
                  "paragraph",
                  "bullet",
                  "quotesinglbase",
                  "quotedblbase",
                  "quotedblright",
                  "guillemotright",
                  "ellipsis",
                  "perthousand",
                  "questiondown",
                  "grave",
                  "acute",
                  "circumflex",
                  "tilde",
                  "macron",
                  "breve",
                  "dotaccent",
                  "dieresis",
                  "ring",
                  "cedilla",
                  "hungarumlaut",
                  "ogonek",
                  "caron",
                  "emdash",
                  "AE",
                  "ordfeminine",
                  "Lslash",
                  "Oslash",
                  "OE",
                  "ordmasculine",
                  "ae",
                  "dotlessi",
                  "lslash",
                  "oslash",
                  "oe",
                  "germandbls",
                  "onesuperior",
                  "logicalnot",
                  "mu",
                  "trademark",
                  "Eth",
                  "onehalf",
                  "plusminus",
                  "Thorn",
                  "onequarter",
                  "divide",
                  "brokenbar",
                  "degree",
                  "thorn",
                  "threequarters",
                  "twosuperior",
                  "registered",
                  "minus",
                  "eth",
                  "multiply",
                  "threesuperior",
                  "copyright",
                  "Aacute",
                  "Acircumflex",
                  "Adieresis",
                  "Agrave",
                  "Aring",
                  "Atilde",
                  "Ccedilla",
                  "Eacute",
                  "Ecircumflex",
                  "Edieresis",
                  "Egrave",
                  "Iacute",
                  "Icircumflex",
                  "Idieresis",
                  "Igrave",
                  "Ntilde",
                  "Oacute",
                  "Ocircumflex",
                  "Odieresis",
                  "Ograve",
                  "Otilde",
                  "Scaron",
                  "Uacute",
                  "Ucircumflex",
                  "Udieresis",
                  "Ugrave",
                  "Yacute",
                  "Ydieresis",
                  "Zcaron",
                  "aacute",
                  "acircumflex",
                  "adieresis",
                  "agrave",
                  "aring",
                  "atilde",
                  "ccedilla",
                  "eacute",
                  "ecircumflex",
                  "edieresis",
                  "egrave",
                  "iacute",
                  "icircumflex",
                  "idieresis",
                  "igrave",
                  "ntilde",
                  "oacute",
                  "ocircumflex",
                  "odieresis",
                  "ograve",
                  "otilde",
                  "scaron",
                  "uacute",
                  "ucircumflex",
                  "udieresis",
                  "ugrave",
                  "yacute",
                  "ydieresis",
                  "zcaron",
                  "exclamsmall",
                  "Hungarumlautsmall",
                  "dollaroldstyle",
                  "dollarsuperior",
                  "ampersandsmall",
                  "Acutesmall",
                  "parenleftsuperior",
                  "parenrightsuperior",
                  "266 ff",
                  "onedotenleader",
                  "zerooldstyle",
                  "oneoldstyle",
                  "twooldstyle",
                  "threeoldstyle",
                  "fouroldstyle",
                  "fiveoldstyle",
                  "sixoldstyle",
                  "sevenoldstyle",
                  "eightoldstyle",
                  "nineoldstyle",
                  "commasuperior",
                  "threequartersemdash",
                  "periodsuperior",
                  "questionsmall",
                  "asuperior",
                  "bsuperior",
                  "centsuperior",
                  "dsuperior",
                  "esuperior",
                  "isuperior",
                  "lsuperior",
                  "msuperior",
                  "nsuperior",
                  "osuperior",
                  "rsuperior",
                  "ssuperior",
                  "tsuperior",
                  "ff",
                  "ffi",
                  "ffl",
                  "parenleftinferior",
                  "parenrightinferior",
                  "Circumflexsmall",
                  "hyphensuperior",
                  "Gravesmall",
                  "Asmall",
                  "Bsmall",
                  "Csmall",
                  "Dsmall",
                  "Esmall",
                  "Fsmall",
                  "Gsmall",
                  "Hsmall",
                  "Ismall",
                  "Jsmall",
                  "Ksmall",
                  "Lsmall",
                  "Msmall",
                  "Nsmall",
                  "Osmall",
                  "Psmall",
                  "Qsmall",
                  "Rsmall",
                  "Ssmall",
                  "Tsmall",
                  "Usmall",
                  "Vsmall",
                  "Wsmall",
                  "Xsmall",
                  "Ysmall",
                  "Zsmall",
                  "colonmonetary",
                  "onefitted",
                  "rupiah",
                  "Tildesmall",
                  "exclamdownsmall",
                  "centoldstyle",
                  "Lslashsmall",
                  "Scaronsmall",
                  "Zcaronsmall",
                  "Dieresissmall",
                  "Brevesmall",
                  "Caronsmall",
                  "Dotaccentsmall",
                  "Macronsmall",
                  "figuredash",
                  "hypheninferior",
                  "Ogoneksmall",
                  "Ringsmall",
                  "Cedillasmall",
                  "questiondownsmall",
                  "oneeighth",
                  "threeeighths",
                  "fiveeighths",
                  "seveneighths",
                  "onethird",
                  "twothirds",
                  "zerosuperior",
                  "foursuperior",
                  "fivesuperior",
                  "sixsuperior",
                  "sevensuperior",
                  "eightsuperior",
                  "ninesuperior",
                  "zeroinferior",
                  "oneinferior",
                  "twoinferior",
                  "threeinferior",
                  "fourinferior",
                  "fiveinferior",
                  "sixinferior",
                  "seveninferior",
                  "eightinferior",
                  "nineinferior",
                  "centinferior",
                  "dollarinferior",
                  "periodinferior",
                  "commainferior",
                  "Agravesmall",
                  "Aacutesmall",
                  "Acircumflexsmall",
                  "Atildesmall",
                  "Adieresissmall",
                  "Aringsmall",
                  "AEsmall",
                  "Ccedillasmall",
                  "Egravesmall",
                  "Eacutesmall",
                  "Ecircumflexsmall",
                  "Edieresissmall",
                  "Igravesmall",
                  "Iacutesmall",
                  "Icircumflexsmall",
                  "Idieresissmall",
                  "Ethsmall",
                  "Ntildesmall",
                  "Ogravesmall",
                  "Oacutesmall",
                  "Ocircumflexsmall",
                  "Otildesmall",
                  "Odieresissmall",
                  "OEsmall",
                  "Oslashsmall",
                  "Ugravesmall",
                  "Uacutesmall",
                  "Ucircumflexsmall",
                  "Udieresissmall",
                  "Yacutesmall",
                  "Thornsmall",
                  "Ydieresissmall",
                  "001.000",
                  "001.001",
                  "001.002",
                  "001.003",
                  "Black",
                  "Bold",
                  "Book",
                  "Light",
                  "Medium",
                  "Regular",
                  "Roman",
                  "Semibold"
                ];
                var cffStandardEncoding = [
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "space",
                  "exclam",
                  "quotedbl",
                  "numbersign",
                  "dollar",
                  "percent",
                  "ampersand",
                  "quoteright",
                  "parenleft",
                  "parenright",
                  "asterisk",
                  "plus",
                  "comma",
                  "hyphen",
                  "period",
                  "slash",
                  "zero",
                  "one",
                  "two",
                  "three",
                  "four",
                  "five",
                  "six",
                  "seven",
                  "eight",
                  "nine",
                  "colon",
                  "semicolon",
                  "less",
                  "equal",
                  "greater",
                  "question",
                  "at",
                  "A",
                  "B",
                  "C",
                  "D",
                  "E",
                  "F",
                  "G",
                  "H",
                  "I",
                  "J",
                  "K",
                  "L",
                  "M",
                  "N",
                  "O",
                  "P",
                  "Q",
                  "R",
                  "S",
                  "T",
                  "U",
                  "V",
                  "W",
                  "X",
                  "Y",
                  "Z",
                  "bracketleft",
                  "backslash",
                  "bracketright",
                  "asciicircum",
                  "underscore",
                  "quoteleft",
                  "a",
                  "b",
                  "c",
                  "d",
                  "e",
                  "f",
                  "g",
                  "h",
                  "i",
                  "j",
                  "k",
                  "l",
                  "m",
                  "n",
                  "o",
                  "p",
                  "q",
                  "r",
                  "s",
                  "t",
                  "u",
                  "v",
                  "w",
                  "x",
                  "y",
                  "z",
                  "braceleft",
                  "bar",
                  "braceright",
                  "asciitilde",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "exclamdown",
                  "cent",
                  "sterling",
                  "fraction",
                  "yen",
                  "florin",
                  "section",
                  "currency",
                  "quotesingle",
                  "quotedblleft",
                  "guillemotleft",
                  "guilsinglleft",
                  "guilsinglright",
                  "fi",
                  "fl",
                  "",
                  "endash",
                  "dagger",
                  "daggerdbl",
                  "periodcentered",
                  "",
                  "paragraph",
                  "bullet",
                  "quotesinglbase",
                  "quotedblbase",
                  "quotedblright",
                  "guillemotright",
                  "ellipsis",
                  "perthousand",
                  "",
                  "questiondown",
                  "",
                  "grave",
                  "acute",
                  "circumflex",
                  "tilde",
                  "macron",
                  "breve",
                  "dotaccent",
                  "dieresis",
                  "",
                  "ring",
                  "cedilla",
                  "",
                  "hungarumlaut",
                  "ogonek",
                  "caron",
                  "emdash",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "AE",
                  "",
                  "ordfeminine",
                  "",
                  "",
                  "",
                  "",
                  "Lslash",
                  "Oslash",
                  "OE",
                  "ordmasculine",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "ae",
                  "",
                  "",
                  "",
                  "dotlessi",
                  "",
                  "",
                  "lslash",
                  "oslash",
                  "oe",
                  "germandbls"
                ];
                var cffExpertEncoding = [
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "space",
                  "exclamsmall",
                  "Hungarumlautsmall",
                  "",
                  "dollaroldstyle",
                  "dollarsuperior",
                  "ampersandsmall",
                  "Acutesmall",
                  "parenleftsuperior",
                  "parenrightsuperior",
                  "twodotenleader",
                  "onedotenleader",
                  "comma",
                  "hyphen",
                  "period",
                  "fraction",
                  "zerooldstyle",
                  "oneoldstyle",
                  "twooldstyle",
                  "threeoldstyle",
                  "fouroldstyle",
                  "fiveoldstyle",
                  "sixoldstyle",
                  "sevenoldstyle",
                  "eightoldstyle",
                  "nineoldstyle",
                  "colon",
                  "semicolon",
                  "commasuperior",
                  "threequartersemdash",
                  "periodsuperior",
                  "questionsmall",
                  "",
                  "asuperior",
                  "bsuperior",
                  "centsuperior",
                  "dsuperior",
                  "esuperior",
                  "",
                  "",
                  "isuperior",
                  "",
                  "",
                  "lsuperior",
                  "msuperior",
                  "nsuperior",
                  "osuperior",
                  "",
                  "",
                  "rsuperior",
                  "ssuperior",
                  "tsuperior",
                  "",
                  "ff",
                  "fi",
                  "fl",
                  "ffi",
                  "ffl",
                  "parenleftinferior",
                  "",
                  "parenrightinferior",
                  "Circumflexsmall",
                  "hyphensuperior",
                  "Gravesmall",
                  "Asmall",
                  "Bsmall",
                  "Csmall",
                  "Dsmall",
                  "Esmall",
                  "Fsmall",
                  "Gsmall",
                  "Hsmall",
                  "Ismall",
                  "Jsmall",
                  "Ksmall",
                  "Lsmall",
                  "Msmall",
                  "Nsmall",
                  "Osmall",
                  "Psmall",
                  "Qsmall",
                  "Rsmall",
                  "Ssmall",
                  "Tsmall",
                  "Usmall",
                  "Vsmall",
                  "Wsmall",
                  "Xsmall",
                  "Ysmall",
                  "Zsmall",
                  "colonmonetary",
                  "onefitted",
                  "rupiah",
                  "Tildesmall",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "exclamdownsmall",
                  "centoldstyle",
                  "Lslashsmall",
                  "",
                  "",
                  "Scaronsmall",
                  "Zcaronsmall",
                  "Dieresissmall",
                  "Brevesmall",
                  "Caronsmall",
                  "",
                  "Dotaccentsmall",
                  "",
                  "",
                  "Macronsmall",
                  "",
                  "",
                  "figuredash",
                  "hypheninferior",
                  "",
                  "",
                  "Ogoneksmall",
                  "Ringsmall",
                  "Cedillasmall",
                  "",
                  "",
                  "",
                  "onequarter",
                  "onehalf",
                  "threequarters",
                  "questiondownsmall",
                  "oneeighth",
                  "threeeighths",
                  "fiveeighths",
                  "seveneighths",
                  "onethird",
                  "twothirds",
                  "",
                  "",
                  "zerosuperior",
                  "onesuperior",
                  "twosuperior",
                  "threesuperior",
                  "foursuperior",
                  "fivesuperior",
                  "sixsuperior",
                  "sevensuperior",
                  "eightsuperior",
                  "ninesuperior",
                  "zeroinferior",
                  "oneinferior",
                  "twoinferior",
                  "threeinferior",
                  "fourinferior",
                  "fiveinferior",
                  "sixinferior",
                  "seveninferior",
                  "eightinferior",
                  "nineinferior",
                  "centinferior",
                  "dollarinferior",
                  "periodinferior",
                  "commainferior",
                  "Agravesmall",
                  "Aacutesmall",
                  "Acircumflexsmall",
                  "Atildesmall",
                  "Adieresissmall",
                  "Aringsmall",
                  "AEsmall",
                  "Ccedillasmall",
                  "Egravesmall",
                  "Eacutesmall",
                  "Ecircumflexsmall",
                  "Edieresissmall",
                  "Igravesmall",
                  "Iacutesmall",
                  "Icircumflexsmall",
                  "Idieresissmall",
                  "Ethsmall",
                  "Ntildesmall",
                  "Ogravesmall",
                  "Oacutesmall",
                  "Ocircumflexsmall",
                  "Otildesmall",
                  "Odieresissmall",
                  "OEsmall",
                  "Oslashsmall",
                  "Ugravesmall",
                  "Uacutesmall",
                  "Ucircumflexsmall",
                  "Udieresissmall",
                  "Yacutesmall",
                  "Thornsmall",
                  "Ydieresissmall"
                ];
                var standardNames = [
                  ".notdef",
                  ".null",
                  "nonmarkingreturn",
                  "space",
                  "exclam",
                  "quotedbl",
                  "numbersign",
                  "dollar",
                  "percent",
                  "ampersand",
                  "quotesingle",
                  "parenleft",
                  "parenright",
                  "asterisk",
                  "plus",
                  "comma",
                  "hyphen",
                  "period",
                  "slash",
                  "zero",
                  "one",
                  "two",
                  "three",
                  "four",
                  "five",
                  "six",
                  "seven",
                  "eight",
                  "nine",
                  "colon",
                  "semicolon",
                  "less",
                  "equal",
                  "greater",
                  "question",
                  "at",
                  "A",
                  "B",
                  "C",
                  "D",
                  "E",
                  "F",
                  "G",
                  "H",
                  "I",
                  "J",
                  "K",
                  "L",
                  "M",
                  "N",
                  "O",
                  "P",
                  "Q",
                  "R",
                  "S",
                  "T",
                  "U",
                  "V",
                  "W",
                  "X",
                  "Y",
                  "Z",
                  "bracketleft",
                  "backslash",
                  "bracketright",
                  "asciicircum",
                  "underscore",
                  "grave",
                  "a",
                  "b",
                  "c",
                  "d",
                  "e",
                  "f",
                  "g",
                  "h",
                  "i",
                  "j",
                  "k",
                  "l",
                  "m",
                  "n",
                  "o",
                  "p",
                  "q",
                  "r",
                  "s",
                  "t",
                  "u",
                  "v",
                  "w",
                  "x",
                  "y",
                  "z",
                  "braceleft",
                  "bar",
                  "braceright",
                  "asciitilde",
                  "Adieresis",
                  "Aring",
                  "Ccedilla",
                  "Eacute",
                  "Ntilde",
                  "Odieresis",
                  "Udieresis",
                  "aacute",
                  "agrave",
                  "acircumflex",
                  "adieresis",
                  "atilde",
                  "aring",
                  "ccedilla",
                  "eacute",
                  "egrave",
                  "ecircumflex",
                  "edieresis",
                  "iacute",
                  "igrave",
                  "icircumflex",
                  "idieresis",
                  "ntilde",
                  "oacute",
                  "ograve",
                  "ocircumflex",
                  "odieresis",
                  "otilde",
                  "uacute",
                  "ugrave",
                  "ucircumflex",
                  "udieresis",
                  "dagger",
                  "degree",
                  "cent",
                  "sterling",
                  "section",
                  "bullet",
                  "paragraph",
                  "germandbls",
                  "registered",
                  "copyright",
                  "trademark",
                  "acute",
                  "dieresis",
                  "notequal",
                  "AE",
                  "Oslash",
                  "infinity",
                  "plusminus",
                  "lessequal",
                  "greaterequal",
                  "yen",
                  "mu",
                  "partialdiff",
                  "summation",
                  "product",
                  "pi",
                  "integral",
                  "ordfeminine",
                  "ordmasculine",
                  "Omega",
                  "ae",
                  "oslash",
                  "questiondown",
                  "exclamdown",
                  "logicalnot",
                  "radical",
                  "florin",
                  "approxequal",
                  "Delta",
                  "guillemotleft",
                  "guillemotright",
                  "ellipsis",
                  "nonbreakingspace",
                  "Agrave",
                  "Atilde",
                  "Otilde",
                  "OE",
                  "oe",
                  "endash",
                  "emdash",
                  "quotedblleft",
                  "quotedblright",
                  "quoteleft",
                  "quoteright",
                  "divide",
                  "lozenge",
                  "ydieresis",
                  "Ydieresis",
                  "fraction",
                  "currency",
                  "guilsinglleft",
                  "guilsinglright",
                  "fi",
                  "fl",
                  "daggerdbl",
                  "periodcentered",
                  "quotesinglbase",
                  "quotedblbase",
                  "perthousand",
                  "Acircumflex",
                  "Ecircumflex",
                  "Aacute",
                  "Edieresis",
                  "Egrave",
                  "Iacute",
                  "Icircumflex",
                  "Idieresis",
                  "Igrave",
                  "Oacute",
                  "Ocircumflex",
                  "apple",
                  "Ograve",
                  "Uacute",
                  "Ucircumflex",
                  "Ugrave",
                  "dotlessi",
                  "circumflex",
                  "tilde",
                  "macron",
                  "breve",
                  "dotaccent",
                  "ring",
                  "cedilla",
                  "hungarumlaut",
                  "ogonek",
                  "caron",
                  "Lslash",
                  "lslash",
                  "Scaron",
                  "scaron",
                  "Zcaron",
                  "zcaron",
                  "brokenbar",
                  "Eth",
                  "eth",
                  "Yacute",
                  "yacute",
                  "Thorn",
                  "thorn",
                  "minus",
                  "multiply",
                  "onesuperior",
                  "twosuperior",
                  "threesuperior",
                  "onehalf",
                  "onequarter",
                  "threequarters",
                  "franc",
                  "Gbreve",
                  "gbreve",
                  "Idotaccent",
                  "Scedilla",
                  "scedilla",
                  "Cacute",
                  "cacute",
                  "Ccaron",
                  "ccaron",
                  "dcroat"
                ];
                function DefaultEncoding(font) {
                  this.font = font;
                }
                DefaultEncoding.prototype.charToGlyphIndex = function(c) {
                  var code = c.codePointAt(0);
                  var glyphs = this.font.glyphs;
                  if (glyphs) {
                    for (var i2 = 0; i2 < glyphs.length; i2 += 1) {
                      var glyph = glyphs.get(i2);
                      for (var j = 0; j < glyph.unicodes.length; j += 1) {
                        if (glyph.unicodes[j] === code) {
                          return i2;
                        }
                      }
                    }
                  }
                  return null;
                };
                function CmapEncoding(cmap2) {
                  this.cmap = cmap2;
                }
                CmapEncoding.prototype.charToGlyphIndex = function(c) {
                  return this.cmap.glyphIndexMap[c.codePointAt(0)] || 0;
                };
                function CffEncoding(encoding, charset) {
                  this.encoding = encoding;
                  this.charset = charset;
                }
                CffEncoding.prototype.charToGlyphIndex = function(s) {
                  var code = s.codePointAt(0);
                  var charName = this.encoding[code];
                  return this.charset.indexOf(charName);
                };
                function GlyphNames(post2) {
                  var this$1 = this;
                  switch (post2.version) {
                    case 1:
                      this.names = standardNames.slice();
                      break;
                    case 2:
                      this.names = new Array(post2.numberOfGlyphs);
                      for (var i2 = 0; i2 < post2.numberOfGlyphs; i2++) {
                        if (post2.glyphNameIndex[i2] < standardNames.length) {
                          this$1.names[i2] = standardNames[post2.glyphNameIndex[i2]];
                        } else {
                          this$1.names[i2] = post2.names[post2.glyphNameIndex[i2] - standardNames.length];
                        }
                      }
                      break;
                    case 2.5:
                      this.names = new Array(post2.numberOfGlyphs);
                      for (var i$1 = 0; i$1 < post2.numberOfGlyphs; i$1++) {
                        this$1.names[i$1] = standardNames[i$1 + post2.glyphNameIndex[i$1]];
                      }
                      break;
                    case 3:
                      this.names = [];
                      break;
                    default:
                      this.names = [];
                      break;
                  }
                }
                GlyphNames.prototype.nameToGlyphIndex = function(name) {
                  return this.names.indexOf(name);
                };
                GlyphNames.prototype.glyphIndexToName = function(gid) {
                  return this.names[gid];
                };
                function addGlyphNames(font) {
                  var glyph;
                  var glyphIndexMap = font.tables.cmap.glyphIndexMap;
                  var charCodes = Object.keys(glyphIndexMap);
                  for (var i2 = 0; i2 < charCodes.length; i2 += 1) {
                    var c = charCodes[i2];
                    var glyphIndex = glyphIndexMap[c];
                    glyph = font.glyphs.get(glyphIndex);
                    glyph.addUnicode(parseInt(c));
                  }
                  for (var i$1 = 0; i$1 < font.glyphs.length; i$1 += 1) {
                    glyph = font.glyphs.get(i$1);
                    if (font.cffEncoding) {
                      if (font.isCIDFont) {
                        glyph.name = "gid" + i$1;
                      } else {
                        glyph.name = font.cffEncoding.charset[i$1];
                      }
                    } else if (font.glyphNames.names) {
                      glyph.name = font.glyphNames.glyphIndexToName(i$1);
                    }
                  }
                }
                function line(ctx, x1, y1, x2, y2) {
                  ctx.beginPath();
                  ctx.moveTo(x1, y1);
                  ctx.lineTo(x2, y2);
                  ctx.stroke();
                }
                var draw2 = {
                  line
                };
                function getPathDefinition(glyph, path) {
                  var _path = path || new Path();
                  return {
                    configurable: true,
                    get: function() {
                      if (typeof _path === "function") {
                        _path = _path();
                      }
                      return _path;
                    },
                    set: function(p) {
                      _path = p;
                    }
                  };
                }
                function Glyph(options) {
                  this.bindConstructorValues(options);
                }
                Glyph.prototype.bindConstructorValues = function(options) {
                  this.index = options.index || 0;
                  this.name = options.name || null;
                  this.unicode = options.unicode || void 0;
                  this.unicodes = options.unicodes || options.unicode !== void 0 ? [
                    options.unicode
                  ] : [];
                  if (options.xMin) {
                    this.xMin = options.xMin;
                  }
                  if (options.yMin) {
                    this.yMin = options.yMin;
                  }
                  if (options.xMax) {
                    this.xMax = options.xMax;
                  }
                  if (options.yMax) {
                    this.yMax = options.yMax;
                  }
                  if (options.advanceWidth) {
                    this.advanceWidth = options.advanceWidth;
                  }
                  Object.defineProperty(this, "path", getPathDefinition(this, options.path));
                };
                Glyph.prototype.addUnicode = function(unicode) {
                  if (this.unicodes.length === 0) {
                    this.unicode = unicode;
                  }
                  this.unicodes.push(unicode);
                };
                Glyph.prototype.getBoundingBox = function() {
                  return this.path.getBoundingBox();
                };
                Glyph.prototype.getPath = function(x, y, fontSize, options, font) {
                  x = x !== void 0 ? x : 0;
                  y = y !== void 0 ? y : 0;
                  fontSize = fontSize !== void 0 ? fontSize : 72;
                  var commands;
                  var hPoints;
                  if (!options) {
                    options = {};
                  }
                  var xScale = options.xScale;
                  var yScale = options.yScale;
                  if (options.hinting && font && font.hinting) {
                    hPoints = this.path && font.hinting.exec(this, fontSize);
                  }
                  if (hPoints) {
                    commands = font.hinting.getCommands(hPoints);
                    x = Math.round(x);
                    y = Math.round(y);
                    xScale = yScale = 1;
                  } else {
                    commands = this.path.commands;
                    var scale = 1 / this.path.unitsPerEm * fontSize;
                    if (xScale === void 0) {
                      xScale = scale;
                    }
                    if (yScale === void 0) {
                      yScale = scale;
                    }
                  }
                  var p = new Path();
                  for (var i2 = 0; i2 < commands.length; i2 += 1) {
                    var cmd = commands[i2];
                    if (cmd.type === "M") {
                      p.moveTo(x + cmd.x * xScale, y + -cmd.y * yScale);
                    } else if (cmd.type === "L") {
                      p.lineTo(x + cmd.x * xScale, y + -cmd.y * yScale);
                    } else if (cmd.type === "Q") {
                      p.quadraticCurveTo(x + cmd.x1 * xScale, y + -cmd.y1 * yScale, x + cmd.x * xScale, y + -cmd.y * yScale);
                    } else if (cmd.type === "C") {
                      p.curveTo(x + cmd.x1 * xScale, y + -cmd.y1 * yScale, x + cmd.x2 * xScale, y + -cmd.y2 * yScale, x + cmd.x * xScale, y + -cmd.y * yScale);
                    } else if (cmd.type === "Z") {
                      p.closePath();
                    }
                  }
                  return p;
                };
                Glyph.prototype.getContours = function() {
                  var this$1 = this;
                  if (this.points === void 0) {
                    return [];
                  }
                  var contours = [];
                  var currentContour = [];
                  for (var i2 = 0; i2 < this.points.length; i2 += 1) {
                    var pt = this$1.points[i2];
                    currentContour.push(pt);
                    if (pt.lastPointOfContour) {
                      contours.push(currentContour);
                      currentContour = [];
                    }
                  }
                  check.argument(currentContour.length === 0, "There are still points left in the current contour.");
                  return contours;
                };
                Glyph.prototype.getMetrics = function() {
                  var commands = this.path.commands;
                  var xCoords = [];
                  var yCoords = [];
                  for (var i2 = 0; i2 < commands.length; i2 += 1) {
                    var cmd = commands[i2];
                    if (cmd.type !== "Z") {
                      xCoords.push(cmd.x);
                      yCoords.push(cmd.y);
                    }
                    if (cmd.type === "Q" || cmd.type === "C") {
                      xCoords.push(cmd.x1);
                      yCoords.push(cmd.y1);
                    }
                    if (cmd.type === "C") {
                      xCoords.push(cmd.x2);
                      yCoords.push(cmd.y2);
                    }
                  }
                  var metrics = {
                    xMin: Math.min.apply(null, xCoords),
                    yMin: Math.min.apply(null, yCoords),
                    xMax: Math.max.apply(null, xCoords),
                    yMax: Math.max.apply(null, yCoords),
                    leftSideBearing: this.leftSideBearing
                  };
                  if (!isFinite(metrics.xMin)) {
                    metrics.xMin = 0;
                  }
                  if (!isFinite(metrics.xMax)) {
                    metrics.xMax = this.advanceWidth;
                  }
                  if (!isFinite(metrics.yMin)) {
                    metrics.yMin = 0;
                  }
                  if (!isFinite(metrics.yMax)) {
                    metrics.yMax = 0;
                  }
                  metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);
                  return metrics;
                };
                Glyph.prototype.draw = function(ctx, x, y, fontSize, options) {
                  this.getPath(x, y, fontSize, options).draw(ctx);
                };
                Glyph.prototype.drawPoints = function(ctx, x, y, fontSize) {
                  function drawCircles(l, x2, y2, scale2) {
                    var PI_SQ = Math.PI * 2;
                    ctx.beginPath();
                    for (var j = 0; j < l.length; j += 1) {
                      ctx.moveTo(x2 + l[j].x * scale2, y2 + l[j].y * scale2);
                      ctx.arc(x2 + l[j].x * scale2, y2 + l[j].y * scale2, 2, 0, PI_SQ, false);
                    }
                    ctx.closePath();
                    ctx.fill();
                  }
                  x = x !== void 0 ? x : 0;
                  y = y !== void 0 ? y : 0;
                  fontSize = fontSize !== void 0 ? fontSize : 24;
                  var scale = 1 / this.path.unitsPerEm * fontSize;
                  var blueCircles = [];
                  var redCircles = [];
                  var path = this.path;
                  for (var i2 = 0; i2 < path.commands.length; i2 += 1) {
                    var cmd = path.commands[i2];
                    if (cmd.x !== void 0) {
                      blueCircles.push({
                        x: cmd.x,
                        y: -cmd.y
                      });
                    }
                    if (cmd.x1 !== void 0) {
                      redCircles.push({
                        x: cmd.x1,
                        y: -cmd.y1
                      });
                    }
                    if (cmd.x2 !== void 0) {
                      redCircles.push({
                        x: cmd.x2,
                        y: -cmd.y2
                      });
                    }
                  }
                  ctx.fillStyle = "blue";
                  drawCircles(blueCircles, x, y, scale);
                  ctx.fillStyle = "red";
                  drawCircles(redCircles, x, y, scale);
                };
                Glyph.prototype.drawMetrics = function(ctx, x, y, fontSize) {
                  var scale;
                  x = x !== void 0 ? x : 0;
                  y = y !== void 0 ? y : 0;
                  fontSize = fontSize !== void 0 ? fontSize : 24;
                  scale = 1 / this.path.unitsPerEm * fontSize;
                  ctx.lineWidth = 1;
                  ctx.strokeStyle = "black";
                  draw2.line(ctx, x, -1e4, x, 1e4);
                  draw2.line(ctx, -1e4, y, 1e4, y);
                  var xMin = this.xMin || 0;
                  var yMin = this.yMin || 0;
                  var xMax = this.xMax || 0;
                  var yMax = this.yMax || 0;
                  var advanceWidth = this.advanceWidth || 0;
                  ctx.strokeStyle = "blue";
                  draw2.line(ctx, x + xMin * scale, -1e4, x + xMin * scale, 1e4);
                  draw2.line(ctx, x + xMax * scale, -1e4, x + xMax * scale, 1e4);
                  draw2.line(ctx, -1e4, y + -yMin * scale, 1e4, y + -yMin * scale);
                  draw2.line(ctx, -1e4, y + -yMax * scale, 1e4, y + -yMax * scale);
                  ctx.strokeStyle = "green";
                  draw2.line(ctx, x + advanceWidth * scale, -1e4, x + advanceWidth * scale, 1e4);
                };
                function defineDependentProperty(glyph, externalName, internalName) {
                  Object.defineProperty(glyph, externalName, {
                    get: function() {
                      glyph.path;
                      return glyph[internalName];
                    },
                    set: function(newValue) {
                      glyph[internalName] = newValue;
                    },
                    enumerable: true,
                    configurable: true
                  });
                }
                function GlyphSet(font, glyphs) {
                  var this$1 = this;
                  this.font = font;
                  this.glyphs = {};
                  if (Array.isArray(glyphs)) {
                    for (var i2 = 0; i2 < glyphs.length; i2++) {
                      this$1.glyphs[i2] = glyphs[i2];
                    }
                  }
                  this.length = glyphs && glyphs.length || 0;
                }
                GlyphSet.prototype.get = function(index) {
                  if (typeof this.glyphs[index] === "function") {
                    this.glyphs[index] = this.glyphs[index]();
                  }
                  return this.glyphs[index];
                };
                GlyphSet.prototype.push = function(index, loader) {
                  this.glyphs[index] = loader;
                  this.length++;
                };
                function glyphLoader(font, index) {
                  return new Glyph({
                    index,
                    font
                  });
                }
                function ttfGlyphLoader(font, index, parseGlyph2, data, position, buildPath2) {
                  return function() {
                    var glyph = new Glyph({
                      index,
                      font
                    });
                    glyph.path = function() {
                      parseGlyph2(glyph, data, position);
                      var path = buildPath2(font.glyphs, glyph);
                      path.unitsPerEm = font.unitsPerEm;
                      return path;
                    };
                    defineDependentProperty(glyph, "xMin", "_xMin");
                    defineDependentProperty(glyph, "xMax", "_xMax");
                    defineDependentProperty(glyph, "yMin", "_yMin");
                    defineDependentProperty(glyph, "yMax", "_yMax");
                    return glyph;
                  };
                }
                function cffGlyphLoader(font, index, parseCFFCharstring2, charstring) {
                  return function() {
                    var glyph = new Glyph({
                      index,
                      font
                    });
                    glyph.path = function() {
                      var path = parseCFFCharstring2(font, glyph, charstring);
                      path.unitsPerEm = font.unitsPerEm;
                      return path;
                    };
                    return glyph;
                  };
                }
                var glyphset = {
                  GlyphSet,
                  glyphLoader,
                  ttfGlyphLoader,
                  cffGlyphLoader
                };
                function equals(a, b) {
                  if (a === b) {
                    return true;
                  } else if (Array.isArray(a) && Array.isArray(b)) {
                    if (a.length !== b.length) {
                      return false;
                    }
                    for (var i2 = 0; i2 < a.length; i2 += 1) {
                      if (!equals(a[i2], b[i2])) {
                        return false;
                      }
                    }
                    return true;
                  } else {
                    return false;
                  }
                }
                function calcCFFSubroutineBias(subrs) {
                  var bias;
                  if (subrs.length < 1240) {
                    bias = 107;
                  } else if (subrs.length < 33900) {
                    bias = 1131;
                  } else {
                    bias = 32768;
                  }
                  return bias;
                }
                function parseCFFIndex(data, start, conversionFn) {
                  var offsets = [];
                  var objects = [];
                  var count = parse.getCard16(data, start);
                  var objectOffset;
                  var endOffset;
                  if (count !== 0) {
                    var offsetSize = parse.getByte(data, start + 2);
                    objectOffset = start + (count + 1) * offsetSize + 2;
                    var pos = start + 3;
                    for (var i2 = 0; i2 < count + 1; i2 += 1) {
                      offsets.push(parse.getOffset(data, pos, offsetSize));
                      pos += offsetSize;
                    }
                    endOffset = objectOffset + offsets[count];
                  } else {
                    endOffset = start + 2;
                  }
                  for (var i$1 = 0; i$1 < offsets.length - 1; i$1 += 1) {
                    var value = parse.getBytes(data, objectOffset + offsets[i$1], objectOffset + offsets[i$1 + 1]);
                    if (conversionFn) {
                      value = conversionFn(value);
                    }
                    objects.push(value);
                  }
                  return {
                    objects,
                    startOffset: start,
                    endOffset
                  };
                }
                function parseFloatOperand(parser) {
                  var s = "";
                  var eof = 15;
                  var lookup = [
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    ".",
                    "E",
                    "E-",
                    null,
                    "-"
                  ];
                  while (true) {
                    var b = parser.parseByte();
                    var n1 = b >> 4;
                    var n2 = b & 15;
                    if (n1 === eof) {
                      break;
                    }
                    s += lookup[n1];
                    if (n2 === eof) {
                      break;
                    }
                    s += lookup[n2];
                  }
                  return parseFloat(s);
                }
                function parseOperand(parser, b0) {
                  var b1;
                  var b2;
                  var b3;
                  var b4;
                  if (b0 === 28) {
                    b1 = parser.parseByte();
                    b2 = parser.parseByte();
                    return b1 << 8 | b2;
                  }
                  if (b0 === 29) {
                    b1 = parser.parseByte();
                    b2 = parser.parseByte();
                    b3 = parser.parseByte();
                    b4 = parser.parseByte();
                    return b1 << 24 | b2 << 16 | b3 << 8 | b4;
                  }
                  if (b0 === 30) {
                    return parseFloatOperand(parser);
                  }
                  if (b0 >= 32 && b0 <= 246) {
                    return b0 - 139;
                  }
                  if (b0 >= 247 && b0 <= 250) {
                    b1 = parser.parseByte();
                    return (b0 - 247) * 256 + b1 + 108;
                  }
                  if (b0 >= 251 && b0 <= 254) {
                    b1 = parser.parseByte();
                    return -(b0 - 251) * 256 - b1 - 108;
                  }
                  throw new Error("Invalid b0 " + b0);
                }
                function entriesToObject(entries) {
                  var o = {};
                  for (var i2 = 0; i2 < entries.length; i2 += 1) {
                    var key2 = entries[i2][0];
                    var values = entries[i2][1];
                    var value = void 0;
                    if (values.length === 1) {
                      value = values[0];
                    } else {
                      value = values;
                    }
                    if (o.hasOwnProperty(key2) && !isNaN(o[key2])) {
                      throw new Error("Object " + o + " already has key " + key2);
                    }
                    o[key2] = value;
                  }
                  return o;
                }
                function parseCFFDict(data, start, size) {
                  start = start !== void 0 ? start : 0;
                  var parser = new parse.Parser(data, start);
                  var entries = [];
                  var operands = [];
                  size = size !== void 0 ? size : data.length;
                  while (parser.relativeOffset < size) {
                    var op = parser.parseByte();
                    if (op <= 21) {
                      if (op === 12) {
                        op = 1200 + parser.parseByte();
                      }
                      entries.push([
                        op,
                        operands
                      ]);
                      operands = [];
                    } else {
                      operands.push(parseOperand(parser, op));
                    }
                  }
                  return entriesToObject(entries);
                }
                function getCFFString(strings, index) {
                  if (index <= 390) {
                    index = cffStandardStrings[index];
                  } else {
                    index = strings[index - 391];
                  }
                  return index;
                }
                function interpretDict(dict, meta2, strings) {
                  var newDict = {};
                  var value;
                  for (var i2 = 0; i2 < meta2.length; i2 += 1) {
                    var m = meta2[i2];
                    if (Array.isArray(m.type)) {
                      var values = [];
                      values.length = m.type.length;
                      for (var j = 0; j < m.type.length; j++) {
                        value = dict[m.op] !== void 0 ? dict[m.op][j] : void 0;
                        if (value === void 0) {
                          value = m.value !== void 0 && m.value[j] !== void 0 ? m.value[j] : null;
                        }
                        if (m.type[j] === "SID") {
                          value = getCFFString(strings, value);
                        }
                        values[j] = value;
                      }
                      newDict[m.name] = values;
                    } else {
                      value = dict[m.op];
                      if (value === void 0) {
                        value = m.value !== void 0 ? m.value : null;
                      }
                      if (m.type === "SID") {
                        value = getCFFString(strings, value);
                      }
                      newDict[m.name] = value;
                    }
                  }
                  return newDict;
                }
                function parseCFFHeader(data, start) {
                  var header = {};
                  header.formatMajor = parse.getCard8(data, start);
                  header.formatMinor = parse.getCard8(data, start + 1);
                  header.size = parse.getCard8(data, start + 2);
                  header.offsetSize = parse.getCard8(data, start + 3);
                  header.startOffset = start;
                  header.endOffset = start + 4;
                  return header;
                }
                var TOP_DICT_META = [
                  {
                    name: "version",
                    op: 0,
                    type: "SID"
                  },
                  {
                    name: "notice",
                    op: 1,
                    type: "SID"
                  },
                  {
                    name: "copyright",
                    op: 1200,
                    type: "SID"
                  },
                  {
                    name: "fullName",
                    op: 2,
                    type: "SID"
                  },
                  {
                    name: "familyName",
                    op: 3,
                    type: "SID"
                  },
                  {
                    name: "weight",
                    op: 4,
                    type: "SID"
                  },
                  {
                    name: "isFixedPitch",
                    op: 1201,
                    type: "number",
                    value: 0
                  },
                  {
                    name: "italicAngle",
                    op: 1202,
                    type: "number",
                    value: 0
                  },
                  {
                    name: "underlinePosition",
                    op: 1203,
                    type: "number",
                    value: -100
                  },
                  {
                    name: "underlineThickness",
                    op: 1204,
                    type: "number",
                    value: 50
                  },
                  {
                    name: "paintType",
                    op: 1205,
                    type: "number",
                    value: 0
                  },
                  {
                    name: "charstringType",
                    op: 1206,
                    type: "number",
                    value: 2
                  },
                  {
                    name: "fontMatrix",
                    op: 1207,
                    type: [
                      "real",
                      "real",
                      "real",
                      "real",
                      "real",
                      "real"
                    ],
                    value: [
                      1e-3,
                      0,
                      0,
                      1e-3,
                      0,
                      0
                    ]
                  },
                  {
                    name: "uniqueId",
                    op: 13,
                    type: "number"
                  },
                  {
                    name: "fontBBox",
                    op: 5,
                    type: [
                      "number",
                      "number",
                      "number",
                      "number"
                    ],
                    value: [
                      0,
                      0,
                      0,
                      0
                    ]
                  },
                  {
                    name: "strokeWidth",
                    op: 1208,
                    type: "number",
                    value: 0
                  },
                  {
                    name: "xuid",
                    op: 14,
                    type: [],
                    value: null
                  },
                  {
                    name: "charset",
                    op: 15,
                    type: "offset",
                    value: 0
                  },
                  {
                    name: "encoding",
                    op: 16,
                    type: "offset",
                    value: 0
                  },
                  {
                    name: "charStrings",
                    op: 17,
                    type: "offset",
                    value: 0
                  },
                  {
                    name: "private",
                    op: 18,
                    type: [
                      "number",
                      "offset"
                    ],
                    value: [
                      0,
                      0
                    ]
                  },
                  {
                    name: "ros",
                    op: 1230,
                    type: [
                      "SID",
                      "SID",
                      "number"
                    ]
                  },
                  {
                    name: "cidFontVersion",
                    op: 1231,
                    type: "number",
                    value: 0
                  },
                  {
                    name: "cidFontRevision",
                    op: 1232,
                    type: "number",
                    value: 0
                  },
                  {
                    name: "cidFontType",
                    op: 1233,
                    type: "number",
                    value: 0
                  },
                  {
                    name: "cidCount",
                    op: 1234,
                    type: "number",
                    value: 8720
                  },
                  {
                    name: "uidBase",
                    op: 1235,
                    type: "number"
                  },
                  {
                    name: "fdArray",
                    op: 1236,
                    type: "offset"
                  },
                  {
                    name: "fdSelect",
                    op: 1237,
                    type: "offset"
                  },
                  {
                    name: "fontName",
                    op: 1238,
                    type: "SID"
                  }
                ];
                var PRIVATE_DICT_META = [
                  {
                    name: "subrs",
                    op: 19,
                    type: "offset",
                    value: 0
                  },
                  {
                    name: "defaultWidthX",
                    op: 20,
                    type: "number",
                    value: 0
                  },
                  {
                    name: "nominalWidthX",
                    op: 21,
                    type: "number",
                    value: 0
                  }
                ];
                function parseCFFTopDict(data, strings) {
                  var dict = parseCFFDict(data, 0, data.byteLength);
                  return interpretDict(dict, TOP_DICT_META, strings);
                }
                function parseCFFPrivateDict(data, start, size, strings) {
                  var dict = parseCFFDict(data, start, size);
                  return interpretDict(dict, PRIVATE_DICT_META, strings);
                }
                function gatherCFFTopDicts(data, start, cffIndex, strings) {
                  var topDictArray = [];
                  for (var iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1) {
                    var topDictData = new DataView(new Uint8Array(cffIndex[iTopDict]).buffer);
                    var topDict = parseCFFTopDict(topDictData, strings);
                    topDict._subrs = [];
                    topDict._subrsBias = 0;
                    var privateSize = topDict.private[0];
                    var privateOffset = topDict.private[1];
                    if (privateSize !== 0 && privateOffset !== 0) {
                      var privateDict = parseCFFPrivateDict(data, privateOffset + start, privateSize, strings);
                      topDict._defaultWidthX = privateDict.defaultWidthX;
                      topDict._nominalWidthX = privateDict.nominalWidthX;
                      if (privateDict.subrs !== 0) {
                        var subrOffset = privateOffset + privateDict.subrs;
                        var subrIndex = parseCFFIndex(data, subrOffset + start);
                        topDict._subrs = subrIndex.objects;
                        topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);
                      }
                      topDict._privateDict = privateDict;
                    }
                    topDictArray.push(topDict);
                  }
                  return topDictArray;
                }
                function parseCFFCharset(data, start, nGlyphs, strings) {
                  var sid;
                  var count;
                  var parser = new parse.Parser(data, start);
                  nGlyphs -= 1;
                  var charset = [
                    ".notdef"
                  ];
                  var format = parser.parseCard8();
                  if (format === 0) {
                    for (var i2 = 0; i2 < nGlyphs; i2 += 1) {
                      sid = parser.parseSID();
                      charset.push(getCFFString(strings, sid));
                    }
                  } else if (format === 1) {
                    while (charset.length <= nGlyphs) {
                      sid = parser.parseSID();
                      count = parser.parseCard8();
                      for (var i$1 = 0; i$1 <= count; i$1 += 1) {
                        charset.push(getCFFString(strings, sid));
                        sid += 1;
                      }
                    }
                  } else if (format === 2) {
                    while (charset.length <= nGlyphs) {
                      sid = parser.parseSID();
                      count = parser.parseCard16();
                      for (var i$2 = 0; i$2 <= count; i$2 += 1) {
                        charset.push(getCFFString(strings, sid));
                        sid += 1;
                      }
                    }
                  } else {
                    throw new Error("Unknown charset format " + format);
                  }
                  return charset;
                }
                function parseCFFEncoding(data, start, charset) {
                  var code;
                  var enc = {};
                  var parser = new parse.Parser(data, start);
                  var format = parser.parseCard8();
                  if (format === 0) {
                    var nCodes = parser.parseCard8();
                    for (var i2 = 0; i2 < nCodes; i2 += 1) {
                      code = parser.parseCard8();
                      enc[code] = i2;
                    }
                  } else if (format === 1) {
                    var nRanges = parser.parseCard8();
                    code = 1;
                    for (var i$1 = 0; i$1 < nRanges; i$1 += 1) {
                      var first = parser.parseCard8();
                      var nLeft = parser.parseCard8();
                      for (var j = first; j <= first + nLeft; j += 1) {
                        enc[j] = code;
                        code += 1;
                      }
                    }
                  } else {
                    throw new Error("Unknown encoding format " + format);
                  }
                  return new CffEncoding(enc, charset);
                }
                function parseCFFCharstring(font, glyph, code) {
                  var c1x;
                  var c1y;
                  var c2x;
                  var c2y;
                  var p = new Path();
                  var stack = [];
                  var nStems = 0;
                  var haveWidth = false;
                  var open = false;
                  var x = 0;
                  var y = 0;
                  var subrs;
                  var subrsBias;
                  var defaultWidthX;
                  var nominalWidthX;
                  if (font.isCIDFont) {
                    var fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];
                    var fdDict = font.tables.cff.topDict._fdArray[fdIndex];
                    subrs = fdDict._subrs;
                    subrsBias = fdDict._subrsBias;
                    defaultWidthX = fdDict._defaultWidthX;
                    nominalWidthX = fdDict._nominalWidthX;
                  } else {
                    subrs = font.tables.cff.topDict._subrs;
                    subrsBias = font.tables.cff.topDict._subrsBias;
                    defaultWidthX = font.tables.cff.topDict._defaultWidthX;
                    nominalWidthX = font.tables.cff.topDict._nominalWidthX;
                  }
                  var width2 = defaultWidthX;
                  function newContour(x2, y2) {
                    if (open) {
                      p.closePath();
                    }
                    p.moveTo(x2, y2);
                    open = true;
                  }
                  function parseStems() {
                    var hasWidthArg;
                    hasWidthArg = stack.length % 2 !== 0;
                    if (hasWidthArg && !haveWidth) {
                      width2 = stack.shift() + nominalWidthX;
                    }
                    nStems += stack.length >> 1;
                    stack.length = 0;
                    haveWidth = true;
                  }
                  function parse$$1(code2) {
                    var b1;
                    var b2;
                    var b3;
                    var b4;
                    var codeIndex;
                    var subrCode;
                    var jpx;
                    var jpy;
                    var c3x;
                    var c3y;
                    var c4x;
                    var c4y;
                    var i2 = 0;
                    while (i2 < code2.length) {
                      var v = code2[i2];
                      i2 += 1;
                      switch (v) {
                        case 1:
                          parseStems();
                          break;
                        case 3:
                          parseStems();
                          break;
                        case 4:
                          if (stack.length > 1 && !haveWidth) {
                            width2 = stack.shift() + nominalWidthX;
                            haveWidth = true;
                          }
                          y += stack.pop();
                          newContour(x, y);
                          break;
                        case 5:
                          while (stack.length > 0) {
                            x += stack.shift();
                            y += stack.shift();
                            p.lineTo(x, y);
                          }
                          break;
                        case 6:
                          while (stack.length > 0) {
                            x += stack.shift();
                            p.lineTo(x, y);
                            if (stack.length === 0) {
                              break;
                            }
                            y += stack.shift();
                            p.lineTo(x, y);
                          }
                          break;
                        case 7:
                          while (stack.length > 0) {
                            y += stack.shift();
                            p.lineTo(x, y);
                            if (stack.length === 0) {
                              break;
                            }
                            x += stack.shift();
                            p.lineTo(x, y);
                          }
                          break;
                        case 8:
                          while (stack.length > 0) {
                            c1x = x + stack.shift();
                            c1y = y + stack.shift();
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            x = c2x + stack.shift();
                            y = c2y + stack.shift();
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                          }
                          break;
                        case 10:
                          codeIndex = stack.pop() + subrsBias;
                          subrCode = subrs[codeIndex];
                          if (subrCode) {
                            parse$$1(subrCode);
                          }
                          break;
                        case 11:
                          return;
                        case 12:
                          v = code2[i2];
                          i2 += 1;
                          switch (v) {
                            case 35:
                              c1x = x + stack.shift();
                              c1y = y + stack.shift();
                              c2x = c1x + stack.shift();
                              c2y = c1y + stack.shift();
                              jpx = c2x + stack.shift();
                              jpy = c2y + stack.shift();
                              c3x = jpx + stack.shift();
                              c3y = jpy + stack.shift();
                              c4x = c3x + stack.shift();
                              c4y = c3y + stack.shift();
                              x = c4x + stack.shift();
                              y = c4y + stack.shift();
                              stack.shift();
                              p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                              p.curveTo(c3x, c3y, c4x, c4y, x, y);
                              break;
                            case 34:
                              c1x = x + stack.shift();
                              c1y = y;
                              c2x = c1x + stack.shift();
                              c2y = c1y + stack.shift();
                              jpx = c2x + stack.shift();
                              jpy = c2y;
                              c3x = jpx + stack.shift();
                              c3y = c2y;
                              c4x = c3x + stack.shift();
                              c4y = y;
                              x = c4x + stack.shift();
                              p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                              p.curveTo(c3x, c3y, c4x, c4y, x, y);
                              break;
                            case 36:
                              c1x = x + stack.shift();
                              c1y = y + stack.shift();
                              c2x = c1x + stack.shift();
                              c2y = c1y + stack.shift();
                              jpx = c2x + stack.shift();
                              jpy = c2y;
                              c3x = jpx + stack.shift();
                              c3y = c2y;
                              c4x = c3x + stack.shift();
                              c4y = c3y + stack.shift();
                              x = c4x + stack.shift();
                              p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                              p.curveTo(c3x, c3y, c4x, c4y, x, y);
                              break;
                            case 37:
                              c1x = x + stack.shift();
                              c1y = y + stack.shift();
                              c2x = c1x + stack.shift();
                              c2y = c1y + stack.shift();
                              jpx = c2x + stack.shift();
                              jpy = c2y + stack.shift();
                              c3x = jpx + stack.shift();
                              c3y = jpy + stack.shift();
                              c4x = c3x + stack.shift();
                              c4y = c3y + stack.shift();
                              if (Math.abs(c4x - x) > Math.abs(c4y - y)) {
                                x = c4x + stack.shift();
                              } else {
                                y = c4y + stack.shift();
                              }
                              p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                              p.curveTo(c3x, c3y, c4x, c4y, x, y);
                              break;
                            default:
                              console.log("Glyph " + glyph.index + ": unknown operator " + 1200 + v);
                              stack.length = 0;
                          }
                          break;
                        case 14:
                          if (stack.length > 0 && !haveWidth) {
                            width2 = stack.shift() + nominalWidthX;
                            haveWidth = true;
                          }
                          if (open) {
                            p.closePath();
                            open = false;
                          }
                          break;
                        case 18:
                          parseStems();
                          break;
                        case 19:
                        case 20:
                          parseStems();
                          i2 += nStems + 7 >> 3;
                          break;
                        case 21:
                          if (stack.length > 2 && !haveWidth) {
                            width2 = stack.shift() + nominalWidthX;
                            haveWidth = true;
                          }
                          y += stack.pop();
                          x += stack.pop();
                          newContour(x, y);
                          break;
                        case 22:
                          if (stack.length > 1 && !haveWidth) {
                            width2 = stack.shift() + nominalWidthX;
                            haveWidth = true;
                          }
                          x += stack.pop();
                          newContour(x, y);
                          break;
                        case 23:
                          parseStems();
                          break;
                        case 24:
                          while (stack.length > 2) {
                            c1x = x + stack.shift();
                            c1y = y + stack.shift();
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            x = c2x + stack.shift();
                            y = c2y + stack.shift();
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                          }
                          x += stack.shift();
                          y += stack.shift();
                          p.lineTo(x, y);
                          break;
                        case 25:
                          while (stack.length > 6) {
                            x += stack.shift();
                            y += stack.shift();
                            p.lineTo(x, y);
                          }
                          c1x = x + stack.shift();
                          c1y = y + stack.shift();
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          x = c2x + stack.shift();
                          y = c2y + stack.shift();
                          p.curveTo(c1x, c1y, c2x, c2y, x, y);
                          break;
                        case 26:
                          if (stack.length % 2) {
                            x += stack.shift();
                          }
                          while (stack.length > 0) {
                            c1x = x;
                            c1y = y + stack.shift();
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            x = c2x;
                            y = c2y + stack.shift();
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                          }
                          break;
                        case 27:
                          if (stack.length % 2) {
                            y += stack.shift();
                          }
                          while (stack.length > 0) {
                            c1x = x + stack.shift();
                            c1y = y;
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            x = c2x + stack.shift();
                            y = c2y;
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                          }
                          break;
                        case 28:
                          b1 = code2[i2];
                          b2 = code2[i2 + 1];
                          stack.push((b1 << 24 | b2 << 16) >> 16);
                          i2 += 2;
                          break;
                        case 29:
                          codeIndex = stack.pop() + font.gsubrsBias;
                          subrCode = font.gsubrs[codeIndex];
                          if (subrCode) {
                            parse$$1(subrCode);
                          }
                          break;
                        case 30:
                          while (stack.length > 0) {
                            c1x = x;
                            c1y = y + stack.shift();
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            x = c2x + stack.shift();
                            y = c2y + (stack.length === 1 ? stack.shift() : 0);
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                            if (stack.length === 0) {
                              break;
                            }
                            c1x = x + stack.shift();
                            c1y = y;
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            y = c2y + stack.shift();
                            x = c2x + (stack.length === 1 ? stack.shift() : 0);
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                          }
                          break;
                        case 31:
                          while (stack.length > 0) {
                            c1x = x + stack.shift();
                            c1y = y;
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            y = c2y + stack.shift();
                            x = c2x + (stack.length === 1 ? stack.shift() : 0);
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                            if (stack.length === 0) {
                              break;
                            }
                            c1x = x;
                            c1y = y + stack.shift();
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            x = c2x + stack.shift();
                            y = c2y + (stack.length === 1 ? stack.shift() : 0);
                            p.curveTo(c1x, c1y, c2x, c2y, x, y);
                          }
                          break;
                        default:
                          if (v < 32) {
                            console.log("Glyph " + glyph.index + ": unknown operator " + v);
                          } else if (v < 247) {
                            stack.push(v - 139);
                          } else if (v < 251) {
                            b1 = code2[i2];
                            i2 += 1;
                            stack.push((v - 247) * 256 + b1 + 108);
                          } else if (v < 255) {
                            b1 = code2[i2];
                            i2 += 1;
                            stack.push(-(v - 251) * 256 - b1 - 108);
                          } else {
                            b1 = code2[i2];
                            b2 = code2[i2 + 1];
                            b3 = code2[i2 + 2];
                            b4 = code2[i2 + 3];
                            i2 += 4;
                            stack.push((b1 << 24 | b2 << 16 | b3 << 8 | b4) / 65536);
                          }
                      }
                    }
                  }
                  parse$$1(code);
                  glyph.advanceWidth = width2;
                  return p;
                }
                function parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {
                  var fdSelect = [];
                  var fdIndex;
                  var parser = new parse.Parser(data, start);
                  var format = parser.parseCard8();
                  if (format === 0) {
                    for (var iGid = 0; iGid < nGlyphs; iGid++) {
                      fdIndex = parser.parseCard8();
                      if (fdIndex >= fdArrayCount) {
                        throw new Error("CFF table CID Font FDSelect has bad FD index value " + fdIndex + " (FD count " + fdArrayCount + ")");
                      }
                      fdSelect.push(fdIndex);
                    }
                  } else if (format === 3) {
                    var nRanges = parser.parseCard16();
                    var first = parser.parseCard16();
                    if (first !== 0) {
                      throw new Error("CFF Table CID Font FDSelect format 3 range has bad initial GID " + first);
                    }
                    var next;
                    for (var iRange = 0; iRange < nRanges; iRange++) {
                      fdIndex = parser.parseCard8();
                      next = parser.parseCard16();
                      if (fdIndex >= fdArrayCount) {
                        throw new Error("CFF table CID Font FDSelect has bad FD index value " + fdIndex + " (FD count " + fdArrayCount + ")");
                      }
                      if (next > nGlyphs) {
                        throw new Error("CFF Table CID Font FDSelect format 3 range has bad GID " + next);
                      }
                      for (; first < next; first++) {
                        fdSelect.push(fdIndex);
                      }
                      first = next;
                    }
                    if (next !== nGlyphs) {
                      throw new Error("CFF Table CID Font FDSelect format 3 range has bad final GID " + next);
                    }
                  } else {
                    throw new Error("CFF Table CID Font FDSelect table has unsupported format " + format);
                  }
                  return fdSelect;
                }
                function parseCFFTable(data, start, font) {
                  font.tables.cff = {};
                  var header = parseCFFHeader(data, start);
                  var nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);
                  var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);
                  var stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse.bytesToString);
                  var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);
                  font.gsubrs = globalSubrIndex.objects;
                  font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);
                  var topDictArray = gatherCFFTopDicts(data, start, topDictIndex.objects, stringIndex.objects);
                  if (topDictArray.length !== 1) {
                    throw new Error("CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = " + topDictArray.length);
                  }
                  var topDict = topDictArray[0];
                  font.tables.cff.topDict = topDict;
                  if (topDict._privateDict) {
                    font.defaultWidthX = topDict._privateDict.defaultWidthX;
                    font.nominalWidthX = topDict._privateDict.nominalWidthX;
                  }
                  if (topDict.ros[0] !== void 0 && topDict.ros[1] !== void 0) {
                    font.isCIDFont = true;
                  }
                  if (font.isCIDFont) {
                    var fdArrayOffset = topDict.fdArray;
                    var fdSelectOffset = topDict.fdSelect;
                    if (fdArrayOffset === 0 || fdSelectOffset === 0) {
                      throw new Error("Font is marked as a CID font, but FDArray and/or FDSelect information is missing");
                    }
                    fdArrayOffset += start;
                    var fdArrayIndex = parseCFFIndex(data, fdArrayOffset);
                    var fdArray = gatherCFFTopDicts(data, start, fdArrayIndex.objects, stringIndex.objects);
                    topDict._fdArray = fdArray;
                    fdSelectOffset += start;
                    topDict._fdSelect = parseCFFFDSelect(data, fdSelectOffset, font.numGlyphs, fdArray.length);
                  }
                  var privateDictOffset = start + topDict.private[1];
                  var privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict.private[0], stringIndex.objects);
                  font.defaultWidthX = privateDict.defaultWidthX;
                  font.nominalWidthX = privateDict.nominalWidthX;
                  if (privateDict.subrs !== 0) {
                    var subrOffset = privateDictOffset + privateDict.subrs;
                    var subrIndex = parseCFFIndex(data, subrOffset);
                    font.subrs = subrIndex.objects;
                    font.subrsBias = calcCFFSubroutineBias(font.subrs);
                  } else {
                    font.subrs = [];
                    font.subrsBias = 0;
                  }
                  var charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);
                  font.nGlyphs = charStringsIndex.objects.length;
                  var charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);
                  if (topDict.encoding === 0) {
                    font.cffEncoding = new CffEncoding(cffStandardEncoding, charset);
                  } else if (topDict.encoding === 1) {
                    font.cffEncoding = new CffEncoding(cffExpertEncoding, charset);
                  } else {
                    font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);
                  }
                  font.encoding = font.encoding || font.cffEncoding;
                  font.glyphs = new glyphset.GlyphSet(font);
                  for (var i2 = 0; i2 < font.nGlyphs; i2 += 1) {
                    var charString = charStringsIndex.objects[i2];
                    font.glyphs.push(i2, glyphset.cffGlyphLoader(font, i2, parseCFFCharstring, charString));
                  }
                }
                function encodeString(s, strings) {
                  var sid;
                  var i2 = cffStandardStrings.indexOf(s);
                  if (i2 >= 0) {
                    sid = i2;
                  }
                  i2 = strings.indexOf(s);
                  if (i2 >= 0) {
                    sid = i2 + cffStandardStrings.length;
                  } else {
                    sid = cffStandardStrings.length + strings.length;
                    strings.push(s);
                  }
                  return sid;
                }
                function makeHeader() {
                  return new table.Record("Header", [
                    {
                      name: "major",
                      type: "Card8",
                      value: 1
                    },
                    {
                      name: "minor",
                      type: "Card8",
                      value: 0
                    },
                    {
                      name: "hdrSize",
                      type: "Card8",
                      value: 4
                    },
                    {
                      name: "major",
                      type: "Card8",
                      value: 1
                    }
                  ]);
                }
                function makeNameIndex(fontNames) {
                  var t = new table.Record("Name INDEX", [
                    {
                      name: "names",
                      type: "INDEX",
                      value: []
                    }
                  ]);
                  t.names = [];
                  for (var i2 = 0; i2 < fontNames.length; i2 += 1) {
                    t.names.push({
                      name: "name_" + i2,
                      type: "NAME",
                      value: fontNames[i2]
                    });
                  }
                  return t;
                }
                function makeDict(meta2, attrs, strings) {
                  var m = {};
                  for (var i2 = 0; i2 < meta2.length; i2 += 1) {
                    var entry = meta2[i2];
                    var value = attrs[entry.name];
                    if (value !== void 0 && !equals(value, entry.value)) {
                      if (entry.type === "SID") {
                        value = encodeString(value, strings);
                      }
                      m[entry.op] = {
                        name: entry.name,
                        type: entry.type,
                        value
                      };
                    }
                  }
                  return m;
                }
                function makeTopDict(attrs, strings) {
                  var t = new table.Record("Top DICT", [
                    {
                      name: "dict",
                      type: "DICT",
                      value: {}
                    }
                  ]);
                  t.dict = makeDict(TOP_DICT_META, attrs, strings);
                  return t;
                }
                function makeTopDictIndex(topDict) {
                  var t = new table.Record("Top DICT INDEX", [
                    {
                      name: "topDicts",
                      type: "INDEX",
                      value: []
                    }
                  ]);
                  t.topDicts = [
                    {
                      name: "topDict_0",
                      type: "TABLE",
                      value: topDict
                    }
                  ];
                  return t;
                }
                function makeStringIndex(strings) {
                  var t = new table.Record("String INDEX", [
                    {
                      name: "strings",
                      type: "INDEX",
                      value: []
                    }
                  ]);
                  t.strings = [];
                  for (var i2 = 0; i2 < strings.length; i2 += 1) {
                    t.strings.push({
                      name: "string_" + i2,
                      type: "STRING",
                      value: strings[i2]
                    });
                  }
                  return t;
                }
                function makeGlobalSubrIndex() {
                  return new table.Record("Global Subr INDEX", [
                    {
                      name: "subrs",
                      type: "INDEX",
                      value: []
                    }
                  ]);
                }
                function makeCharsets(glyphNames, strings) {
                  var t = new table.Record("Charsets", [
                    {
                      name: "format",
                      type: "Card8",
                      value: 0
                    }
                  ]);
                  for (var i2 = 0; i2 < glyphNames.length; i2 += 1) {
                    var glyphName = glyphNames[i2];
                    var glyphSID = encodeString(glyphName, strings);
                    t.fields.push({
                      name: "glyph_" + i2,
                      type: "SID",
                      value: glyphSID
                    });
                  }
                  return t;
                }
                function glyphToOps(glyph) {
                  var ops = [];
                  var path = glyph.path;
                  ops.push({
                    name: "width",
                    type: "NUMBER",
                    value: glyph.advanceWidth
                  });
                  var x = 0;
                  var y = 0;
                  for (var i2 = 0; i2 < path.commands.length; i2 += 1) {
                    var dx = void 0;
                    var dy = void 0;
                    var cmd = path.commands[i2];
                    if (cmd.type === "Q") {
                      var _13 = 1 / 3;
                      var _23 = 2 / 3;
                      cmd = {
                        type: "C",
                        x: cmd.x,
                        y: cmd.y,
                        x1: _13 * x + _23 * cmd.x1,
                        y1: _13 * y + _23 * cmd.y1,
                        x2: _13 * cmd.x + _23 * cmd.x1,
                        y2: _13 * cmd.y + _23 * cmd.y1
                      };
                    }
                    if (cmd.type === "M") {
                      dx = Math.round(cmd.x - x);
                      dy = Math.round(cmd.y - y);
                      ops.push({
                        name: "dx",
                        type: "NUMBER",
                        value: dx
                      });
                      ops.push({
                        name: "dy",
                        type: "NUMBER",
                        value: dy
                      });
                      ops.push({
                        name: "rmoveto",
                        type: "OP",
                        value: 21
                      });
                      x = Math.round(cmd.x);
                      y = Math.round(cmd.y);
                    } else if (cmd.type === "L") {
                      dx = Math.round(cmd.x - x);
                      dy = Math.round(cmd.y - y);
                      ops.push({
                        name: "dx",
                        type: "NUMBER",
                        value: dx
                      });
                      ops.push({
                        name: "dy",
                        type: "NUMBER",
                        value: dy
                      });
                      ops.push({
                        name: "rlineto",
                        type: "OP",
                        value: 5
                      });
                      x = Math.round(cmd.x);
                      y = Math.round(cmd.y);
                    } else if (cmd.type === "C") {
                      var dx1 = Math.round(cmd.x1 - x);
                      var dy1 = Math.round(cmd.y1 - y);
                      var dx2 = Math.round(cmd.x2 - cmd.x1);
                      var dy2 = Math.round(cmd.y2 - cmd.y1);
                      dx = Math.round(cmd.x - cmd.x2);
                      dy = Math.round(cmd.y - cmd.y2);
                      ops.push({
                        name: "dx1",
                        type: "NUMBER",
                        value: dx1
                      });
                      ops.push({
                        name: "dy1",
                        type: "NUMBER",
                        value: dy1
                      });
                      ops.push({
                        name: "dx2",
                        type: "NUMBER",
                        value: dx2
                      });
                      ops.push({
                        name: "dy2",
                        type: "NUMBER",
                        value: dy2
                      });
                      ops.push({
                        name: "dx",
                        type: "NUMBER",
                        value: dx
                      });
                      ops.push({
                        name: "dy",
                        type: "NUMBER",
                        value: dy
                      });
                      ops.push({
                        name: "rrcurveto",
                        type: "OP",
                        value: 8
                      });
                      x = Math.round(cmd.x);
                      y = Math.round(cmd.y);
                    }
                  }
                  ops.push({
                    name: "endchar",
                    type: "OP",
                    value: 14
                  });
                  return ops;
                }
                function makeCharStringsIndex(glyphs) {
                  var t = new table.Record("CharStrings INDEX", [
                    {
                      name: "charStrings",
                      type: "INDEX",
                      value: []
                    }
                  ]);
                  for (var i2 = 0; i2 < glyphs.length; i2 += 1) {
                    var glyph = glyphs.get(i2);
                    var ops = glyphToOps(glyph);
                    t.charStrings.push({
                      name: glyph.name,
                      type: "CHARSTRING",
                      value: ops
                    });
                  }
                  return t;
                }
                function makePrivateDict(attrs, strings) {
                  var t = new table.Record("Private DICT", [
                    {
                      name: "dict",
                      type: "DICT",
                      value: {}
                    }
                  ]);
                  t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);
                  return t;
                }
                function makeCFFTable(glyphs, options) {
                  var t = new table.Table("CFF ", [
                    {
                      name: "header",
                      type: "RECORD"
                    },
                    {
                      name: "nameIndex",
                      type: "RECORD"
                    },
                    {
                      name: "topDictIndex",
                      type: "RECORD"
                    },
                    {
                      name: "stringIndex",
                      type: "RECORD"
                    },
                    {
                      name: "globalSubrIndex",
                      type: "RECORD"
                    },
                    {
                      name: "charsets",
                      type: "RECORD"
                    },
                    {
                      name: "charStringsIndex",
                      type: "RECORD"
                    },
                    {
                      name: "privateDict",
                      type: "RECORD"
                    }
                  ]);
                  var fontScale = 1 / options.unitsPerEm;
                  var attrs = {
                    version: options.version,
                    fullName: options.fullName,
                    familyName: options.familyName,
                    weight: options.weightName,
                    fontBBox: options.fontBBox || [
                      0,
                      0,
                      0,
                      0
                    ],
                    fontMatrix: [
                      fontScale,
                      0,
                      0,
                      fontScale,
                      0,
                      0
                    ],
                    charset: 999,
                    encoding: 0,
                    charStrings: 999,
                    private: [
                      0,
                      999
                    ]
                  };
                  var privateAttrs = {};
                  var glyphNames = [];
                  var glyph;
                  for (var i2 = 1; i2 < glyphs.length; i2 += 1) {
                    glyph = glyphs.get(i2);
                    glyphNames.push(glyph.name);
                  }
                  var strings = [];
                  t.header = makeHeader();
                  t.nameIndex = makeNameIndex([options.postScriptName]);
                  var topDict = makeTopDict(attrs, strings);
                  t.topDictIndex = makeTopDictIndex(topDict);
                  t.globalSubrIndex = makeGlobalSubrIndex();
                  t.charsets = makeCharsets(glyphNames, strings);
                  t.charStringsIndex = makeCharStringsIndex(glyphs);
                  t.privateDict = makePrivateDict(privateAttrs, strings);
                  t.stringIndex = makeStringIndex(strings);
                  var startOffset = t.header.sizeOf() + t.nameIndex.sizeOf() + t.topDictIndex.sizeOf() + t.stringIndex.sizeOf() + t.globalSubrIndex.sizeOf();
                  attrs.charset = startOffset;
                  attrs.encoding = 0;
                  attrs.charStrings = attrs.charset + t.charsets.sizeOf();
                  attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf();
                  topDict = makeTopDict(attrs, strings);
                  t.topDictIndex = makeTopDictIndex(topDict);
                  return t;
                }
                var cff = {
                  parse: parseCFFTable,
                  make: makeCFFTable
                };
                function parseHeadTable(data, start) {
                  var head2 = {};
                  var p = new parse.Parser(data, start);
                  head2.version = p.parseVersion();
                  head2.fontRevision = Math.round(p.parseFixed() * 1e3) / 1e3;
                  head2.checkSumAdjustment = p.parseULong();
                  head2.magicNumber = p.parseULong();
                  check.argument(head2.magicNumber === 1594834165, "Font header has wrong magic number.");
                  head2.flags = p.parseUShort();
                  head2.unitsPerEm = p.parseUShort();
                  head2.created = p.parseLongDateTime();
                  head2.modified = p.parseLongDateTime();
                  head2.xMin = p.parseShort();
                  head2.yMin = p.parseShort();
                  head2.xMax = p.parseShort();
                  head2.yMax = p.parseShort();
                  head2.macStyle = p.parseUShort();
                  head2.lowestRecPPEM = p.parseUShort();
                  head2.fontDirectionHint = p.parseShort();
                  head2.indexToLocFormat = p.parseShort();
                  head2.glyphDataFormat = p.parseShort();
                  return head2;
                }
                function makeHeadTable(options) {
                  var timestamp = Math.round(new Date().getTime() / 1e3) + 2082844800;
                  var createdTimestamp = timestamp;
                  if (options.createdTimestamp) {
                    createdTimestamp = options.createdTimestamp + 2082844800;
                  }
                  return new table.Table("head", [
                    {
                      name: "version",
                      type: "FIXED",
                      value: 65536
                    },
                    {
                      name: "fontRevision",
                      type: "FIXED",
                      value: 65536
                    },
                    {
                      name: "checkSumAdjustment",
                      type: "ULONG",
                      value: 0
                    },
                    {
                      name: "magicNumber",
                      type: "ULONG",
                      value: 1594834165
                    },
                    {
                      name: "flags",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "unitsPerEm",
                      type: "USHORT",
                      value: 1e3
                    },
                    {
                      name: "created",
                      type: "LONGDATETIME",
                      value: createdTimestamp
                    },
                    {
                      name: "modified",
                      type: "LONGDATETIME",
                      value: timestamp
                    },
                    {
                      name: "xMin",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "yMin",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "xMax",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "yMax",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "macStyle",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "lowestRecPPEM",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "fontDirectionHint",
                      type: "SHORT",
                      value: 2
                    },
                    {
                      name: "indexToLocFormat",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "glyphDataFormat",
                      type: "SHORT",
                      value: 0
                    }
                  ], options);
                }
                var head = {
                  parse: parseHeadTable,
                  make: makeHeadTable
                };
                function parseHheaTable(data, start) {
                  var hhea2 = {};
                  var p = new parse.Parser(data, start);
                  hhea2.version = p.parseVersion();
                  hhea2.ascender = p.parseShort();
                  hhea2.descender = p.parseShort();
                  hhea2.lineGap = p.parseShort();
                  hhea2.advanceWidthMax = p.parseUShort();
                  hhea2.minLeftSideBearing = p.parseShort();
                  hhea2.minRightSideBearing = p.parseShort();
                  hhea2.xMaxExtent = p.parseShort();
                  hhea2.caretSlopeRise = p.parseShort();
                  hhea2.caretSlopeRun = p.parseShort();
                  hhea2.caretOffset = p.parseShort();
                  p.relativeOffset += 8;
                  hhea2.metricDataFormat = p.parseShort();
                  hhea2.numberOfHMetrics = p.parseUShort();
                  return hhea2;
                }
                function makeHheaTable(options) {
                  return new table.Table("hhea", [
                    {
                      name: "version",
                      type: "FIXED",
                      value: 65536
                    },
                    {
                      name: "ascender",
                      type: "FWORD",
                      value: 0
                    },
                    {
                      name: "descender",
                      type: "FWORD",
                      value: 0
                    },
                    {
                      name: "lineGap",
                      type: "FWORD",
                      value: 0
                    },
                    {
                      name: "advanceWidthMax",
                      type: "UFWORD",
                      value: 0
                    },
                    {
                      name: "minLeftSideBearing",
                      type: "FWORD",
                      value: 0
                    },
                    {
                      name: "minRightSideBearing",
                      type: "FWORD",
                      value: 0
                    },
                    {
                      name: "xMaxExtent",
                      type: "FWORD",
                      value: 0
                    },
                    {
                      name: "caretSlopeRise",
                      type: "SHORT",
                      value: 1
                    },
                    {
                      name: "caretSlopeRun",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "caretOffset",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "reserved1",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "reserved2",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "reserved3",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "reserved4",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "metricDataFormat",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "numberOfHMetrics",
                      type: "USHORT",
                      value: 0
                    }
                  ], options);
                }
                var hhea = {
                  parse: parseHheaTable,
                  make: makeHheaTable
                };
                function parseHmtxTable(data, start, numMetrics, numGlyphs, glyphs) {
                  var advanceWidth;
                  var leftSideBearing;
                  var p = new parse.Parser(data, start);
                  for (var i2 = 0; i2 < numGlyphs; i2 += 1) {
                    if (i2 < numMetrics) {
                      advanceWidth = p.parseUShort();
                      leftSideBearing = p.parseShort();
                    }
                    var glyph = glyphs.get(i2);
                    glyph.advanceWidth = advanceWidth;
                    glyph.leftSideBearing = leftSideBearing;
                  }
                }
                function makeHmtxTable(glyphs) {
                  var t = new table.Table("hmtx", []);
                  for (var i2 = 0; i2 < glyphs.length; i2 += 1) {
                    var glyph = glyphs.get(i2);
                    var advanceWidth = glyph.advanceWidth || 0;
                    var leftSideBearing = glyph.leftSideBearing || 0;
                    t.fields.push({
                      name: "advanceWidth_" + i2,
                      type: "USHORT",
                      value: advanceWidth
                    });
                    t.fields.push({
                      name: "leftSideBearing_" + i2,
                      type: "SHORT",
                      value: leftSideBearing
                    });
                  }
                  return t;
                }
                var hmtx = {
                  parse: parseHmtxTable,
                  make: makeHmtxTable
                };
                function makeLtagTable(tags) {
                  var result = new table.Table("ltag", [
                    {
                      name: "version",
                      type: "ULONG",
                      value: 1
                    },
                    {
                      name: "flags",
                      type: "ULONG",
                      value: 0
                    },
                    {
                      name: "numTags",
                      type: "ULONG",
                      value: tags.length
                    }
                  ]);
                  var stringPool = "";
                  var stringPoolOffset = 12 + tags.length * 4;
                  for (var i2 = 0; i2 < tags.length; ++i2) {
                    var pos = stringPool.indexOf(tags[i2]);
                    if (pos < 0) {
                      pos = stringPool.length;
                      stringPool += tags[i2];
                    }
                    result.fields.push({
                      name: "offset " + i2,
                      type: "USHORT",
                      value: stringPoolOffset + pos
                    });
                    result.fields.push({
                      name: "length " + i2,
                      type: "USHORT",
                      value: tags[i2].length
                    });
                  }
                  result.fields.push({
                    name: "stringPool",
                    type: "CHARARRAY",
                    value: stringPool
                  });
                  return result;
                }
                function parseLtagTable(data, start) {
                  var p = new parse.Parser(data, start);
                  var tableVersion = p.parseULong();
                  check.argument(tableVersion === 1, "Unsupported ltag table version.");
                  p.skip("uLong", 1);
                  var numTags = p.parseULong();
                  var tags = [];
                  for (var i2 = 0; i2 < numTags; i2++) {
                    var tag = "";
                    var offset = start + p.parseUShort();
                    var length = p.parseUShort();
                    for (var j = offset; j < offset + length; ++j) {
                      tag += String.fromCharCode(data.getInt8(j));
                    }
                    tags.push(tag);
                  }
                  return tags;
                }
                var ltag = {
                  make: makeLtagTable,
                  parse: parseLtagTable
                };
                function parseMaxpTable(data, start) {
                  var maxp2 = {};
                  var p = new parse.Parser(data, start);
                  maxp2.version = p.parseVersion();
                  maxp2.numGlyphs = p.parseUShort();
                  if (maxp2.version === 1) {
                    maxp2.maxPoints = p.parseUShort();
                    maxp2.maxContours = p.parseUShort();
                    maxp2.maxCompositePoints = p.parseUShort();
                    maxp2.maxCompositeContours = p.parseUShort();
                    maxp2.maxZones = p.parseUShort();
                    maxp2.maxTwilightPoints = p.parseUShort();
                    maxp2.maxStorage = p.parseUShort();
                    maxp2.maxFunctionDefs = p.parseUShort();
                    maxp2.maxInstructionDefs = p.parseUShort();
                    maxp2.maxStackElements = p.parseUShort();
                    maxp2.maxSizeOfInstructions = p.parseUShort();
                    maxp2.maxComponentElements = p.parseUShort();
                    maxp2.maxComponentDepth = p.parseUShort();
                  }
                  return maxp2;
                }
                function makeMaxpTable(numGlyphs) {
                  return new table.Table("maxp", [
                    {
                      name: "version",
                      type: "FIXED",
                      value: 20480
                    },
                    {
                      name: "numGlyphs",
                      type: "USHORT",
                      value: numGlyphs
                    }
                  ]);
                }
                var maxp = {
                  parse: parseMaxpTable,
                  make: makeMaxpTable
                };
                var nameTableNames = [
                  "copyright",
                  // 0
                  "fontFamily",
                  // 1
                  "fontSubfamily",
                  // 2
                  "uniqueID",
                  // 3
                  "fullName",
                  // 4
                  "version",
                  // 5
                  "postScriptName",
                  // 6
                  "trademark",
                  // 7
                  "manufacturer",
                  // 8
                  "designer",
                  // 9
                  "description",
                  // 10
                  "manufacturerURL",
                  // 11
                  "designerURL",
                  // 12
                  "license",
                  // 13
                  "licenseURL",
                  // 14
                  "reserved",
                  // 15
                  "preferredFamily",
                  // 16
                  "preferredSubfamily",
                  // 17
                  "compatibleFullName",
                  // 18
                  "sampleText",
                  // 19
                  "postScriptFindFontName",
                  // 20
                  "wwsFamily",
                  // 21
                  "wwsSubfamily"
                  // 22
                ];
                var macLanguages = {
                  0: "en",
                  1: "fr",
                  2: "de",
                  3: "it",
                  4: "nl",
                  5: "sv",
                  6: "es",
                  7: "da",
                  8: "pt",
                  9: "no",
                  10: "he",
                  11: "ja",
                  12: "ar",
                  13: "fi",
                  14: "el",
                  15: "is",
                  16: "mt",
                  17: "tr",
                  18: "hr",
                  19: "zh-Hant",
                  20: "ur",
                  21: "hi",
                  22: "th",
                  23: "ko",
                  24: "lt",
                  25: "pl",
                  26: "hu",
                  27: "es",
                  28: "lv",
                  29: "se",
                  30: "fo",
                  31: "fa",
                  32: "ru",
                  33: "zh",
                  34: "nl-BE",
                  35: "ga",
                  36: "sq",
                  37: "ro",
                  38: "cz",
                  39: "sk",
                  40: "si",
                  41: "yi",
                  42: "sr",
                  43: "mk",
                  44: "bg",
                  45: "uk",
                  46: "be",
                  47: "uz",
                  48: "kk",
                  49: "az-Cyrl",
                  50: "az-Arab",
                  51: "hy",
                  52: "ka",
                  53: "mo",
                  54: "ky",
                  55: "tg",
                  56: "tk",
                  57: "mn-CN",
                  58: "mn",
                  59: "ps",
                  60: "ks",
                  61: "ku",
                  62: "sd",
                  63: "bo",
                  64: "ne",
                  65: "sa",
                  66: "mr",
                  67: "bn",
                  68: "as",
                  69: "gu",
                  70: "pa",
                  71: "or",
                  72: "ml",
                  73: "kn",
                  74: "ta",
                  75: "te",
                  76: "si",
                  77: "my",
                  78: "km",
                  79: "lo",
                  80: "vi",
                  81: "id",
                  82: "tl",
                  83: "ms",
                  84: "ms-Arab",
                  85: "am",
                  86: "ti",
                  87: "om",
                  88: "so",
                  89: "sw",
                  90: "rw",
                  91: "rn",
                  92: "ny",
                  93: "mg",
                  94: "eo",
                  128: "cy",
                  129: "eu",
                  130: "ca",
                  131: "la",
                  132: "qu",
                  133: "gn",
                  134: "ay",
                  135: "tt",
                  136: "ug",
                  137: "dz",
                  138: "jv",
                  139: "su",
                  140: "gl",
                  141: "af",
                  142: "br",
                  143: "iu",
                  144: "gd",
                  145: "gv",
                  146: "ga",
                  147: "to",
                  148: "el-polyton",
                  149: "kl",
                  150: "az",
                  151: "nn"
                };
                var macLanguageToScript = {
                  0: 0,
                  // langEnglish → smRoman
                  1: 0,
                  // langFrench → smRoman
                  2: 0,
                  // langGerman → smRoman
                  3: 0,
                  // langItalian → smRoman
                  4: 0,
                  // langDutch → smRoman
                  5: 0,
                  // langSwedish → smRoman
                  6: 0,
                  // langSpanish → smRoman
                  7: 0,
                  // langDanish → smRoman
                  8: 0,
                  // langPortuguese → smRoman
                  9: 0,
                  // langNorwegian → smRoman
                  10: 5,
                  // langHebrew → smHebrew
                  11: 1,
                  // langJapanese → smJapanese
                  12: 4,
                  // langArabic → smArabic
                  13: 0,
                  // langFinnish → smRoman
                  14: 6,
                  // langGreek → smGreek
                  15: 0,
                  // langIcelandic → smRoman (modified)
                  16: 0,
                  // langMaltese → smRoman
                  17: 0,
                  // langTurkish → smRoman (modified)
                  18: 0,
                  // langCroatian → smRoman (modified)
                  19: 2,
                  // langTradChinese → smTradChinese
                  20: 4,
                  // langUrdu → smArabic
                  21: 9,
                  // langHindi → smDevanagari
                  22: 21,
                  // langThai → smThai
                  23: 3,
                  // langKorean → smKorean
                  24: 29,
                  // langLithuanian → smCentralEuroRoman
                  25: 29,
                  // langPolish → smCentralEuroRoman
                  26: 29,
                  // langHungarian → smCentralEuroRoman
                  27: 29,
                  // langEstonian → smCentralEuroRoman
                  28: 29,
                  // langLatvian → smCentralEuroRoman
                  29: 0,
                  // langSami → smRoman
                  30: 0,
                  // langFaroese → smRoman (modified)
                  31: 4,
                  // langFarsi → smArabic (modified)
                  32: 7,
                  // langRussian → smCyrillic
                  33: 25,
                  // langSimpChinese → smSimpChinese
                  34: 0,
                  // langFlemish → smRoman
                  35: 0,
                  // langIrishGaelic → smRoman (modified)
                  36: 0,
                  // langAlbanian → smRoman
                  37: 0,
                  // langRomanian → smRoman (modified)
                  38: 29,
                  // langCzech → smCentralEuroRoman
                  39: 29,
                  // langSlovak → smCentralEuroRoman
                  40: 0,
                  // langSlovenian → smRoman (modified)
                  41: 5,
                  // langYiddish → smHebrew
                  42: 7,
                  // langSerbian → smCyrillic
                  43: 7,
                  // langMacedonian → smCyrillic
                  44: 7,
                  // langBulgarian → smCyrillic
                  45: 7,
                  // langUkrainian → smCyrillic (modified)
                  46: 7,
                  // langByelorussian → smCyrillic
                  47: 7,
                  // langUzbek → smCyrillic
                  48: 7,
                  // langKazakh → smCyrillic
                  49: 7,
                  // langAzerbaijani → smCyrillic
                  50: 4,
                  // langAzerbaijanAr → smArabic
                  51: 24,
                  // langArmenian → smArmenian
                  52: 23,
                  // langGeorgian → smGeorgian
                  53: 7,
                  // langMoldavian → smCyrillic
                  54: 7,
                  // langKirghiz → smCyrillic
                  55: 7,
                  // langTajiki → smCyrillic
                  56: 7,
                  // langTurkmen → smCyrillic
                  57: 27,
                  // langMongolian → smMongolian
                  58: 7,
                  // langMongolianCyr → smCyrillic
                  59: 4,
                  // langPashto → smArabic
                  60: 4,
                  // langKurdish → smArabic
                  61: 4,
                  // langKashmiri → smArabic
                  62: 4,
                  // langSindhi → smArabic
                  63: 26,
                  // langTibetan → smTibetan
                  64: 9,
                  // langNepali → smDevanagari
                  65: 9,
                  // langSanskrit → smDevanagari
                  66: 9,
                  // langMarathi → smDevanagari
                  67: 13,
                  // langBengali → smBengali
                  68: 13,
                  // langAssamese → smBengali
                  69: 11,
                  // langGujarati → smGujarati
                  70: 10,
                  // langPunjabi → smGurmukhi
                  71: 12,
                  // langOriya → smOriya
                  72: 17,
                  // langMalayalam → smMalayalam
                  73: 16,
                  // langKannada → smKannada
                  74: 14,
                  // langTamil → smTamil
                  75: 15,
                  // langTelugu → smTelugu
                  76: 18,
                  // langSinhalese → smSinhalese
                  77: 19,
                  // langBurmese → smBurmese
                  78: 20,
                  // langKhmer → smKhmer
                  79: 22,
                  // langLao → smLao
                  80: 30,
                  // langVietnamese → smVietnamese
                  81: 0,
                  // langIndonesian → smRoman
                  82: 0,
                  // langTagalog → smRoman
                  83: 0,
                  // langMalayRoman → smRoman
                  84: 4,
                  // langMalayArabic → smArabic
                  85: 28,
                  // langAmharic → smEthiopic
                  86: 28,
                  // langTigrinya → smEthiopic
                  87: 28,
                  // langOromo → smEthiopic
                  88: 0,
                  // langSomali → smRoman
                  89: 0,
                  // langSwahili → smRoman
                  90: 0,
                  // langKinyarwanda → smRoman
                  91: 0,
                  // langRundi → smRoman
                  92: 0,
                  // langNyanja → smRoman
                  93: 0,
                  // langMalagasy → smRoman
                  94: 0,
                  // langEsperanto → smRoman
                  128: 0,
                  // langWelsh → smRoman (modified)
                  129: 0,
                  // langBasque → smRoman
                  130: 0,
                  // langCatalan → smRoman
                  131: 0,
                  // langLatin → smRoman
                  132: 0,
                  // langQuechua → smRoman
                  133: 0,
                  // langGuarani → smRoman
                  134: 0,
                  // langAymara → smRoman
                  135: 7,
                  // langTatar → smCyrillic
                  136: 4,
                  // langUighur → smArabic
                  137: 26,
                  // langDzongkha → smTibetan
                  138: 0,
                  // langJavaneseRom → smRoman
                  139: 0,
                  // langSundaneseRom → smRoman
                  140: 0,
                  // langGalician → smRoman
                  141: 0,
                  // langAfrikaans → smRoman
                  142: 0,
                  // langBreton → smRoman (modified)
                  143: 28,
                  // langInuktitut → smEthiopic (modified)
                  144: 0,
                  // langScottishGaelic → smRoman (modified)
                  145: 0,
                  // langManxGaelic → smRoman (modified)
                  146: 0,
                  // langIrishGaelicScript → smRoman (modified)
                  147: 0,
                  // langTongan → smRoman
                  148: 6,
                  // langGreekAncient → smRoman
                  149: 0,
                  // langGreenlandic → smRoman
                  150: 0,
                  // langAzerbaijanRoman → smRoman
                  151: 0
                  // langNynorsk → smRoman
                };
                var windowsLanguages = {
                  1078: "af",
                  1052: "sq",
                  1156: "gsw",
                  1118: "am",
                  5121: "ar-DZ",
                  15361: "ar-BH",
                  3073: "ar",
                  2049: "ar-IQ",
                  11265: "ar-JO",
                  13313: "ar-KW",
                  12289: "ar-LB",
                  4097: "ar-LY",
                  6145: "ary",
                  8193: "ar-OM",
                  16385: "ar-QA",
                  1025: "ar-SA",
                  10241: "ar-SY",
                  7169: "aeb",
                  14337: "ar-AE",
                  9217: "ar-YE",
                  1067: "hy",
                  1101: "as",
                  2092: "az-Cyrl",
                  1068: "az",
                  1133: "ba",
                  1069: "eu",
                  1059: "be",
                  2117: "bn",
                  1093: "bn-IN",
                  8218: "bs-Cyrl",
                  5146: "bs",
                  1150: "br",
                  1026: "bg",
                  1027: "ca",
                  3076: "zh-HK",
                  5124: "zh-MO",
                  2052: "zh",
                  4100: "zh-SG",
                  1028: "zh-TW",
                  1155: "co",
                  1050: "hr",
                  4122: "hr-BA",
                  1029: "cs",
                  1030: "da",
                  1164: "prs",
                  1125: "dv",
                  2067: "nl-BE",
                  1043: "nl",
                  3081: "en-AU",
                  10249: "en-BZ",
                  4105: "en-CA",
                  9225: "en-029",
                  16393: "en-IN",
                  6153: "en-IE",
                  8201: "en-JM",
                  17417: "en-MY",
                  5129: "en-NZ",
                  13321: "en-PH",
                  18441: "en-SG",
                  7177: "en-ZA",
                  11273: "en-TT",
                  2057: "en-GB",
                  1033: "en",
                  12297: "en-ZW",
                  1061: "et",
                  1080: "fo",
                  1124: "fil",
                  1035: "fi",
                  2060: "fr-BE",
                  3084: "fr-CA",
                  1036: "fr",
                  5132: "fr-LU",
                  6156: "fr-MC",
                  4108: "fr-CH",
                  1122: "fy",
                  1110: "gl",
                  1079: "ka",
                  3079: "de-AT",
                  1031: "de",
                  5127: "de-LI",
                  4103: "de-LU",
                  2055: "de-CH",
                  1032: "el",
                  1135: "kl",
                  1095: "gu",
                  1128: "ha",
                  1037: "he",
                  1081: "hi",
                  1038: "hu",
                  1039: "is",
                  1136: "ig",
                  1057: "id",
                  1117: "iu",
                  2141: "iu-Latn",
                  2108: "ga",
                  1076: "xh",
                  1077: "zu",
                  1040: "it",
                  2064: "it-CH",
                  1041: "ja",
                  1099: "kn",
                  1087: "kk",
                  1107: "km",
                  1158: "quc",
                  1159: "rw",
                  1089: "sw",
                  1111: "kok",
                  1042: "ko",
                  1088: "ky",
                  1108: "lo",
                  1062: "lv",
                  1063: "lt",
                  2094: "dsb",
                  1134: "lb",
                  1071: "mk",
                  2110: "ms-BN",
                  1086: "ms",
                  1100: "ml",
                  1082: "mt",
                  1153: "mi",
                  1146: "arn",
                  1102: "mr",
                  1148: "moh",
                  1104: "mn",
                  2128: "mn-CN",
                  1121: "ne",
                  1044: "nb",
                  2068: "nn",
                  1154: "oc",
                  1096: "or",
                  1123: "ps",
                  1045: "pl",
                  1046: "pt",
                  2070: "pt-PT",
                  1094: "pa",
                  1131: "qu-BO",
                  2155: "qu-EC",
                  3179: "qu",
                  1048: "ro",
                  1047: "rm",
                  1049: "ru",
                  9275: "smn",
                  4155: "smj-NO",
                  5179: "smj",
                  3131: "se-FI",
                  1083: "se",
                  2107: "se-SE",
                  8251: "sms",
                  6203: "sma-NO",
                  7227: "sms",
                  1103: "sa",
                  7194: "sr-Cyrl-BA",
                  3098: "sr",
                  6170: "sr-Latn-BA",
                  2074: "sr-Latn",
                  1132: "nso",
                  1074: "tn",
                  1115: "si",
                  1051: "sk",
                  1060: "sl",
                  11274: "es-AR",
                  16394: "es-BO",
                  13322: "es-CL",
                  9226: "es-CO",
                  5130: "es-CR",
                  7178: "es-DO",
                  12298: "es-EC",
                  17418: "es-SV",
                  4106: "es-GT",
                  18442: "es-HN",
                  2058: "es-MX",
                  19466: "es-NI",
                  6154: "es-PA",
                  15370: "es-PY",
                  10250: "es-PE",
                  20490: "es-PR",
                  // Microsoft has defined two different language codes for
                  // “Spanish with modern sorting” and “Spanish with traditional
                  // sorting”. This makes sense for collation APIs, and it would be
                  // possible to express this in BCP 47 language tags via Unicode
                  // extensions (eg., es-u-co-trad is Spanish with traditional
                  // sorting). However, for storing names in fonts, the distinction
                  // does not make sense, so we give “es” in both cases.
                  3082: "es",
                  1034: "es",
                  21514: "es-US",
                  14346: "es-UY",
                  8202: "es-VE",
                  2077: "sv-FI",
                  1053: "sv",
                  1114: "syr",
                  1064: "tg",
                  2143: "tzm",
                  1097: "ta",
                  1092: "tt",
                  1098: "te",
                  1054: "th",
                  1105: "bo",
                  1055: "tr",
                  1090: "tk",
                  1152: "ug",
                  1058: "uk",
                  1070: "hsb",
                  1056: "ur",
                  2115: "uz-Cyrl",
                  1091: "uz",
                  1066: "vi",
                  1106: "cy",
                  1160: "wo",
                  1157: "sah",
                  1144: "ii",
                  1130: "yo"
                };
                function getLanguageCode(platformID, languageID, ltag2) {
                  switch (platformID) {
                    case 0:
                      if (languageID === 65535) {
                        return "und";
                      } else if (ltag2) {
                        return ltag2[languageID];
                      }
                      break;
                    case 1:
                      return macLanguages[languageID];
                    case 3:
                      return windowsLanguages[languageID];
                  }
                  return void 0;
                }
                var utf16 = "utf-16";
                var macScriptEncodings = {
                  0: "macintosh",
                  // smRoman
                  1: "x-mac-japanese",
                  // smJapanese
                  2: "x-mac-chinesetrad",
                  // smTradChinese
                  3: "x-mac-korean",
                  // smKorean
                  6: "x-mac-greek",
                  // smGreek
                  7: "x-mac-cyrillic",
                  // smCyrillic
                  9: "x-mac-devanagai",
                  // smDevanagari
                  10: "x-mac-gurmukhi",
                  // smGurmukhi
                  11: "x-mac-gujarati",
                  // smGujarati
                  12: "x-mac-oriya",
                  // smOriya
                  13: "x-mac-bengali",
                  // smBengali
                  14: "x-mac-tamil",
                  // smTamil
                  15: "x-mac-telugu",
                  // smTelugu
                  16: "x-mac-kannada",
                  // smKannada
                  17: "x-mac-malayalam",
                  // smMalayalam
                  18: "x-mac-sinhalese",
                  // smSinhalese
                  19: "x-mac-burmese",
                  // smBurmese
                  20: "x-mac-khmer",
                  // smKhmer
                  21: "x-mac-thai",
                  // smThai
                  22: "x-mac-lao",
                  // smLao
                  23: "x-mac-georgian",
                  // smGeorgian
                  24: "x-mac-armenian",
                  // smArmenian
                  25: "x-mac-chinesesimp",
                  // smSimpChinese
                  26: "x-mac-tibetan",
                  // smTibetan
                  27: "x-mac-mongolian",
                  // smMongolian
                  28: "x-mac-ethiopic",
                  // smEthiopic
                  29: "x-mac-ce",
                  // smCentralEuroRoman
                  30: "x-mac-vietnamese",
                  // smVietnamese
                  31: "x-mac-extarabic"
                  // smExtArabic
                };
                var macLanguageEncodings = {
                  15: "x-mac-icelandic",
                  // langIcelandic
                  17: "x-mac-turkish",
                  // langTurkish
                  18: "x-mac-croatian",
                  // langCroatian
                  24: "x-mac-ce",
                  // langLithuanian
                  25: "x-mac-ce",
                  // langPolish
                  26: "x-mac-ce",
                  // langHungarian
                  27: "x-mac-ce",
                  // langEstonian
                  28: "x-mac-ce",
                  // langLatvian
                  30: "x-mac-icelandic",
                  // langFaroese
                  37: "x-mac-romanian",
                  // langRomanian
                  38: "x-mac-ce",
                  // langCzech
                  39: "x-mac-ce",
                  // langSlovak
                  40: "x-mac-ce",
                  // langSlovenian
                  143: "x-mac-inuit",
                  // langInuktitut
                  146: "x-mac-gaelic"
                  // langIrishGaelicScript
                };
                function getEncoding(platformID, encodingID, languageID) {
                  switch (platformID) {
                    case 0:
                      return utf16;
                    case 1:
                      return macLanguageEncodings[languageID] || macScriptEncodings[encodingID];
                    case 3:
                      if (encodingID === 1 || encodingID === 10) {
                        return utf16;
                      }
                      break;
                  }
                  return void 0;
                }
                function parseNameTable(data, start, ltag2) {
                  var name = {};
                  var p = new parse.Parser(data, start);
                  var format = p.parseUShort();
                  var count = p.parseUShort();
                  var stringOffset = p.offset + p.parseUShort();
                  for (var i2 = 0; i2 < count; i2++) {
                    var platformID = p.parseUShort();
                    var encodingID = p.parseUShort();
                    var languageID = p.parseUShort();
                    var nameID = p.parseUShort();
                    var property = nameTableNames[nameID] || nameID;
                    var byteLength = p.parseUShort();
                    var offset = p.parseUShort();
                    var language = getLanguageCode(platformID, languageID, ltag2);
                    var encoding = getEncoding(platformID, encodingID, languageID);
                    if (encoding !== void 0 && language !== void 0) {
                      var text = void 0;
                      if (encoding === utf16) {
                        text = decode.UTF16(data, stringOffset + offset, byteLength);
                      } else {
                        text = decode.MACSTRING(data, stringOffset + offset, byteLength, encoding);
                      }
                      if (text) {
                        var translations = name[property];
                        if (translations === void 0) {
                          translations = name[property] = {};
                        }
                        translations[language] = text;
                      }
                    }
                  }
                  var langTagCount = 0;
                  if (format === 1) {
                    langTagCount = p.parseUShort();
                  }
                  return name;
                }
                function reverseDict(dict) {
                  var result = {};
                  for (var key2 in dict) {
                    result[dict[key2]] = parseInt(key2);
                  }
                  return result;
                }
                function makeNameRecord(platformID, encodingID, languageID, nameID, length, offset) {
                  return new table.Record("NameRecord", [
                    {
                      name: "platformID",
                      type: "USHORT",
                      value: platformID
                    },
                    {
                      name: "encodingID",
                      type: "USHORT",
                      value: encodingID
                    },
                    {
                      name: "languageID",
                      type: "USHORT",
                      value: languageID
                    },
                    {
                      name: "nameID",
                      type: "USHORT",
                      value: nameID
                    },
                    {
                      name: "length",
                      type: "USHORT",
                      value: length
                    },
                    {
                      name: "offset",
                      type: "USHORT",
                      value: offset
                    }
                  ]);
                }
                function findSubArray(needle, haystack) {
                  var needleLength = needle.length;
                  var limit = haystack.length - needleLength + 1;
                  loop:
                    for (var pos = 0; pos < limit; pos++) {
                      for (; pos < limit; pos++) {
                        for (var k2 = 0; k2 < needleLength; k2++) {
                          if (haystack[pos + k2] !== needle[k2]) {
                            continue loop;
                          }
                        }
                        return pos;
                      }
                    }
                  return -1;
                }
                function addStringToPool(s, pool) {
                  var offset = findSubArray(s, pool);
                  if (offset < 0) {
                    offset = pool.length;
                    var i2 = 0;
                    var len = s.length;
                    for (; i2 < len; ++i2) {
                      pool.push(s[i2]);
                    }
                  }
                  return offset;
                }
                function makeNameTable(names, ltag2) {
                  var nameID;
                  var nameIDs = [];
                  var namesWithNumericKeys = {};
                  var nameTableIds = reverseDict(nameTableNames);
                  for (var key2 in names) {
                    var id = nameTableIds[key2];
                    if (id === void 0) {
                      id = key2;
                    }
                    nameID = parseInt(id);
                    if (isNaN(nameID)) {
                      throw new Error('Name table entry "' + key2 + '" does not exist, see nameTableNames for complete list.');
                    }
                    namesWithNumericKeys[nameID] = names[key2];
                    nameIDs.push(nameID);
                  }
                  var macLanguageIds = reverseDict(macLanguages);
                  var windowsLanguageIds = reverseDict(windowsLanguages);
                  var nameRecords = [];
                  var stringPool = [];
                  for (var i2 = 0; i2 < nameIDs.length; i2++) {
                    nameID = nameIDs[i2];
                    var translations = namesWithNumericKeys[nameID];
                    for (var lang in translations) {
                      var text = translations[lang];
                      var macPlatform = 1;
                      var macLanguage = macLanguageIds[lang];
                      var macScript = macLanguageToScript[macLanguage];
                      var macEncoding = getEncoding(macPlatform, macScript, macLanguage);
                      var macName = encode.MACSTRING(text, macEncoding);
                      if (macName === void 0) {
                        macPlatform = 0;
                        macLanguage = ltag2.indexOf(lang);
                        if (macLanguage < 0) {
                          macLanguage = ltag2.length;
                          ltag2.push(lang);
                        }
                        macScript = 4;
                        macName = encode.UTF16(text);
                      }
                      var macNameOffset = addStringToPool(macName, stringPool);
                      nameRecords.push(makeNameRecord(macPlatform, macScript, macLanguage, nameID, macName.length, macNameOffset));
                      var winLanguage = windowsLanguageIds[lang];
                      if (winLanguage !== void 0) {
                        var winName = encode.UTF16(text);
                        var winNameOffset = addStringToPool(winName, stringPool);
                        nameRecords.push(makeNameRecord(3, 1, winLanguage, nameID, winName.length, winNameOffset));
                      }
                    }
                  }
                  nameRecords.sort(function(a, b) {
                    return a.platformID - b.platformID || a.encodingID - b.encodingID || a.languageID - b.languageID || a.nameID - b.nameID;
                  });
                  var t = new table.Table("name", [
                    {
                      name: "format",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "count",
                      type: "USHORT",
                      value: nameRecords.length
                    },
                    {
                      name: "stringOffset",
                      type: "USHORT",
                      value: 6 + nameRecords.length * 12
                    }
                  ]);
                  for (var r = 0; r < nameRecords.length; r++) {
                    t.fields.push({
                      name: "record_" + r,
                      type: "RECORD",
                      value: nameRecords[r]
                    });
                  }
                  t.fields.push({
                    name: "strings",
                    type: "LITERAL",
                    value: stringPool
                  });
                  return t;
                }
                var _name = {
                  parse: parseNameTable,
                  make: makeNameTable
                };
                var unicodeRanges = [
                  {
                    begin: 0,
                    end: 127
                  },
                  // Basic Latin
                  {
                    begin: 128,
                    end: 255
                  },
                  // Latin-1 Supplement
                  {
                    begin: 256,
                    end: 383
                  },
                  // Latin Extended-A
                  {
                    begin: 384,
                    end: 591
                  },
                  // Latin Extended-B
                  {
                    begin: 592,
                    end: 687
                  },
                  // IPA Extensions
                  {
                    begin: 688,
                    end: 767
                  },
                  // Spacing Modifier Letters
                  {
                    begin: 768,
                    end: 879
                  },
                  // Combining Diacritical Marks
                  {
                    begin: 880,
                    end: 1023
                  },
                  // Greek and Coptic
                  {
                    begin: 11392,
                    end: 11519
                  },
                  // Coptic
                  {
                    begin: 1024,
                    end: 1279
                  },
                  // Cyrillic
                  {
                    begin: 1328,
                    end: 1423
                  },
                  // Armenian
                  {
                    begin: 1424,
                    end: 1535
                  },
                  // Hebrew
                  {
                    begin: 42240,
                    end: 42559
                  },
                  // Vai
                  {
                    begin: 1536,
                    end: 1791
                  },
                  // Arabic
                  {
                    begin: 1984,
                    end: 2047
                  },
                  // NKo
                  {
                    begin: 2304,
                    end: 2431
                  },
                  // Devanagari
                  {
                    begin: 2432,
                    end: 2559
                  },
                  // Bengali
                  {
                    begin: 2560,
                    end: 2687
                  },
                  // Gurmukhi
                  {
                    begin: 2688,
                    end: 2815
                  },
                  // Gujarati
                  {
                    begin: 2816,
                    end: 2943
                  },
                  // Oriya
                  {
                    begin: 2944,
                    end: 3071
                  },
                  // Tamil
                  {
                    begin: 3072,
                    end: 3199
                  },
                  // Telugu
                  {
                    begin: 3200,
                    end: 3327
                  },
                  // Kannada
                  {
                    begin: 3328,
                    end: 3455
                  },
                  // Malayalam
                  {
                    begin: 3584,
                    end: 3711
                  },
                  // Thai
                  {
                    begin: 3712,
                    end: 3839
                  },
                  // Lao
                  {
                    begin: 4256,
                    end: 4351
                  },
                  // Georgian
                  {
                    begin: 6912,
                    end: 7039
                  },
                  // Balinese
                  {
                    begin: 4352,
                    end: 4607
                  },
                  // Hangul Jamo
                  {
                    begin: 7680,
                    end: 7935
                  },
                  // Latin Extended Additional
                  {
                    begin: 7936,
                    end: 8191
                  },
                  // Greek Extended
                  {
                    begin: 8192,
                    end: 8303
                  },
                  // General Punctuation
                  {
                    begin: 8304,
                    end: 8351
                  },
                  // Superscripts And Subscripts
                  {
                    begin: 8352,
                    end: 8399
                  },
                  // Currency Symbol
                  {
                    begin: 8400,
                    end: 8447
                  },
                  // Combining Diacritical Marks For Symbols
                  {
                    begin: 8448,
                    end: 8527
                  },
                  // Letterlike Symbols
                  {
                    begin: 8528,
                    end: 8591
                  },
                  // Number Forms
                  {
                    begin: 8592,
                    end: 8703
                  },
                  // Arrows
                  {
                    begin: 8704,
                    end: 8959
                  },
                  // Mathematical Operators
                  {
                    begin: 8960,
                    end: 9215
                  },
                  // Miscellaneous Technical
                  {
                    begin: 9216,
                    end: 9279
                  },
                  // Control Pictures
                  {
                    begin: 9280,
                    end: 9311
                  },
                  // Optical Character Recognition
                  {
                    begin: 9312,
                    end: 9471
                  },
                  // Enclosed Alphanumerics
                  {
                    begin: 9472,
                    end: 9599
                  },
                  // Box Drawing
                  {
                    begin: 9600,
                    end: 9631
                  },
                  // Block Elements
                  {
                    begin: 9632,
                    end: 9727
                  },
                  // Geometric Shapes
                  {
                    begin: 9728,
                    end: 9983
                  },
                  // Miscellaneous Symbols
                  {
                    begin: 9984,
                    end: 10175
                  },
                  // Dingbats
                  {
                    begin: 12288,
                    end: 12351
                  },
                  // CJK Symbols And Punctuation
                  {
                    begin: 12352,
                    end: 12447
                  },
                  // Hiragana
                  {
                    begin: 12448,
                    end: 12543
                  },
                  // Katakana
                  {
                    begin: 12544,
                    end: 12591
                  },
                  // Bopomofo
                  {
                    begin: 12592,
                    end: 12687
                  },
                  // Hangul Compatibility Jamo
                  {
                    begin: 43072,
                    end: 43135
                  },
                  // Phags-pa
                  {
                    begin: 12800,
                    end: 13055
                  },
                  // Enclosed CJK Letters And Months
                  {
                    begin: 13056,
                    end: 13311
                  },
                  // CJK Compatibility
                  {
                    begin: 44032,
                    end: 55215
                  },
                  // Hangul Syllables
                  {
                    begin: 55296,
                    end: 57343
                  },
                  // Non-Plane 0 *
                  {
                    begin: 67840,
                    end: 67871
                  },
                  // Phoenicia
                  {
                    begin: 19968,
                    end: 40959
                  },
                  // CJK Unified Ideographs
                  {
                    begin: 57344,
                    end: 63743
                  },
                  // Private Use Area (plane 0)
                  {
                    begin: 12736,
                    end: 12783
                  },
                  // CJK Strokes
                  {
                    begin: 64256,
                    end: 64335
                  },
                  // Alphabetic Presentation Forms
                  {
                    begin: 64336,
                    end: 65023
                  },
                  // Arabic Presentation Forms-A
                  {
                    begin: 65056,
                    end: 65071
                  },
                  // Combining Half Marks
                  {
                    begin: 65040,
                    end: 65055
                  },
                  // Vertical Forms
                  {
                    begin: 65104,
                    end: 65135
                  },
                  // Small Form Variants
                  {
                    begin: 65136,
                    end: 65279
                  },
                  // Arabic Presentation Forms-B
                  {
                    begin: 65280,
                    end: 65519
                  },
                  // Halfwidth And Fullwidth Forms
                  {
                    begin: 65520,
                    end: 65535
                  },
                  // Specials
                  {
                    begin: 3840,
                    end: 4095
                  },
                  // Tibetan
                  {
                    begin: 1792,
                    end: 1871
                  },
                  // Syriac
                  {
                    begin: 1920,
                    end: 1983
                  },
                  // Thaana
                  {
                    begin: 3456,
                    end: 3583
                  },
                  // Sinhala
                  {
                    begin: 4096,
                    end: 4255
                  },
                  // Myanmar
                  {
                    begin: 4608,
                    end: 4991
                  },
                  // Ethiopic
                  {
                    begin: 5024,
                    end: 5119
                  },
                  // Cherokee
                  {
                    begin: 5120,
                    end: 5759
                  },
                  // Unified Canadian Aboriginal Syllabics
                  {
                    begin: 5760,
                    end: 5791
                  },
                  // Ogham
                  {
                    begin: 5792,
                    end: 5887
                  },
                  // Runic
                  {
                    begin: 6016,
                    end: 6143
                  },
                  // Khmer
                  {
                    begin: 6144,
                    end: 6319
                  },
                  // Mongolian
                  {
                    begin: 10240,
                    end: 10495
                  },
                  // Braille Patterns
                  {
                    begin: 40960,
                    end: 42127
                  },
                  // Yi Syllables
                  {
                    begin: 5888,
                    end: 5919
                  },
                  // Tagalog
                  {
                    begin: 66304,
                    end: 66351
                  },
                  // Old Italic
                  {
                    begin: 66352,
                    end: 66383
                  },
                  // Gothic
                  {
                    begin: 66560,
                    end: 66639
                  },
                  // Deseret
                  {
                    begin: 118784,
                    end: 119039
                  },
                  // Byzantine Musical Symbols
                  {
                    begin: 119808,
                    end: 120831
                  },
                  // Mathematical Alphanumeric Symbols
                  {
                    begin: 1044480,
                    end: 1048573
                  },
                  // Private Use (plane 15)
                  {
                    begin: 65024,
                    end: 65039
                  },
                  // Variation Selectors
                  {
                    begin: 917504,
                    end: 917631
                  },
                  // Tags
                  {
                    begin: 6400,
                    end: 6479
                  },
                  // Limbu
                  {
                    begin: 6480,
                    end: 6527
                  },
                  // Tai Le
                  {
                    begin: 6528,
                    end: 6623
                  },
                  // New Tai Lue
                  {
                    begin: 6656,
                    end: 6687
                  },
                  // Buginese
                  {
                    begin: 11264,
                    end: 11359
                  },
                  // Glagolitic
                  {
                    begin: 11568,
                    end: 11647
                  },
                  // Tifinagh
                  {
                    begin: 19904,
                    end: 19967
                  },
                  // Yijing Hexagram Symbols
                  {
                    begin: 43008,
                    end: 43055
                  },
                  // Syloti Nagri
                  {
                    begin: 65536,
                    end: 65663
                  },
                  // Linear B Syllabary
                  {
                    begin: 65856,
                    end: 65935
                  },
                  // Ancient Greek Numbers
                  {
                    begin: 66432,
                    end: 66463
                  },
                  // Ugaritic
                  {
                    begin: 66464,
                    end: 66527
                  },
                  // Old Persian
                  {
                    begin: 66640,
                    end: 66687
                  },
                  // Shavian
                  {
                    begin: 66688,
                    end: 66735
                  },
                  // Osmanya
                  {
                    begin: 67584,
                    end: 67647
                  },
                  // Cypriot Syllabary
                  {
                    begin: 68096,
                    end: 68191
                  },
                  // Kharoshthi
                  {
                    begin: 119552,
                    end: 119647
                  },
                  // Tai Xuan Jing Symbols
                  {
                    begin: 73728,
                    end: 74751
                  },
                  // Cuneiform
                  {
                    begin: 119648,
                    end: 119679
                  },
                  // Counting Rod Numerals
                  {
                    begin: 7040,
                    end: 7103
                  },
                  // Sundanese
                  {
                    begin: 7168,
                    end: 7247
                  },
                  // Lepcha
                  {
                    begin: 7248,
                    end: 7295
                  },
                  // Ol Chiki
                  {
                    begin: 43136,
                    end: 43231
                  },
                  // Saurashtra
                  {
                    begin: 43264,
                    end: 43311
                  },
                  // Kayah Li
                  {
                    begin: 43312,
                    end: 43359
                  },
                  // Rejang
                  {
                    begin: 43520,
                    end: 43615
                  },
                  // Cham
                  {
                    begin: 65936,
                    end: 65999
                  },
                  // Ancient Symbols
                  {
                    begin: 66e3,
                    end: 66047
                  },
                  // Phaistos Disc
                  {
                    begin: 66208,
                    end: 66271
                  },
                  // Carian
                  {
                    begin: 127024,
                    end: 127135
                  }
                  // Domino Tiles
                ];
                function getUnicodeRange(unicode) {
                  for (var i2 = 0; i2 < unicodeRanges.length; i2 += 1) {
                    var range = unicodeRanges[i2];
                    if (unicode >= range.begin && unicode < range.end) {
                      return i2;
                    }
                  }
                  return -1;
                }
                function parseOS2Table(data, start) {
                  var os22 = {};
                  var p = new parse.Parser(data, start);
                  os22.version = p.parseUShort();
                  os22.xAvgCharWidth = p.parseShort();
                  os22.usWeightClass = p.parseUShort();
                  os22.usWidthClass = p.parseUShort();
                  os22.fsType = p.parseUShort();
                  os22.ySubscriptXSize = p.parseShort();
                  os22.ySubscriptYSize = p.parseShort();
                  os22.ySubscriptXOffset = p.parseShort();
                  os22.ySubscriptYOffset = p.parseShort();
                  os22.ySuperscriptXSize = p.parseShort();
                  os22.ySuperscriptYSize = p.parseShort();
                  os22.ySuperscriptXOffset = p.parseShort();
                  os22.ySuperscriptYOffset = p.parseShort();
                  os22.yStrikeoutSize = p.parseShort();
                  os22.yStrikeoutPosition = p.parseShort();
                  os22.sFamilyClass = p.parseShort();
                  os22.panose = [];
                  for (var i2 = 0; i2 < 10; i2++) {
                    os22.panose[i2] = p.parseByte();
                  }
                  os22.ulUnicodeRange1 = p.parseULong();
                  os22.ulUnicodeRange2 = p.parseULong();
                  os22.ulUnicodeRange3 = p.parseULong();
                  os22.ulUnicodeRange4 = p.parseULong();
                  os22.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());
                  os22.fsSelection = p.parseUShort();
                  os22.usFirstCharIndex = p.parseUShort();
                  os22.usLastCharIndex = p.parseUShort();
                  os22.sTypoAscender = p.parseShort();
                  os22.sTypoDescender = p.parseShort();
                  os22.sTypoLineGap = p.parseShort();
                  os22.usWinAscent = p.parseUShort();
                  os22.usWinDescent = p.parseUShort();
                  if (os22.version >= 1) {
                    os22.ulCodePageRange1 = p.parseULong();
                    os22.ulCodePageRange2 = p.parseULong();
                  }
                  if (os22.version >= 2) {
                    os22.sxHeight = p.parseShort();
                    os22.sCapHeight = p.parseShort();
                    os22.usDefaultChar = p.parseUShort();
                    os22.usBreakChar = p.parseUShort();
                    os22.usMaxContent = p.parseUShort();
                  }
                  return os22;
                }
                function makeOS2Table(options) {
                  return new table.Table("OS/2", [
                    {
                      name: "version",
                      type: "USHORT",
                      value: 3
                    },
                    {
                      name: "xAvgCharWidth",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "usWeightClass",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "usWidthClass",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "fsType",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "ySubscriptXSize",
                      type: "SHORT",
                      value: 650
                    },
                    {
                      name: "ySubscriptYSize",
                      type: "SHORT",
                      value: 699
                    },
                    {
                      name: "ySubscriptXOffset",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "ySubscriptYOffset",
                      type: "SHORT",
                      value: 140
                    },
                    {
                      name: "ySuperscriptXSize",
                      type: "SHORT",
                      value: 650
                    },
                    {
                      name: "ySuperscriptYSize",
                      type: "SHORT",
                      value: 699
                    },
                    {
                      name: "ySuperscriptXOffset",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "ySuperscriptYOffset",
                      type: "SHORT",
                      value: 479
                    },
                    {
                      name: "yStrikeoutSize",
                      type: "SHORT",
                      value: 49
                    },
                    {
                      name: "yStrikeoutPosition",
                      type: "SHORT",
                      value: 258
                    },
                    {
                      name: "sFamilyClass",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "bFamilyType",
                      type: "BYTE",
                      value: 0
                    },
                    {
                      name: "bSerifStyle",
                      type: "BYTE",
                      value: 0
                    },
                    {
                      name: "bWeight",
                      type: "BYTE",
                      value: 0
                    },
                    {
                      name: "bProportion",
                      type: "BYTE",
                      value: 0
                    },
                    {
                      name: "bContrast",
                      type: "BYTE",
                      value: 0
                    },
                    {
                      name: "bStrokeVariation",
                      type: "BYTE",
                      value: 0
                    },
                    {
                      name: "bArmStyle",
                      type: "BYTE",
                      value: 0
                    },
                    {
                      name: "bLetterform",
                      type: "BYTE",
                      value: 0
                    },
                    {
                      name: "bMidline",
                      type: "BYTE",
                      value: 0
                    },
                    {
                      name: "bXHeight",
                      type: "BYTE",
                      value: 0
                    },
                    {
                      name: "ulUnicodeRange1",
                      type: "ULONG",
                      value: 0
                    },
                    {
                      name: "ulUnicodeRange2",
                      type: "ULONG",
                      value: 0
                    },
                    {
                      name: "ulUnicodeRange3",
                      type: "ULONG",
                      value: 0
                    },
                    {
                      name: "ulUnicodeRange4",
                      type: "ULONG",
                      value: 0
                    },
                    {
                      name: "achVendID",
                      type: "CHARARRAY",
                      value: "XXXX"
                    },
                    {
                      name: "fsSelection",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "usFirstCharIndex",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "usLastCharIndex",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "sTypoAscender",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "sTypoDescender",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "sTypoLineGap",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "usWinAscent",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "usWinDescent",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "ulCodePageRange1",
                      type: "ULONG",
                      value: 0
                    },
                    {
                      name: "ulCodePageRange2",
                      type: "ULONG",
                      value: 0
                    },
                    {
                      name: "sxHeight",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "sCapHeight",
                      type: "SHORT",
                      value: 0
                    },
                    {
                      name: "usDefaultChar",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "usBreakChar",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "usMaxContext",
                      type: "USHORT",
                      value: 0
                    }
                  ], options);
                }
                var os2 = {
                  parse: parseOS2Table,
                  make: makeOS2Table,
                  unicodeRanges,
                  getUnicodeRange
                };
                function parsePostTable(data, start) {
                  var post2 = {};
                  var p = new parse.Parser(data, start);
                  post2.version = p.parseVersion();
                  post2.italicAngle = p.parseFixed();
                  post2.underlinePosition = p.parseShort();
                  post2.underlineThickness = p.parseShort();
                  post2.isFixedPitch = p.parseULong();
                  post2.minMemType42 = p.parseULong();
                  post2.maxMemType42 = p.parseULong();
                  post2.minMemType1 = p.parseULong();
                  post2.maxMemType1 = p.parseULong();
                  switch (post2.version) {
                    case 1:
                      post2.names = standardNames.slice();
                      break;
                    case 2:
                      post2.numberOfGlyphs = p.parseUShort();
                      post2.glyphNameIndex = new Array(post2.numberOfGlyphs);
                      for (var i2 = 0; i2 < post2.numberOfGlyphs; i2++) {
                        post2.glyphNameIndex[i2] = p.parseUShort();
                      }
                      post2.names = [];
                      for (var i$1 = 0; i$1 < post2.numberOfGlyphs; i$1++) {
                        if (post2.glyphNameIndex[i$1] >= standardNames.length) {
                          var nameLength = p.parseChar();
                          post2.names.push(p.parseString(nameLength));
                        }
                      }
                      break;
                    case 2.5:
                      post2.numberOfGlyphs = p.parseUShort();
                      post2.offset = new Array(post2.numberOfGlyphs);
                      for (var i$2 = 0; i$2 < post2.numberOfGlyphs; i$2++) {
                        post2.offset[i$2] = p.parseChar();
                      }
                      break;
                  }
                  return post2;
                }
                function makePostTable() {
                  return new table.Table("post", [
                    {
                      name: "version",
                      type: "FIXED",
                      value: 196608
                    },
                    {
                      name: "italicAngle",
                      type: "FIXED",
                      value: 0
                    },
                    {
                      name: "underlinePosition",
                      type: "FWORD",
                      value: 0
                    },
                    {
                      name: "underlineThickness",
                      type: "FWORD",
                      value: 0
                    },
                    {
                      name: "isFixedPitch",
                      type: "ULONG",
                      value: 0
                    },
                    {
                      name: "minMemType42",
                      type: "ULONG",
                      value: 0
                    },
                    {
                      name: "maxMemType42",
                      type: "ULONG",
                      value: 0
                    },
                    {
                      name: "minMemType1",
                      type: "ULONG",
                      value: 0
                    },
                    {
                      name: "maxMemType1",
                      type: "ULONG",
                      value: 0
                    }
                  ]);
                }
                var post = {
                  parse: parsePostTable,
                  make: makePostTable
                };
                var subtableParsers = new Array(9);
                subtableParsers[1] = function parseLookup1() {
                  var start = this.offset + this.relativeOffset;
                  var substFormat = this.parseUShort();
                  if (substFormat === 1) {
                    return {
                      substFormat: 1,
                      coverage: this.parsePointer(Parser.coverage),
                      deltaGlyphId: this.parseUShort()
                    };
                  } else if (substFormat === 2) {
                    return {
                      substFormat: 2,
                      coverage: this.parsePointer(Parser.coverage),
                      substitute: this.parseOffset16List()
                    };
                  }
                  check.assert(false, "0x" + start.toString(16) + ": lookup type 1 format must be 1 or 2.");
                };
                subtableParsers[2] = function parseLookup2() {
                  var substFormat = this.parseUShort();
                  check.argument(substFormat === 1, "GSUB Multiple Substitution Subtable identifier-format must be 1");
                  return {
                    substFormat,
                    coverage: this.parsePointer(Parser.coverage),
                    sequences: this.parseListOfLists()
                  };
                };
                subtableParsers[3] = function parseLookup3() {
                  var substFormat = this.parseUShort();
                  check.argument(substFormat === 1, "GSUB Alternate Substitution Subtable identifier-format must be 1");
                  return {
                    substFormat,
                    coverage: this.parsePointer(Parser.coverage),
                    alternateSets: this.parseListOfLists()
                  };
                };
                subtableParsers[4] = function parseLookup4() {
                  var substFormat = this.parseUShort();
                  check.argument(substFormat === 1, "GSUB ligature table identifier-format must be 1");
                  return {
                    substFormat,
                    coverage: this.parsePointer(Parser.coverage),
                    ligatureSets: this.parseListOfLists(function() {
                      return {
                        ligGlyph: this.parseUShort(),
                        components: this.parseUShortList(this.parseUShort() - 1)
                      };
                    })
                  };
                };
                var lookupRecordDesc = {
                  sequenceIndex: Parser.uShort,
                  lookupListIndex: Parser.uShort
                };
                subtableParsers[5] = function parseLookup5() {
                  var start = this.offset + this.relativeOffset;
                  var substFormat = this.parseUShort();
                  if (substFormat === 1) {
                    return {
                      substFormat,
                      coverage: this.parsePointer(Parser.coverage),
                      ruleSets: this.parseListOfLists(function() {
                        var glyphCount2 = this.parseUShort();
                        var substCount2 = this.parseUShort();
                        return {
                          input: this.parseUShortList(glyphCount2 - 1),
                          lookupRecords: this.parseRecordList(substCount2, lookupRecordDesc)
                        };
                      })
                    };
                  } else if (substFormat === 2) {
                    return {
                      substFormat,
                      coverage: this.parsePointer(Parser.coverage),
                      classDef: this.parsePointer(Parser.classDef),
                      classSets: this.parseListOfLists(function() {
                        var glyphCount2 = this.parseUShort();
                        var substCount2 = this.parseUShort();
                        return {
                          classes: this.parseUShortList(glyphCount2 - 1),
                          lookupRecords: this.parseRecordList(substCount2, lookupRecordDesc)
                        };
                      })
                    };
                  } else if (substFormat === 3) {
                    var glyphCount = this.parseUShort();
                    var substCount = this.parseUShort();
                    return {
                      substFormat,
                      coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),
                      lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
                    };
                  }
                  check.assert(false, "0x" + start.toString(16) + ": lookup type 5 format must be 1, 2 or 3.");
                };
                subtableParsers[6] = function parseLookup6() {
                  var start = this.offset + this.relativeOffset;
                  var substFormat = this.parseUShort();
                  if (substFormat === 1) {
                    return {
                      substFormat: 1,
                      coverage: this.parsePointer(Parser.coverage),
                      chainRuleSets: this.parseListOfLists(function() {
                        return {
                          backtrack: this.parseUShortList(),
                          input: this.parseUShortList(this.parseShort() - 1),
                          lookahead: this.parseUShortList(),
                          lookupRecords: this.parseRecordList(lookupRecordDesc)
                        };
                      })
                    };
                  } else if (substFormat === 2) {
                    return {
                      substFormat: 2,
                      coverage: this.parsePointer(Parser.coverage),
                      backtrackClassDef: this.parsePointer(Parser.classDef),
                      inputClassDef: this.parsePointer(Parser.classDef),
                      lookaheadClassDef: this.parsePointer(Parser.classDef),
                      chainClassSet: this.parseListOfLists(function() {
                        return {
                          backtrack: this.parseUShortList(),
                          input: this.parseUShortList(this.parseShort() - 1),
                          lookahead: this.parseUShortList(),
                          lookupRecords: this.parseRecordList(lookupRecordDesc)
                        };
                      })
                    };
                  } else if (substFormat === 3) {
                    return {
                      substFormat: 3,
                      backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                      inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                      lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                      lookupRecords: this.parseRecordList(lookupRecordDesc)
                    };
                  }
                  check.assert(false, "0x" + start.toString(16) + ": lookup type 6 format must be 1, 2 or 3.");
                };
                subtableParsers[7] = function parseLookup7() {
                  var substFormat = this.parseUShort();
                  check.argument(substFormat === 1, "GSUB Extension Substitution subtable identifier-format must be 1");
                  var extensionLookupType = this.parseUShort();
                  var extensionParser = new Parser(this.data, this.offset + this.parseULong());
                  return {
                    substFormat: 1,
                    lookupType: extensionLookupType,
                    extension: subtableParsers[extensionLookupType].call(extensionParser)
                  };
                };
                subtableParsers[8] = function parseLookup8() {
                  var substFormat = this.parseUShort();
                  check.argument(substFormat === 1, "GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1");
                  return {
                    substFormat,
                    coverage: this.parsePointer(Parser.coverage),
                    backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                    lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                    substitutes: this.parseUShortList()
                  };
                };
                function parseGsubTable(data, start) {
                  start = start || 0;
                  var p = new Parser(data, start);
                  var tableVersion = p.parseVersion(1);
                  check.argument(tableVersion === 1 || tableVersion === 1.1, "Unsupported GSUB table version.");
                  if (tableVersion === 1) {
                    return {
                      version: tableVersion,
                      scripts: p.parseScriptList(),
                      features: p.parseFeatureList(),
                      lookups: p.parseLookupList(subtableParsers)
                    };
                  } else {
                    return {
                      version: tableVersion,
                      scripts: p.parseScriptList(),
                      features: p.parseFeatureList(),
                      lookups: p.parseLookupList(subtableParsers),
                      variations: p.parseFeatureVariationsList()
                    };
                  }
                }
                var subtableMakers = new Array(9);
                subtableMakers[1] = function makeLookup1(subtable) {
                  if (subtable.substFormat === 1) {
                    return new table.Table("substitutionTable", [
                      {
                        name: "substFormat",
                        type: "USHORT",
                        value: 1
                      },
                      {
                        name: "coverage",
                        type: "TABLE",
                        value: new table.Coverage(subtable.coverage)
                      },
                      {
                        name: "deltaGlyphID",
                        type: "USHORT",
                        value: subtable.deltaGlyphId
                      }
                    ]);
                  } else {
                    return new table.Table("substitutionTable", [
                      {
                        name: "substFormat",
                        type: "USHORT",
                        value: 2
                      },
                      {
                        name: "coverage",
                        type: "TABLE",
                        value: new table.Coverage(subtable.coverage)
                      }
                    ].concat(table.ushortList("substitute", subtable.substitute)));
                  }
                  check.fail("Lookup type 1 substFormat must be 1 or 2.");
                };
                subtableMakers[3] = function makeLookup3(subtable) {
                  check.assert(subtable.substFormat === 1, "Lookup type 3 substFormat must be 1.");
                  return new table.Table("substitutionTable", [
                    {
                      name: "substFormat",
                      type: "USHORT",
                      value: 1
                    },
                    {
                      name: "coverage",
                      type: "TABLE",
                      value: new table.Coverage(subtable.coverage)
                    }
                  ].concat(table.tableList("altSet", subtable.alternateSets, function(alternateSet) {
                    return new table.Table("alternateSetTable", table.ushortList("alternate", alternateSet));
                  })));
                };
                subtableMakers[4] = function makeLookup4(subtable) {
                  check.assert(subtable.substFormat === 1, "Lookup type 4 substFormat must be 1.");
                  return new table.Table("substitutionTable", [
                    {
                      name: "substFormat",
                      type: "USHORT",
                      value: 1
                    },
                    {
                      name: "coverage",
                      type: "TABLE",
                      value: new table.Coverage(subtable.coverage)
                    }
                  ].concat(table.tableList("ligSet", subtable.ligatureSets, function(ligatureSet) {
                    return new table.Table("ligatureSetTable", table.tableList("ligature", ligatureSet, function(ligature) {
                      return new table.Table("ligatureTable", [
                        {
                          name: "ligGlyph",
                          type: "USHORT",
                          value: ligature.ligGlyph
                        }
                      ].concat(table.ushortList("component", ligature.components, ligature.components.length + 1)));
                    }));
                  })));
                };
                function makeGsubTable(gsub2) {
                  return new table.Table("GSUB", [
                    {
                      name: "version",
                      type: "ULONG",
                      value: 65536
                    },
                    {
                      name: "scripts",
                      type: "TABLE",
                      value: new table.ScriptList(gsub2.scripts)
                    },
                    {
                      name: "features",
                      type: "TABLE",
                      value: new table.FeatureList(gsub2.features)
                    },
                    {
                      name: "lookups",
                      type: "TABLE",
                      value: new table.LookupList(gsub2.lookups, subtableMakers)
                    }
                  ]);
                }
                var gsub = {
                  parse: parseGsubTable,
                  make: makeGsubTable
                };
                function parseMetaTable(data, start) {
                  var p = new parse.Parser(data, start);
                  var tableVersion = p.parseULong();
                  check.argument(tableVersion === 1, "Unsupported META table version.");
                  p.parseULong();
                  p.parseULong();
                  var numDataMaps = p.parseULong();
                  var tags = {};
                  for (var i2 = 0; i2 < numDataMaps; i2++) {
                    var tag = p.parseTag();
                    var dataOffset = p.parseULong();
                    var dataLength = p.parseULong();
                    var text = decode.UTF8(data, start + dataOffset, dataLength);
                    tags[tag] = text;
                  }
                  return tags;
                }
                function makeMetaTable(tags) {
                  var numTags = Object.keys(tags).length;
                  var stringPool = "";
                  var stringPoolOffset = 16 + numTags * 12;
                  var result = new table.Table("meta", [
                    {
                      name: "version",
                      type: "ULONG",
                      value: 1
                    },
                    {
                      name: "flags",
                      type: "ULONG",
                      value: 0
                    },
                    {
                      name: "offset",
                      type: "ULONG",
                      value: stringPoolOffset
                    },
                    {
                      name: "numTags",
                      type: "ULONG",
                      value: numTags
                    }
                  ]);
                  for (var tag in tags) {
                    var pos = stringPool.length;
                    stringPool += tags[tag];
                    result.fields.push({
                      name: "tag " + tag,
                      type: "TAG",
                      value: tag
                    });
                    result.fields.push({
                      name: "offset " + tag,
                      type: "ULONG",
                      value: stringPoolOffset + pos
                    });
                    result.fields.push({
                      name: "length " + tag,
                      type: "ULONG",
                      value: tags[tag].length
                    });
                  }
                  result.fields.push({
                    name: "stringPool",
                    type: "CHARARRAY",
                    value: stringPool
                  });
                  return result;
                }
                var meta = {
                  parse: parseMetaTable,
                  make: makeMetaTable
                };
                function log2(v) {
                  return Math.log(v) / Math.log(2) | 0;
                }
                function computeCheckSum(bytes) {
                  while (bytes.length % 4 !== 0) {
                    bytes.push(0);
                  }
                  var sum = 0;
                  for (var i2 = 0; i2 < bytes.length; i2 += 4) {
                    sum += (bytes[i2] << 24) + (bytes[i2 + 1] << 16) + (bytes[i2 + 2] << 8) + bytes[i2 + 3];
                  }
                  sum %= Math.pow(2, 32);
                  return sum;
                }
                function makeTableRecord(tag, checkSum, offset, length) {
                  return new table.Record("Table Record", [
                    {
                      name: "tag",
                      type: "TAG",
                      value: tag !== void 0 ? tag : ""
                    },
                    {
                      name: "checkSum",
                      type: "ULONG",
                      value: checkSum !== void 0 ? checkSum : 0
                    },
                    {
                      name: "offset",
                      type: "ULONG",
                      value: offset !== void 0 ? offset : 0
                    },
                    {
                      name: "length",
                      type: "ULONG",
                      value: length !== void 0 ? length : 0
                    }
                  ]);
                }
                function makeSfntTable(tables) {
                  var sfnt2 = new table.Table("sfnt", [
                    {
                      name: "version",
                      type: "TAG",
                      value: "OTTO"
                    },
                    {
                      name: "numTables",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "searchRange",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "entrySelector",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "rangeShift",
                      type: "USHORT",
                      value: 0
                    }
                  ]);
                  sfnt2.tables = tables;
                  sfnt2.numTables = tables.length;
                  var highestPowerOf2 = Math.pow(2, log2(sfnt2.numTables));
                  sfnt2.searchRange = 16 * highestPowerOf2;
                  sfnt2.entrySelector = log2(highestPowerOf2);
                  sfnt2.rangeShift = sfnt2.numTables * 16 - sfnt2.searchRange;
                  var recordFields = [];
                  var tableFields = [];
                  var offset = sfnt2.sizeOf() + makeTableRecord().sizeOf() * sfnt2.numTables;
                  while (offset % 4 !== 0) {
                    offset += 1;
                    tableFields.push({
                      name: "padding",
                      type: "BYTE",
                      value: 0
                    });
                  }
                  for (var i2 = 0; i2 < tables.length; i2 += 1) {
                    var t = tables[i2];
                    check.argument(t.tableName.length === 4, "Table name" + t.tableName + " is invalid.");
                    var tableLength = t.sizeOf();
                    var tableRecord = makeTableRecord(t.tableName, computeCheckSum(t.encode()), offset, tableLength);
                    recordFields.push({
                      name: tableRecord.tag + " Table Record",
                      type: "RECORD",
                      value: tableRecord
                    });
                    tableFields.push({
                      name: t.tableName + " table",
                      type: "RECORD",
                      value: t
                    });
                    offset += tableLength;
                    check.argument(!isNaN(offset), "Something went wrong calculating the offset.");
                    while (offset % 4 !== 0) {
                      offset += 1;
                      tableFields.push({
                        name: "padding",
                        type: "BYTE",
                        value: 0
                      });
                    }
                  }
                  recordFields.sort(function(r1, r2) {
                    if (r1.value.tag > r2.value.tag) {
                      return 1;
                    } else {
                      return -1;
                    }
                  });
                  sfnt2.fields = sfnt2.fields.concat(recordFields);
                  sfnt2.fields = sfnt2.fields.concat(tableFields);
                  return sfnt2;
                }
                function metricsForChar(font, chars, notFoundMetrics) {
                  for (var i2 = 0; i2 < chars.length; i2 += 1) {
                    var glyphIndex = font.charToGlyphIndex(chars[i2]);
                    if (glyphIndex > 0) {
                      var glyph = font.glyphs.get(glyphIndex);
                      return glyph.getMetrics();
                    }
                  }
                  return notFoundMetrics;
                }
                function average(vs) {
                  var sum = 0;
                  for (var i2 = 0; i2 < vs.length; i2 += 1) {
                    sum += vs[i2];
                  }
                  return sum / vs.length;
                }
                function fontToSfntTable(font) {
                  var xMins = [];
                  var yMins = [];
                  var xMaxs = [];
                  var yMaxs = [];
                  var advanceWidths = [];
                  var leftSideBearings = [];
                  var rightSideBearings = [];
                  var firstCharIndex;
                  var lastCharIndex = 0;
                  var ulUnicodeRange1 = 0;
                  var ulUnicodeRange2 = 0;
                  var ulUnicodeRange3 = 0;
                  var ulUnicodeRange4 = 0;
                  for (var i2 = 0; i2 < font.glyphs.length; i2 += 1) {
                    var glyph = font.glyphs.get(i2);
                    var unicode = glyph.unicode | 0;
                    if (isNaN(glyph.advanceWidth)) {
                      throw new Error("Glyph " + glyph.name + " (" + i2 + "): advanceWidth is not a number.");
                    }
                    if (firstCharIndex > unicode || firstCharIndex === void 0) {
                      if (unicode > 0) {
                        firstCharIndex = unicode;
                      }
                    }
                    if (lastCharIndex < unicode) {
                      lastCharIndex = unicode;
                    }
                    var position = os2.getUnicodeRange(unicode);
                    if (position < 32) {
                      ulUnicodeRange1 |= 1 << position;
                    } else if (position < 64) {
                      ulUnicodeRange2 |= 1 << position - 32;
                    } else if (position < 96) {
                      ulUnicodeRange3 |= 1 << position - 64;
                    } else if (position < 123) {
                      ulUnicodeRange4 |= 1 << position - 96;
                    } else {
                      throw new Error("Unicode ranges bits > 123 are reserved for internal usage");
                    }
                    if (glyph.name === ".notdef") {
                      continue;
                    }
                    var metrics = glyph.getMetrics();
                    xMins.push(metrics.xMin);
                    yMins.push(metrics.yMin);
                    xMaxs.push(metrics.xMax);
                    yMaxs.push(metrics.yMax);
                    leftSideBearings.push(metrics.leftSideBearing);
                    rightSideBearings.push(metrics.rightSideBearing);
                    advanceWidths.push(glyph.advanceWidth);
                  }
                  var globals = {
                    xMin: Math.min.apply(null, xMins),
                    yMin: Math.min.apply(null, yMins),
                    xMax: Math.max.apply(null, xMaxs),
                    yMax: Math.max.apply(null, yMaxs),
                    advanceWidthMax: Math.max.apply(null, advanceWidths),
                    advanceWidthAvg: average(advanceWidths),
                    minLeftSideBearing: Math.min.apply(null, leftSideBearings),
                    maxLeftSideBearing: Math.max.apply(null, leftSideBearings),
                    minRightSideBearing: Math.min.apply(null, rightSideBearings)
                  };
                  globals.ascender = font.ascender;
                  globals.descender = font.descender;
                  var headTable = head.make({
                    flags: 3,
                    // 00000011 (baseline for font at y=0; left sidebearing point at x=0)
                    unitsPerEm: font.unitsPerEm,
                    xMin: globals.xMin,
                    yMin: globals.yMin,
                    xMax: globals.xMax,
                    yMax: globals.yMax,
                    lowestRecPPEM: 3,
                    createdTimestamp: font.createdTimestamp
                  });
                  var hheaTable = hhea.make({
                    ascender: globals.ascender,
                    descender: globals.descender,
                    advanceWidthMax: globals.advanceWidthMax,
                    minLeftSideBearing: globals.minLeftSideBearing,
                    minRightSideBearing: globals.minRightSideBearing,
                    xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),
                    numberOfHMetrics: font.glyphs.length
                  });
                  var maxpTable = maxp.make(font.glyphs.length);
                  var os2Table = os2.make({
                    xAvgCharWidth: Math.round(globals.advanceWidthAvg),
                    usWeightClass: font.tables.os2.usWeightClass,
                    usWidthClass: font.tables.os2.usWidthClass,
                    usFirstCharIndex: firstCharIndex,
                    usLastCharIndex: lastCharIndex,
                    ulUnicodeRange1,
                    ulUnicodeRange2,
                    ulUnicodeRange3,
                    ulUnicodeRange4,
                    fsSelection: font.tables.os2.fsSelection,
                    // REGULAR
                    // See http://typophile.com/node/13081 for more info on vertical metrics.
                    // We get metrics for typical characters (such as "x" for xHeight).
                    // We provide some fallback characters if characters are unavailable: their
                    // ordering was chosen experimentally.
                    sTypoAscender: globals.ascender,
                    sTypoDescender: globals.descender,
                    sTypoLineGap: 0,
                    usWinAscent: globals.yMax,
                    usWinDescent: Math.abs(globals.yMin),
                    ulCodePageRange1: 1,
                    // FIXME: hard-code Latin 1 support for now
                    sxHeight: metricsForChar(font, "xyvw", {
                      yMax: Math.round(globals.ascender / 2)
                    }).yMax,
                    sCapHeight: metricsForChar(font, "HIKLEFJMNTZBDPRAGOQSUVWXY", globals).yMax,
                    usDefaultChar: font.hasChar(" ") ? 32 : 0,
                    // Use space as the default character, if available.
                    usBreakChar: font.hasChar(" ") ? 32 : 0
                    // Use space as the break character, if available.
                  });
                  var hmtxTable = hmtx.make(font.glyphs);
                  var cmapTable = cmap.make(font.glyphs);
                  var englishFamilyName = font.getEnglishName("fontFamily");
                  var englishStyleName = font.getEnglishName("fontSubfamily");
                  var englishFullName = englishFamilyName + " " + englishStyleName;
                  var postScriptName = font.getEnglishName("postScriptName");
                  if (!postScriptName) {
                    postScriptName = englishFamilyName.replace(/\s/g, "") + "-" + englishStyleName;
                  }
                  var names = {};
                  for (var n in font.names) {
                    names[n] = font.names[n];
                  }
                  if (!names.uniqueID) {
                    names.uniqueID = {
                      en: font.getEnglishName("manufacturer") + ":" + englishFullName
                    };
                  }
                  if (!names.postScriptName) {
                    names.postScriptName = {
                      en: postScriptName
                    };
                  }
                  if (!names.preferredFamily) {
                    names.preferredFamily = font.names.fontFamily;
                  }
                  if (!names.preferredSubfamily) {
                    names.preferredSubfamily = font.names.fontSubfamily;
                  }
                  var languageTags = [];
                  var nameTable = _name.make(names, languageTags);
                  var ltagTable = languageTags.length > 0 ? ltag.make(languageTags) : void 0;
                  var postTable = post.make();
                  var cffTable = cff.make(font.glyphs, {
                    version: font.getEnglishName("version"),
                    fullName: englishFullName,
                    familyName: englishFamilyName,
                    weightName: englishStyleName,
                    postScriptName,
                    unitsPerEm: font.unitsPerEm,
                    fontBBox: [
                      0,
                      globals.yMin,
                      globals.ascender,
                      globals.advanceWidthMax
                    ]
                  });
                  var metaTable = font.metas && Object.keys(font.metas).length > 0 ? meta.make(font.metas) : void 0;
                  var tables = [
                    headTable,
                    hheaTable,
                    maxpTable,
                    os2Table,
                    nameTable,
                    cmapTable,
                    postTable,
                    cffTable,
                    hmtxTable
                  ];
                  if (ltagTable) {
                    tables.push(ltagTable);
                  }
                  if (font.tables.gsub) {
                    tables.push(gsub.make(font.tables.gsub));
                  }
                  if (metaTable) {
                    tables.push(metaTable);
                  }
                  var sfntTable = makeSfntTable(tables);
                  var bytes = sfntTable.encode();
                  var checkSum = computeCheckSum(bytes);
                  var tableFields = sfntTable.fields;
                  var checkSumAdjusted = false;
                  for (var i$1 = 0; i$1 < tableFields.length; i$1 += 1) {
                    if (tableFields[i$1].name === "head table") {
                      tableFields[i$1].value.checkSumAdjustment = 2981146554 - checkSum;
                      checkSumAdjusted = true;
                      break;
                    }
                  }
                  if (!checkSumAdjusted) {
                    throw new Error("Could not find head table with checkSum to adjust.");
                  }
                  return sfntTable;
                }
                var sfnt = {
                  make: makeSfntTable,
                  fontToTable: fontToSfntTable,
                  computeCheckSum
                };
                function searchTag(arr, tag) {
                  var imin = 0;
                  var imax = arr.length - 1;
                  while (imin <= imax) {
                    var imid = imin + imax >>> 1;
                    var val = arr[imid].tag;
                    if (val === tag) {
                      return imid;
                    } else if (val < tag) {
                      imin = imid + 1;
                    } else {
                      imax = imid - 1;
                    }
                  }
                  return -imin - 1;
                }
                function binSearch(arr, value) {
                  var imin = 0;
                  var imax = arr.length - 1;
                  while (imin <= imax) {
                    var imid = imin + imax >>> 1;
                    var val = arr[imid];
                    if (val === value) {
                      return imid;
                    } else if (val < value) {
                      imin = imid + 1;
                    } else {
                      imax = imid - 1;
                    }
                  }
                  return -imin - 1;
                }
                function searchRange(ranges, value) {
                  var range;
                  var imin = 0;
                  var imax = ranges.length - 1;
                  while (imin <= imax) {
                    var imid = imin + imax >>> 1;
                    range = ranges[imid];
                    var start = range.start;
                    if (start === value) {
                      return range;
                    } else if (start < value) {
                      imin = imid + 1;
                    } else {
                      imax = imid - 1;
                    }
                  }
                  if (imin > 0) {
                    range = ranges[imin - 1];
                    if (value > range.end) {
                      return 0;
                    }
                    return range;
                  }
                }
                function Layout(font, tableName) {
                  this.font = font;
                  this.tableName = tableName;
                }
                Layout.prototype = {
                  /**
                  * Binary search an object by "tag" property
                  * @instance
                  * @function searchTag
                  * @memberof opentype.Layout
                  * @param  {Array} arr
                  * @param  {string} tag
                  * @return {number}
                  */
                  searchTag,
                  /**
                  * Binary search in a list of numbers
                  * @instance
                  * @function binSearch
                  * @memberof opentype.Layout
                  * @param  {Array} arr
                  * @param  {number} value
                  * @return {number}
                  */
                  binSearch,
                  /**
                  * Get or create the Layout table (GSUB, GPOS etc).
                  * @param  {boolean} create - Whether to create a new one.
                  * @return {Object} The GSUB or GPOS table.
                  */
                  getTable: function(create) {
                    var layout = this.font.tables[this.tableName];
                    if (!layout && create) {
                      layout = this.font.tables[this.tableName] = this.createDefaultTable();
                    }
                    return layout;
                  },
                  /**
                  * Returns all scripts in the substitution table.
                  * @instance
                  * @return {Array}
                  */
                  getScriptNames: function() {
                    var layout = this.getTable();
                    if (!layout) {
                      return [];
                    }
                    return layout.scripts.map(function(script) {
                      return script.tag;
                    });
                  },
                  /**
                  * Returns the best bet for a script name.
                  * Returns 'DFLT' if it exists.
                  * If not, returns 'latn' if it exists.
                  * If neither exist, returns undefined.
                  */
                  getDefaultScriptName: function() {
                    var layout = this.getTable();
                    if (!layout) {
                      return;
                    }
                    var hasLatn = false;
                    for (var i2 = 0; i2 < layout.scripts.length; i2++) {
                      var name = layout.scripts[i2].tag;
                      if (name === "DFLT") {
                        return name;
                      }
                      if (name === "latn") {
                        hasLatn = true;
                      }
                    }
                    if (hasLatn) {
                      return "latn";
                    }
                  },
                  /**
                  * Returns all LangSysRecords in the given script.
                  * @instance
                  * @param {string} [script='DFLT']
                  * @param {boolean} create - forces the creation of this script table if it doesn't exist.
                  * @return {Object} An object with tag and script properties.
                  */
                  getScriptTable: function(script, create) {
                    var layout = this.getTable(create);
                    if (layout) {
                      script = script || "DFLT";
                      var scripts = layout.scripts;
                      var pos = searchTag(layout.scripts, script);
                      if (pos >= 0) {
                        return scripts[pos].script;
                      } else if (create) {
                        var scr = {
                          tag: script,
                          script: {
                            defaultLangSys: {
                              reserved: 0,
                              reqFeatureIndex: 65535,
                              featureIndexes: []
                            },
                            langSysRecords: []
                          }
                        };
                        scripts.splice(-1 - pos, 0, scr);
                        return scr.script;
                      }
                    }
                  },
                  /**
                  * Returns a language system table
                  * @instance
                  * @param {string} [script='DFLT']
                  * @param {string} [language='dlft']
                  * @param {boolean} create - forces the creation of this langSysTable if it doesn't exist.
                  * @return {Object}
                  */
                  getLangSysTable: function(script, language, create) {
                    var scriptTable = this.getScriptTable(script, create);
                    if (scriptTable) {
                      if (!language || language === "dflt" || language === "DFLT") {
                        return scriptTable.defaultLangSys;
                      }
                      var pos = searchTag(scriptTable.langSysRecords, language);
                      if (pos >= 0) {
                        return scriptTable.langSysRecords[pos].langSys;
                      } else if (create) {
                        var langSysRecord = {
                          tag: language,
                          langSys: {
                            reserved: 0,
                            reqFeatureIndex: 65535,
                            featureIndexes: []
                          }
                        };
                        scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);
                        return langSysRecord.langSys;
                      }
                    }
                  },
                  /**
                  * Get a specific feature table.
                  * @instance
                  * @param {string} [script='DFLT']
                  * @param {string} [language='dlft']
                  * @param {string} feature - One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm
                  * @param {boolean} create - forces the creation of the feature table if it doesn't exist.
                  * @return {Object}
                  */
                  getFeatureTable: function(script, language, feature, create) {
                    var langSysTable2 = this.getLangSysTable(script, language, create);
                    if (langSysTable2) {
                      var featureRecord;
                      var featIndexes = langSysTable2.featureIndexes;
                      var allFeatures = this.font.tables[this.tableName].features;
                      for (var i2 = 0; i2 < featIndexes.length; i2++) {
                        featureRecord = allFeatures[featIndexes[i2]];
                        if (featureRecord.tag === feature) {
                          return featureRecord.feature;
                        }
                      }
                      if (create) {
                        var index = allFeatures.length;
                        check.assert(index === 0 || feature >= allFeatures[index - 1].tag, "Features must be added in alphabetical order.");
                        featureRecord = {
                          tag: feature,
                          feature: {
                            params: 0,
                            lookupListIndexes: []
                          }
                        };
                        allFeatures.push(featureRecord);
                        featIndexes.push(index);
                        return featureRecord.feature;
                      }
                    }
                  },
                  /**
                  * Get the lookup tables of a given type for a script/language/feature.
                  * @instance
                  * @param {string} [script='DFLT']
                  * @param {string} [language='dlft']
                  * @param {string} feature - 4-letter feature code
                  * @param {number} lookupType - 1 to 9
                  * @param {boolean} create - forces the creation of the lookup table if it doesn't exist, with no subtables.
                  * @return {Object[]}
                  */
                  getLookupTables: function(script, language, feature, lookupType, create) {
                    var featureTable = this.getFeatureTable(script, language, feature, create);
                    var tables = [];
                    if (featureTable) {
                      var lookupTable;
                      var lookupListIndexes = featureTable.lookupListIndexes;
                      var allLookups = this.font.tables[this.tableName].lookups;
                      for (var i2 = 0; i2 < lookupListIndexes.length; i2++) {
                        lookupTable = allLookups[lookupListIndexes[i2]];
                        if (lookupTable.lookupType === lookupType) {
                          tables.push(lookupTable);
                        }
                      }
                      if (tables.length === 0 && create) {
                        lookupTable = {
                          lookupType,
                          lookupFlag: 0,
                          subtables: [],
                          markFilteringSet: void 0
                        };
                        var index = allLookups.length;
                        allLookups.push(lookupTable);
                        lookupListIndexes.push(index);
                        return [lookupTable];
                      }
                    }
                    return tables;
                  },
                  /**
                  * Find a glyph in a class definition table
                  * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#class-definition-table
                  * @param {object} classDefTable - an OpenType Layout class definition table
                  * @param {number} glyphIndex - the index of the glyph to find
                  * @returns {number} -1 if not found
                  */
                  getGlyphClass: function(classDefTable, glyphIndex) {
                    switch (classDefTable.format) {
                      case 1:
                        if (classDefTable.startGlyph <= glyphIndex && glyphIndex < classDefTable.startGlyph + classDefTable.classes.length) {
                          return classDefTable.classes[glyphIndex - classDefTable.startGlyph];
                        }
                        return 0;
                      case 2:
                        var range = searchRange(classDefTable.ranges, glyphIndex);
                        return range ? range.classId : 0;
                    }
                  },
                  /**
                  * Find a glyph in a coverage table
                  * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table
                  * @param {object} coverageTable - an OpenType Layout coverage table
                  * @param {number} glyphIndex - the index of the glyph to find
                  * @returns {number} -1 if not found
                  */
                  getCoverageIndex: function(coverageTable, glyphIndex) {
                    switch (coverageTable.format) {
                      case 1:
                        var index = binSearch(coverageTable.glyphs, glyphIndex);
                        return index >= 0 ? index : -1;
                      case 2:
                        var range = searchRange(coverageTable.ranges, glyphIndex);
                        return range ? range.index + glyphIndex - range.start : -1;
                    }
                  },
                  /**
                  * Returns the list of glyph indexes of a coverage table.
                  * Format 1: the list is stored raw
                  * Format 2: compact list as range records.
                  * @instance
                  * @param  {Object} coverageTable
                  * @return {Array}
                  */
                  expandCoverage: function(coverageTable) {
                    if (coverageTable.format === 1) {
                      return coverageTable.glyphs;
                    } else {
                      var glyphs = [];
                      var ranges = coverageTable.ranges;
                      for (var i2 = 0; i2 < ranges.length; i2++) {
                        var range = ranges[i2];
                        var start = range.start;
                        var end = range.end;
                        for (var j = start; j <= end; j++) {
                          glyphs.push(j);
                        }
                      }
                      return glyphs;
                    }
                  }
                };
                function Position(font) {
                  Layout.call(this, font, "gpos");
                }
                Position.prototype = Layout.prototype;
                Position.prototype.init = function() {
                  var script = this.getDefaultScriptName();
                  this.defaultKerningTables = this.getKerningTables(script);
                };
                Position.prototype.getKerningValue = function(kerningLookups, leftIndex, rightIndex) {
                  var this$1 = this;
                  for (var i2 = 0; i2 < kerningLookups.length; i2++) {
                    var subtables = kerningLookups[i2].subtables;
                    for (var j = 0; j < subtables.length; j++) {
                      var subtable = subtables[j];
                      var covIndex = this$1.getCoverageIndex(subtable.coverage, leftIndex);
                      if (covIndex < 0) {
                        continue;
                      }
                      switch (subtable.posFormat) {
                        case 1:
                          var pairSet = subtable.pairSets[covIndex];
                          for (var k2 = 0; k2 < pairSet.length; k2++) {
                            var pair = pairSet[k2];
                            if (pair.secondGlyph === rightIndex) {
                              return pair.value1 && pair.value1.xAdvance || 0;
                            }
                          }
                          break;
                        case 2:
                          var class1 = this$1.getGlyphClass(subtable.classDef1, leftIndex);
                          var class2 = this$1.getGlyphClass(subtable.classDef2, rightIndex);
                          var pair$1 = subtable.classRecords[class1][class2];
                          return pair$1.value1 && pair$1.value1.xAdvance || 0;
                      }
                    }
                  }
                  return 0;
                };
                Position.prototype.getKerningTables = function(script, language) {
                  if (this.font.tables.gpos) {
                    return this.getLookupTables(script, language, "kern", 2);
                  }
                };
                function Substitution(font) {
                  Layout.call(this, font, "gsub");
                }
                function arraysEqual(ar1, ar2) {
                  var n = ar1.length;
                  if (n !== ar2.length) {
                    return false;
                  }
                  for (var i2 = 0; i2 < n; i2++) {
                    if (ar1[i2] !== ar2[i2]) {
                      return false;
                    }
                  }
                  return true;
                }
                function getSubstFormat(lookupTable, format, defaultSubtable) {
                  var subtables = lookupTable.subtables;
                  for (var i2 = 0; i2 < subtables.length; i2++) {
                    var subtable = subtables[i2];
                    if (subtable.substFormat === format) {
                      return subtable;
                    }
                  }
                  if (defaultSubtable) {
                    subtables.push(defaultSubtable);
                    return defaultSubtable;
                  }
                  return void 0;
                }
                Substitution.prototype = Layout.prototype;
                Substitution.prototype.createDefaultTable = function() {
                  return {
                    version: 1,
                    scripts: [
                      {
                        tag: "DFLT",
                        script: {
                          defaultLangSys: {
                            reserved: 0,
                            reqFeatureIndex: 65535,
                            featureIndexes: []
                          },
                          langSysRecords: []
                        }
                      }
                    ],
                    features: [],
                    lookups: []
                  };
                };
                Substitution.prototype.getSingle = function(feature, script, language) {
                  var this$1 = this;
                  var substitutions = [];
                  var lookupTables = this.getLookupTables(script, language, feature, 1);
                  for (var idx = 0; idx < lookupTables.length; idx++) {
                    var subtables = lookupTables[idx].subtables;
                    for (var i2 = 0; i2 < subtables.length; i2++) {
                      var subtable = subtables[i2];
                      var glyphs = this$1.expandCoverage(subtable.coverage);
                      var j = void 0;
                      if (subtable.substFormat === 1) {
                        var delta = subtable.deltaGlyphId;
                        for (j = 0; j < glyphs.length; j++) {
                          var glyph = glyphs[j];
                          substitutions.push({
                            sub: glyph,
                            by: glyph + delta
                          });
                        }
                      } else {
                        var substitute = subtable.substitute;
                        for (j = 0; j < glyphs.length; j++) {
                          substitutions.push({
                            sub: glyphs[j],
                            by: substitute[j]
                          });
                        }
                      }
                    }
                  }
                  return substitutions;
                };
                Substitution.prototype.getAlternates = function(feature, script, language) {
                  var this$1 = this;
                  var alternates = [];
                  var lookupTables = this.getLookupTables(script, language, feature, 3);
                  for (var idx = 0; idx < lookupTables.length; idx++) {
                    var subtables = lookupTables[idx].subtables;
                    for (var i2 = 0; i2 < subtables.length; i2++) {
                      var subtable = subtables[i2];
                      var glyphs = this$1.expandCoverage(subtable.coverage);
                      var alternateSets = subtable.alternateSets;
                      for (var j = 0; j < glyphs.length; j++) {
                        alternates.push({
                          sub: glyphs[j],
                          by: alternateSets[j]
                        });
                      }
                    }
                  }
                  return alternates;
                };
                Substitution.prototype.getLigatures = function(feature, script, language) {
                  var this$1 = this;
                  var ligatures = [];
                  var lookupTables = this.getLookupTables(script, language, feature, 4);
                  for (var idx = 0; idx < lookupTables.length; idx++) {
                    var subtables = lookupTables[idx].subtables;
                    for (var i2 = 0; i2 < subtables.length; i2++) {
                      var subtable = subtables[i2];
                      var glyphs = this$1.expandCoverage(subtable.coverage);
                      var ligatureSets = subtable.ligatureSets;
                      for (var j = 0; j < glyphs.length; j++) {
                        var startGlyph = glyphs[j];
                        var ligSet = ligatureSets[j];
                        for (var k2 = 0; k2 < ligSet.length; k2++) {
                          var lig = ligSet[k2];
                          ligatures.push({
                            sub: [
                              startGlyph
                            ].concat(lig.components),
                            by: lig.ligGlyph
                          });
                        }
                      }
                    }
                  }
                  return ligatures;
                };
                Substitution.prototype.addSingle = function(feature, substitution, script, language) {
                  var lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];
                  var subtable = getSubstFormat(lookupTable, 2, {
                    // lookup type 1 subtable, format 2, coverage format 1
                    substFormat: 2,
                    coverage: {
                      format: 1,
                      glyphs: []
                    },
                    substitute: []
                  });
                  check.assert(subtable.coverage.format === 1, "Ligature: unable to modify coverage table format " + subtable.coverage.format);
                  var coverageGlyph = substitution.sub;
                  var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
                  if (pos < 0) {
                    pos = -1 - pos;
                    subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
                    subtable.substitute.splice(pos, 0, 0);
                  }
                  subtable.substitute[pos] = substitution.by;
                };
                Substitution.prototype.addAlternate = function(feature, substitution, script, language) {
                  var lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];
                  var subtable = getSubstFormat(lookupTable, 1, {
                    // lookup type 3 subtable, format 1, coverage format 1
                    substFormat: 1,
                    coverage: {
                      format: 1,
                      glyphs: []
                    },
                    alternateSets: []
                  });
                  check.assert(subtable.coverage.format === 1, "Ligature: unable to modify coverage table format " + subtable.coverage.format);
                  var coverageGlyph = substitution.sub;
                  var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
                  if (pos < 0) {
                    pos = -1 - pos;
                    subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
                    subtable.alternateSets.splice(pos, 0, 0);
                  }
                  subtable.alternateSets[pos] = substitution.by;
                };
                Substitution.prototype.addLigature = function(feature, ligature, script, language) {
                  var lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];
                  var subtable = lookupTable.subtables[0];
                  if (!subtable) {
                    subtable = {
                      // lookup type 4 subtable, format 1, coverage format 1
                      substFormat: 1,
                      coverage: {
                        format: 1,
                        glyphs: []
                      },
                      ligatureSets: []
                    };
                    lookupTable.subtables[0] = subtable;
                  }
                  check.assert(subtable.coverage.format === 1, "Ligature: unable to modify coverage table format " + subtable.coverage.format);
                  var coverageGlyph = ligature.sub[0];
                  var ligComponents = ligature.sub.slice(1);
                  var ligatureTable = {
                    ligGlyph: ligature.by,
                    components: ligComponents
                  };
                  var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
                  if (pos >= 0) {
                    var ligatureSet = subtable.ligatureSets[pos];
                    for (var i2 = 0; i2 < ligatureSet.length; i2++) {
                      if (arraysEqual(ligatureSet[i2].components, ligComponents)) {
                        return;
                      }
                    }
                    ligatureSet.push(ligatureTable);
                  } else {
                    pos = -1 - pos;
                    subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
                    subtable.ligatureSets.splice(pos, 0, [
                      ligatureTable
                    ]);
                  }
                };
                Substitution.prototype.getFeature = function(feature, script, language) {
                  if (/ss\d\d/.test(feature)) {
                    return this.getSingle(feature, script, language);
                  }
                  switch (feature) {
                    case "aalt":
                    case "salt":
                      return this.getSingle(feature, script, language).concat(this.getAlternates(feature, script, language));
                    case "dlig":
                    case "liga":
                    case "rlig":
                      return this.getLigatures(feature, script, language);
                  }
                  return void 0;
                };
                Substitution.prototype.add = function(feature, sub, script, language) {
                  if (/ss\d\d/.test(feature)) {
                    return this.addSingle(feature, sub, script, language);
                  }
                  switch (feature) {
                    case "aalt":
                    case "salt":
                      if (typeof sub.by === "number") {
                        return this.addSingle(feature, sub, script, language);
                      }
                      return this.addAlternate(feature, sub, script, language);
                    case "dlig":
                    case "liga":
                    case "rlig":
                      return this.addLigature(feature, sub, script, language);
                  }
                  return void 0;
                };
                function isBrowser() {
                  return typeof window !== "undefined";
                }
                function nodeBufferToArrayBuffer(buffer) {
                  var ab = new ArrayBuffer(buffer.length);
                  var view = new Uint8Array(ab);
                  for (var i2 = 0; i2 < buffer.length; ++i2) {
                    view[i2] = buffer[i2];
                  }
                  return ab;
                }
                function arrayBufferToNodeBuffer(ab) {
                  var buffer = new Buffer(ab.byteLength);
                  var view = new Uint8Array(ab);
                  for (var i2 = 0; i2 < buffer.length; ++i2) {
                    buffer[i2] = view[i2];
                  }
                  return buffer;
                }
                function checkArgument(expression, message) {
                  if (!expression) {
                    throw message;
                  }
                }
                function parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {
                  var v;
                  if ((flag & shortVectorBitMask) > 0) {
                    v = p.parseByte();
                    if ((flag & sameBitMask) === 0) {
                      v = -v;
                    }
                    v = previousValue + v;
                  } else {
                    if ((flag & sameBitMask) > 0) {
                      v = previousValue;
                    } else {
                      v = previousValue + p.parseShort();
                    }
                  }
                  return v;
                }
                function parseGlyph(glyph, data, start) {
                  var p = new parse.Parser(data, start);
                  glyph.numberOfContours = p.parseShort();
                  glyph._xMin = p.parseShort();
                  glyph._yMin = p.parseShort();
                  glyph._xMax = p.parseShort();
                  glyph._yMax = p.parseShort();
                  var flags;
                  var flag;
                  if (glyph.numberOfContours > 0) {
                    var endPointIndices = glyph.endPointIndices = [];
                    for (var i2 = 0; i2 < glyph.numberOfContours; i2 += 1) {
                      endPointIndices.push(p.parseUShort());
                    }
                    glyph.instructionLength = p.parseUShort();
                    glyph.instructions = [];
                    for (var i$1 = 0; i$1 < glyph.instructionLength; i$1 += 1) {
                      glyph.instructions.push(p.parseByte());
                    }
                    var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;
                    flags = [];
                    for (var i$2 = 0; i$2 < numberOfCoordinates; i$2 += 1) {
                      flag = p.parseByte();
                      flags.push(flag);
                      if ((flag & 8) > 0) {
                        var repeatCount = p.parseByte();
                        for (var j = 0; j < repeatCount; j += 1) {
                          flags.push(flag);
                          i$2 += 1;
                        }
                      }
                    }
                    check.argument(flags.length === numberOfCoordinates, "Bad flags.");
                    if (endPointIndices.length > 0) {
                      var points = [];
                      var point;
                      if (numberOfCoordinates > 0) {
                        for (var i$3 = 0; i$3 < numberOfCoordinates; i$3 += 1) {
                          flag = flags[i$3];
                          point = {};
                          point.onCurve = !!(flag & 1);
                          point.lastPointOfContour = endPointIndices.indexOf(i$3) >= 0;
                          points.push(point);
                        }
                        var px = 0;
                        for (var i$4 = 0; i$4 < numberOfCoordinates; i$4 += 1) {
                          flag = flags[i$4];
                          point = points[i$4];
                          point.x = parseGlyphCoordinate(p, flag, px, 2, 16);
                          px = point.x;
                        }
                        var py = 0;
                        for (var i$5 = 0; i$5 < numberOfCoordinates; i$5 += 1) {
                          flag = flags[i$5];
                          point = points[i$5];
                          point.y = parseGlyphCoordinate(p, flag, py, 4, 32);
                          py = point.y;
                        }
                      }
                      glyph.points = points;
                    } else {
                      glyph.points = [];
                    }
                  } else if (glyph.numberOfContours === 0) {
                    glyph.points = [];
                  } else {
                    glyph.isComposite = true;
                    glyph.points = [];
                    glyph.components = [];
                    var moreComponents = true;
                    while (moreComponents) {
                      flags = p.parseUShort();
                      var component = {
                        glyphIndex: p.parseUShort(),
                        xScale: 1,
                        scale01: 0,
                        scale10: 0,
                        yScale: 1,
                        dx: 0,
                        dy: 0
                      };
                      if ((flags & 1) > 0) {
                        if ((flags & 2) > 0) {
                          component.dx = p.parseShort();
                          component.dy = p.parseShort();
                        } else {
                          component.matchedPoints = [
                            p.parseUShort(),
                            p.parseUShort()
                          ];
                        }
                      } else {
                        if ((flags & 2) > 0) {
                          component.dx = p.parseChar();
                          component.dy = p.parseChar();
                        } else {
                          component.matchedPoints = [
                            p.parseByte(),
                            p.parseByte()
                          ];
                        }
                      }
                      if ((flags & 8) > 0) {
                        component.xScale = component.yScale = p.parseF2Dot14();
                      } else if ((flags & 64) > 0) {
                        component.xScale = p.parseF2Dot14();
                        component.yScale = p.parseF2Dot14();
                      } else if ((flags & 128) > 0) {
                        component.xScale = p.parseF2Dot14();
                        component.scale01 = p.parseF2Dot14();
                        component.scale10 = p.parseF2Dot14();
                        component.yScale = p.parseF2Dot14();
                      }
                      glyph.components.push(component);
                      moreComponents = !!(flags & 32);
                    }
                    if (flags & 256) {
                      glyph.instructionLength = p.parseUShort();
                      glyph.instructions = [];
                      for (var i$6 = 0; i$6 < glyph.instructionLength; i$6 += 1) {
                        glyph.instructions.push(p.parseByte());
                      }
                    }
                  }
                }
                function transformPoints(points, transform) {
                  var newPoints = [];
                  for (var i2 = 0; i2 < points.length; i2 += 1) {
                    var pt = points[i2];
                    var newPt = {
                      x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,
                      y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,
                      onCurve: pt.onCurve,
                      lastPointOfContour: pt.lastPointOfContour
                    };
                    newPoints.push(newPt);
                  }
                  return newPoints;
                }
                function getContours(points) {
                  var contours = [];
                  var currentContour = [];
                  for (var i2 = 0; i2 < points.length; i2 += 1) {
                    var pt = points[i2];
                    currentContour.push(pt);
                    if (pt.lastPointOfContour) {
                      contours.push(currentContour);
                      currentContour = [];
                    }
                  }
                  check.argument(currentContour.length === 0, "There are still points left in the current contour.");
                  return contours;
                }
                function getPath(points) {
                  var p = new Path();
                  if (!points) {
                    return p;
                  }
                  var contours = getContours(points);
                  for (var contourIndex = 0; contourIndex < contours.length; ++contourIndex) {
                    var contour = contours[contourIndex];
                    var prev = null;
                    var curr = contour[contour.length - 1];
                    var next = contour[0];
                    if (curr.onCurve) {
                      p.moveTo(curr.x, curr.y);
                    } else {
                      if (next.onCurve) {
                        p.moveTo(next.x, next.y);
                      } else {
                        var start = {
                          x: (curr.x + next.x) * 0.5,
                          y: (curr.y + next.y) * 0.5
                        };
                        p.moveTo(start.x, start.y);
                      }
                    }
                    for (var i2 = 0; i2 < contour.length; ++i2) {
                      prev = curr;
                      curr = next;
                      next = contour[(i2 + 1) % contour.length];
                      if (curr.onCurve) {
                        p.lineTo(curr.x, curr.y);
                      } else {
                        var prev2 = prev;
                        var next2 = next;
                        if (!prev.onCurve) {
                          prev2 = {
                            x: (curr.x + prev.x) * 0.5,
                            y: (curr.y + prev.y) * 0.5
                          };
                        }
                        if (!next.onCurve) {
                          next2 = {
                            x: (curr.x + next.x) * 0.5,
                            y: (curr.y + next.y) * 0.5
                          };
                        }
                        p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);
                      }
                    }
                    p.closePath();
                  }
                  return p;
                }
                function buildPath(glyphs, glyph) {
                  if (glyph.isComposite) {
                    for (var j = 0; j < glyph.components.length; j += 1) {
                      var component = glyph.components[j];
                      var componentGlyph = glyphs.get(component.glyphIndex);
                      componentGlyph.getPath();
                      if (componentGlyph.points) {
                        var transformedPoints = void 0;
                        if (component.matchedPoints === void 0) {
                          transformedPoints = transformPoints(componentGlyph.points, component);
                        } else {
                          if (component.matchedPoints[0] > glyph.points.length - 1 || component.matchedPoints[1] > componentGlyph.points.length - 1) {
                            throw Error("Matched points out of range in " + glyph.name);
                          }
                          var firstPt = glyph.points[component.matchedPoints[0]];
                          var secondPt = componentGlyph.points[component.matchedPoints[1]];
                          var transform = {
                            xScale: component.xScale,
                            scale01: component.scale01,
                            scale10: component.scale10,
                            yScale: component.yScale,
                            dx: 0,
                            dy: 0
                          };
                          secondPt = transformPoints([secondPt], transform)[0];
                          transform.dx = firstPt.x - secondPt.x;
                          transform.dy = firstPt.y - secondPt.y;
                          transformedPoints = transformPoints(componentGlyph.points, transform);
                        }
                        glyph.points = glyph.points.concat(transformedPoints);
                      }
                    }
                  }
                  return getPath(glyph.points);
                }
                function parseGlyfTable(data, start, loca2, font) {
                  var glyphs = new glyphset.GlyphSet(font);
                  for (var i2 = 0; i2 < loca2.length - 1; i2 += 1) {
                    var offset = loca2[i2];
                    var nextOffset = loca2[i2 + 1];
                    if (offset !== nextOffset) {
                      glyphs.push(i2, glyphset.ttfGlyphLoader(font, i2, parseGlyph, data, start + offset, buildPath));
                    } else {
                      glyphs.push(i2, glyphset.glyphLoader(font, i2));
                    }
                  }
                  return glyphs;
                }
                var glyf = {
                  getPath,
                  parse: parseGlyfTable
                };
                var instructionTable;
                var exec;
                var execGlyph;
                var execComponent;
                function Hinting(font) {
                  this.font = font;
                  this.getCommands = function(hPoints) {
                    return glyf.getPath(hPoints).commands;
                  };
                  this._fpgmState = this._prepState = void 0;
                  this._errorState = 0;
                }
                function roundOff(v) {
                  return v;
                }
                function roundToGrid(v) {
                  return Math.sign(v) * Math.round(Math.abs(v));
                }
                function roundToDoubleGrid(v) {
                  return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;
                }
                function roundToHalfGrid(v) {
                  return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);
                }
                function roundUpToGrid(v) {
                  return Math.sign(v) * Math.ceil(Math.abs(v));
                }
                function roundDownToGrid(v) {
                  return Math.sign(v) * Math.floor(Math.abs(v));
                }
                var roundSuper = function(v) {
                  var period = this.srPeriod;
                  var phase = this.srPhase;
                  var threshold = this.srThreshold;
                  var sign = 1;
                  if (v < 0) {
                    v = -v;
                    sign = -1;
                  }
                  v += threshold - phase;
                  v = Math.trunc(v / period) * period;
                  v += phase;
                  if (v < 0) {
                    return phase * sign;
                  }
                  return v * sign;
                };
                var xUnitVector = {
                  x: 1,
                  y: 0,
                  axis: "x",
                  // Gets the projected distance between two points.
                  // o1/o2 ... if true, respective original position is used.
                  distance: function(p1, p2, o1, o2) {
                    return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);
                  },
                  // Moves point p so the moved position has the same relative
                  // position to the moved positions of rp1 and rp2 than the
                  // original positions had.
                  //
                  // See APPENDIX on INTERPOLATE at the bottom of this file.
                  interpolate: function(p, rp1, rp2, pv) {
                    var do1;
                    var do2;
                    var doa1;
                    var doa2;
                    var dm1;
                    var dm2;
                    var dt;
                    if (!pv || pv === this) {
                      do1 = p.xo - rp1.xo;
                      do2 = p.xo - rp2.xo;
                      dm1 = rp1.x - rp1.xo;
                      dm2 = rp2.x - rp2.xo;
                      doa1 = Math.abs(do1);
                      doa2 = Math.abs(do2);
                      dt = doa1 + doa2;
                      if (dt === 0) {
                        p.x = p.xo + (dm1 + dm2) / 2;
                        return;
                      }
                      p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt;
                      return;
                    }
                    do1 = pv.distance(p, rp1, true, true);
                    do2 = pv.distance(p, rp2, true, true);
                    dm1 = pv.distance(rp1, rp1, false, true);
                    dm2 = pv.distance(rp2, rp2, false, true);
                    doa1 = Math.abs(do1);
                    doa2 = Math.abs(do2);
                    dt = doa1 + doa2;
                    if (dt === 0) {
                      xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
                      return;
                    }
                    xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
                  },
                  // Slope of line normal to this
                  normalSlope: Number.NEGATIVE_INFINITY,
                  // Sets the point 'p' relative to point 'rp'
                  // by the distance 'd'.
                  //
                  // See APPENDIX on SETRELATIVE at the bottom of this file.
                  //
                  // p   ... point to set
                  // rp  ... reference point
                  // d   ... distance on projection vector
                  // pv  ... projection vector (undefined = this)
                  // org ... if true, uses the original position of rp as reference.
                  setRelative: function(p, rp, d, pv, org) {
                    if (!pv || pv === this) {
                      p.x = (org ? rp.xo : rp.x) + d;
                      return;
                    }
                    var rpx = org ? rp.xo : rp.x;
                    var rpy = org ? rp.yo : rp.y;
                    var rpdx = rpx + d * pv.x;
                    var rpdy = rpy + d * pv.y;
                    p.x = rpdx + (p.y - rpdy) / pv.normalSlope;
                  },
                  // Slope of vector line.
                  slope: 0,
                  // Touches the point p.
                  touch: function(p) {
                    p.xTouched = true;
                  },
                  // Tests if a point p is touched.
                  touched: function(p) {
                    return p.xTouched;
                  },
                  // Untouches the point p.
                  untouch: function(p) {
                    p.xTouched = false;
                  }
                };
                var yUnitVector = {
                  x: 0,
                  y: 1,
                  axis: "y",
                  // Gets the projected distance between two points.
                  // o1/o2 ... if true, respective original position is used.
                  distance: function(p1, p2, o1, o2) {
                    return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);
                  },
                  // Moves point p so the moved position has the same relative
                  // position to the moved positions of rp1 and rp2 than the
                  // original positions had.
                  //
                  // See APPENDIX on INTERPOLATE at the bottom of this file.
                  interpolate: function(p, rp1, rp2, pv) {
                    var do1;
                    var do2;
                    var doa1;
                    var doa2;
                    var dm1;
                    var dm2;
                    var dt;
                    if (!pv || pv === this) {
                      do1 = p.yo - rp1.yo;
                      do2 = p.yo - rp2.yo;
                      dm1 = rp1.y - rp1.yo;
                      dm2 = rp2.y - rp2.yo;
                      doa1 = Math.abs(do1);
                      doa2 = Math.abs(do2);
                      dt = doa1 + doa2;
                      if (dt === 0) {
                        p.y = p.yo + (dm1 + dm2) / 2;
                        return;
                      }
                      p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt;
                      return;
                    }
                    do1 = pv.distance(p, rp1, true, true);
                    do2 = pv.distance(p, rp2, true, true);
                    dm1 = pv.distance(rp1, rp1, false, true);
                    dm2 = pv.distance(rp2, rp2, false, true);
                    doa1 = Math.abs(do1);
                    doa2 = Math.abs(do2);
                    dt = doa1 + doa2;
                    if (dt === 0) {
                      yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
                      return;
                    }
                    yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
                  },
                  // Slope of line normal to this.
                  normalSlope: 0,
                  // Sets the point 'p' relative to point 'rp'
                  // by the distance 'd'
                  //
                  // See APPENDIX on SETRELATIVE at the bottom of this file.
                  //
                  // p   ... point to set
                  // rp  ... reference point
                  // d   ... distance on projection vector
                  // pv  ... projection vector (undefined = this)
                  // org ... if true, uses the original position of rp as reference.
                  setRelative: function(p, rp, d, pv, org) {
                    if (!pv || pv === this) {
                      p.y = (org ? rp.yo : rp.y) + d;
                      return;
                    }
                    var rpx = org ? rp.xo : rp.x;
                    var rpy = org ? rp.yo : rp.y;
                    var rpdx = rpx + d * pv.x;
                    var rpdy = rpy + d * pv.y;
                    p.y = rpdy + pv.normalSlope * (p.x - rpdx);
                  },
                  // Slope of vector line.
                  slope: Number.POSITIVE_INFINITY,
                  // Touches the point p.
                  touch: function(p) {
                    p.yTouched = true;
                  },
                  // Tests if a point p is touched.
                  touched: function(p) {
                    return p.yTouched;
                  },
                  // Untouches the point p.
                  untouch: function(p) {
                    p.yTouched = false;
                  }
                };
                Object.freeze(xUnitVector);
                Object.freeze(yUnitVector);
                function UnitVector(x, y) {
                  this.x = x;
                  this.y = y;
                  this.axis = void 0;
                  this.slope = y / x;
                  this.normalSlope = -x / y;
                  Object.freeze(this);
                }
                UnitVector.prototype.distance = function(p1, p2, o1, o2) {
                  return this.x * xUnitVector.distance(p1, p2, o1, o2) + this.y * yUnitVector.distance(p1, p2, o1, o2);
                };
                UnitVector.prototype.interpolate = function(p, rp1, rp2, pv) {
                  var dm1;
                  var dm2;
                  var do1;
                  var do2;
                  var doa1;
                  var doa2;
                  var dt;
                  do1 = pv.distance(p, rp1, true, true);
                  do2 = pv.distance(p, rp2, true, true);
                  dm1 = pv.distance(rp1, rp1, false, true);
                  dm2 = pv.distance(rp2, rp2, false, true);
                  doa1 = Math.abs(do1);
                  doa2 = Math.abs(do2);
                  dt = doa1 + doa2;
                  if (dt === 0) {
                    this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
                    return;
                  }
                  this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
                };
                UnitVector.prototype.setRelative = function(p, rp, d, pv, org) {
                  pv = pv || this;
                  var rpx = org ? rp.xo : rp.x;
                  var rpy = org ? rp.yo : rp.y;
                  var rpdx = rpx + d * pv.x;
                  var rpdy = rpy + d * pv.y;
                  var pvns = pv.normalSlope;
                  var fvs = this.slope;
                  var px = p.x;
                  var py = p.y;
                  p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);
                  p.y = fvs * (p.x - px) + py;
                };
                UnitVector.prototype.touch = function(p) {
                  p.xTouched = true;
                  p.yTouched = true;
                };
                function getUnitVector(x, y) {
                  var d = Math.sqrt(x * x + y * y);
                  x /= d;
                  y /= d;
                  if (x === 1 && y === 0) {
                    return xUnitVector;
                  } else if (x === 0 && y === 1) {
                    return yUnitVector;
                  } else {
                    return new UnitVector(x, y);
                  }
                }
                function HPoint(x, y, lastPointOfContour, onCurve) {
                  this.x = this.xo = Math.round(x * 64) / 64;
                  this.y = this.yo = Math.round(y * 64) / 64;
                  this.lastPointOfContour = lastPointOfContour;
                  this.onCurve = onCurve;
                  this.prevPointOnContour = void 0;
                  this.nextPointOnContour = void 0;
                  this.xTouched = false;
                  this.yTouched = false;
                  Object.preventExtensions(this);
                }
                HPoint.prototype.nextTouched = function(v) {
                  var p = this.nextPointOnContour;
                  while (!v.touched(p) && p !== this) {
                    p = p.nextPointOnContour;
                  }
                  return p;
                };
                HPoint.prototype.prevTouched = function(v) {
                  var p = this.prevPointOnContour;
                  while (!v.touched(p) && p !== this) {
                    p = p.prevPointOnContour;
                  }
                  return p;
                };
                var HPZero = Object.freeze(new HPoint(0, 0));
                var defaultState = {
                  cvCutIn: 17 / 16,
                  // control value cut in
                  deltaBase: 9,
                  deltaShift: 0.125,
                  loop: 1,
                  // loops some instructions
                  minDis: 1,
                  // minimum distance
                  autoFlip: true
                };
                function State(env, prog) {
                  this.env = env;
                  this.stack = [];
                  this.prog = prog;
                  switch (env) {
                    case "glyf":
                      this.zp0 = this.zp1 = this.zp2 = 1;
                      this.rp0 = this.rp1 = this.rp2 = 0;
                    case "prep":
                      this.fv = this.pv = this.dpv = xUnitVector;
                      this.round = roundToGrid;
                  }
                }
                Hinting.prototype.exec = function(glyph, ppem) {
                  if (typeof ppem !== "number") {
                    throw new Error("Point size is not a number!");
                  }
                  if (this._errorState > 2) {
                    return;
                  }
                  var font = this.font;
                  var prepState = this._prepState;
                  if (!prepState || prepState.ppem !== ppem) {
                    var fpgmState = this._fpgmState;
                    if (!fpgmState) {
                      State.prototype = defaultState;
                      fpgmState = this._fpgmState = new State("fpgm", font.tables.fpgm);
                      fpgmState.funcs = [];
                      fpgmState.font = font;
                      if (exports3.DEBUG) {
                        console.log("---EXEC FPGM---");
                        fpgmState.step = -1;
                      }
                      try {
                        exec(fpgmState);
                      } catch (e2) {
                        console.log("Hinting error in FPGM:" + e2);
                        this._errorState = 3;
                        return;
                      }
                    }
                    State.prototype = fpgmState;
                    prepState = this._prepState = new State("prep", font.tables.prep);
                    prepState.ppem = ppem;
                    var oCvt = font.tables.cvt;
                    if (oCvt) {
                      var cvt = prepState.cvt = new Array(oCvt.length);
                      var scale = ppem / font.unitsPerEm;
                      for (var c = 0; c < oCvt.length; c++) {
                        cvt[c] = oCvt[c] * scale;
                      }
                    } else {
                      prepState.cvt = [];
                    }
                    if (exports3.DEBUG) {
                      console.log("---EXEC PREP---");
                      prepState.step = -1;
                    }
                    try {
                      exec(prepState);
                    } catch (e2) {
                      if (this._errorState < 2) {
                        console.log("Hinting error in PREP:" + e2);
                      }
                      this._errorState = 2;
                    }
                  }
                  if (this._errorState > 1) {
                    return;
                  }
                  try {
                    return execGlyph(glyph, prepState);
                  } catch (e2) {
                    if (this._errorState < 1) {
                      console.log("Hinting error:" + e2);
                      console.log("Note: further hinting errors are silenced");
                    }
                    this._errorState = 1;
                    return void 0;
                  }
                };
                execGlyph = function(glyph, prepState) {
                  var xScale = prepState.ppem / prepState.font.unitsPerEm;
                  var yScale = xScale;
                  var components = glyph.components;
                  var contours;
                  var gZone;
                  var state;
                  State.prototype = prepState;
                  if (!components) {
                    state = new State("glyf", glyph.instructions);
                    if (exports3.DEBUG) {
                      console.log("---EXEC GLYPH---");
                      state.step = -1;
                    }
                    execComponent(glyph, state, xScale, yScale);
                    gZone = state.gZone;
                  } else {
                    var font = prepState.font;
                    gZone = [];
                    contours = [];
                    for (var i2 = 0; i2 < components.length; i2++) {
                      var c = components[i2];
                      var cg = font.glyphs.get(c.glyphIndex);
                      state = new State("glyf", cg.instructions);
                      if (exports3.DEBUG) {
                        console.log("---EXEC COMP " + i2 + "---");
                        state.step = -1;
                      }
                      execComponent(cg, state, xScale, yScale);
                      var dx = Math.round(c.dx * xScale);
                      var dy = Math.round(c.dy * yScale);
                      var gz = state.gZone;
                      var cc = state.contours;
                      for (var pi = 0; pi < gz.length; pi++) {
                        var p = gz[pi];
                        p.xTouched = p.yTouched = false;
                        p.xo = p.x = p.x + dx;
                        p.yo = p.y = p.y + dy;
                      }
                      var gLen = gZone.length;
                      gZone.push.apply(gZone, gz);
                      for (var j = 0; j < cc.length; j++) {
                        contours.push(cc[j] + gLen);
                      }
                    }
                    if (glyph.instructions && !state.inhibitGridFit) {
                      state = new State("glyf", glyph.instructions);
                      state.gZone = state.z0 = state.z1 = state.z2 = gZone;
                      state.contours = contours;
                      gZone.push(new HPoint(0, 0), new HPoint(Math.round(glyph.advanceWidth * xScale), 0));
                      if (exports3.DEBUG) {
                        console.log("---EXEC COMPOSITE---");
                        state.step = -1;
                      }
                      exec(state);
                      gZone.length -= 2;
                    }
                  }
                  return gZone;
                };
                execComponent = function(glyph, state, xScale, yScale) {
                  var points = glyph.points || [];
                  var pLen = points.length;
                  var gZone = state.gZone = state.z0 = state.z1 = state.z2 = [];
                  var contours = state.contours = [];
                  var cp;
                  for (var i2 = 0; i2 < pLen; i2++) {
                    cp = points[i2];
                    gZone[i2] = new HPoint(cp.x * xScale, cp.y * yScale, cp.lastPointOfContour, cp.onCurve);
                  }
                  var sp;
                  var np;
                  for (var i$1 = 0; i$1 < pLen; i$1++) {
                    cp = gZone[i$1];
                    if (!sp) {
                      sp = cp;
                      contours.push(i$1);
                    }
                    if (cp.lastPointOfContour) {
                      cp.nextPointOnContour = sp;
                      sp.prevPointOnContour = cp;
                      sp = void 0;
                    } else {
                      np = gZone[i$1 + 1];
                      cp.nextPointOnContour = np;
                      np.prevPointOnContour = cp;
                    }
                  }
                  if (state.inhibitGridFit) {
                    return;
                  }
                  if (exports3.DEBUG) {
                    console.log("PROCESSING GLYPH", state.stack);
                    for (var i$2 = 0; i$2 < pLen; i$2++) {
                      console.log(i$2, gZone[i$2].x, gZone[i$2].y);
                    }
                  }
                  gZone.push(new HPoint(0, 0), new HPoint(Math.round(glyph.advanceWidth * xScale), 0));
                  exec(state);
                  gZone.length -= 2;
                  if (exports3.DEBUG) {
                    console.log("FINISHED GLYPH", state.stack);
                    for (var i$3 = 0; i$3 < pLen; i$3++) {
                      console.log(i$3, gZone[i$3].x, gZone[i$3].y);
                    }
                  }
                };
                exec = function(state) {
                  var prog = state.prog;
                  if (!prog) {
                    return;
                  }
                  var pLen = prog.length;
                  var ins;
                  for (state.ip = 0; state.ip < pLen; state.ip++) {
                    if (exports3.DEBUG) {
                      state.step++;
                    }
                    ins = instructionTable[prog[state.ip]];
                    if (!ins) {
                      throw new Error("unknown instruction: 0x" + Number(prog[state.ip]).toString(16));
                    }
                    ins(state);
                  }
                };
                function initTZone(state) {
                  var tZone = state.tZone = new Array(state.gZone.length);
                  for (var i2 = 0; i2 < tZone.length; i2++) {
                    tZone[i2] = new HPoint(0, 0);
                  }
                }
                function skip(state, handleElse) {
                  var prog = state.prog;
                  var ip = state.ip;
                  var nesting = 1;
                  var ins;
                  do {
                    ins = prog[++ip];
                    if (ins === 88) {
                      nesting++;
                    } else if (ins === 89) {
                      nesting--;
                    } else if (ins === 64) {
                      ip += prog[ip + 1] + 1;
                    } else if (ins === 65) {
                      ip += 2 * prog[ip + 1] + 1;
                    } else if (ins >= 176 && ins <= 183) {
                      ip += ins - 176 + 1;
                    } else if (ins >= 184 && ins <= 191) {
                      ip += (ins - 184 + 1) * 2;
                    } else if (handleElse && nesting === 1 && ins === 27) {
                      break;
                    }
                  } while (nesting > 0);
                  state.ip = ip;
                }
                function SVTCA(v, state) {
                  if (exports3.DEBUG) {
                    console.log(state.step, "SVTCA[" + v.axis + "]");
                  }
                  state.fv = state.pv = state.dpv = v;
                }
                function SPVTCA(v, state) {
                  if (exports3.DEBUG) {
                    console.log(state.step, "SPVTCA[" + v.axis + "]");
                  }
                  state.pv = state.dpv = v;
                }
                function SFVTCA(v, state) {
                  if (exports3.DEBUG) {
                    console.log(state.step, "SFVTCA[" + v.axis + "]");
                  }
                  state.fv = v;
                }
                function SPVTL(a, state) {
                  var stack = state.stack;
                  var p2i = stack.pop();
                  var p1i = stack.pop();
                  var p2 = state.z2[p2i];
                  var p1 = state.z1[p1i];
                  if (exports3.DEBUG) {
                    console.log("SPVTL[" + a + "]", p2i, p1i);
                  }
                  var dx;
                  var dy;
                  if (!a) {
                    dx = p1.x - p2.x;
                    dy = p1.y - p2.y;
                  } else {
                    dx = p2.y - p1.y;
                    dy = p1.x - p2.x;
                  }
                  state.pv = state.dpv = getUnitVector(dx, dy);
                }
                function SFVTL(a, state) {
                  var stack = state.stack;
                  var p2i = stack.pop();
                  var p1i = stack.pop();
                  var p2 = state.z2[p2i];
                  var p1 = state.z1[p1i];
                  if (exports3.DEBUG) {
                    console.log("SFVTL[" + a + "]", p2i, p1i);
                  }
                  var dx;
                  var dy;
                  if (!a) {
                    dx = p1.x - p2.x;
                    dy = p1.y - p2.y;
                  } else {
                    dx = p2.y - p1.y;
                    dy = p1.x - p2.x;
                  }
                  state.fv = getUnitVector(dx, dy);
                }
                function SPVFS(state) {
                  var stack = state.stack;
                  var y = stack.pop();
                  var x = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "SPVFS[]", y, x);
                  }
                  state.pv = state.dpv = getUnitVector(x, y);
                }
                function SFVFS(state) {
                  var stack = state.stack;
                  var y = stack.pop();
                  var x = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "SPVFS[]", y, x);
                  }
                  state.fv = getUnitVector(x, y);
                }
                function GPV(state) {
                  var stack = state.stack;
                  var pv = state.pv;
                  if (exports3.DEBUG) {
                    console.log(state.step, "GPV[]");
                  }
                  stack.push(pv.x * 16384);
                  stack.push(pv.y * 16384);
                }
                function GFV(state) {
                  var stack = state.stack;
                  var fv = state.fv;
                  if (exports3.DEBUG) {
                    console.log(state.step, "GFV[]");
                  }
                  stack.push(fv.x * 16384);
                  stack.push(fv.y * 16384);
                }
                function SFVTPV(state) {
                  state.fv = state.pv;
                  if (exports3.DEBUG) {
                    console.log(state.step, "SFVTPV[]");
                  }
                }
                function ISECT(state) {
                  var stack = state.stack;
                  var pa0i = stack.pop();
                  var pa1i = stack.pop();
                  var pb0i = stack.pop();
                  var pb1i = stack.pop();
                  var pi = stack.pop();
                  var z0 = state.z0;
                  var z1 = state.z1;
                  var pa0 = z0[pa0i];
                  var pa1 = z0[pa1i];
                  var pb0 = z1[pb0i];
                  var pb1 = z1[pb1i];
                  var p = state.z2[pi];
                  if (exports3.DEBUG) {
                    console.log("ISECT[], ", pa0i, pa1i, pb0i, pb1i, pi);
                  }
                  var x1 = pa0.x;
                  var y1 = pa0.y;
                  var x2 = pa1.x;
                  var y2 = pa1.y;
                  var x3 = pb0.x;
                  var y3 = pb0.y;
                  var x4 = pb1.x;
                  var y4 = pb1.y;
                  var div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
                  var f1 = x1 * y2 - y1 * x2;
                  var f2 = x3 * y4 - y3 * x4;
                  p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;
                  p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;
                }
                function SRP0(state) {
                  state.rp0 = state.stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "SRP0[]", state.rp0);
                  }
                }
                function SRP1(state) {
                  state.rp1 = state.stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "SRP1[]", state.rp1);
                  }
                }
                function SRP2(state) {
                  state.rp2 = state.stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "SRP2[]", state.rp2);
                  }
                }
                function SZP0(state) {
                  var n = state.stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "SZP0[]", n);
                  }
                  state.zp0 = n;
                  switch (n) {
                    case 0:
                      if (!state.tZone) {
                        initTZone(state);
                      }
                      state.z0 = state.tZone;
                      break;
                    case 1:
                      state.z0 = state.gZone;
                      break;
                    default:
                      throw new Error("Invalid zone pointer");
                  }
                }
                function SZP1(state) {
                  var n = state.stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "SZP1[]", n);
                  }
                  state.zp1 = n;
                  switch (n) {
                    case 0:
                      if (!state.tZone) {
                        initTZone(state);
                      }
                      state.z1 = state.tZone;
                      break;
                    case 1:
                      state.z1 = state.gZone;
                      break;
                    default:
                      throw new Error("Invalid zone pointer");
                  }
                }
                function SZP2(state) {
                  var n = state.stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "SZP2[]", n);
                  }
                  state.zp2 = n;
                  switch (n) {
                    case 0:
                      if (!state.tZone) {
                        initTZone(state);
                      }
                      state.z2 = state.tZone;
                      break;
                    case 1:
                      state.z2 = state.gZone;
                      break;
                    default:
                      throw new Error("Invalid zone pointer");
                  }
                }
                function SZPS(state) {
                  var n = state.stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "SZPS[]", n);
                  }
                  state.zp0 = state.zp1 = state.zp2 = n;
                  switch (n) {
                    case 0:
                      if (!state.tZone) {
                        initTZone(state);
                      }
                      state.z0 = state.z1 = state.z2 = state.tZone;
                      break;
                    case 1:
                      state.z0 = state.z1 = state.z2 = state.gZone;
                      break;
                    default:
                      throw new Error("Invalid zone pointer");
                  }
                }
                function SLOOP(state) {
                  state.loop = state.stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "SLOOP[]", state.loop);
                  }
                }
                function RTG(state) {
                  if (exports3.DEBUG) {
                    console.log(state.step, "RTG[]");
                  }
                  state.round = roundToGrid;
                }
                function RTHG(state) {
                  if (exports3.DEBUG) {
                    console.log(state.step, "RTHG[]");
                  }
                  state.round = roundToHalfGrid;
                }
                function SMD(state) {
                  var d = state.stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "SMD[]", d);
                  }
                  state.minDis = d / 64;
                }
                function ELSE(state) {
                  if (exports3.DEBUG) {
                    console.log(state.step, "ELSE[]");
                  }
                  skip(state, false);
                }
                function JMPR(state) {
                  var o = state.stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "JMPR[]", o);
                  }
                  state.ip += o - 1;
                }
                function SCVTCI(state) {
                  var n = state.stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "SCVTCI[]", n);
                  }
                  state.cvCutIn = n / 64;
                }
                function DUP(state) {
                  var stack = state.stack;
                  if (exports3.DEBUG) {
                    console.log(state.step, "DUP[]");
                  }
                  stack.push(stack[stack.length - 1]);
                }
                function POP(state) {
                  if (exports3.DEBUG) {
                    console.log(state.step, "POP[]");
                  }
                  state.stack.pop();
                }
                function CLEAR(state) {
                  if (exports3.DEBUG) {
                    console.log(state.step, "CLEAR[]");
                  }
                  state.stack.length = 0;
                }
                function SWAP(state) {
                  var stack = state.stack;
                  var a = stack.pop();
                  var b = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "SWAP[]");
                  }
                  stack.push(a);
                  stack.push(b);
                }
                function DEPTH(state) {
                  var stack = state.stack;
                  if (exports3.DEBUG) {
                    console.log(state.step, "DEPTH[]");
                  }
                  stack.push(stack.length);
                }
                function LOOPCALL(state) {
                  var stack = state.stack;
                  var fn = stack.pop();
                  var c = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "LOOPCALL[]", fn, c);
                  }
                  var cip = state.ip;
                  var cprog = state.prog;
                  state.prog = state.funcs[fn];
                  for (var i2 = 0; i2 < c; i2++) {
                    exec(state);
                    if (exports3.DEBUG) {
                      console.log(++state.step, i2 + 1 < c ? "next loopcall" : "done loopcall", i2);
                    }
                  }
                  state.ip = cip;
                  state.prog = cprog;
                }
                function CALL(state) {
                  var fn = state.stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "CALL[]", fn);
                  }
                  var cip = state.ip;
                  var cprog = state.prog;
                  state.prog = state.funcs[fn];
                  exec(state);
                  state.ip = cip;
                  state.prog = cprog;
                  if (exports3.DEBUG) {
                    console.log(++state.step, "returning from", fn);
                  }
                }
                function CINDEX(state) {
                  var stack = state.stack;
                  var k2 = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "CINDEX[]", k2);
                  }
                  stack.push(stack[stack.length - k2]);
                }
                function MINDEX(state) {
                  var stack = state.stack;
                  var k2 = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "MINDEX[]", k2);
                  }
                  stack.push(stack.splice(stack.length - k2, 1)[0]);
                }
                function FDEF(state) {
                  if (state.env !== "fpgm") {
                    throw new Error("FDEF not allowed here");
                  }
                  var stack = state.stack;
                  var prog = state.prog;
                  var ip = state.ip;
                  var fn = stack.pop();
                  var ipBegin = ip;
                  if (exports3.DEBUG) {
                    console.log(state.step, "FDEF[]", fn);
                  }
                  while (prog[++ip] !== 45) {
                  }
                  state.ip = ip;
                  state.funcs[fn] = prog.slice(ipBegin + 1, ip);
                }
                function MDAP(round, state) {
                  var pi = state.stack.pop();
                  var p = state.z0[pi];
                  var fv = state.fv;
                  var pv = state.pv;
                  if (exports3.DEBUG) {
                    console.log(state.step, "MDAP[" + round + "]", pi);
                  }
                  var d = pv.distance(p, HPZero);
                  if (round) {
                    d = state.round(d);
                  }
                  fv.setRelative(p, HPZero, d, pv);
                  fv.touch(p);
                  state.rp0 = state.rp1 = pi;
                }
                function IUP(v, state) {
                  var z2 = state.z2;
                  var pLen = z2.length - 2;
                  var cp;
                  var pp;
                  var np;
                  if (exports3.DEBUG) {
                    console.log(state.step, "IUP[" + v.axis + "]");
                  }
                  for (var i2 = 0; i2 < pLen; i2++) {
                    cp = z2[i2];
                    if (v.touched(cp)) {
                      continue;
                    }
                    pp = cp.prevTouched(v);
                    if (pp === cp) {
                      continue;
                    }
                    np = cp.nextTouched(v);
                    if (pp === np) {
                      v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);
                    }
                    v.interpolate(cp, pp, np, v);
                  }
                }
                function SHP(a, state) {
                  var stack = state.stack;
                  var rpi = a ? state.rp1 : state.rp2;
                  var rp = (a ? state.z0 : state.z1)[rpi];
                  var fv = state.fv;
                  var pv = state.pv;
                  var loop = state.loop;
                  var z2 = state.z2;
                  while (loop--) {
                    var pi = stack.pop();
                    var p = z2[pi];
                    var d = pv.distance(rp, rp, false, true);
                    fv.setRelative(p, p, d, pv);
                    fv.touch(p);
                    if (exports3.DEBUG) {
                      console.log(state.step, (state.loop > 1 ? "loop " + (state.loop - loop) + ": " : "") + "SHP[" + (a ? "rp1" : "rp2") + "]", pi);
                    }
                  }
                  state.loop = 1;
                }
                function SHC(a, state) {
                  var stack = state.stack;
                  var rpi = a ? state.rp1 : state.rp2;
                  var rp = (a ? state.z0 : state.z1)[rpi];
                  var fv = state.fv;
                  var pv = state.pv;
                  var ci = stack.pop();
                  var sp = state.z2[state.contours[ci]];
                  var p = sp;
                  if (exports3.DEBUG) {
                    console.log(state.step, "SHC[" + a + "]", ci);
                  }
                  var d = pv.distance(rp, rp, false, true);
                  do {
                    if (p !== rp) {
                      fv.setRelative(p, p, d, pv);
                    }
                    p = p.nextPointOnContour;
                  } while (p !== sp);
                }
                function SHZ(a, state) {
                  var stack = state.stack;
                  var rpi = a ? state.rp1 : state.rp2;
                  var rp = (a ? state.z0 : state.z1)[rpi];
                  var fv = state.fv;
                  var pv = state.pv;
                  var e2 = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "SHZ[" + a + "]", e2);
                  }
                  var z;
                  switch (e2) {
                    case 0:
                      z = state.tZone;
                      break;
                    case 1:
                      z = state.gZone;
                      break;
                    default:
                      throw new Error("Invalid zone");
                  }
                  var p;
                  var d = pv.distance(rp, rp, false, true);
                  var pLen = z.length - 2;
                  for (var i2 = 0; i2 < pLen; i2++) {
                    p = z[i2];
                    fv.setRelative(p, p, d, pv);
                  }
                }
                function SHPIX(state) {
                  var stack = state.stack;
                  var loop = state.loop;
                  var fv = state.fv;
                  var d = stack.pop() / 64;
                  var z2 = state.z2;
                  while (loop--) {
                    var pi = stack.pop();
                    var p = z2[pi];
                    if (exports3.DEBUG) {
                      console.log(state.step, (state.loop > 1 ? "loop " + (state.loop - loop) + ": " : "") + "SHPIX[]", pi, d);
                    }
                    fv.setRelative(p, p, d);
                    fv.touch(p);
                  }
                  state.loop = 1;
                }
                function IP(state) {
                  var stack = state.stack;
                  var rp1i = state.rp1;
                  var rp2i = state.rp2;
                  var loop = state.loop;
                  var rp1 = state.z0[rp1i];
                  var rp2 = state.z1[rp2i];
                  var fv = state.fv;
                  var pv = state.dpv;
                  var z2 = state.z2;
                  while (loop--) {
                    var pi = stack.pop();
                    var p = z2[pi];
                    if (exports3.DEBUG) {
                      console.log(state.step, (state.loop > 1 ? "loop " + (state.loop - loop) + ": " : "") + "IP[]", pi, rp1i, "<->", rp2i);
                    }
                    fv.interpolate(p, rp1, rp2, pv);
                    fv.touch(p);
                  }
                  state.loop = 1;
                }
                function MSIRP(a, state) {
                  var stack = state.stack;
                  var d = stack.pop() / 64;
                  var pi = stack.pop();
                  var p = state.z1[pi];
                  var rp0 = state.z0[state.rp0];
                  var fv = state.fv;
                  var pv = state.pv;
                  fv.setRelative(p, rp0, d, pv);
                  fv.touch(p);
                  if (exports3.DEBUG) {
                    console.log(state.step, "MSIRP[" + a + "]", d, pi);
                  }
                  state.rp1 = state.rp0;
                  state.rp2 = pi;
                  if (a) {
                    state.rp0 = pi;
                  }
                }
                function ALIGNRP(state) {
                  var stack = state.stack;
                  var rp0i = state.rp0;
                  var rp0 = state.z0[rp0i];
                  var loop = state.loop;
                  var fv = state.fv;
                  var pv = state.pv;
                  var z1 = state.z1;
                  while (loop--) {
                    var pi = stack.pop();
                    var p = z1[pi];
                    if (exports3.DEBUG) {
                      console.log(state.step, (state.loop > 1 ? "loop " + (state.loop - loop) + ": " : "") + "ALIGNRP[]", pi);
                    }
                    fv.setRelative(p, rp0, 0, pv);
                    fv.touch(p);
                  }
                  state.loop = 1;
                }
                function RTDG(state) {
                  if (exports3.DEBUG) {
                    console.log(state.step, "RTDG[]");
                  }
                  state.round = roundToDoubleGrid;
                }
                function MIAP(round, state) {
                  var stack = state.stack;
                  var n = stack.pop();
                  var pi = stack.pop();
                  var p = state.z0[pi];
                  var fv = state.fv;
                  var pv = state.pv;
                  var cv = state.cvt[n];
                  if (exports3.DEBUG) {
                    console.log(state.step, "MIAP[" + round + "]", n, "(", cv, ")", pi);
                  }
                  var d = pv.distance(p, HPZero);
                  if (round) {
                    if (Math.abs(d - cv) < state.cvCutIn) {
                      d = cv;
                    }
                    d = state.round(d);
                  }
                  fv.setRelative(p, HPZero, d, pv);
                  if (state.zp0 === 0) {
                    p.xo = p.x;
                    p.yo = p.y;
                  }
                  fv.touch(p);
                  state.rp0 = state.rp1 = pi;
                }
                function NPUSHB(state) {
                  var prog = state.prog;
                  var ip = state.ip;
                  var stack = state.stack;
                  var n = prog[++ip];
                  if (exports3.DEBUG) {
                    console.log(state.step, "NPUSHB[]", n);
                  }
                  for (var i2 = 0; i2 < n; i2++) {
                    stack.push(prog[++ip]);
                  }
                  state.ip = ip;
                }
                function NPUSHW(state) {
                  var ip = state.ip;
                  var prog = state.prog;
                  var stack = state.stack;
                  var n = prog[++ip];
                  if (exports3.DEBUG) {
                    console.log(state.step, "NPUSHW[]", n);
                  }
                  for (var i2 = 0; i2 < n; i2++) {
                    var w = prog[++ip] << 8 | prog[++ip];
                    if (w & 32768) {
                      w = -((w ^ 65535) + 1);
                    }
                    stack.push(w);
                  }
                  state.ip = ip;
                }
                function WS(state) {
                  var stack = state.stack;
                  var store = state.store;
                  if (!store) {
                    store = state.store = [];
                  }
                  var v = stack.pop();
                  var l = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "WS", v, l);
                  }
                  store[l] = v;
                }
                function RS(state) {
                  var stack = state.stack;
                  var store = state.store;
                  var l = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "RS", l);
                  }
                  var v = store && store[l] || 0;
                  stack.push(v);
                }
                function WCVTP(state) {
                  var stack = state.stack;
                  var v = stack.pop();
                  var l = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "WCVTP", v, l);
                  }
                  state.cvt[l] = v / 64;
                }
                function RCVT(state) {
                  var stack = state.stack;
                  var cvte = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "RCVT", cvte);
                  }
                  stack.push(state.cvt[cvte] * 64);
                }
                function GC(a, state) {
                  var stack = state.stack;
                  var pi = stack.pop();
                  var p = state.z2[pi];
                  if (exports3.DEBUG) {
                    console.log(state.step, "GC[" + a + "]", pi);
                  }
                  stack.push(state.dpv.distance(p, HPZero, a, false) * 64);
                }
                function MD(a, state) {
                  var stack = state.stack;
                  var pi2 = stack.pop();
                  var pi1 = stack.pop();
                  var p2 = state.z1[pi2];
                  var p1 = state.z0[pi1];
                  var d = state.dpv.distance(p1, p2, a, a);
                  if (exports3.DEBUG) {
                    console.log(state.step, "MD[" + a + "]", pi2, pi1, "->", d);
                  }
                  state.stack.push(Math.round(d * 64));
                }
                function MPPEM(state) {
                  if (exports3.DEBUG) {
                    console.log(state.step, "MPPEM[]");
                  }
                  state.stack.push(state.ppem);
                }
                function FLIPON(state) {
                  if (exports3.DEBUG) {
                    console.log(state.step, "FLIPON[]");
                  }
                  state.autoFlip = true;
                }
                function LT(state) {
                  var stack = state.stack;
                  var e2 = stack.pop();
                  var e1 = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "LT[]", e2, e1);
                  }
                  stack.push(e1 < e2 ? 1 : 0);
                }
                function LTEQ(state) {
                  var stack = state.stack;
                  var e2 = stack.pop();
                  var e1 = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "LTEQ[]", e2, e1);
                  }
                  stack.push(e1 <= e2 ? 1 : 0);
                }
                function GT(state) {
                  var stack = state.stack;
                  var e2 = stack.pop();
                  var e1 = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "GT[]", e2, e1);
                  }
                  stack.push(e1 > e2 ? 1 : 0);
                }
                function GTEQ(state) {
                  var stack = state.stack;
                  var e2 = stack.pop();
                  var e1 = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "GTEQ[]", e2, e1);
                  }
                  stack.push(e1 >= e2 ? 1 : 0);
                }
                function EQ(state) {
                  var stack = state.stack;
                  var e2 = stack.pop();
                  var e1 = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "EQ[]", e2, e1);
                  }
                  stack.push(e2 === e1 ? 1 : 0);
                }
                function NEQ(state) {
                  var stack = state.stack;
                  var e2 = stack.pop();
                  var e1 = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "NEQ[]", e2, e1);
                  }
                  stack.push(e2 !== e1 ? 1 : 0);
                }
                function ODD(state) {
                  var stack = state.stack;
                  var n = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "ODD[]", n);
                  }
                  stack.push(Math.trunc(n) % 2 ? 1 : 0);
                }
                function EVEN(state) {
                  var stack = state.stack;
                  var n = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "EVEN[]", n);
                  }
                  stack.push(Math.trunc(n) % 2 ? 0 : 1);
                }
                function IF(state) {
                  var test = state.stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "IF[]", test);
                  }
                  if (!test) {
                    skip(state, true);
                    if (exports3.DEBUG) {
                      console.log(state.step, "EIF[]");
                    }
                  }
                }
                function EIF(state) {
                  if (exports3.DEBUG) {
                    console.log(state.step, "EIF[]");
                  }
                }
                function AND(state) {
                  var stack = state.stack;
                  var e2 = stack.pop();
                  var e1 = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "AND[]", e2, e1);
                  }
                  stack.push(e2 && e1 ? 1 : 0);
                }
                function OR(state) {
                  var stack = state.stack;
                  var e2 = stack.pop();
                  var e1 = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "OR[]", e2, e1);
                  }
                  stack.push(e2 || e1 ? 1 : 0);
                }
                function NOT(state) {
                  var stack = state.stack;
                  var e2 = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "NOT[]", e2);
                  }
                  stack.push(e2 ? 0 : 1);
                }
                function DELTAP123(b, state) {
                  var stack = state.stack;
                  var n = stack.pop();
                  var fv = state.fv;
                  var pv = state.pv;
                  var ppem = state.ppem;
                  var base = state.deltaBase + (b - 1) * 16;
                  var ds = state.deltaShift;
                  var z0 = state.z0;
                  if (exports3.DEBUG) {
                    console.log(state.step, "DELTAP[" + b + "]", n, stack);
                  }
                  for (var i2 = 0; i2 < n; i2++) {
                    var pi = stack.pop();
                    var arg = stack.pop();
                    var appem = base + ((arg & 240) >> 4);
                    if (appem !== ppem) {
                      continue;
                    }
                    var mag = (arg & 15) - 8;
                    if (mag >= 0) {
                      mag++;
                    }
                    if (exports3.DEBUG) {
                      console.log(state.step, "DELTAPFIX", pi, "by", mag * ds);
                    }
                    var p = z0[pi];
                    fv.setRelative(p, p, mag * ds, pv);
                  }
                }
                function SDB(state) {
                  var stack = state.stack;
                  var n = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "SDB[]", n);
                  }
                  state.deltaBase = n;
                }
                function SDS(state) {
                  var stack = state.stack;
                  var n = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "SDS[]", n);
                  }
                  state.deltaShift = Math.pow(0.5, n);
                }
                function ADD(state) {
                  var stack = state.stack;
                  var n2 = stack.pop();
                  var n1 = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "ADD[]", n2, n1);
                  }
                  stack.push(n1 + n2);
                }
                function SUB(state) {
                  var stack = state.stack;
                  var n2 = stack.pop();
                  var n1 = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "SUB[]", n2, n1);
                  }
                  stack.push(n1 - n2);
                }
                function DIV(state) {
                  var stack = state.stack;
                  var n2 = stack.pop();
                  var n1 = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "DIV[]", n2, n1);
                  }
                  stack.push(n1 * 64 / n2);
                }
                function MUL(state) {
                  var stack = state.stack;
                  var n2 = stack.pop();
                  var n1 = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "MUL[]", n2, n1);
                  }
                  stack.push(n1 * n2 / 64);
                }
                function ABS(state) {
                  var stack = state.stack;
                  var n = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "ABS[]", n);
                  }
                  stack.push(Math.abs(n));
                }
                function NEG(state) {
                  var stack = state.stack;
                  var n = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "NEG[]", n);
                  }
                  stack.push(-n);
                }
                function FLOOR(state) {
                  var stack = state.stack;
                  var n = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "FLOOR[]", n);
                  }
                  stack.push(Math.floor(n / 64) * 64);
                }
                function CEILING(state) {
                  var stack = state.stack;
                  var n = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "CEILING[]", n);
                  }
                  stack.push(Math.ceil(n / 64) * 64);
                }
                function ROUND(dt, state) {
                  var stack = state.stack;
                  var n = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "ROUND[]");
                  }
                  stack.push(state.round(n / 64) * 64);
                }
                function WCVTF(state) {
                  var stack = state.stack;
                  var v = stack.pop();
                  var l = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "WCVTF[]", v, l);
                  }
                  state.cvt[l] = v * state.ppem / state.font.unitsPerEm;
                }
                function DELTAC123(b, state) {
                  var stack = state.stack;
                  var n = stack.pop();
                  var ppem = state.ppem;
                  var base = state.deltaBase + (b - 1) * 16;
                  var ds = state.deltaShift;
                  if (exports3.DEBUG) {
                    console.log(state.step, "DELTAC[" + b + "]", n, stack);
                  }
                  for (var i2 = 0; i2 < n; i2++) {
                    var c = stack.pop();
                    var arg = stack.pop();
                    var appem = base + ((arg & 240) >> 4);
                    if (appem !== ppem) {
                      continue;
                    }
                    var mag = (arg & 15) - 8;
                    if (mag >= 0) {
                      mag++;
                    }
                    var delta = mag * ds;
                    if (exports3.DEBUG) {
                      console.log(state.step, "DELTACFIX", c, "by", delta);
                    }
                    state.cvt[c] += delta;
                  }
                }
                function SROUND(state) {
                  var n = state.stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "SROUND[]", n);
                  }
                  state.round = roundSuper;
                  var period;
                  switch (n & 192) {
                    case 0:
                      period = 0.5;
                      break;
                    case 64:
                      period = 1;
                      break;
                    case 128:
                      period = 2;
                      break;
                    default:
                      throw new Error("invalid SROUND value");
                  }
                  state.srPeriod = period;
                  switch (n & 48) {
                    case 0:
                      state.srPhase = 0;
                      break;
                    case 16:
                      state.srPhase = 0.25 * period;
                      break;
                    case 32:
                      state.srPhase = 0.5 * period;
                      break;
                    case 48:
                      state.srPhase = 0.75 * period;
                      break;
                    default:
                      throw new Error("invalid SROUND value");
                  }
                  n &= 15;
                  if (n === 0) {
                    state.srThreshold = 0;
                  } else {
                    state.srThreshold = (n / 8 - 0.5) * period;
                  }
                }
                function S45ROUND(state) {
                  var n = state.stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "S45ROUND[]", n);
                  }
                  state.round = roundSuper;
                  var period;
                  switch (n & 192) {
                    case 0:
                      period = Math.sqrt(2) / 2;
                      break;
                    case 64:
                      period = Math.sqrt(2);
                      break;
                    case 128:
                      period = 2 * Math.sqrt(2);
                      break;
                    default:
                      throw new Error("invalid S45ROUND value");
                  }
                  state.srPeriod = period;
                  switch (n & 48) {
                    case 0:
                      state.srPhase = 0;
                      break;
                    case 16:
                      state.srPhase = 0.25 * period;
                      break;
                    case 32:
                      state.srPhase = 0.5 * period;
                      break;
                    case 48:
                      state.srPhase = 0.75 * period;
                      break;
                    default:
                      throw new Error("invalid S45ROUND value");
                  }
                  n &= 15;
                  if (n === 0) {
                    state.srThreshold = 0;
                  } else {
                    state.srThreshold = (n / 8 - 0.5) * period;
                  }
                }
                function ROFF(state) {
                  if (exports3.DEBUG) {
                    console.log(state.step, "ROFF[]");
                  }
                  state.round = roundOff;
                }
                function RUTG(state) {
                  if (exports3.DEBUG) {
                    console.log(state.step, "RUTG[]");
                  }
                  state.round = roundUpToGrid;
                }
                function RDTG(state) {
                  if (exports3.DEBUG) {
                    console.log(state.step, "RDTG[]");
                  }
                  state.round = roundDownToGrid;
                }
                function SCANCTRL(state) {
                  var n = state.stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "SCANCTRL[]", n);
                  }
                }
                function SDPVTL(a, state) {
                  var stack = state.stack;
                  var p2i = stack.pop();
                  var p1i = stack.pop();
                  var p2 = state.z2[p2i];
                  var p1 = state.z1[p1i];
                  if (exports3.DEBUG) {
                    console.log(state.step, "SDPVTL[" + a + "]", p2i, p1i);
                  }
                  var dx;
                  var dy;
                  if (!a) {
                    dx = p1.x - p2.x;
                    dy = p1.y - p2.y;
                  } else {
                    dx = p2.y - p1.y;
                    dy = p1.x - p2.x;
                  }
                  state.dpv = getUnitVector(dx, dy);
                }
                function GETINFO(state) {
                  var stack = state.stack;
                  var sel = stack.pop();
                  var r = 0;
                  if (exports3.DEBUG) {
                    console.log(state.step, "GETINFO[]", sel);
                  }
                  if (sel & 1) {
                    r = 35;
                  }
                  if (sel & 32) {
                    r |= 4096;
                  }
                  stack.push(r);
                }
                function ROLL(state) {
                  var stack = state.stack;
                  var a = stack.pop();
                  var b = stack.pop();
                  var c = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "ROLL[]");
                  }
                  stack.push(b);
                  stack.push(a);
                  stack.push(c);
                }
                function MAX(state) {
                  var stack = state.stack;
                  var e2 = stack.pop();
                  var e1 = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "MAX[]", e2, e1);
                  }
                  stack.push(Math.max(e1, e2));
                }
                function MIN(state) {
                  var stack = state.stack;
                  var e2 = stack.pop();
                  var e1 = stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "MIN[]", e2, e1);
                  }
                  stack.push(Math.min(e1, e2));
                }
                function SCANTYPE(state) {
                  var n = state.stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "SCANTYPE[]", n);
                  }
                }
                function INSTCTRL(state) {
                  var s = state.stack.pop();
                  var v = state.stack.pop();
                  if (exports3.DEBUG) {
                    console.log(state.step, "INSTCTRL[]", s, v);
                  }
                  switch (s) {
                    case 1:
                      state.inhibitGridFit = !!v;
                      return;
                    case 2:
                      state.ignoreCvt = !!v;
                      return;
                    default:
                      throw new Error("invalid INSTCTRL[] selector");
                  }
                }
                function PUSHB(n, state) {
                  var stack = state.stack;
                  var prog = state.prog;
                  var ip = state.ip;
                  if (exports3.DEBUG) {
                    console.log(state.step, "PUSHB[" + n + "]");
                  }
                  for (var i2 = 0; i2 < n; i2++) {
                    stack.push(prog[++ip]);
                  }
                  state.ip = ip;
                }
                function PUSHW(n, state) {
                  var ip = state.ip;
                  var prog = state.prog;
                  var stack = state.stack;
                  if (exports3.DEBUG) {
                    console.log(state.ip, "PUSHW[" + n + "]");
                  }
                  for (var i2 = 0; i2 < n; i2++) {
                    var w = prog[++ip] << 8 | prog[++ip];
                    if (w & 32768) {
                      w = -((w ^ 65535) + 1);
                    }
                    stack.push(w);
                  }
                  state.ip = ip;
                }
                function MDRP_MIRP(indirect, setRp0, keepD, ro, dt, state) {
                  var stack = state.stack;
                  var cvte = indirect && stack.pop();
                  var pi = stack.pop();
                  var rp0i = state.rp0;
                  var rp = state.z0[rp0i];
                  var p = state.z1[pi];
                  var md = state.minDis;
                  var fv = state.fv;
                  var pv = state.dpv;
                  var od;
                  var d;
                  var sign;
                  var cv;
                  d = od = pv.distance(p, rp, true, true);
                  sign = d >= 0 ? 1 : -1;
                  d = Math.abs(d);
                  if (indirect) {
                    cv = state.cvt[cvte];
                    if (ro && Math.abs(d - cv) < state.cvCutIn) {
                      d = cv;
                    }
                  }
                  if (keepD && d < md) {
                    d = md;
                  }
                  if (ro) {
                    d = state.round(d);
                  }
                  fv.setRelative(p, rp, sign * d, pv);
                  fv.touch(p);
                  if (exports3.DEBUG) {
                    console.log(state.step, (indirect ? "MIRP[" : "MDRP[") + (setRp0 ? "M" : "m") + (keepD ? ">" : "_") + (ro ? "R" : "_") + (dt === 0 ? "Gr" : dt === 1 ? "Bl" : dt === 2 ? "Wh" : "") + "]", indirect ? cvte + "(" + state.cvt[cvte] + "," + cv + ")" : "", pi, "(d =", od, "->", sign * d, ")");
                  }
                  state.rp1 = state.rp0;
                  state.rp2 = pi;
                  if (setRp0) {
                    state.rp0 = pi;
                  }
                }
                instructionTable = [
                  /* 0x00 */
                  SVTCA.bind(void 0, yUnitVector),
                  /* 0x01 */
                  SVTCA.bind(void 0, xUnitVector),
                  /* 0x02 */
                  SPVTCA.bind(void 0, yUnitVector),
                  /* 0x03 */
                  SPVTCA.bind(void 0, xUnitVector),
                  /* 0x04 */
                  SFVTCA.bind(void 0, yUnitVector),
                  /* 0x05 */
                  SFVTCA.bind(void 0, xUnitVector),
                  /* 0x06 */
                  SPVTL.bind(void 0, 0),
                  /* 0x07 */
                  SPVTL.bind(void 0, 1),
                  /* 0x08 */
                  SFVTL.bind(void 0, 0),
                  /* 0x09 */
                  SFVTL.bind(void 0, 1),
                  /* 0x0A */
                  SPVFS,
                  /* 0x0B */
                  SFVFS,
                  /* 0x0C */
                  GPV,
                  /* 0x0D */
                  GFV,
                  /* 0x0E */
                  SFVTPV,
                  /* 0x0F */
                  ISECT,
                  /* 0x10 */
                  SRP0,
                  /* 0x11 */
                  SRP1,
                  /* 0x12 */
                  SRP2,
                  /* 0x13 */
                  SZP0,
                  /* 0x14 */
                  SZP1,
                  /* 0x15 */
                  SZP2,
                  /* 0x16 */
                  SZPS,
                  /* 0x17 */
                  SLOOP,
                  /* 0x18 */
                  RTG,
                  /* 0x19 */
                  RTHG,
                  /* 0x1A */
                  SMD,
                  /* 0x1B */
                  ELSE,
                  /* 0x1C */
                  JMPR,
                  /* 0x1D */
                  SCVTCI,
                  /* 0x1E */
                  void 0,
                  // TODO SSWCI
                  /* 0x1F */
                  void 0,
                  // TODO SSW
                  /* 0x20 */
                  DUP,
                  /* 0x21 */
                  POP,
                  /* 0x22 */
                  CLEAR,
                  /* 0x23 */
                  SWAP,
                  /* 0x24 */
                  DEPTH,
                  /* 0x25 */
                  CINDEX,
                  /* 0x26 */
                  MINDEX,
                  /* 0x27 */
                  void 0,
                  // TODO ALIGNPTS
                  /* 0x28 */
                  void 0,
                  /* 0x29 */
                  void 0,
                  // TODO UTP
                  /* 0x2A */
                  LOOPCALL,
                  /* 0x2B */
                  CALL,
                  /* 0x2C */
                  FDEF,
                  /* 0x2D */
                  void 0,
                  // ENDF (eaten by FDEF)
                  /* 0x2E */
                  MDAP.bind(void 0, 0),
                  /* 0x2F */
                  MDAP.bind(void 0, 1),
                  /* 0x30 */
                  IUP.bind(void 0, yUnitVector),
                  /* 0x31 */
                  IUP.bind(void 0, xUnitVector),
                  /* 0x32 */
                  SHP.bind(void 0, 0),
                  /* 0x33 */
                  SHP.bind(void 0, 1),
                  /* 0x34 */
                  SHC.bind(void 0, 0),
                  /* 0x35 */
                  SHC.bind(void 0, 1),
                  /* 0x36 */
                  SHZ.bind(void 0, 0),
                  /* 0x37 */
                  SHZ.bind(void 0, 1),
                  /* 0x38 */
                  SHPIX,
                  /* 0x39 */
                  IP,
                  /* 0x3A */
                  MSIRP.bind(void 0, 0),
                  /* 0x3B */
                  MSIRP.bind(void 0, 1),
                  /* 0x3C */
                  ALIGNRP,
                  /* 0x3D */
                  RTDG,
                  /* 0x3E */
                  MIAP.bind(void 0, 0),
                  /* 0x3F */
                  MIAP.bind(void 0, 1),
                  /* 0x40 */
                  NPUSHB,
                  /* 0x41 */
                  NPUSHW,
                  /* 0x42 */
                  WS,
                  /* 0x43 */
                  RS,
                  /* 0x44 */
                  WCVTP,
                  /* 0x45 */
                  RCVT,
                  /* 0x46 */
                  GC.bind(void 0, 0),
                  /* 0x47 */
                  GC.bind(void 0, 1),
                  /* 0x48 */
                  void 0,
                  // TODO SCFS
                  /* 0x49 */
                  MD.bind(void 0, 0),
                  /* 0x4A */
                  MD.bind(void 0, 1),
                  /* 0x4B */
                  MPPEM,
                  /* 0x4C */
                  void 0,
                  // TODO MPS
                  /* 0x4D */
                  FLIPON,
                  /* 0x4E */
                  void 0,
                  // TODO FLIPOFF
                  /* 0x4F */
                  void 0,
                  // TODO DEBUG
                  /* 0x50 */
                  LT,
                  /* 0x51 */
                  LTEQ,
                  /* 0x52 */
                  GT,
                  /* 0x53 */
                  GTEQ,
                  /* 0x54 */
                  EQ,
                  /* 0x55 */
                  NEQ,
                  /* 0x56 */
                  ODD,
                  /* 0x57 */
                  EVEN,
                  /* 0x58 */
                  IF,
                  /* 0x59 */
                  EIF,
                  /* 0x5A */
                  AND,
                  /* 0x5B */
                  OR,
                  /* 0x5C */
                  NOT,
                  /* 0x5D */
                  DELTAP123.bind(void 0, 1),
                  /* 0x5E */
                  SDB,
                  /* 0x5F */
                  SDS,
                  /* 0x60 */
                  ADD,
                  /* 0x61 */
                  SUB,
                  /* 0x62 */
                  DIV,
                  /* 0x63 */
                  MUL,
                  /* 0x64 */
                  ABS,
                  /* 0x65 */
                  NEG,
                  /* 0x66 */
                  FLOOR,
                  /* 0x67 */
                  CEILING,
                  /* 0x68 */
                  ROUND.bind(void 0, 0),
                  /* 0x69 */
                  ROUND.bind(void 0, 1),
                  /* 0x6A */
                  ROUND.bind(void 0, 2),
                  /* 0x6B */
                  ROUND.bind(void 0, 3),
                  /* 0x6C */
                  void 0,
                  // TODO NROUND[ab]
                  /* 0x6D */
                  void 0,
                  // TODO NROUND[ab]
                  /* 0x6E */
                  void 0,
                  // TODO NROUND[ab]
                  /* 0x6F */
                  void 0,
                  // TODO NROUND[ab]
                  /* 0x70 */
                  WCVTF,
                  /* 0x71 */
                  DELTAP123.bind(void 0, 2),
                  /* 0x72 */
                  DELTAP123.bind(void 0, 3),
                  /* 0x73 */
                  DELTAC123.bind(void 0, 1),
                  /* 0x74 */
                  DELTAC123.bind(void 0, 2),
                  /* 0x75 */
                  DELTAC123.bind(void 0, 3),
                  /* 0x76 */
                  SROUND,
                  /* 0x77 */
                  S45ROUND,
                  /* 0x78 */
                  void 0,
                  // TODO JROT[]
                  /* 0x79 */
                  void 0,
                  // TODO JROF[]
                  /* 0x7A */
                  ROFF,
                  /* 0x7B */
                  void 0,
                  /* 0x7C */
                  RUTG,
                  /* 0x7D */
                  RDTG,
                  /* 0x7E */
                  POP,
                  // actually SANGW, supposed to do only a pop though
                  /* 0x7F */
                  POP,
                  // actually AA, supposed to do only a pop though
                  /* 0x80 */
                  void 0,
                  // TODO FLIPPT
                  /* 0x81 */
                  void 0,
                  // TODO FLIPRGON
                  /* 0x82 */
                  void 0,
                  // TODO FLIPRGOFF
                  /* 0x83 */
                  void 0,
                  /* 0x84 */
                  void 0,
                  /* 0x85 */
                  SCANCTRL,
                  /* 0x86 */
                  SDPVTL.bind(void 0, 0),
                  /* 0x87 */
                  SDPVTL.bind(void 0, 1),
                  /* 0x88 */
                  GETINFO,
                  /* 0x89 */
                  void 0,
                  // TODO IDEF
                  /* 0x8A */
                  ROLL,
                  /* 0x8B */
                  MAX,
                  /* 0x8C */
                  MIN,
                  /* 0x8D */
                  SCANTYPE,
                  /* 0x8E */
                  INSTCTRL,
                  /* 0x8F */
                  void 0,
                  /* 0x90 */
                  void 0,
                  /* 0x91 */
                  void 0,
                  /* 0x92 */
                  void 0,
                  /* 0x93 */
                  void 0,
                  /* 0x94 */
                  void 0,
                  /* 0x95 */
                  void 0,
                  /* 0x96 */
                  void 0,
                  /* 0x97 */
                  void 0,
                  /* 0x98 */
                  void 0,
                  /* 0x99 */
                  void 0,
                  /* 0x9A */
                  void 0,
                  /* 0x9B */
                  void 0,
                  /* 0x9C */
                  void 0,
                  /* 0x9D */
                  void 0,
                  /* 0x9E */
                  void 0,
                  /* 0x9F */
                  void 0,
                  /* 0xA0 */
                  void 0,
                  /* 0xA1 */
                  void 0,
                  /* 0xA2 */
                  void 0,
                  /* 0xA3 */
                  void 0,
                  /* 0xA4 */
                  void 0,
                  /* 0xA5 */
                  void 0,
                  /* 0xA6 */
                  void 0,
                  /* 0xA7 */
                  void 0,
                  /* 0xA8 */
                  void 0,
                  /* 0xA9 */
                  void 0,
                  /* 0xAA */
                  void 0,
                  /* 0xAB */
                  void 0,
                  /* 0xAC */
                  void 0,
                  /* 0xAD */
                  void 0,
                  /* 0xAE */
                  void 0,
                  /* 0xAF */
                  void 0,
                  /* 0xB0 */
                  PUSHB.bind(void 0, 1),
                  /* 0xB1 */
                  PUSHB.bind(void 0, 2),
                  /* 0xB2 */
                  PUSHB.bind(void 0, 3),
                  /* 0xB3 */
                  PUSHB.bind(void 0, 4),
                  /* 0xB4 */
                  PUSHB.bind(void 0, 5),
                  /* 0xB5 */
                  PUSHB.bind(void 0, 6),
                  /* 0xB6 */
                  PUSHB.bind(void 0, 7),
                  /* 0xB7 */
                  PUSHB.bind(void 0, 8),
                  /* 0xB8 */
                  PUSHW.bind(void 0, 1),
                  /* 0xB9 */
                  PUSHW.bind(void 0, 2),
                  /* 0xBA */
                  PUSHW.bind(void 0, 3),
                  /* 0xBB */
                  PUSHW.bind(void 0, 4),
                  /* 0xBC */
                  PUSHW.bind(void 0, 5),
                  /* 0xBD */
                  PUSHW.bind(void 0, 6),
                  /* 0xBE */
                  PUSHW.bind(void 0, 7),
                  /* 0xBF */
                  PUSHW.bind(void 0, 8),
                  /* 0xC0 */
                  MDRP_MIRP.bind(void 0, 0, 0, 0, 0, 0),
                  /* 0xC1 */
                  MDRP_MIRP.bind(void 0, 0, 0, 0, 0, 1),
                  /* 0xC2 */
                  MDRP_MIRP.bind(void 0, 0, 0, 0, 0, 2),
                  /* 0xC3 */
                  MDRP_MIRP.bind(void 0, 0, 0, 0, 0, 3),
                  /* 0xC4 */
                  MDRP_MIRP.bind(void 0, 0, 0, 0, 1, 0),
                  /* 0xC5 */
                  MDRP_MIRP.bind(void 0, 0, 0, 0, 1, 1),
                  /* 0xC6 */
                  MDRP_MIRP.bind(void 0, 0, 0, 0, 1, 2),
                  /* 0xC7 */
                  MDRP_MIRP.bind(void 0, 0, 0, 0, 1, 3),
                  /* 0xC8 */
                  MDRP_MIRP.bind(void 0, 0, 0, 1, 0, 0),
                  /* 0xC9 */
                  MDRP_MIRP.bind(void 0, 0, 0, 1, 0, 1),
                  /* 0xCA */
                  MDRP_MIRP.bind(void 0, 0, 0, 1, 0, 2),
                  /* 0xCB */
                  MDRP_MIRP.bind(void 0, 0, 0, 1, 0, 3),
                  /* 0xCC */
                  MDRP_MIRP.bind(void 0, 0, 0, 1, 1, 0),
                  /* 0xCD */
                  MDRP_MIRP.bind(void 0, 0, 0, 1, 1, 1),
                  /* 0xCE */
                  MDRP_MIRP.bind(void 0, 0, 0, 1, 1, 2),
                  /* 0xCF */
                  MDRP_MIRP.bind(void 0, 0, 0, 1, 1, 3),
                  /* 0xD0 */
                  MDRP_MIRP.bind(void 0, 0, 1, 0, 0, 0),
                  /* 0xD1 */
                  MDRP_MIRP.bind(void 0, 0, 1, 0, 0, 1),
                  /* 0xD2 */
                  MDRP_MIRP.bind(void 0, 0, 1, 0, 0, 2),
                  /* 0xD3 */
                  MDRP_MIRP.bind(void 0, 0, 1, 0, 0, 3),
                  /* 0xD4 */
                  MDRP_MIRP.bind(void 0, 0, 1, 0, 1, 0),
                  /* 0xD5 */
                  MDRP_MIRP.bind(void 0, 0, 1, 0, 1, 1),
                  /* 0xD6 */
                  MDRP_MIRP.bind(void 0, 0, 1, 0, 1, 2),
                  /* 0xD7 */
                  MDRP_MIRP.bind(void 0, 0, 1, 0, 1, 3),
                  /* 0xD8 */
                  MDRP_MIRP.bind(void 0, 0, 1, 1, 0, 0),
                  /* 0xD9 */
                  MDRP_MIRP.bind(void 0, 0, 1, 1, 0, 1),
                  /* 0xDA */
                  MDRP_MIRP.bind(void 0, 0, 1, 1, 0, 2),
                  /* 0xDB */
                  MDRP_MIRP.bind(void 0, 0, 1, 1, 0, 3),
                  /* 0xDC */
                  MDRP_MIRP.bind(void 0, 0, 1, 1, 1, 0),
                  /* 0xDD */
                  MDRP_MIRP.bind(void 0, 0, 1, 1, 1, 1),
                  /* 0xDE */
                  MDRP_MIRP.bind(void 0, 0, 1, 1, 1, 2),
                  /* 0xDF */
                  MDRP_MIRP.bind(void 0, 0, 1, 1, 1, 3),
                  /* 0xE0 */
                  MDRP_MIRP.bind(void 0, 1, 0, 0, 0, 0),
                  /* 0xE1 */
                  MDRP_MIRP.bind(void 0, 1, 0, 0, 0, 1),
                  /* 0xE2 */
                  MDRP_MIRP.bind(void 0, 1, 0, 0, 0, 2),
                  /* 0xE3 */
                  MDRP_MIRP.bind(void 0, 1, 0, 0, 0, 3),
                  /* 0xE4 */
                  MDRP_MIRP.bind(void 0, 1, 0, 0, 1, 0),
                  /* 0xE5 */
                  MDRP_MIRP.bind(void 0, 1, 0, 0, 1, 1),
                  /* 0xE6 */
                  MDRP_MIRP.bind(void 0, 1, 0, 0, 1, 2),
                  /* 0xE7 */
                  MDRP_MIRP.bind(void 0, 1, 0, 0, 1, 3),
                  /* 0xE8 */
                  MDRP_MIRP.bind(void 0, 1, 0, 1, 0, 0),
                  /* 0xE9 */
                  MDRP_MIRP.bind(void 0, 1, 0, 1, 0, 1),
                  /* 0xEA */
                  MDRP_MIRP.bind(void 0, 1, 0, 1, 0, 2),
                  /* 0xEB */
                  MDRP_MIRP.bind(void 0, 1, 0, 1, 0, 3),
                  /* 0xEC */
                  MDRP_MIRP.bind(void 0, 1, 0, 1, 1, 0),
                  /* 0xED */
                  MDRP_MIRP.bind(void 0, 1, 0, 1, 1, 1),
                  /* 0xEE */
                  MDRP_MIRP.bind(void 0, 1, 0, 1, 1, 2),
                  /* 0xEF */
                  MDRP_MIRP.bind(void 0, 1, 0, 1, 1, 3),
                  /* 0xF0 */
                  MDRP_MIRP.bind(void 0, 1, 1, 0, 0, 0),
                  /* 0xF1 */
                  MDRP_MIRP.bind(void 0, 1, 1, 0, 0, 1),
                  /* 0xF2 */
                  MDRP_MIRP.bind(void 0, 1, 1, 0, 0, 2),
                  /* 0xF3 */
                  MDRP_MIRP.bind(void 0, 1, 1, 0, 0, 3),
                  /* 0xF4 */
                  MDRP_MIRP.bind(void 0, 1, 1, 0, 1, 0),
                  /* 0xF5 */
                  MDRP_MIRP.bind(void 0, 1, 1, 0, 1, 1),
                  /* 0xF6 */
                  MDRP_MIRP.bind(void 0, 1, 1, 0, 1, 2),
                  /* 0xF7 */
                  MDRP_MIRP.bind(void 0, 1, 1, 0, 1, 3),
                  /* 0xF8 */
                  MDRP_MIRP.bind(void 0, 1, 1, 1, 0, 0),
                  /* 0xF9 */
                  MDRP_MIRP.bind(void 0, 1, 1, 1, 0, 1),
                  /* 0xFA */
                  MDRP_MIRP.bind(void 0, 1, 1, 1, 0, 2),
                  /* 0xFB */
                  MDRP_MIRP.bind(void 0, 1, 1, 1, 0, 3),
                  /* 0xFC */
                  MDRP_MIRP.bind(void 0, 1, 1, 1, 1, 0),
                  /* 0xFD */
                  MDRP_MIRP.bind(void 0, 1, 1, 1, 1, 1),
                  /* 0xFE */
                  MDRP_MIRP.bind(void 0, 1, 1, 1, 1, 2),
                  /* 0xFF */
                  MDRP_MIRP.bind(void 0, 1, 1, 1, 1, 3)
                ];
                var arrayFromString = Array.from || function(s) {
                  return s.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]?|[^\uD800-\uDFFF]|./g) || [];
                };
                function Font(options) {
                  options = options || {};
                  if (!options.empty) {
                    checkArgument(options.familyName, "When creating a new Font object, familyName is required.");
                    checkArgument(options.styleName, "When creating a new Font object, styleName is required.");
                    checkArgument(options.unitsPerEm, "When creating a new Font object, unitsPerEm is required.");
                    checkArgument(options.ascender, "When creating a new Font object, ascender is required.");
                    checkArgument(options.descender, "When creating a new Font object, descender is required.");
                    checkArgument(options.descender < 0, "Descender should be negative (e.g. -512).");
                    this.names = {
                      fontFamily: {
                        en: options.familyName || " "
                      },
                      fontSubfamily: {
                        en: options.styleName || " "
                      },
                      fullName: {
                        en: options.fullName || options.familyName + " " + options.styleName
                      },
                      // postScriptName may not contain any whitespace
                      postScriptName: {
                        en: options.postScriptName || (options.familyName + options.styleName).replace(/\s/g, "")
                      },
                      designer: {
                        en: options.designer || " "
                      },
                      designerURL: {
                        en: options.designerURL || " "
                      },
                      manufacturer: {
                        en: options.manufacturer || " "
                      },
                      manufacturerURL: {
                        en: options.manufacturerURL || " "
                      },
                      license: {
                        en: options.license || " "
                      },
                      licenseURL: {
                        en: options.licenseURL || " "
                      },
                      version: {
                        en: options.version || "Version 0.1"
                      },
                      description: {
                        en: options.description || " "
                      },
                      copyright: {
                        en: options.copyright || " "
                      },
                      trademark: {
                        en: options.trademark || " "
                      }
                    };
                    this.unitsPerEm = options.unitsPerEm || 1e3;
                    this.ascender = options.ascender;
                    this.descender = options.descender;
                    this.createdTimestamp = options.createdTimestamp;
                    this.tables = {
                      os2: {
                        usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,
                        usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,
                        fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR
                      }
                    };
                  }
                  this.supported = true;
                  this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);
                  this.encoding = new DefaultEncoding(this);
                  this.position = new Position(this);
                  this.substitution = new Substitution(this);
                  this.tables = this.tables || {};
                  Object.defineProperty(this, "hinting", {
                    get: function() {
                      if (this._hinting) {
                        return this._hinting;
                      }
                      if (this.outlinesFormat === "truetype") {
                        return this._hinting = new Hinting(this);
                      }
                    }
                  });
                }
                Font.prototype.hasChar = function(c) {
                  return this.encoding.charToGlyphIndex(c) !== null;
                };
                Font.prototype.charToGlyphIndex = function(s) {
                  return this.encoding.charToGlyphIndex(s);
                };
                Font.prototype.charToGlyph = function(c) {
                  var glyphIndex = this.charToGlyphIndex(c);
                  var glyph = this.glyphs.get(glyphIndex);
                  if (!glyph) {
                    glyph = this.glyphs.get(0);
                  }
                  return glyph;
                };
                Font.prototype.stringToGlyphs = function(s, options) {
                  var this$1 = this;
                  options = options || this.defaultRenderOptions;
                  var chars = arrayFromString(s);
                  var indexes = [];
                  for (var i2 = 0; i2 < chars.length; i2 += 1) {
                    var c = chars[i2];
                    indexes.push(this$1.charToGlyphIndex(c));
                  }
                  var length = indexes.length;
                  if (options.features) {
                    var script = options.script || this.substitution.getDefaultScriptName();
                    var manyToOne = [];
                    if (options.features.liga) {
                      manyToOne = manyToOne.concat(this.substitution.getFeature("liga", script, options.language));
                    }
                    if (options.features.rlig) {
                      manyToOne = manyToOne.concat(this.substitution.getFeature("rlig", script, options.language));
                    }
                    for (var i$1 = 0; i$1 < length; i$1 += 1) {
                      for (var j = 0; j < manyToOne.length; j++) {
                        var ligature = manyToOne[j];
                        var components = ligature.sub;
                        var compCount = components.length;
                        var k2 = 0;
                        while (k2 < compCount && components[k2] === indexes[i$1 + k2]) {
                          k2++;
                        }
                        if (k2 === compCount) {
                          indexes.splice(i$1, compCount, ligature.by);
                          length = length - compCount + 1;
                        }
                      }
                    }
                  }
                  var glyphs = new Array(length);
                  var notdef = this.glyphs.get(0);
                  for (var i$2 = 0; i$2 < length; i$2 += 1) {
                    glyphs[i$2] = this$1.glyphs.get(indexes[i$2]) || notdef;
                  }
                  return glyphs;
                };
                Font.prototype.nameToGlyphIndex = function(name) {
                  return this.glyphNames.nameToGlyphIndex(name);
                };
                Font.prototype.nameToGlyph = function(name) {
                  var glyphIndex = this.nameToGlyphIndex(name);
                  var glyph = this.glyphs.get(glyphIndex);
                  if (!glyph) {
                    glyph = this.glyphs.get(0);
                  }
                  return glyph;
                };
                Font.prototype.glyphIndexToName = function(gid) {
                  if (!this.glyphNames.glyphIndexToName) {
                    return "";
                  }
                  return this.glyphNames.glyphIndexToName(gid);
                };
                Font.prototype.getKerningValue = function(leftGlyph, rightGlyph) {
                  leftGlyph = leftGlyph.index || leftGlyph;
                  rightGlyph = rightGlyph.index || rightGlyph;
                  var gposKerning = this.position.defaultKerningTables;
                  if (gposKerning) {
                    return this.position.getKerningValue(gposKerning, leftGlyph, rightGlyph);
                  }
                  return this.kerningPairs[leftGlyph + "," + rightGlyph] || 0;
                };
                Font.prototype.defaultRenderOptions = {
                  kerning: true,
                  features: {
                    liga: true,
                    rlig: true
                  }
                };
                Font.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {
                  var this$1 = this;
                  x = x !== void 0 ? x : 0;
                  y = y !== void 0 ? y : 0;
                  fontSize = fontSize !== void 0 ? fontSize : 72;
                  options = options || this.defaultRenderOptions;
                  var fontScale = 1 / this.unitsPerEm * fontSize;
                  var glyphs = this.stringToGlyphs(text, options);
                  var kerningLookups;
                  if (options.kerning) {
                    var script = options.script || this.position.getDefaultScriptName();
                    kerningLookups = this.position.getKerningTables(script, options.language);
                  }
                  for (var i2 = 0; i2 < glyphs.length; i2 += 1) {
                    var glyph = glyphs[i2];
                    callback.call(this$1, glyph, x, y, fontSize, options);
                    if (glyph.advanceWidth) {
                      x += glyph.advanceWidth * fontScale;
                    }
                    if (options.kerning && i2 < glyphs.length - 1) {
                      var kerningValue = kerningLookups ? this$1.position.getKerningValue(kerningLookups, glyph.index, glyphs[i2 + 1].index) : this$1.getKerningValue(glyph, glyphs[i2 + 1]);
                      x += kerningValue * fontScale;
                    }
                    if (options.letterSpacing) {
                      x += options.letterSpacing * fontSize;
                    } else if (options.tracking) {
                      x += options.tracking / 1e3 * fontSize;
                    }
                  }
                  return x;
                };
                Font.prototype.getPath = function(text, x, y, fontSize, options) {
                  var fullPath = new Path();
                  this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
                    var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);
                    fullPath.extend(glyphPath);
                  });
                  return fullPath;
                };
                Font.prototype.getPaths = function(text, x, y, fontSize, options) {
                  var glyphPaths = [];
                  this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
                    var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);
                    glyphPaths.push(glyphPath);
                  });
                  return glyphPaths;
                };
                Font.prototype.getAdvanceWidth = function(text, fontSize, options) {
                  return this.forEachGlyph(text, 0, 0, fontSize, options, function() {
                  });
                };
                Font.prototype.draw = function(ctx, text, x, y, fontSize, options) {
                  this.getPath(text, x, y, fontSize, options).draw(ctx);
                };
                Font.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {
                  this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
                    glyph.drawPoints(ctx, gX, gY, gFontSize);
                  });
                };
                Font.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {
                  this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
                    glyph.drawMetrics(ctx, gX, gY, gFontSize);
                  });
                };
                Font.prototype.getEnglishName = function(name) {
                  var translations = this.names[name];
                  if (translations) {
                    return translations.en;
                  }
                };
                Font.prototype.validate = function() {
                  var _this = this;
                  function assert(predicate, message) {
                  }
                  function assertNamePresent(name) {
                    var englishName = _this.getEnglishName(name);
                    assert(englishName && englishName.trim().length > 0, "No English " + name + " specified.");
                  }
                  assertNamePresent("fontFamily");
                  assertNamePresent("weightName");
                  assertNamePresent("manufacturer");
                  assertNamePresent("copyright");
                  assertNamePresent("version");
                  assert(this.unitsPerEm > 0, "No unitsPerEm specified.");
                };
                Font.prototype.toTables = function() {
                  return sfnt.fontToTable(this);
                };
                Font.prototype.toBuffer = function() {
                  console.warn("Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.");
                  return this.toArrayBuffer();
                };
                Font.prototype.toArrayBuffer = function() {
                  var sfntTable = this.toTables();
                  var bytes = sfntTable.encode();
                  var buffer = new ArrayBuffer(bytes.length);
                  var intArray = new Uint8Array(buffer);
                  for (var i2 = 0; i2 < bytes.length; i2++) {
                    intArray[i2] = bytes[i2];
                  }
                  return buffer;
                };
                Font.prototype.download = function(fileName) {
                  var familyName = this.getEnglishName("fontFamily");
                  var styleName = this.getEnglishName("fontSubfamily");
                  fileName = fileName || familyName.replace(/\s/g, "") + "-" + styleName + ".otf";
                  var arrayBuffer = this.toArrayBuffer();
                  if (isBrowser()) {
                    window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
                    window.requestFileSystem(window.TEMPORARY, arrayBuffer.byteLength, function(fs2) {
                      fs2.root.getFile(fileName, {
                        create: true
                      }, function(fileEntry) {
                        fileEntry.createWriter(function(writer) {
                          var dataView = new DataView(arrayBuffer);
                          var blob = new Blob([dataView], {
                            type: "font/opentype"
                          });
                          writer.write(blob);
                          writer.addEventListener("writeend", function() {
                            location.href = fileEntry.toURL();
                          }, false);
                        });
                      });
                    }, function(err) {
                      throw new Error(err.name + ": " + err.message);
                    });
                  } else {
                    var fs = _dereq_2("fs");
                    var buffer = arrayBufferToNodeBuffer(arrayBuffer);
                    fs.writeFileSync(fileName, buffer);
                  }
                };
                Font.prototype.fsSelectionValues = {
                  ITALIC: 1,
                  //1
                  UNDERSCORE: 2,
                  //2
                  NEGATIVE: 4,
                  //4
                  OUTLINED: 8,
                  //8
                  STRIKEOUT: 16,
                  //16
                  BOLD: 32,
                  //32
                  REGULAR: 64,
                  //64
                  USER_TYPO_METRICS: 128,
                  //128
                  WWS: 256,
                  //256
                  OBLIQUE: 512
                  //512
                };
                Font.prototype.usWidthClasses = {
                  ULTRA_CONDENSED: 1,
                  EXTRA_CONDENSED: 2,
                  CONDENSED: 3,
                  SEMI_CONDENSED: 4,
                  MEDIUM: 5,
                  SEMI_EXPANDED: 6,
                  EXPANDED: 7,
                  EXTRA_EXPANDED: 8,
                  ULTRA_EXPANDED: 9
                };
                Font.prototype.usWeightClasses = {
                  THIN: 100,
                  EXTRA_LIGHT: 200,
                  LIGHT: 300,
                  NORMAL: 400,
                  MEDIUM: 500,
                  SEMI_BOLD: 600,
                  BOLD: 700,
                  EXTRA_BOLD: 800,
                  BLACK: 900
                };
                function addName(name, names) {
                  var nameString = JSON.stringify(name);
                  var nameID = 256;
                  for (var nameKey in names) {
                    var n = parseInt(nameKey);
                    if (!n || n < 256) {
                      continue;
                    }
                    if (JSON.stringify(names[nameKey]) === nameString) {
                      return n;
                    }
                    if (nameID <= n) {
                      nameID = n + 1;
                    }
                  }
                  names[nameID] = name;
                  return nameID;
                }
                function makeFvarAxis(n, axis, names) {
                  var nameID = addName(axis.name, names);
                  return [
                    {
                      name: "tag_" + n,
                      type: "TAG",
                      value: axis.tag
                    },
                    {
                      name: "minValue_" + n,
                      type: "FIXED",
                      value: axis.minValue << 16
                    },
                    {
                      name: "defaultValue_" + n,
                      type: "FIXED",
                      value: axis.defaultValue << 16
                    },
                    {
                      name: "maxValue_" + n,
                      type: "FIXED",
                      value: axis.maxValue << 16
                    },
                    {
                      name: "flags_" + n,
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "nameID_" + n,
                      type: "USHORT",
                      value: nameID
                    }
                  ];
                }
                function parseFvarAxis(data, start, names) {
                  var axis = {};
                  var p = new parse.Parser(data, start);
                  axis.tag = p.parseTag();
                  axis.minValue = p.parseFixed();
                  axis.defaultValue = p.parseFixed();
                  axis.maxValue = p.parseFixed();
                  p.skip("uShort", 1);
                  axis.name = names[p.parseUShort()] || {};
                  return axis;
                }
                function makeFvarInstance(n, inst, axes, names) {
                  var nameID = addName(inst.name, names);
                  var fields = [
                    {
                      name: "nameID_" + n,
                      type: "USHORT",
                      value: nameID
                    },
                    {
                      name: "flags_" + n,
                      type: "USHORT",
                      value: 0
                    }
                  ];
                  for (var i2 = 0; i2 < axes.length; ++i2) {
                    var axisTag = axes[i2].tag;
                    fields.push({
                      name: "axis_" + n + " " + axisTag,
                      type: "FIXED",
                      value: inst.coordinates[axisTag] << 16
                    });
                  }
                  return fields;
                }
                function parseFvarInstance(data, start, axes, names) {
                  var inst = {};
                  var p = new parse.Parser(data, start);
                  inst.name = names[p.parseUShort()] || {};
                  p.skip("uShort", 1);
                  inst.coordinates = {};
                  for (var i2 = 0; i2 < axes.length; ++i2) {
                    inst.coordinates[axes[i2].tag] = p.parseFixed();
                  }
                  return inst;
                }
                function makeFvarTable(fvar2, names) {
                  var result = new table.Table("fvar", [
                    {
                      name: "version",
                      type: "ULONG",
                      value: 65536
                    },
                    {
                      name: "offsetToData",
                      type: "USHORT",
                      value: 0
                    },
                    {
                      name: "countSizePairs",
                      type: "USHORT",
                      value: 2
                    },
                    {
                      name: "axisCount",
                      type: "USHORT",
                      value: fvar2.axes.length
                    },
                    {
                      name: "axisSize",
                      type: "USHORT",
                      value: 20
                    },
                    {
                      name: "instanceCount",
                      type: "USHORT",
                      value: fvar2.instances.length
                    },
                    {
                      name: "instanceSize",
                      type: "USHORT",
                      value: 4 + fvar2.axes.length * 4
                    }
                  ]);
                  result.offsetToData = result.sizeOf();
                  for (var i2 = 0; i2 < fvar2.axes.length; i2++) {
                    result.fields = result.fields.concat(makeFvarAxis(i2, fvar2.axes[i2], names));
                  }
                  for (var j = 0; j < fvar2.instances.length; j++) {
                    result.fields = result.fields.concat(makeFvarInstance(j, fvar2.instances[j], fvar2.axes, names));
                  }
                  return result;
                }
                function parseFvarTable(data, start, names) {
                  var p = new parse.Parser(data, start);
                  var tableVersion = p.parseULong();
                  check.argument(tableVersion === 65536, "Unsupported fvar table version.");
                  var offsetToData = p.parseOffset16();
                  p.skip("uShort", 1);
                  var axisCount = p.parseUShort();
                  var axisSize = p.parseUShort();
                  var instanceCount = p.parseUShort();
                  var instanceSize = p.parseUShort();
                  var axes = [];
                  for (var i2 = 0; i2 < axisCount; i2++) {
                    axes.push(parseFvarAxis(data, start + offsetToData + i2 * axisSize, names));
                  }
                  var instances = [];
                  var instanceStart = start + offsetToData + axisCount * axisSize;
                  for (var j = 0; j < instanceCount; j++) {
                    instances.push(parseFvarInstance(data, instanceStart + j * instanceSize, axes, names));
                  }
                  return {
                    axes,
                    instances
                  };
                }
                var fvar = {
                  make: makeFvarTable,
                  parse: parseFvarTable
                };
                var subtableParsers$1 = new Array(10);
                subtableParsers$1[1] = function parseLookup1() {
                  var start = this.offset + this.relativeOffset;
                  var posformat = this.parseUShort();
                  if (posformat === 1) {
                    return {
                      posFormat: 1,
                      coverage: this.parsePointer(Parser.coverage),
                      value: this.parseValueRecord()
                    };
                  } else if (posformat === 2) {
                    return {
                      posFormat: 2,
                      coverage: this.parsePointer(Parser.coverage),
                      values: this.parseValueRecordList()
                    };
                  }
                  check.assert(false, "0x" + start.toString(16) + ": GPOS lookup type 1 format must be 1 or 2.");
                };
                subtableParsers$1[2] = function parseLookup2() {
                  var start = this.offset + this.relativeOffset;
                  var posFormat = this.parseUShort();
                  check.assert(posFormat === 1 || posFormat === 2, "0x" + start.toString(16) + ": GPOS lookup type 2 format must be 1 or 2.");
                  var coverage = this.parsePointer(Parser.coverage);
                  var valueFormat1 = this.parseUShort();
                  var valueFormat2 = this.parseUShort();
                  if (posFormat === 1) {
                    return {
                      posFormat,
                      coverage,
                      valueFormat1,
                      valueFormat2,
                      pairSets: this.parseList(Parser.pointer(Parser.list(function() {
                        return {
                          // pairValueRecord
                          secondGlyph: this.parseUShort(),
                          value1: this.parseValueRecord(valueFormat1),
                          value2: this.parseValueRecord(valueFormat2)
                        };
                      })))
                    };
                  } else if (posFormat === 2) {
                    var classDef1 = this.parsePointer(Parser.classDef);
                    var classDef2 = this.parsePointer(Parser.classDef);
                    var class1Count = this.parseUShort();
                    var class2Count = this.parseUShort();
                    return {
                      // Class Pair Adjustment
                      posFormat,
                      coverage,
                      valueFormat1,
                      valueFormat2,
                      classDef1,
                      classDef2,
                      class1Count,
                      class2Count,
                      classRecords: this.parseList(class1Count, Parser.list(class2Count, function() {
                        return {
                          value1: this.parseValueRecord(valueFormat1),
                          value2: this.parseValueRecord(valueFormat2)
                        };
                      }))
                    };
                  }
                };
                subtableParsers$1[3] = function parseLookup3() {
                  return {
                    error: "GPOS Lookup 3 not supported"
                  };
                };
                subtableParsers$1[4] = function parseLookup4() {
                  return {
                    error: "GPOS Lookup 4 not supported"
                  };
                };
                subtableParsers$1[5] = function parseLookup5() {
                  return {
                    error: "GPOS Lookup 5 not supported"
                  };
                };
                subtableParsers$1[6] = function parseLookup6() {
                  return {
                    error: "GPOS Lookup 6 not supported"
                  };
                };
                subtableParsers$1[7] = function parseLookup7() {
                  return {
                    error: "GPOS Lookup 7 not supported"
                  };
                };
                subtableParsers$1[8] = function parseLookup8() {
                  return {
                    error: "GPOS Lookup 8 not supported"
                  };
                };
                subtableParsers$1[9] = function parseLookup9() {
                  return {
                    error: "GPOS Lookup 9 not supported"
                  };
                };
                function parseGposTable(data, start) {
                  start = start || 0;
                  var p = new Parser(data, start);
                  var tableVersion = p.parseVersion(1);
                  check.argument(tableVersion === 1 || tableVersion === 1.1, "Unsupported GPOS table version " + tableVersion);
                  if (tableVersion === 1) {
                    return {
                      version: tableVersion,
                      scripts: p.parseScriptList(),
                      features: p.parseFeatureList(),
                      lookups: p.parseLookupList(subtableParsers$1)
                    };
                  } else {
                    return {
                      version: tableVersion,
                      scripts: p.parseScriptList(),
                      features: p.parseFeatureList(),
                      lookups: p.parseLookupList(subtableParsers$1),
                      variations: p.parseFeatureVariationsList()
                    };
                  }
                }
                var subtableMakers$1 = new Array(10);
                function makeGposTable(gpos2) {
                  return new table.Table("GPOS", [
                    {
                      name: "version",
                      type: "ULONG",
                      value: 65536
                    },
                    {
                      name: "scripts",
                      type: "TABLE",
                      value: new table.ScriptList(gpos2.scripts)
                    },
                    {
                      name: "features",
                      type: "TABLE",
                      value: new table.FeatureList(gpos2.features)
                    },
                    {
                      name: "lookups",
                      type: "TABLE",
                      value: new table.LookupList(gpos2.lookups, subtableMakers$1)
                    }
                  ]);
                }
                var gpos = {
                  parse: parseGposTable,
                  make: makeGposTable
                };
                function parseWindowsKernTable(p) {
                  var pairs = {};
                  p.skip("uShort");
                  var subtableVersion = p.parseUShort();
                  check.argument(subtableVersion === 0, "Unsupported kern sub-table version.");
                  p.skip("uShort", 2);
                  var nPairs = p.parseUShort();
                  p.skip("uShort", 3);
                  for (var i2 = 0; i2 < nPairs; i2 += 1) {
                    var leftIndex = p.parseUShort();
                    var rightIndex = p.parseUShort();
                    var value = p.parseShort();
                    pairs[leftIndex + "," + rightIndex] = value;
                  }
                  return pairs;
                }
                function parseMacKernTable(p) {
                  var pairs = {};
                  p.skip("uShort");
                  var nTables = p.parseULong();
                  if (nTables > 1) {
                    console.warn("Only the first kern subtable is supported.");
                  }
                  p.skip("uLong");
                  var coverage = p.parseUShort();
                  var subtableVersion = coverage & 255;
                  p.skip("uShort");
                  if (subtableVersion === 0) {
                    var nPairs = p.parseUShort();
                    p.skip("uShort", 3);
                    for (var i2 = 0; i2 < nPairs; i2 += 1) {
                      var leftIndex = p.parseUShort();
                      var rightIndex = p.parseUShort();
                      var value = p.parseShort();
                      pairs[leftIndex + "," + rightIndex] = value;
                    }
                  }
                  return pairs;
                }
                function parseKernTable(data, start) {
                  var p = new parse.Parser(data, start);
                  var tableVersion = p.parseUShort();
                  if (tableVersion === 0) {
                    return parseWindowsKernTable(p);
                  } else if (tableVersion === 1) {
                    return parseMacKernTable(p);
                  } else {
                    throw new Error("Unsupported kern table version (" + tableVersion + ").");
                  }
                }
                var kern = {
                  parse: parseKernTable
                };
                function parseLocaTable(data, start, numGlyphs, shortVersion) {
                  var p = new parse.Parser(data, start);
                  var parseFn = shortVersion ? p.parseUShort : p.parseULong;
                  var glyphOffsets = [];
                  for (var i2 = 0; i2 < numGlyphs + 1; i2 += 1) {
                    var glyphOffset = parseFn.call(p);
                    if (shortVersion) {
                      glyphOffset *= 2;
                    }
                    glyphOffsets.push(glyphOffset);
                  }
                  return glyphOffsets;
                }
                var loca = {
                  parse: parseLocaTable
                };
                function loadFromFile(path, callback) {
                  var fs = _dereq_2("fs");
                  fs.readFile(path, function(err, buffer) {
                    if (err) {
                      return callback(err.message);
                    }
                    callback(null, nodeBufferToArrayBuffer(buffer));
                  });
                }
                function loadFromUrl(url2, callback) {
                  var request = new XMLHttpRequest();
                  request.open("get", url2, true);
                  request.responseType = "arraybuffer";
                  request.onload = function() {
                    if (request.response) {
                      return callback(null, request.response);
                    } else {
                      return callback("Font could not be loaded: " + request.statusText);
                    }
                  };
                  request.onerror = function() {
                    callback("Font could not be loaded");
                  };
                  request.send();
                }
                function parseOpenTypeTableEntries(data, numTables) {
                  var tableEntries = [];
                  var p = 12;
                  for (var i2 = 0; i2 < numTables; i2 += 1) {
                    var tag = parse.getTag(data, p);
                    var checksum = parse.getULong(data, p + 4);
                    var offset = parse.getULong(data, p + 8);
                    var length = parse.getULong(data, p + 12);
                    tableEntries.push({
                      tag,
                      checksum,
                      offset,
                      length,
                      compression: false
                    });
                    p += 16;
                  }
                  return tableEntries;
                }
                function parseWOFFTableEntries(data, numTables) {
                  var tableEntries = [];
                  var p = 44;
                  for (var i2 = 0; i2 < numTables; i2 += 1) {
                    var tag = parse.getTag(data, p);
                    var offset = parse.getULong(data, p + 4);
                    var compLength = parse.getULong(data, p + 8);
                    var origLength = parse.getULong(data, p + 12);
                    var compression = void 0;
                    if (compLength < origLength) {
                      compression = "WOFF";
                    } else {
                      compression = false;
                    }
                    tableEntries.push({
                      tag,
                      offset,
                      compression,
                      compressedLength: compLength,
                      length: origLength
                    });
                    p += 20;
                  }
                  return tableEntries;
                }
                function uncompressTable(data, tableEntry) {
                  if (tableEntry.compression === "WOFF") {
                    var inBuffer = new Uint8Array(data.buffer, tableEntry.offset + 2, tableEntry.compressedLength - 2);
                    var outBuffer = new Uint8Array(tableEntry.length);
                    tinyInflate(inBuffer, outBuffer);
                    if (outBuffer.byteLength !== tableEntry.length) {
                      throw new Error("Decompression error: " + tableEntry.tag + " decompressed length doesn't match recorded length");
                    }
                    var view = new DataView(outBuffer.buffer, 0);
                    return {
                      data: view,
                      offset: 0
                    };
                  } else {
                    return {
                      data,
                      offset: tableEntry.offset
                    };
                  }
                }
                function parseBuffer(buffer) {
                  var indexToLocFormat;
                  var ltagTable;
                  var font = new Font({
                    empty: true
                  });
                  var data = new DataView(buffer, 0);
                  var numTables;
                  var tableEntries = [];
                  var signature = parse.getTag(data, 0);
                  if (signature === String.fromCharCode(0, 1, 0, 0) || signature === "true" || signature === "typ1") {
                    font.outlinesFormat = "truetype";
                    numTables = parse.getUShort(data, 4);
                    tableEntries = parseOpenTypeTableEntries(data, numTables);
                  } else if (signature === "OTTO") {
                    font.outlinesFormat = "cff";
                    numTables = parse.getUShort(data, 4);
                    tableEntries = parseOpenTypeTableEntries(data, numTables);
                  } else if (signature === "wOFF") {
                    var flavor = parse.getTag(data, 4);
                    if (flavor === String.fromCharCode(0, 1, 0, 0)) {
                      font.outlinesFormat = "truetype";
                    } else if (flavor === "OTTO") {
                      font.outlinesFormat = "cff";
                    } else {
                      throw new Error("Unsupported OpenType flavor " + signature);
                    }
                    numTables = parse.getUShort(data, 12);
                    tableEntries = parseWOFFTableEntries(data, numTables);
                  } else {
                    throw new Error("Unsupported OpenType signature " + signature);
                  }
                  var cffTableEntry;
                  var fvarTableEntry;
                  var glyfTableEntry;
                  var gposTableEntry;
                  var gsubTableEntry;
                  var hmtxTableEntry;
                  var kernTableEntry;
                  var locaTableEntry;
                  var nameTableEntry;
                  var metaTableEntry;
                  var p;
                  for (var i2 = 0; i2 < numTables; i2 += 1) {
                    var tableEntry = tableEntries[i2];
                    var table2 = void 0;
                    switch (tableEntry.tag) {
                      case "cmap":
                        table2 = uncompressTable(data, tableEntry);
                        font.tables.cmap = cmap.parse(table2.data, table2.offset);
                        font.encoding = new CmapEncoding(font.tables.cmap);
                        break;
                      case "cvt ":
                        table2 = uncompressTable(data, tableEntry);
                        p = new parse.Parser(table2.data, table2.offset);
                        font.tables.cvt = p.parseShortList(tableEntry.length / 2);
                        break;
                      case "fvar":
                        fvarTableEntry = tableEntry;
                        break;
                      case "fpgm":
                        table2 = uncompressTable(data, tableEntry);
                        p = new parse.Parser(table2.data, table2.offset);
                        font.tables.fpgm = p.parseByteList(tableEntry.length);
                        break;
                      case "head":
                        table2 = uncompressTable(data, tableEntry);
                        font.tables.head = head.parse(table2.data, table2.offset);
                        font.unitsPerEm = font.tables.head.unitsPerEm;
                        indexToLocFormat = font.tables.head.indexToLocFormat;
                        break;
                      case "hhea":
                        table2 = uncompressTable(data, tableEntry);
                        font.tables.hhea = hhea.parse(table2.data, table2.offset);
                        font.ascender = font.tables.hhea.ascender;
                        font.descender = font.tables.hhea.descender;
                        font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;
                        break;
                      case "hmtx":
                        hmtxTableEntry = tableEntry;
                        break;
                      case "ltag":
                        table2 = uncompressTable(data, tableEntry);
                        ltagTable = ltag.parse(table2.data, table2.offset);
                        break;
                      case "maxp":
                        table2 = uncompressTable(data, tableEntry);
                        font.tables.maxp = maxp.parse(table2.data, table2.offset);
                        font.numGlyphs = font.tables.maxp.numGlyphs;
                        break;
                      case "name":
                        nameTableEntry = tableEntry;
                        break;
                      case "OS/2":
                        table2 = uncompressTable(data, tableEntry);
                        font.tables.os2 = os2.parse(table2.data, table2.offset);
                        break;
                      case "post":
                        table2 = uncompressTable(data, tableEntry);
                        font.tables.post = post.parse(table2.data, table2.offset);
                        font.glyphNames = new GlyphNames(font.tables.post);
                        break;
                      case "prep":
                        table2 = uncompressTable(data, tableEntry);
                        p = new parse.Parser(table2.data, table2.offset);
                        font.tables.prep = p.parseByteList(tableEntry.length);
                        break;
                      case "glyf":
                        glyfTableEntry = tableEntry;
                        break;
                      case "loca":
                        locaTableEntry = tableEntry;
                        break;
                      case "CFF ":
                        cffTableEntry = tableEntry;
                        break;
                      case "kern":
                        kernTableEntry = tableEntry;
                        break;
                      case "GPOS":
                        gposTableEntry = tableEntry;
                        break;
                      case "GSUB":
                        gsubTableEntry = tableEntry;
                        break;
                      case "meta":
                        metaTableEntry = tableEntry;
                        break;
                    }
                  }
                  var nameTable = uncompressTable(data, nameTableEntry);
                  font.tables.name = _name.parse(nameTable.data, nameTable.offset, ltagTable);
                  font.names = font.tables.name;
                  if (glyfTableEntry && locaTableEntry) {
                    var shortVersion = indexToLocFormat === 0;
                    var locaTable = uncompressTable(data, locaTableEntry);
                    var locaOffsets = loca.parse(locaTable.data, locaTable.offset, font.numGlyphs, shortVersion);
                    var glyfTable = uncompressTable(data, glyfTableEntry);
                    font.glyphs = glyf.parse(glyfTable.data, glyfTable.offset, locaOffsets, font);
                  } else if (cffTableEntry) {
                    var cffTable = uncompressTable(data, cffTableEntry);
                    cff.parse(cffTable.data, cffTable.offset, font);
                  } else {
                    throw new Error("Font doesn't contain TrueType or CFF outlines.");
                  }
                  var hmtxTable = uncompressTable(data, hmtxTableEntry);
                  hmtx.parse(hmtxTable.data, hmtxTable.offset, font.numberOfHMetrics, font.numGlyphs, font.glyphs);
                  addGlyphNames(font);
                  if (kernTableEntry) {
                    var kernTable = uncompressTable(data, kernTableEntry);
                    font.kerningPairs = kern.parse(kernTable.data, kernTable.offset);
                  } else {
                    font.kerningPairs = {};
                  }
                  if (gposTableEntry) {
                    var gposTable = uncompressTable(data, gposTableEntry);
                    font.tables.gpos = gpos.parse(gposTable.data, gposTable.offset);
                    font.position.init();
                  }
                  if (gsubTableEntry) {
                    var gsubTable = uncompressTable(data, gsubTableEntry);
                    font.tables.gsub = gsub.parse(gsubTable.data, gsubTable.offset);
                  }
                  if (fvarTableEntry) {
                    var fvarTable = uncompressTable(data, fvarTableEntry);
                    font.tables.fvar = fvar.parse(fvarTable.data, fvarTable.offset, font.names);
                  }
                  if (metaTableEntry) {
                    var metaTable = uncompressTable(data, metaTableEntry);
                    font.tables.meta = meta.parse(metaTable.data, metaTable.offset);
                    font.metas = font.tables.meta;
                  }
                  return font;
                }
                function load(url2, callback) {
                  var isNode$$1 = typeof window === "undefined";
                  var loadFn = isNode$$1 ? loadFromFile : loadFromUrl;
                  loadFn(url2, function(err, arrayBuffer) {
                    if (err) {
                      return callback(err);
                    }
                    var font;
                    try {
                      font = parseBuffer(arrayBuffer);
                    } catch (e2) {
                      return callback(e2, null);
                    }
                    return callback(null, font);
                  });
                }
                function loadSync(url2) {
                  var fs = _dereq_2("fs");
                  var buffer = fs.readFileSync(url2);
                  return parseBuffer(nodeBufferToArrayBuffer(buffer));
                }
                exports3.Font = Font;
                exports3.Glyph = Glyph;
                exports3.Path = Path;
                exports3.BoundingBox = BoundingBox;
                exports3._parse = parse;
                exports3.parse = parseBuffer;
                exports3.load = load;
                exports3.loadSync = loadSync;
                Object.defineProperty(exports3, "__esModule", {
                  value: true
                });
              });
            }).call(this, _dereq_2("buffer").Buffer);
          },
          {
            "buffer": 22,
            "fs": 21
          }
        ],
        264: [
          function(_dereq_2, module2, exports2) {
            (function(process) {
              function normalizeArray(parts, allowAboveRoot) {
                var up = 0;
                for (var i2 = parts.length - 1; i2 >= 0; i2--) {
                  var last = parts[i2];
                  if (last === ".") {
                    parts.splice(i2, 1);
                  } else if (last === "..") {
                    parts.splice(i2, 1);
                    up++;
                  } else if (up) {
                    parts.splice(i2, 1);
                    up--;
                  }
                }
                if (allowAboveRoot) {
                  for (; up--; up) {
                    parts.unshift("..");
                  }
                }
                return parts;
              }
              exports2.resolve = function() {
                var resolvedPath = "", resolvedAbsolute = false;
                for (var i2 = arguments.length - 1; i2 >= -1 && !resolvedAbsolute; i2--) {
                  var path = i2 >= 0 ? arguments[i2] : process.cwd();
                  if (typeof path !== "string") {
                    throw new TypeError("Arguments to path.resolve must be strings");
                  } else if (!path) {
                    continue;
                  }
                  resolvedPath = path + "/" + resolvedPath;
                  resolvedAbsolute = path.charAt(0) === "/";
                }
                resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function(p) {
                  return !!p;
                }), !resolvedAbsolute).join("/");
                return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
              };
              exports2.normalize = function(path) {
                var isAbsolute = exports2.isAbsolute(path), trailingSlash = substr(path, -1) === "/";
                path = normalizeArray(filter(path.split("/"), function(p) {
                  return !!p;
                }), !isAbsolute).join("/");
                if (!path && !isAbsolute) {
                  path = ".";
                }
                if (path && trailingSlash) {
                  path += "/";
                }
                return (isAbsolute ? "/" : "") + path;
              };
              exports2.isAbsolute = function(path) {
                return path.charAt(0) === "/";
              };
              exports2.join = function() {
                var paths = Array.prototype.slice.call(arguments, 0);
                return exports2.normalize(filter(paths, function(p, index) {
                  if (typeof p !== "string") {
                    throw new TypeError("Arguments to path.join must be strings");
                  }
                  return p;
                }).join("/"));
              };
              exports2.relative = function(from, to) {
                from = exports2.resolve(from).substr(1);
                to = exports2.resolve(to).substr(1);
                function trim(arr) {
                  var start = 0;
                  for (; start < arr.length; start++) {
                    if (arr[start] !== "")
                      break;
                  }
                  var end = arr.length - 1;
                  for (; end >= 0; end--) {
                    if (arr[end] !== "")
                      break;
                  }
                  if (start > end)
                    return [];
                  return arr.slice(start, end - start + 1);
                }
                var fromParts = trim(from.split("/"));
                var toParts = trim(to.split("/"));
                var length = Math.min(fromParts.length, toParts.length);
                var samePartsLength = length;
                for (var i2 = 0; i2 < length; i2++) {
                  if (fromParts[i2] !== toParts[i2]) {
                    samePartsLength = i2;
                    break;
                  }
                }
                var outputParts = [];
                for (var i2 = samePartsLength; i2 < fromParts.length; i2++) {
                  outputParts.push("..");
                }
                outputParts = outputParts.concat(toParts.slice(samePartsLength));
                return outputParts.join("/");
              };
              exports2.sep = "/";
              exports2.delimiter = ":";
              exports2.dirname = function(path) {
                if (typeof path !== "string")
                  path = path + "";
                if (path.length === 0)
                  return ".";
                var code = path.charCodeAt(0);
                var hasRoot = code === 47;
                var end = -1;
                var matchedSlash = true;
                for (var i2 = path.length - 1; i2 >= 1; --i2) {
                  code = path.charCodeAt(i2);
                  if (code === 47) {
                    if (!matchedSlash) {
                      end = i2;
                      break;
                    }
                  } else {
                    matchedSlash = false;
                  }
                }
                if (end === -1)
                  return hasRoot ? "/" : ".";
                if (hasRoot && end === 1) {
                  return "/";
                }
                return path.slice(0, end);
              };
              function basename(path) {
                if (typeof path !== "string")
                  path = path + "";
                var start = 0;
                var end = -1;
                var matchedSlash = true;
                var i2;
                for (i2 = path.length - 1; i2 >= 0; --i2) {
                  if (path.charCodeAt(i2) === 47) {
                    if (!matchedSlash) {
                      start = i2 + 1;
                      break;
                    }
                  } else if (end === -1) {
                    matchedSlash = false;
                    end = i2 + 1;
                  }
                }
                if (end === -1)
                  return "";
                return path.slice(start, end);
              }
              exports2.basename = function(path, ext) {
                var f = basename(path);
                if (ext && f.substr(-1 * ext.length) === ext) {
                  f = f.substr(0, f.length - ext.length);
                }
                return f;
              };
              exports2.extname = function(path) {
                if (typeof path !== "string")
                  path = path + "";
                var startDot = -1;
                var startPart = 0;
                var end = -1;
                var matchedSlash = true;
                var preDotState = 0;
                for (var i2 = path.length - 1; i2 >= 0; --i2) {
                  var code = path.charCodeAt(i2);
                  if (code === 47) {
                    if (!matchedSlash) {
                      startPart = i2 + 1;
                      break;
                    }
                    continue;
                  }
                  if (end === -1) {
                    matchedSlash = false;
                    end = i2 + 1;
                  }
                  if (code === 46) {
                    if (startDot === -1)
                      startDot = i2;
                    else if (preDotState !== 1)
                      preDotState = 1;
                  } else if (startDot !== -1) {
                    preDotState = -1;
                  }
                }
                if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
                preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
                preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
                  return "";
                }
                return path.slice(startDot, end);
              };
              function filter(xs, f) {
                if (xs.filter)
                  return xs.filter(f);
                var res = [];
                for (var i2 = 0; i2 < xs.length; i2++) {
                  if (f(xs[i2], i2, xs))
                    res.push(xs[i2]);
                }
                return res;
              }
              var substr = "ab".substr(-1) === "b" ? function(str, start, len) {
                return str.substr(start, len);
              } : function(str, start, len) {
                if (start < 0)
                  start = str.length + start;
                return str.substr(start, len);
              };
            }).call(this, _dereq_2("_process"));
          },
          {
            "_process": 265
          }
        ],
        265: [
          function(_dereq_2, module2, exports2) {
            var process = module2.exports = {};
            var cachedSetTimeout;
            var cachedClearTimeout;
            function defaultSetTimout() {
              throw new Error("setTimeout has not been defined");
            }
            function defaultClearTimeout() {
              throw new Error("clearTimeout has not been defined");
            }
            (function() {
              try {
                if (typeof setTimeout === "function") {
                  cachedSetTimeout = setTimeout;
                } else {
                  cachedSetTimeout = defaultSetTimout;
                }
              } catch (e2) {
                cachedSetTimeout = defaultSetTimout;
              }
              try {
                if (typeof clearTimeout === "function") {
                  cachedClearTimeout = clearTimeout;
                } else {
                  cachedClearTimeout = defaultClearTimeout;
                }
              } catch (e2) {
                cachedClearTimeout = defaultClearTimeout;
              }
            })();
            function runTimeout(fun) {
              if (cachedSetTimeout === setTimeout) {
                return setTimeout(fun, 0);
              }
              if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                cachedSetTimeout = setTimeout;
                return setTimeout(fun, 0);
              }
              try {
                return cachedSetTimeout(fun, 0);
              } catch (e2) {
                try {
                  return cachedSetTimeout.call(null, fun, 0);
                } catch (e3) {
                  return cachedSetTimeout.call(this, fun, 0);
                }
              }
            }
            function runClearTimeout(marker) {
              if (cachedClearTimeout === clearTimeout) {
                return clearTimeout(marker);
              }
              if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                cachedClearTimeout = clearTimeout;
                return clearTimeout(marker);
              }
              try {
                return cachedClearTimeout(marker);
              } catch (e2) {
                try {
                  return cachedClearTimeout.call(null, marker);
                } catch (e3) {
                  return cachedClearTimeout.call(this, marker);
                }
              }
            }
            var queue = [];
            var draining = false;
            var currentQueue;
            var queueIndex = -1;
            function cleanUpNextTick() {
              if (!draining || !currentQueue) {
                return;
              }
              draining = false;
              if (currentQueue.length) {
                queue = currentQueue.concat(queue);
              } else {
                queueIndex = -1;
              }
              if (queue.length) {
                drainQueue();
              }
            }
            function drainQueue() {
              if (draining) {
                return;
              }
              var timeout = runTimeout(cleanUpNextTick);
              draining = true;
              var len = queue.length;
              while (len) {
                currentQueue = queue;
                queue = [];
                while (++queueIndex < len) {
                  if (currentQueue) {
                    currentQueue[queueIndex].run();
                  }
                }
                queueIndex = -1;
                len = queue.length;
              }
              currentQueue = null;
              draining = false;
              runClearTimeout(timeout);
            }
            process.nextTick = function(fun) {
              var args = new Array(arguments.length - 1);
              if (arguments.length > 1) {
                for (var i2 = 1; i2 < arguments.length; i2++) {
                  args[i2 - 1] = arguments[i2];
                }
              }
              queue.push(new Item(fun, args));
              if (queue.length === 1 && !draining) {
                runTimeout(drainQueue);
              }
            };
            function Item(fun, array) {
              this.fun = fun;
              this.array = array;
            }
            Item.prototype.run = function() {
              this.fun.apply(null, this.array);
            };
            process.title = "browser";
            process.browser = true;
            process.env = {};
            process.argv = [];
            process.version = "";
            process.versions = {};
            function noop() {
            }
            process.on = noop;
            process.addListener = noop;
            process.once = noop;
            process.off = noop;
            process.removeListener = noop;
            process.removeAllListeners = noop;
            process.emit = noop;
            process.prependListener = noop;
            process.prependOnceListener = noop;
            process.listeners = function(name) {
              return [];
            };
            process.binding = function(name) {
              throw new Error("process.binding is not supported");
            };
            process.cwd = function() {
              return "/";
            };
            process.chdir = function(dir) {
              throw new Error("process.chdir is not supported");
            };
            process.umask = function() {
              return 0;
            };
          },
          {}
        ],
        266: [
          function(_dereq_2, module2, exports2) {
            var runtime = function(exports3) {
              "use strict";
              var Op = Object.prototype;
              var hasOwn = Op.hasOwnProperty;
              var undefined2;
              var $Symbol = typeof Symbol === "function" ? Symbol : {};
              var iteratorSymbol = $Symbol.iterator || "@@iterator";
              var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
              var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
              function wrap(innerFn, outerFn, self2, tryLocsList) {
                var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                var generator = Object.create(protoGenerator.prototype);
                var context = new Context(tryLocsList || []);
                generator._invoke = makeInvokeMethod(innerFn, self2, context);
                return generator;
              }
              exports3.wrap = wrap;
              function tryCatch(fn, obj, arg) {
                try {
                  return {
                    type: "normal",
                    arg: fn.call(obj, arg)
                  };
                } catch (err) {
                  return {
                    type: "throw",
                    arg: err
                  };
                }
              }
              var GenStateSuspendedStart = "suspendedStart";
              var GenStateSuspendedYield = "suspendedYield";
              var GenStateExecuting = "executing";
              var GenStateCompleted = "completed";
              var ContinueSentinel = {};
              function Generator() {
              }
              function GeneratorFunction() {
              }
              function GeneratorFunctionPrototype() {
              }
              var IteratorPrototype = {};
              IteratorPrototype[iteratorSymbol] = function() {
                return this;
              };
              var getProto = Object.getPrototypeOf;
              var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
              if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
                IteratorPrototype = NativeIteratorPrototype;
              }
              var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
              GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
              GeneratorFunctionPrototype.constructor = GeneratorFunction;
              GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";
              function defineIteratorMethods(prototype) {
                [
                  "next",
                  "throw",
                  "return"
                ].forEach(function(method) {
                  prototype[method] = function(arg) {
                    return this._invoke(method, arg);
                  };
                });
              }
              exports3.isGeneratorFunction = function(genFun) {
                var ctor = typeof genFun === "function" && genFun.constructor;
                return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
                // do is to check its .name property.
                (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
              };
              exports3.mark = function(genFun) {
                if (Object.setPrototypeOf) {
                  Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                } else {
                  genFun.__proto__ = GeneratorFunctionPrototype;
                  if (!(toStringTagSymbol in genFun)) {
                    genFun[toStringTagSymbol] = "GeneratorFunction";
                  }
                }
                genFun.prototype = Object.create(Gp);
                return genFun;
              };
              exports3.awrap = function(arg) {
                return {
                  __await: arg
                };
              };
              function AsyncIterator(generator) {
                function invoke(method, arg, resolve, reject) {
                  var record = tryCatch(generator[method], generator, arg);
                  if (record.type === "throw") {
                    reject(record.arg);
                  } else {
                    var result = record.arg;
                    var value = result.value;
                    if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
                      return Promise.resolve(value.__await).then(function(value2) {
                        invoke("next", value2, resolve, reject);
                      }, function(err) {
                        invoke("throw", err, resolve, reject);
                      });
                    }
                    return Promise.resolve(value).then(function(unwrapped) {
                      result.value = unwrapped;
                      resolve(result);
                    }, function(error) {
                      return invoke("throw", error, resolve, reject);
                    });
                  }
                }
                var previousPromise;
                function enqueue(method, arg) {
                  function callInvokeWithMethodAndArg() {
                    return new Promise(function(resolve, reject) {
                      invoke(method, arg, resolve, reject);
                    });
                  }
                  return previousPromise = // If enqueue has been called before, then we want to wait until
                  // all previous Promises have been resolved before calling invoke,
                  // so that results are always delivered in the correct order. If
                  // enqueue has not been called before, then it is important to
                  // call invoke immediately, without waiting on a callback to fire,
                  // so that the async generator function has the opportunity to do
                  // any necessary setup in a predictable way. This predictability
                  // is why the Promise constructor synchronously invokes its
                  // executor callback, and why async functions synchronously
                  // execute code before the first await. Since we implement simple
                  // async functions in terms of async generators, it is especially
                  // important to get this right, even though it requires care.
                  previousPromise ? previousPromise.then(
                    callInvokeWithMethodAndArg,
                    // Avoid propagating failures to Promises returned by later
                    // invocations of the iterator.
                    callInvokeWithMethodAndArg
                  ) : callInvokeWithMethodAndArg();
                }
                this._invoke = enqueue;
              }
              defineIteratorMethods(AsyncIterator.prototype);
              AsyncIterator.prototype[asyncIteratorSymbol] = function() {
                return this;
              };
              exports3.AsyncIterator = AsyncIterator;
              exports3.async = function(innerFn, outerFn, self2, tryLocsList) {
                var iter = new AsyncIterator(wrap(innerFn, outerFn, self2, tryLocsList));
                return exports3.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
                  return result.done ? result.value : iter.next();
                });
              };
              function makeInvokeMethod(innerFn, self2, context) {
                var state = GenStateSuspendedStart;
                return function invoke(method, arg) {
                  if (state === GenStateExecuting) {
                    throw new Error("Generator is already running");
                  }
                  if (state === GenStateCompleted) {
                    if (method === "throw") {
                      throw arg;
                    }
                    return doneResult();
                  }
                  context.method = method;
                  context.arg = arg;
                  while (true) {
                    var delegate = context.delegate;
                    if (delegate) {
                      var delegateResult = maybeInvokeDelegate(delegate, context);
                      if (delegateResult) {
                        if (delegateResult === ContinueSentinel)
                          continue;
                        return delegateResult;
                      }
                    }
                    if (context.method === "next") {
                      context.sent = context._sent = context.arg;
                    } else if (context.method === "throw") {
                      if (state === GenStateSuspendedStart) {
                        state = GenStateCompleted;
                        throw context.arg;
                      }
                      context.dispatchException(context.arg);
                    } else if (context.method === "return") {
                      context.abrupt("return", context.arg);
                    }
                    state = GenStateExecuting;
                    var record = tryCatch(innerFn, self2, context);
                    if (record.type === "normal") {
                      state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                      if (record.arg === ContinueSentinel) {
                        continue;
                      }
                      return {
                        value: record.arg,
                        done: context.done
                      };
                    } else if (record.type === "throw") {
                      state = GenStateCompleted;
                      context.method = "throw";
                      context.arg = record.arg;
                    }
                  }
                };
              }
              function maybeInvokeDelegate(delegate, context) {
                var method = delegate.iterator[context.method];
                if (method === undefined2) {
                  context.delegate = null;
                  if (context.method === "throw") {
                    if (delegate.iterator["return"]) {
                      context.method = "return";
                      context.arg = undefined2;
                      maybeInvokeDelegate(delegate, context);
                      if (context.method === "throw") {
                        return ContinueSentinel;
                      }
                    }
                    context.method = "throw";
                    context.arg = new TypeError("The iterator does not provide a 'throw' method");
                  }
                  return ContinueSentinel;
                }
                var record = tryCatch(method, delegate.iterator, context.arg);
                if (record.type === "throw") {
                  context.method = "throw";
                  context.arg = record.arg;
                  context.delegate = null;
                  return ContinueSentinel;
                }
                var info = record.arg;
                if (!info) {
                  context.method = "throw";
                  context.arg = new TypeError("iterator result is not an object");
                  context.delegate = null;
                  return ContinueSentinel;
                }
                if (info.done) {
                  context[delegate.resultName] = info.value;
                  context.next = delegate.nextLoc;
                  if (context.method !== "return") {
                    context.method = "next";
                    context.arg = undefined2;
                  }
                } else {
                  return info;
                }
                context.delegate = null;
                return ContinueSentinel;
              }
              defineIteratorMethods(Gp);
              Gp[toStringTagSymbol] = "Generator";
              Gp[iteratorSymbol] = function() {
                return this;
              };
              Gp.toString = function() {
                return "[object Generator]";
              };
              function pushTryEntry(locs) {
                var entry = {
                  tryLoc: locs[0]
                };
                if (1 in locs) {
                  entry.catchLoc = locs[1];
                }
                if (2 in locs) {
                  entry.finallyLoc = locs[2];
                  entry.afterLoc = locs[3];
                }
                this.tryEntries.push(entry);
              }
              function resetTryEntry(entry) {
                var record = entry.completion || {};
                record.type = "normal";
                delete record.arg;
                entry.completion = record;
              }
              function Context(tryLocsList) {
                this.tryEntries = [
                  {
                    tryLoc: "root"
                  }
                ];
                tryLocsList.forEach(pushTryEntry, this);
                this.reset(true);
              }
              exports3.keys = function(object) {
                var keys = [];
                for (var key2 in object) {
                  keys.push(key2);
                }
                keys.reverse();
                return function next() {
                  while (keys.length) {
                    var key3 = keys.pop();
                    if (key3 in object) {
                      next.value = key3;
                      next.done = false;
                      return next;
                    }
                  }
                  next.done = true;
                  return next;
                };
              };
              function values(iterable) {
                if (iterable) {
                  var iteratorMethod = iterable[iteratorSymbol];
                  if (iteratorMethod) {
                    return iteratorMethod.call(iterable);
                  }
                  if (typeof iterable.next === "function") {
                    return iterable;
                  }
                  if (!isNaN(iterable.length)) {
                    var i2 = -1, next = function next2() {
                      while (++i2 < iterable.length) {
                        if (hasOwn.call(iterable, i2)) {
                          next2.value = iterable[i2];
                          next2.done = false;
                          return next2;
                        }
                      }
                      next2.value = undefined2;
                      next2.done = true;
                      return next2;
                    };
                    return next.next = next;
                  }
                }
                return {
                  next: doneResult
                };
              }
              exports3.values = values;
              function doneResult() {
                return {
                  value: undefined2,
                  done: true
                };
              }
              Context.prototype = {
                constructor: Context,
                reset: function(skipTempReset) {
                  this.prev = 0;
                  this.next = 0;
                  this.sent = this._sent = undefined2;
                  this.done = false;
                  this.delegate = null;
                  this.method = "next";
                  this.arg = undefined2;
                  this.tryEntries.forEach(resetTryEntry);
                  if (!skipTempReset) {
                    for (var name in this) {
                      if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                        this[name] = undefined2;
                      }
                    }
                  }
                },
                stop: function() {
                  this.done = true;
                  var rootEntry = this.tryEntries[0];
                  var rootRecord = rootEntry.completion;
                  if (rootRecord.type === "throw") {
                    throw rootRecord.arg;
                  }
                  return this.rval;
                },
                dispatchException: function(exception) {
                  if (this.done) {
                    throw exception;
                  }
                  var context = this;
                  function handle(loc, caught) {
                    record.type = "throw";
                    record.arg = exception;
                    context.next = loc;
                    if (caught) {
                      context.method = "next";
                      context.arg = undefined2;
                    }
                    return !!caught;
                  }
                  for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
                    var entry = this.tryEntries[i2];
                    var record = entry.completion;
                    if (entry.tryLoc === "root") {
                      return handle("end");
                    }
                    if (entry.tryLoc <= this.prev) {
                      var hasCatch = hasOwn.call(entry, "catchLoc");
                      var hasFinally = hasOwn.call(entry, "finallyLoc");
                      if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) {
                          return handle(entry.catchLoc, true);
                        } else if (this.prev < entry.finallyLoc) {
                          return handle(entry.finallyLoc);
                        }
                      } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) {
                          return handle(entry.catchLoc, true);
                        }
                      } else if (hasFinally) {
                        if (this.prev < entry.finallyLoc) {
                          return handle(entry.finallyLoc);
                        }
                      } else {
                        throw new Error("try statement without catch or finally");
                      }
                    }
                  }
                },
                abrupt: function(type, arg) {
                  for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
                    var entry = this.tryEntries[i2];
                    if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                      var finallyEntry = entry;
                      break;
                    }
                  }
                  if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                    finallyEntry = null;
                  }
                  var record = finallyEntry ? finallyEntry.completion : {};
                  record.type = type;
                  record.arg = arg;
                  if (finallyEntry) {
                    this.method = "next";
                    this.next = finallyEntry.finallyLoc;
                    return ContinueSentinel;
                  }
                  return this.complete(record);
                },
                complete: function(record, afterLoc) {
                  if (record.type === "throw") {
                    throw record.arg;
                  }
                  if (record.type === "break" || record.type === "continue") {
                    this.next = record.arg;
                  } else if (record.type === "return") {
                    this.rval = this.arg = record.arg;
                    this.method = "return";
                    this.next = "end";
                  } else if (record.type === "normal" && afterLoc) {
                    this.next = afterLoc;
                  }
                  return ContinueSentinel;
                },
                finish: function(finallyLoc) {
                  for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
                    var entry = this.tryEntries[i2];
                    if (entry.finallyLoc === finallyLoc) {
                      this.complete(entry.completion, entry.afterLoc);
                      resetTryEntry(entry);
                      return ContinueSentinel;
                    }
                  }
                },
                "catch": function(tryLoc) {
                  for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
                    var entry = this.tryEntries[i2];
                    if (entry.tryLoc === tryLoc) {
                      var record = entry.completion;
                      if (record.type === "throw") {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                      }
                      return thrown;
                    }
                  }
                  throw new Error("illegal catch attempt");
                },
                delegateYield: function(iterable, resultName, nextLoc) {
                  this.delegate = {
                    iterator: values(iterable),
                    resultName,
                    nextLoc
                  };
                  if (this.method === "next") {
                    this.arg = undefined2;
                  }
                  return ContinueSentinel;
                }
              };
              return exports3;
            }(
              // If this script is executing as a CommonJS module, use module.exports
              // as the regeneratorRuntime namespace. Otherwise create a new empty
              // object. Either way, the resulting object will be used to initialize
              // the regeneratorRuntime variable at the top of this file.
              typeof module2 === "object" ? module2.exports : {}
            );
            try {
              regeneratorRuntime = runtime;
            } catch (accidentalStrictMode) {
              Function("r", "regeneratorRuntime = r")(runtime);
            }
          },
          {}
        ],
        267: [
          function(_dereq_2, module2, exports2) {
            (function(self2) {
              "use strict";
              if (self2.fetch) {
                return;
              }
              var support = {
                searchParams: "URLSearchParams" in self2,
                iterable: "Symbol" in self2 && "iterator" in Symbol,
                blob: "FileReader" in self2 && "Blob" in self2 && function() {
                  try {
                    new Blob();
                    return true;
                  } catch (e2) {
                    return false;
                  }
                }(),
                formData: "FormData" in self2,
                arrayBuffer: "ArrayBuffer" in self2
              };
              if (support.arrayBuffer) {
                var viewClasses = [
                  "[object Int8Array]",
                  "[object Uint8Array]",
                  "[object Uint8ClampedArray]",
                  "[object Int16Array]",
                  "[object Uint16Array]",
                  "[object Int32Array]",
                  "[object Uint32Array]",
                  "[object Float32Array]",
                  "[object Float64Array]"
                ];
                var isDataView = function(obj) {
                  return obj && DataView.prototype.isPrototypeOf(obj);
                };
                var isArrayBufferView = ArrayBuffer.isView || function(obj) {
                  return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
                };
              }
              function normalizeName(name) {
                if (typeof name !== "string") {
                  name = String(name);
                }
                if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
                  throw new TypeError("Invalid character in header field name");
                }
                return name.toLowerCase();
              }
              function normalizeValue(value) {
                if (typeof value !== "string") {
                  value = String(value);
                }
                return value;
              }
              function iteratorFor(items) {
                var iterator = {
                  next: function() {
                    var value = items.shift();
                    return {
                      done: value === void 0,
                      value
                    };
                  }
                };
                if (support.iterable) {
                  iterator[Symbol.iterator] = function() {
                    return iterator;
                  };
                }
                return iterator;
              }
              function Headers2(headers) {
                this.map = {};
                if (headers instanceof Headers2) {
                  headers.forEach(function(value, name) {
                    this.append(name, value);
                  }, this);
                } else if (Array.isArray(headers)) {
                  headers.forEach(function(header) {
                    this.append(header[0], header[1]);
                  }, this);
                } else if (headers) {
                  Object.getOwnPropertyNames(headers).forEach(function(name) {
                    this.append(name, headers[name]);
                  }, this);
                }
              }
              Headers2.prototype.append = function(name, value) {
                name = normalizeName(name);
                value = normalizeValue(value);
                var oldValue = this.map[name];
                this.map[name] = oldValue ? oldValue + "," + value : value;
              };
              Headers2.prototype["delete"] = function(name) {
                delete this.map[normalizeName(name)];
              };
              Headers2.prototype.get = function(name) {
                name = normalizeName(name);
                return this.has(name) ? this.map[name] : null;
              };
              Headers2.prototype.has = function(name) {
                return this.map.hasOwnProperty(normalizeName(name));
              };
              Headers2.prototype.set = function(name, value) {
                this.map[normalizeName(name)] = normalizeValue(value);
              };
              Headers2.prototype.forEach = function(callback, thisArg) {
                for (var name in this.map) {
                  if (this.map.hasOwnProperty(name)) {
                    callback.call(thisArg, this.map[name], name, this);
                  }
                }
              };
              Headers2.prototype.keys = function() {
                var items = [];
                this.forEach(function(value, name) {
                  items.push(name);
                });
                return iteratorFor(items);
              };
              Headers2.prototype.values = function() {
                var items = [];
                this.forEach(function(value) {
                  items.push(value);
                });
                return iteratorFor(items);
              };
              Headers2.prototype.entries = function() {
                var items = [];
                this.forEach(function(value, name) {
                  items.push([
                    name,
                    value
                  ]);
                });
                return iteratorFor(items);
              };
              if (support.iterable) {
                Headers2.prototype[Symbol.iterator] = Headers2.prototype.entries;
              }
              function consumed(body) {
                if (body.bodyUsed) {
                  return Promise.reject(new TypeError("Already read"));
                }
                body.bodyUsed = true;
              }
              function fileReaderReady(reader) {
                return new Promise(function(resolve, reject) {
                  reader.onload = function() {
                    resolve(reader.result);
                  };
                  reader.onerror = function() {
                    reject(reader.error);
                  };
                });
              }
              function readBlobAsArrayBuffer(blob) {
                var reader = new FileReader();
                var promise = fileReaderReady(reader);
                reader.readAsArrayBuffer(blob);
                return promise;
              }
              function readBlobAsText(blob) {
                var reader = new FileReader();
                var promise = fileReaderReady(reader);
                reader.readAsText(blob);
                return promise;
              }
              function readArrayBufferAsText(buf) {
                var view = new Uint8Array(buf);
                var chars = new Array(view.length);
                for (var i2 = 0; i2 < view.length; i2++) {
                  chars[i2] = String.fromCharCode(view[i2]);
                }
                return chars.join("");
              }
              function bufferClone(buf) {
                if (buf.slice) {
                  return buf.slice(0);
                } else {
                  var view = new Uint8Array(buf.byteLength);
                  view.set(new Uint8Array(buf));
                  return view.buffer;
                }
              }
              function Body() {
                this.bodyUsed = false;
                this._initBody = function(body) {
                  this._bodyInit = body;
                  if (!body) {
                    this._bodyText = "";
                  } else if (typeof body === "string") {
                    this._bodyText = body;
                  } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                    this._bodyBlob = body;
                  } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                    this._bodyFormData = body;
                  } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                    this._bodyText = body.toString();
                  } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                    this._bodyArrayBuffer = bufferClone(body.buffer);
                    this._bodyInit = new Blob([this._bodyArrayBuffer]);
                  } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
                    this._bodyArrayBuffer = bufferClone(body);
                  } else {
                    throw new Error("unsupported BodyInit type");
                  }
                  if (!this.headers.get("content-type")) {
                    if (typeof body === "string") {
                      this.headers.set("content-type", "text/plain;charset=UTF-8");
                    } else if (this._bodyBlob && this._bodyBlob.type) {
                      this.headers.set("content-type", this._bodyBlob.type);
                    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                      this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
                    }
                  }
                };
                if (support.blob) {
                  this.blob = function() {
                    var rejected = consumed(this);
                    if (rejected) {
                      return rejected;
                    }
                    if (this._bodyBlob) {
                      return Promise.resolve(this._bodyBlob);
                    } else if (this._bodyArrayBuffer) {
                      return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                    } else if (this._bodyFormData) {
                      throw new Error("could not read FormData body as blob");
                    } else {
                      return Promise.resolve(new Blob([this._bodyText]));
                    }
                  };
                  this.arrayBuffer = function() {
                    if (this._bodyArrayBuffer) {
                      return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
                    } else {
                      return this.blob().then(readBlobAsArrayBuffer);
                    }
                  };
                }
                this.text = function() {
                  var rejected = consumed(this);
                  if (rejected) {
                    return rejected;
                  }
                  if (this._bodyBlob) {
                    return readBlobAsText(this._bodyBlob);
                  } else if (this._bodyArrayBuffer) {
                    return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
                  } else if (this._bodyFormData) {
                    throw new Error("could not read FormData body as text");
                  } else {
                    return Promise.resolve(this._bodyText);
                  }
                };
                if (support.formData) {
                  this.formData = function() {
                    return this.text().then(decode);
                  };
                }
                this.json = function() {
                  return this.text().then(JSON.parse);
                };
                return this;
              }
              var methods = [
                "DELETE",
                "GET",
                "HEAD",
                "OPTIONS",
                "POST",
                "PUT"
              ];
              function normalizeMethod(method) {
                var upcased = method.toUpperCase();
                return methods.indexOf(upcased) > -1 ? upcased : method;
              }
              function Request2(input, options) {
                options = options || {};
                var body = options.body;
                if (input instanceof Request2) {
                  if (input.bodyUsed) {
                    throw new TypeError("Already read");
                  }
                  this.url = input.url;
                  this.credentials = input.credentials;
                  if (!options.headers) {
                    this.headers = new Headers2(input.headers);
                  }
                  this.method = input.method;
                  this.mode = input.mode;
                  if (!body && input._bodyInit != null) {
                    body = input._bodyInit;
                    input.bodyUsed = true;
                  }
                } else {
                  this.url = String(input);
                }
                this.credentials = options.credentials || this.credentials || "omit";
                if (options.headers || !this.headers) {
                  this.headers = new Headers2(options.headers);
                }
                this.method = normalizeMethod(options.method || this.method || "GET");
                this.mode = options.mode || this.mode || null;
                this.referrer = null;
                if ((this.method === "GET" || this.method === "HEAD") && body) {
                  throw new TypeError("Body not allowed for GET or HEAD requests");
                }
                this._initBody(body);
              }
              Request2.prototype.clone = function() {
                return new Request2(this, {
                  body: this._bodyInit
                });
              };
              function decode(body) {
                var form = new FormData();
                body.trim().split("&").forEach(function(bytes) {
                  if (bytes) {
                    var split = bytes.split("=");
                    var name = split.shift().replace(/\+/g, " ");
                    var value = split.join("=").replace(/\+/g, " ");
                    form.append(decodeURIComponent(name), decodeURIComponent(value));
                  }
                });
                return form;
              }
              function parseHeaders(rawHeaders) {
                var headers = new Headers2();
                var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
                preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
                  var parts = line.split(":");
                  var key2 = parts.shift().trim();
                  if (key2) {
                    var value = parts.join(":").trim();
                    headers.append(key2, value);
                  }
                });
                return headers;
              }
              Body.call(Request2.prototype);
              function Response(bodyInit, options) {
                if (!options) {
                  options = {};
                }
                this.type = "default";
                this.status = options.status === void 0 ? 200 : options.status;
                this.ok = this.status >= 200 && this.status < 300;
                this.statusText = "statusText" in options ? options.statusText : "OK";
                this.headers = new Headers2(options.headers);
                this.url = options.url || "";
                this._initBody(bodyInit);
              }
              Body.call(Response.prototype);
              Response.prototype.clone = function() {
                return new Response(this._bodyInit, {
                  status: this.status,
                  statusText: this.statusText,
                  headers: new Headers2(this.headers),
                  url: this.url
                });
              };
              Response.error = function() {
                var response = new Response(null, {
                  status: 0,
                  statusText: ""
                });
                response.type = "error";
                return response;
              };
              var redirectStatuses = [
                301,
                302,
                303,
                307,
                308
              ];
              Response.redirect = function(url2, status) {
                if (redirectStatuses.indexOf(status) === -1) {
                  throw new RangeError("Invalid status code");
                }
                return new Response(null, {
                  status,
                  headers: {
                    location: url2
                  }
                });
              };
              self2.Headers = Headers2;
              self2.Request = Request2;
              self2.Response = Response;
              self2.fetch = function(input, init) {
                return new Promise(function(resolve, reject) {
                  var request = new Request2(input, init);
                  var xhr = new XMLHttpRequest();
                  xhr.onload = function() {
                    var options = {
                      status: xhr.status,
                      statusText: xhr.statusText,
                      headers: parseHeaders(xhr.getAllResponseHeaders() || "")
                    };
                    options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
                    var body = "response" in xhr ? xhr.response : xhr.responseText;
                    resolve(new Response(body, options));
                  };
                  xhr.onerror = function() {
                    reject(new TypeError("Network request failed"));
                  };
                  xhr.ontimeout = function() {
                    reject(new TypeError("Network request failed"));
                  };
                  xhr.open(request.method, request.url, true);
                  if (request.credentials === "include") {
                    xhr.withCredentials = true;
                  } else if (request.credentials === "omit") {
                    xhr.withCredentials = false;
                  }
                  if ("responseType" in xhr && support.blob) {
                    xhr.responseType = "blob";
                  }
                  request.headers.forEach(function(value, name) {
                    xhr.setRequestHeader(name, value);
                  });
                  xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
                });
              };
              self2.fetch.polyfill = true;
            })(typeof self !== "undefined" ? self : this);
          },
          {}
        ],
        268: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.function.name");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.function.name");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.split");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var _color_conversion = _interopRequireDefault2(_dereq_2("../color/color_conversion"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            var originalHSB;
            var colorExceptions = [
              {
                h: 0,
                s: 0,
                b: 0.8275,
                name: "gray"
              },
              {
                h: 0,
                s: 0,
                b: 0.8627,
                name: "gray"
              },
              {
                h: 0,
                s: 0,
                b: 0.7529,
                name: "gray"
              },
              {
                h: 0.0167,
                s: 0.1176,
                b: 1,
                name: "light pink"
              }
            ];
            var colorLookUp = [
              {
                h: 0,
                s: 0,
                b: 0,
                name: "black"
              },
              {
                h: 0,
                s: 0,
                b: 0.5,
                name: "gray"
              },
              {
                h: 0,
                s: 0,
                b: 1,
                name: "white"
              },
              {
                h: 0,
                s: 0.5,
                b: 0.5,
                name: "dark maroon"
              },
              {
                h: 0,
                s: 0.5,
                b: 1,
                name: "salmon pink"
              },
              {
                h: 0,
                s: 1,
                b: 0,
                name: "black"
              },
              {
                h: 0,
                s: 1,
                b: 0.5,
                name: "dark red"
              },
              {
                h: 0,
                s: 1,
                b: 1,
                name: "red"
              },
              {
                h: 5,
                s: 0,
                b: 1,
                name: "very light peach"
              },
              {
                h: 5,
                s: 0.5,
                b: 0.5,
                name: "brown"
              },
              {
                h: 5,
                s: 0.5,
                b: 1,
                name: "peach"
              },
              {
                h: 5,
                s: 1,
                b: 0.5,
                name: "brick red"
              },
              {
                h: 5,
                s: 1,
                b: 1,
                name: "crimson"
              },
              {
                h: 10,
                s: 0,
                b: 1,
                name: "light peach"
              },
              {
                h: 10,
                s: 0.5,
                b: 0.5,
                name: "brown"
              },
              {
                h: 10,
                s: 0.5,
                b: 1,
                name: "light orange"
              },
              {
                h: 10,
                s: 1,
                b: 0.5,
                name: "brown"
              },
              {
                h: 10,
                s: 1,
                b: 1,
                name: "orange"
              },
              {
                h: 15,
                s: 0,
                b: 1,
                name: "very light yellow"
              },
              {
                h: 15,
                s: 0.5,
                b: 0.5,
                name: "olive green"
              },
              {
                h: 15,
                s: 0.5,
                b: 1,
                name: "light yellow"
              },
              {
                h: 15,
                s: 1,
                b: 0,
                name: "dark olive green"
              },
              {
                h: 15,
                s: 1,
                b: 0.5,
                name: "olive green"
              },
              {
                h: 15,
                s: 1,
                b: 1,
                name: "yellow"
              },
              {
                h: 20,
                s: 0,
                b: 1,
                name: "very light yellow"
              },
              {
                h: 20,
                s: 0.5,
                b: 0.5,
                name: "olive green"
              },
              {
                h: 20,
                s: 0.5,
                b: 1,
                name: "light yellow green"
              },
              {
                h: 20,
                s: 1,
                b: 0,
                name: "dark olive green"
              },
              {
                h: 20,
                s: 1,
                b: 0.5,
                name: "dark yellow green"
              },
              {
                h: 20,
                s: 1,
                b: 1,
                name: "yellow green"
              },
              {
                h: 25,
                s: 0.5,
                b: 0.5,
                name: "dark yellow green"
              },
              {
                h: 25,
                s: 0.5,
                b: 1,
                name: "light green"
              },
              {
                h: 25,
                s: 1,
                b: 0.5,
                name: "dark green"
              },
              {
                h: 25,
                s: 1,
                b: 1,
                name: "green"
              },
              {
                h: 30,
                s: 0.5,
                b: 1,
                name: "light green"
              },
              {
                h: 30,
                s: 1,
                b: 0.5,
                name: "dark green"
              },
              {
                h: 30,
                s: 1,
                b: 1,
                name: "green"
              },
              {
                h: 35,
                s: 0,
                b: 0.5,
                name: "light green"
              },
              {
                h: 35,
                s: 0,
                b: 1,
                name: "very light green"
              },
              {
                h: 35,
                s: 0.5,
                b: 0.5,
                name: "dark green"
              },
              {
                h: 35,
                s: 0.5,
                b: 1,
                name: "light green"
              },
              {
                h: 35,
                s: 1,
                b: 0,
                name: "very dark green"
              },
              {
                h: 35,
                s: 1,
                b: 0.5,
                name: "dark green"
              },
              {
                h: 35,
                s: 1,
                b: 1,
                name: "green"
              },
              {
                h: 40,
                s: 0,
                b: 1,
                name: "very light green"
              },
              {
                h: 40,
                s: 0.5,
                b: 0.5,
                name: "dark green"
              },
              {
                h: 40,
                s: 0.5,
                b: 1,
                name: "light green"
              },
              {
                h: 40,
                s: 1,
                b: 0.5,
                name: "dark green"
              },
              {
                h: 40,
                s: 1,
                b: 1,
                name: "green"
              },
              {
                h: 45,
                s: 0.5,
                b: 1,
                name: "light turquoise"
              },
              {
                h: 45,
                s: 1,
                b: 0.5,
                name: "dark turquoise"
              },
              {
                h: 45,
                s: 1,
                b: 1,
                name: "turquoise"
              },
              {
                h: 50,
                s: 0,
                b: 1,
                name: "light sky blue"
              },
              {
                h: 50,
                s: 0.5,
                b: 0.5,
                name: "dark cyan"
              },
              {
                h: 50,
                s: 0.5,
                b: 1,
                name: "light cyan"
              },
              {
                h: 50,
                s: 1,
                b: 0.5,
                name: "dark cyan"
              },
              {
                h: 50,
                s: 1,
                b: 1,
                name: "cyan"
              },
              {
                h: 55,
                s: 0,
                b: 1,
                name: "light sky blue"
              },
              {
                h: 55,
                s: 0.5,
                b: 1,
                name: "light sky blue"
              },
              {
                h: 55,
                s: 1,
                b: 0.5,
                name: "dark blue"
              },
              {
                h: 55,
                s: 1,
                b: 1,
                name: "sky blue"
              },
              {
                h: 60,
                s: 0,
                b: 0.5,
                name: "gray"
              },
              {
                h: 60,
                s: 0,
                b: 1,
                name: "very light blue"
              },
              {
                h: 60,
                s: 0.5,
                b: 0.5,
                name: "blue"
              },
              {
                h: 60,
                s: 0.5,
                b: 1,
                name: "light blue"
              },
              {
                h: 60,
                s: 1,
                b: 0.5,
                name: "navy blue"
              },
              {
                h: 60,
                s: 1,
                b: 1,
                name: "blue"
              },
              {
                h: 65,
                s: 0,
                b: 1,
                name: "lavender"
              },
              {
                h: 65,
                s: 0.5,
                b: 0.5,
                name: "navy blue"
              },
              {
                h: 65,
                s: 0.5,
                b: 1,
                name: "light purple"
              },
              {
                h: 65,
                s: 1,
                b: 0.5,
                name: "dark navy blue"
              },
              {
                h: 65,
                s: 1,
                b: 1,
                name: "blue"
              },
              {
                h: 70,
                s: 0,
                b: 1,
                name: "lavender"
              },
              {
                h: 70,
                s: 0.5,
                b: 0.5,
                name: "navy blue"
              },
              {
                h: 70,
                s: 0.5,
                b: 1,
                name: "lavender blue"
              },
              {
                h: 70,
                s: 1,
                b: 0.5,
                name: "dark navy blue"
              },
              {
                h: 70,
                s: 1,
                b: 1,
                name: "blue"
              },
              {
                h: 75,
                s: 0.5,
                b: 1,
                name: "lavender"
              },
              {
                h: 75,
                s: 1,
                b: 0.5,
                name: "dark purple"
              },
              {
                h: 75,
                s: 1,
                b: 1,
                name: "purple"
              },
              {
                h: 80,
                s: 0.5,
                b: 1,
                name: "pinkish purple"
              },
              {
                h: 80,
                s: 1,
                b: 0.5,
                name: "dark purple"
              },
              {
                h: 80,
                s: 1,
                b: 1,
                name: "purple"
              },
              {
                h: 85,
                s: 0,
                b: 1,
                name: "light pink"
              },
              {
                h: 85,
                s: 0.5,
                b: 0.5,
                name: "purple"
              },
              {
                h: 85,
                s: 0.5,
                b: 1,
                name: "light fuchsia"
              },
              {
                h: 85,
                s: 1,
                b: 0.5,
                name: "dark fuchsia"
              },
              {
                h: 85,
                s: 1,
                b: 1,
                name: "fuchsia"
              },
              {
                h: 90,
                s: 0.5,
                b: 0.5,
                name: "dark fuchsia"
              },
              {
                h: 90,
                s: 0.5,
                b: 1,
                name: "hot pink"
              },
              {
                h: 90,
                s: 1,
                b: 0.5,
                name: "dark fuchsia"
              },
              {
                h: 90,
                s: 1,
                b: 1,
                name: "fuchsia"
              },
              {
                h: 95,
                s: 0,
                b: 1,
                name: "pink"
              },
              {
                h: 95,
                s: 0.5,
                b: 1,
                name: "light pink"
              },
              {
                h: 95,
                s: 1,
                b: 0.5,
                name: "dark magenta"
              },
              {
                h: 95,
                s: 1,
                b: 1,
                name: "magenta"
              }
            ];
            function _calculateColor(hsb) {
              var colortext;
              if (hsb[0] !== 0) {
                hsb[0] = Math.round(hsb[0] * 100);
                var hue = hsb[0].toString().split("");
                var last = hue.length - 1;
                hue[last] = parseInt(hue[last]);
                if (hue[last] < 2.5) {
                  hue[last] = 0;
                } else if (hue[last] >= 2.5 && hue[last] < 7.5) {
                  hue[last] = 5;
                }
                if (hue.length === 2) {
                  hue[0] = parseInt(hue[0]);
                  if (hue[last] >= 7.5) {
                    hue[last] = 0;
                    hue[0] = hue[0] + 1;
                  }
                  hsb[0] = hue[0] * 10 + hue[1];
                } else {
                  if (hue[last] >= 7.5) {
                    hsb[0] = 10;
                  } else {
                    hsb[0] = hue[last];
                  }
                }
              }
              hsb[2] = hsb[2] / 255;
              for (var i2 = hsb.length - 1; i2 >= 1; i2--) {
                if (hsb[i2] <= 0.25) {
                  hsb[i2] = 0;
                } else if (hsb[i2] > 0.25 && hsb[i2] < 0.75) {
                  hsb[i2] = 0.5;
                } else {
                  hsb[i2] = 1;
                }
              }
              if (hsb[0] === 0 && hsb[1] === 0 && hsb[2] === 1) {
                for (var _i = 2; _i >= 0; _i--) {
                  originalHSB[_i] = Math.round(originalHSB[_i] * 1e4) / 1e4;
                }
                for (var e2 = 0; e2 < colorExceptions.length; e2++) {
                  if (colorExceptions[e2].h === originalHSB[0] && colorExceptions[e2].s === originalHSB[1] && colorExceptions[e2].b === originalHSB[2]) {
                    colortext = colorExceptions[e2].name;
                    break;
                  } else {
                    colortext = "white";
                  }
                }
              } else {
                for (var _i2 = 0; _i2 < colorLookUp.length; _i2++) {
                  if (colorLookUp[_i2].h === hsb[0] && colorLookUp[_i2].s === hsb[1] && colorLookUp[_i2].b === hsb[2]) {
                    colortext = colorLookUp[_i2].name;
                    break;
                  }
                }
              }
              return colortext;
            }
            _main2.default.prototype._rgbColorName = function(arg) {
              var hsb = _color_conversion.default._rgbaToHSBA(arg);
              originalHSB = hsb;
              return _calculateColor([
                hsb[0],
                hsb[1],
                hsb[2]
              ]);
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../color/color_conversion": 274,
            "../core/main": 290,
            "core-js/modules/es.function.name": 183,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.string.split": 209
          }
        ],
        269: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.string.ends-with");
            _dereq_2("core-js/modules/es.string.replace");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.string.ends-with");
            _dereq_2("core-js/modules/es.string.replace");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            var descContainer = "_Description";
            var fallbackDescId = "_fallbackDesc";
            var fallbackTableId = "_fallbackTable";
            var fallbackTableElId = "_fte_";
            var labelContainer = "_Label";
            var labelDescId = "_labelDesc";
            var labelTableId = "_labelTable";
            var labelTableElId = "_lte_";
            _main2.default.prototype.describe = function(text, display) {
              _main2.default._validateParameters("describe", arguments);
              if (typeof text !== "string") {
                return;
              }
              var cnvId = this.canvas.id;
              text = _descriptionText(text);
              if (!this.dummyDOM) {
                this.dummyDOM = document.getElementById(cnvId).parentNode;
              }
              if (!this.descriptions) {
                this.descriptions = {};
              }
              if (this.descriptions.fallback) {
                if (this.descriptions.fallback.innerHTML !== text) {
                  this.descriptions.fallback.innerHTML = text;
                }
              } else {
                this._describeHTML("fallback", text);
              }
              if (display === this.LABEL) {
                if (this.descriptions.label) {
                  if (this.descriptions.label.innerHTML !== text) {
                    this.descriptions.label.innerHTML = text;
                  }
                } else {
                  this._describeHTML("label", text);
                }
              }
            };
            _main2.default.prototype.describeElement = function(name, text, display) {
              _main2.default._validateParameters("describeElement", arguments);
              if (typeof text !== "string" || typeof name !== "string") {
                return;
              }
              var cnvId = this.canvas.id;
              text = _descriptionText(text);
              var elementName = _elementName(name);
              name = name.replace(/[^a-zA-Z0-9]/g, "");
              var inner = '<th scope="row">'.concat(elementName, "</th><td>").concat(text, "</td>");
              if (!this.dummyDOM) {
                this.dummyDOM = document.getElementById(cnvId).parentNode;
              }
              if (!this.descriptions) {
                this.descriptions = {
                  fallbackElements: {}
                };
              } else if (!this.descriptions.fallbackElements) {
                this.descriptions.fallbackElements = {};
              }
              if (this.descriptions.fallbackElements[name]) {
                if (this.descriptions.fallbackElements[name].innerHTML !== inner) {
                  this.descriptions.fallbackElements[name].innerHTML = inner;
                }
              } else {
                this._describeElementHTML("fallback", name, inner);
              }
              if (display === this.LABEL) {
                if (!this.descriptions.labelElements) {
                  this.descriptions.labelElements = {};
                }
                if (this.descriptions.labelElements[name]) {
                  if (this.descriptions.labelElements[name].innerHTML !== inner) {
                    this.descriptions.labelElements[name].innerHTML = inner;
                  }
                } else {
                  this._describeElementHTML("label", name, inner);
                }
              }
            };
            function _descriptionText(text) {
              if (text === "label" || text === "fallback") {
                throw new Error("description should not be LABEL or FALLBACK");
              }
              if (!text.endsWith(".") && !text.endsWith(";") && !text.endsWith(",") && !text.endsWith("?") && !text.endsWith("!")) {
                text = text + ".";
              }
              return text;
            }
            _main2.default.prototype._describeHTML = function(type, text) {
              var cnvId = this.canvas.id;
              if (type === "fallback") {
                if (!this.dummyDOM.querySelector("#".concat(cnvId + descContainer))) {
                  var html = '<div id="'.concat(cnvId).concat(descContainer, '" role="region" aria-label="Canvas Description"><p id="').concat(cnvId).concat(fallbackDescId, '"></p></div>');
                  if (!this.dummyDOM.querySelector("#".concat(cnvId, "accessibleOutput"))) {
                    this.dummyDOM.querySelector("#".concat(cnvId)).innerHTML = html;
                  } else {
                    this.dummyDOM.querySelector("#".concat(cnvId, "accessibleOutput")).insertAdjacentHTML("beforebegin", html);
                  }
                } else {
                  this.dummyDOM.querySelector("#" + cnvId + fallbackTableId).insertAdjacentHTML("beforebegin", '<p id="'.concat(cnvId + fallbackDescId, '"></p>'));
                }
                this.descriptions.fallback = this.dummyDOM.querySelector("#".concat(cnvId).concat(fallbackDescId));
                this.descriptions.fallback.innerHTML = text;
                return;
              } else if (type === "label") {
                if (!this.dummyDOM.querySelector("#".concat(cnvId + labelContainer))) {
                  var _html = '<div id="'.concat(cnvId).concat(labelContainer, '" class="p5Label"><p id="').concat(cnvId).concat(labelDescId, '"></p></div>');
                  if (!this.dummyDOM.querySelector("#".concat(cnvId, "accessibleOutputLabel"))) {
                    this.dummyDOM.querySelector("#" + cnvId).insertAdjacentHTML("afterend", _html);
                  } else {
                    this.dummyDOM.querySelector("#".concat(cnvId, "accessibleOutputLabel")).insertAdjacentHTML("beforebegin", _html);
                  }
                } else if (this.dummyDOM.querySelector("#".concat(cnvId + labelTableId))) {
                  this.dummyDOM.querySelector("#".concat(cnvId + labelTableId)).insertAdjacentHTML("beforebegin", '<p id="'.concat(cnvId).concat(labelDescId, '"></p>'));
                }
                this.descriptions.label = this.dummyDOM.querySelector("#" + cnvId + labelDescId);
                this.descriptions.label.innerHTML = text;
                return;
              }
            };
            function _elementName(name) {
              if (name === "label" || name === "fallback") {
                throw new Error("element name should not be LABEL or FALLBACK");
              }
              if (name.endsWith(".") || name.endsWith(";") || name.endsWith(",")) {
                name = name.replace(/.$/, ":");
              } else if (!name.endsWith(":")) {
                name = name + ":";
              }
              return name;
            }
            _main2.default.prototype._describeElementHTML = function(type, name, text) {
              var cnvId = this.canvas.id;
              if (type === "fallback") {
                if (!this.dummyDOM.querySelector("#".concat(cnvId + descContainer))) {
                  var html = '<div id="'.concat(cnvId).concat(descContainer, '" role="region" aria-label="Canvas Description"><table id="').concat(cnvId).concat(fallbackTableId, '"><caption>Canvas elements and their descriptions</caption></table></div>');
                  if (!this.dummyDOM.querySelector("#".concat(cnvId, "accessibleOutput"))) {
                    this.dummyDOM.querySelector("#" + cnvId).innerHTML = html;
                  } else {
                    this.dummyDOM.querySelector("#".concat(cnvId, "accessibleOutput")).insertAdjacentHTML("beforebegin", html);
                  }
                } else if (!this.dummyDOM.querySelector("#" + cnvId + fallbackTableId)) {
                  this.dummyDOM.querySelector("#" + cnvId + fallbackDescId).insertAdjacentHTML("afterend", '<table id="'.concat(cnvId).concat(fallbackTableId, '"><caption>Canvas elements and their descriptions</caption></table>'));
                }
                var tableRow = document.createElement("tr");
                tableRow.id = cnvId + fallbackTableElId + name;
                this.dummyDOM.querySelector("#" + cnvId + fallbackTableId).appendChild(tableRow);
                this.descriptions.fallbackElements[name] = this.dummyDOM.querySelector("#".concat(cnvId).concat(fallbackTableElId).concat(name));
                this.descriptions.fallbackElements[name].innerHTML = text;
                return;
              } else if (type === "label") {
                if (!this.dummyDOM.querySelector("#".concat(cnvId + labelContainer))) {
                  var _html2 = '<div id="'.concat(cnvId).concat(labelContainer, '" class="p5Label"><table id="').concat(cnvId).concat(labelTableId, '"></table></div>');
                  if (!this.dummyDOM.querySelector("#".concat(cnvId, "accessibleOutputLabel"))) {
                    this.dummyDOM.querySelector("#" + cnvId).insertAdjacentHTML("afterend", _html2);
                  } else {
                    this.dummyDOM.querySelector("#".concat(cnvId, "accessibleOutputLabel")).insertAdjacentHTML("beforebegin", _html2);
                  }
                } else if (!this.dummyDOM.querySelector("#".concat(cnvId + labelTableId))) {
                  this.dummyDOM.querySelector("#" + cnvId + labelDescId).insertAdjacentHTML("afterend", '<table id="'.concat(cnvId + labelTableId, '"></table>'));
                }
                var _tableRow = document.createElement("tr");
                _tableRow.id = cnvId + labelTableElId + name;
                this.dummyDOM.querySelector("#" + cnvId + labelTableId).appendChild(_tableRow);
                this.descriptions.labelElements[name] = this.dummyDOM.querySelector("#".concat(cnvId).concat(labelTableElId).concat(name));
                this.descriptions.labelElements[name].innerHTML = text;
              }
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "core-js/modules/es.array.concat": 167,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.string.ends-with": 202,
            "core-js/modules/es.string.replace": 207
          }
        ],
        270: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.map");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype._updateGridOutput = function(idT) {
              if (!this.dummyDOM.querySelector("#".concat(idT, "_summary"))) {
                return;
              }
              var current = this._accessibleOutputs[idT];
              var innerShapeDetails = _gridShapeDetails(idT, this.ingredients.shapes);
              var innerSummary = _gridSummary(innerShapeDetails.numShapes, this.ingredients.colors.background, this.width, this.height);
              var innerMap = _gridMap(idT, this.ingredients.shapes);
              if (innerSummary !== current.summary.innerHTML) {
                current.summary.innerHTML = innerSummary;
              }
              if (innerMap !== current.map.innerHTML) {
                current.map.innerHTML = innerMap;
              }
              if (innerShapeDetails.details !== current.shapeDetails.innerHTML) {
                current.shapeDetails.innerHTML = innerShapeDetails.details;
              }
              this._accessibleOutputs[idT] = current;
            };
            function _gridMap(idT, ingredients) {
              var shapeNumber = 0;
              var table = "";
              var cells = Array.apply(null, Array(10)).map(function() {
              });
              for (var r in cells) {
                cells[r] = Array.apply(null, Array(10)).map(function() {
                });
              }
              for (var x in ingredients) {
                for (var y in ingredients[x]) {
                  var fill = void 0;
                  if (x !== "line") {
                    fill = '<a href="#'.concat(idT, "shape").concat(shapeNumber, '">').concat(ingredients[x][y].color, " ").concat(x, "</a>");
                  } else {
                    fill = '<a href="#'.concat(idT, "shape").concat(shapeNumber, '">').concat(ingredients[x][y].color, " ").concat(x, " midpoint</a>");
                  }
                  if (!cells[ingredients[x][y].loc.locY][ingredients[x][y].loc.locX]) {
                    cells[ingredients[x][y].loc.locY][ingredients[x][y].loc.locX] = fill;
                  } else {
                    cells[ingredients[x][y].loc.locY][ingredients[x][y].loc.locX] = cells[ingredients[x][y].loc.locY][ingredients[x][y].loc.locX] + "  " + fill;
                  }
                  shapeNumber++;
                }
              }
              for (var _r in cells) {
                var row = "<tr>";
                for (var c in cells[_r]) {
                  row = row + "<td>";
                  if (cells[_r][c] !== void 0) {
                    row = row + cells[_r][c];
                  }
                  row = row + "</td>";
                }
                table = table + row + "</tr>";
              }
              return table;
            }
            function _gridSummary(numShapes, background, width2, height2) {
              var text = "".concat(background, " canvas, ").concat(width2, " by ").concat(height2, " pixels, contains ").concat(numShapes[0]);
              if (numShapes[0] === 1) {
                text = "".concat(text, " shape: ").concat(numShapes[1]);
              } else {
                text = "".concat(text, " shapes: ").concat(numShapes[1]);
              }
              return text;
            }
            function _gridShapeDetails(idT, ingredients) {
              var shapeDetails = "";
              var shapes = "";
              var totalShapes = 0;
              for (var x in ingredients) {
                var shapeNum = 0;
                for (var y in ingredients[x]) {
                  var line = '<li id="'.concat(idT, "shape").concat(totalShapes, '">').concat(ingredients[x][y].color, " ").concat(x, ",");
                  if (x === "line") {
                    line = line + " location = ".concat(ingredients[x][y].pos, ", length = ").concat(ingredients[x][y].length, " pixels");
                  } else {
                    line = line + " location = ".concat(ingredients[x][y].pos);
                    if (x !== "point") {
                      line = line + ", area = ".concat(ingredients[x][y].area, " %");
                    }
                    line = line + "</li>";
                  }
                  shapeDetails = shapeDetails + line;
                  shapeNum++;
                  totalShapes++;
                }
                if (shapeNum > 1) {
                  shapes = "".concat(shapes, " ").concat(shapeNum, " ").concat(x, "s");
                } else {
                  shapes = "".concat(shapes, " ").concat(shapeNum, " ").concat(x);
                }
              }
              return {
                numShapes: [
                  totalShapes,
                  shapes
                ],
                details: shapeDetails
              };
            }
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "core-js/modules/es.array.concat": 167,
            "core-js/modules/es.array.map": 179
          }
        ],
        271: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.fill");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.number.to-fixed");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.fill");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.number.to-fixed");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.textOutput = function(display) {
              _main2.default._validateParameters("textOutput", arguments);
              if (this._accessibleOutputs.text) {
                return;
              } else {
                this._accessibleOutputs.text = true;
                this._createOutput("textOutput", "Fallback");
                if (display === this.LABEL) {
                  this._accessibleOutputs.textLabel = true;
                  this._createOutput("textOutput", "Label");
                }
              }
            };
            _main2.default.prototype.gridOutput = function(display) {
              _main2.default._validateParameters("gridOutput", arguments);
              if (this._accessibleOutputs.grid) {
                return;
              } else {
                this._accessibleOutputs.grid = true;
                this._createOutput("gridOutput", "Fallback");
                if (display === this.LABEL) {
                  this._accessibleOutputs.gridLabel = true;
                  this._createOutput("gridOutput", "Label");
                }
              }
            };
            _main2.default.prototype._addAccsOutput = function() {
              if (!this._accessibleOutputs) {
                this._accessibleOutputs = {
                  text: false,
                  grid: false,
                  textLabel: false,
                  gridLabel: false
                };
              }
              return this._accessibleOutputs.grid || this._accessibleOutputs.text;
            };
            _main2.default.prototype._createOutput = function(type, display) {
              var cnvId = this.canvas.id;
              if (!this.ingredients) {
                this.ingredients = {
                  shapes: {},
                  colors: {
                    background: "white",
                    fill: "white",
                    stroke: "black"
                  },
                  pShapes: ""
                };
              }
              if (!this.dummyDOM) {
                this.dummyDOM = document.getElementById(cnvId).parentNode;
              }
              var cIdT, container, inner;
              var query = "";
              if (display === "Fallback") {
                cIdT = cnvId + type;
                container = cnvId + "accessibleOutput";
                if (!this.dummyDOM.querySelector("#".concat(container))) {
                  if (!this.dummyDOM.querySelector("#".concat(cnvId, "_Description"))) {
                    this.dummyDOM.querySelector("#".concat(cnvId)).innerHTML = '<div id="'.concat(container, '" role="region" aria-label="Canvas Outputs"></div>');
                  } else {
                    this.dummyDOM.querySelector("#".concat(cnvId, "_Description")).insertAdjacentHTML("afterend", '<div id="'.concat(container, '" role="region" aria-label="Canvas Outputs"></div>'));
                  }
                }
              } else if (display === "Label") {
                query = display;
                cIdT = cnvId + type + display;
                container = cnvId + "accessibleOutput" + display;
                if (!this.dummyDOM.querySelector("#".concat(container))) {
                  if (!this.dummyDOM.querySelector("#".concat(cnvId, "_Label"))) {
                    this.dummyDOM.querySelector("#".concat(cnvId)).insertAdjacentHTML("afterend", '<div id="'.concat(container, '"></div>'));
                  } else {
                    this.dummyDOM.querySelector("#".concat(cnvId, "_Label")).insertAdjacentHTML("afterend", '<div id="'.concat(container, '"></div>'));
                  }
                }
              }
              this._accessibleOutputs[cIdT] = {};
              if (type === "textOutput") {
                query = "#".concat(cnvId, "gridOutput").concat(query);
                inner = '<div id="'.concat(cIdT, '">Text Output<div id="').concat(cIdT, 'Summary" aria-label="text output summary"><p id="').concat(cIdT, '_summary"></p><ul id="').concat(cIdT, '_list"></ul></div><table id="').concat(cIdT, '_shapeDetails" summary="text output shape details"></table></div>');
                if (this.dummyDOM.querySelector(query)) {
                  this.dummyDOM.querySelector(query).insertAdjacentHTML("beforebegin", inner);
                } else {
                  this.dummyDOM.querySelector("#".concat(container)).innerHTML = inner;
                }
                this._accessibleOutputs[cIdT].list = this.dummyDOM.querySelector("#".concat(cIdT, "_list"));
              } else if (type === "gridOutput") {
                query = "#".concat(cnvId, "textOutput").concat(query);
                inner = '<div id="'.concat(cIdT, '">Grid Output<p id="').concat(cIdT, '_summary" aria-label="grid output summary"><table id="').concat(cIdT, '_map" summary="grid output content"></table><ul id="').concat(cIdT, '_shapeDetails" aria-label="grid output shape details"></ul></div>');
                if (this.dummyDOM.querySelector(query)) {
                  this.dummyDOM.querySelector(query).insertAdjacentHTML("afterend", inner);
                } else {
                  this.dummyDOM.querySelector("#".concat(container)).innerHTML = inner;
                }
                this._accessibleOutputs[cIdT].map = this.dummyDOM.querySelector("#".concat(cIdT, "_map"));
              }
              this._accessibleOutputs[cIdT].shapeDetails = this.dummyDOM.querySelector("#".concat(cIdT, "_shapeDetails"));
              this._accessibleOutputs[cIdT].summary = this.dummyDOM.querySelector("#".concat(cIdT, "_summary"));
            };
            _main2.default.prototype._updateAccsOutput = function() {
              var cnvId = this.canvas.id;
              if (JSON.stringify(this.ingredients.shapes) !== this.ingredients.pShapes) {
                this.ingredients.pShapes = JSON.stringify(this.ingredients.shapes);
                if (this._accessibleOutputs.text) {
                  this._updateTextOutput(cnvId + "textOutput");
                }
                if (this._accessibleOutputs.grid) {
                  this._updateGridOutput(cnvId + "gridOutput");
                }
                if (this._accessibleOutputs.textLabel) {
                  this._updateTextOutput(cnvId + "textOutputLabel");
                }
                if (this._accessibleOutputs.gridLabel) {
                  this._updateGridOutput(cnvId + "gridOutputLabel");
                }
              }
            };
            _main2.default.prototype._accsBackground = function(args) {
              this.ingredients.pShapes = JSON.stringify(this.ingredients.shapes);
              this.ingredients.shapes = {};
              if (this.ingredients.colors.backgroundRGBA !== args) {
                this.ingredients.colors.backgroundRGBA = args;
                this.ingredients.colors.background = this._rgbColorName(args);
              }
            };
            _main2.default.prototype._accsCanvasColors = function(f, args) {
              if (f === "fill") {
                if (this.ingredients.colors.fillRGBA !== args) {
                  this.ingredients.colors.fillRGBA = args;
                  this.ingredients.colors.fill = this._rgbColorName(args);
                }
              } else if (f === "stroke") {
                if (this.ingredients.colors.strokeRGBA !== args) {
                  this.ingredients.colors.strokeRGBA = args;
                  this.ingredients.colors.stroke = this._rgbColorName(args);
                }
              }
            };
            _main2.default.prototype._accsOutput = function(f, args) {
              if (f === "ellipse" && args[2] === args[3]) {
                f = "circle";
              } else if (f === "rectangle" && args[2] === args[3]) {
                f = "square";
              }
              var include = {};
              var add = true;
              var middle = _getMiddle(f, args);
              if (f === "line") {
                include.color = this.ingredients.colors.stroke;
                include.length = Math.round(this.dist(args[0], args[1], args[2], args[3]));
                var p1 = _getPos([
                  args[0],
                  [
                    1
                  ]
                ], this.width, this.height);
                var p2 = _getPos([
                  args[2],
                  [
                    3
                  ]
                ], this.width, this.height);
                include.loc = _canvasLocator(middle, this.width, this.height);
                if (p1 === p2) {
                  include.pos = "at ".concat(p1);
                } else {
                  include.pos = "from ".concat(p1, " to ").concat(p2);
                }
              } else {
                if (f === "point") {
                  include.color = this.ingredients.colors.stroke;
                } else {
                  include.color = this.ingredients.colors.fill;
                  include.area = _getArea(f, args, this.width, this.height);
                }
                include.pos = _getPos(middle, this.width, this.height);
                include.loc = _canvasLocator(middle, this.width, this.height);
              }
              if (!this.ingredients.shapes[f]) {
                this.ingredients.shapes[f] = [
                  include
                ];
              } else if (this.ingredients.shapes[f] !== [include]) {
                for (var y in this.ingredients.shapes[f]) {
                  if (JSON.stringify(this.ingredients.shapes[f][y]) === JSON.stringify(include)) {
                    add = false;
                  }
                }
                if (add === true) {
                  this.ingredients.shapes[f].push(include);
                }
              }
            };
            function _getMiddle(f, args) {
              var x, y;
              if (f === "rectangle" || f === "ellipse" || f === "arc" || f === "circle" || f === "square") {
                x = Math.round(args[0] + args[2] / 2);
                y = Math.round(args[1] + args[3] / 2);
              } else if (f === "triangle") {
                x = (args[0] + args[2] + args[4]) / 3;
                y = (args[1] + args[3] + args[5]) / 3;
              } else if (f === "quadrilateral") {
                x = (args[0] + args[2] + args[4] + args[6]) / 4;
                y = (args[1] + args[3] + args[5] + args[7]) / 4;
              } else if (f === "line") {
                x = (args[0] + args[2]) / 2;
                y = (args[1] + args[3]) / 2;
              } else {
                x = args[0];
                y = args[1];
              }
              return [
                x,
                y
              ];
            }
            function _getPos(args, canvasWidth, canvasHeight) {
              if (args[0] < 0.4 * canvasWidth) {
                if (args[1] < 0.4 * canvasHeight) {
                  return "top left";
                } else if (args[1] > 0.6 * canvasHeight) {
                  return "bottom left";
                } else {
                  return "mid left";
                }
              } else if (args[0] > 0.6 * canvasWidth) {
                if (args[1] < 0.4 * canvasHeight) {
                  return "top right";
                } else if (args[1] > 0.6 * canvasHeight) {
                  return "bottom right";
                } else {
                  return "mid right";
                }
              } else {
                if (args[1] < 0.4 * canvasHeight) {
                  return "top middle";
                } else if (args[1] > 0.6 * canvasHeight) {
                  return "bottom middle";
                } else {
                  return "middle";
                }
              }
            }
            function _canvasLocator(args, canvasWidth, canvasHeight) {
              var noRows = 10;
              var noCols = 10;
              var locX = Math.floor(args[0] / canvasWidth * noRows);
              var locY = Math.floor(args[1] / canvasHeight * noCols);
              if (locX === noRows) {
                locX = locX - 1;
              }
              if (locY === noCols) {
                locY = locY - 1;
              }
              return {
                locX,
                locY
              };
            }
            function _getArea(objectType, shapeArgs, canvasWidth, canvasHeight) {
              var objectArea = 0;
              if (objectType === "arc") {
                var arcSizeInRadians = ((shapeArgs[5] - shapeArgs[4]) % (Math.PI * 2) + Math.PI * 2) % (Math.PI * 2);
                objectArea = arcSizeInRadians * shapeArgs[2] * shapeArgs[3] / 8;
                if (shapeArgs[6] === "open" || shapeArgs[6] === "chord") {
                  var Ax = shapeArgs[0];
                  var Ay = shapeArgs[1];
                  var Bx = shapeArgs[0] + shapeArgs[2] / 2 * Math.cos(shapeArgs[4]).toFixed(2);
                  var By = shapeArgs[1] + shapeArgs[3] / 2 * Math.sin(shapeArgs[4]).toFixed(2);
                  var Cx = shapeArgs[0] + shapeArgs[2] / 2 * Math.cos(shapeArgs[5]).toFixed(2);
                  var Cy = shapeArgs[1] + shapeArgs[3] / 2 * Math.sin(shapeArgs[5]).toFixed(2);
                  var areaOfExtraTriangle = Math.abs(Ax * (By - Cy) + Bx * (Cy - Ay) + Cx * (Ay - By)) / 2;
                  if (arcSizeInRadians > Math.PI) {
                    objectArea = objectArea + areaOfExtraTriangle;
                  } else {
                    objectArea = objectArea - areaOfExtraTriangle;
                  }
                }
              } else if (objectType === "ellipse" || objectType === "circle") {
                objectArea = 3.14 * shapeArgs[2] / 2 * shapeArgs[3] / 2;
              } else if (objectType === "line") {
                objectArea = 0;
              } else if (objectType === "point") {
                objectArea = 0;
              } else if (objectType === "quadrilateral") {
                objectArea = Math.abs((shapeArgs[6] + shapeArgs[0]) * (shapeArgs[7] - shapeArgs[1]) + (shapeArgs[0] + shapeArgs[2]) * (shapeArgs[1] - shapeArgs[3]) + (shapeArgs[2] + shapeArgs[4]) * (shapeArgs[3] - shapeArgs[5]) + (shapeArgs[4] + shapeArgs[6]) * (shapeArgs[5] - shapeArgs[7])) / 2;
              } else if (objectType === "rectangle" || objectType === "square") {
                objectArea = shapeArgs[2] * shapeArgs[3];
              } else if (objectType === "triangle") {
                objectArea = Math.abs(shapeArgs[0] * (shapeArgs[3] - shapeArgs[5]) + shapeArgs[2] * (shapeArgs[5] - shapeArgs[1]) + shapeArgs[4] * (shapeArgs[1] - shapeArgs[3])) / 2;
              }
              return Math.round(objectArea * 100 / (canvasWidth * canvasHeight));
            }
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "core-js/modules/es.array.concat": 167,
            "core-js/modules/es.array.fill": 170,
            "core-js/modules/es.array.map": 179,
            "core-js/modules/es.number.to-fixed": 189
          }
        ],
        272: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.concat");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype._updateTextOutput = function(idT) {
              if (!this.dummyDOM.querySelector("#".concat(idT, "_summary"))) {
                return;
              }
              var current = this._accessibleOutputs[idT];
              var innerList = _shapeList(idT, this.ingredients.shapes);
              var innerSummary = _textSummary(innerList.numShapes, this.ingredients.colors.background, this.width, this.height);
              var innerShapeDetails = _shapeDetails(idT, this.ingredients.shapes);
              if (innerSummary !== current.summary.innerHTML) {
                current.summary.innerHTML = innerSummary;
              }
              if (innerList.listShapes !== current.list.innerHTML) {
                current.list.innerHTML = innerList.listShapes;
              }
              if (innerShapeDetails !== current.shapeDetails.innerHTML) {
                current.shapeDetails.innerHTML = innerShapeDetails;
              }
              this._accessibleOutputs[idT] = current;
            };
            function _textSummary(numShapes, background, width2, height2) {
              var text = "Your output is a, ".concat(width2, " by ").concat(height2, " pixels, ").concat(background, " canvas containing the following");
              if (numShapes === 1) {
                text = "".concat(text, " shape:");
              } else {
                text = "".concat(text, " ").concat(numShapes, " shapes:");
              }
              return text;
            }
            function _shapeDetails(idT, ingredients) {
              var shapeDetails = "";
              var shapeNumber = 0;
              for (var x in ingredients) {
                for (var y in ingredients[x]) {
                  var row = '<tr id="'.concat(idT, "shape").concat(shapeNumber, '"><th>').concat(ingredients[x][y].color, " ").concat(x, "</th>");
                  if (x === "line") {
                    row = row + "<td>location = ".concat(ingredients[x][y].pos, "</td><td>length = ").concat(ingredients[x][y].length, " pixels</td></tr>");
                  } else {
                    row = row + "<td>location = ".concat(ingredients[x][y].pos, "</td>");
                    if (x !== "point") {
                      row = row + "<td> area = ".concat(ingredients[x][y].area, "%</td>");
                    }
                    row = row + "</tr>";
                  }
                  shapeDetails = shapeDetails + row;
                  shapeNumber++;
                }
              }
              return shapeDetails;
            }
            function _shapeList(idT, ingredients) {
              var shapeList = "";
              var shapeNumber = 0;
              for (var x in ingredients) {
                for (var y in ingredients[x]) {
                  var _line = '<li><a href="#'.concat(idT, "shape").concat(shapeNumber, '">').concat(ingredients[x][y].color, " ").concat(x, "</a>");
                  if (x === "line") {
                    _line = _line + ", ".concat(ingredients[x][y].pos, ", ").concat(ingredients[x][y].length, " pixels long.</li>");
                  } else {
                    _line = _line + ", at ".concat(ingredients[x][y].pos);
                    if (x !== "point") {
                      _line = _line + ", covering ".concat(ingredients[x][y].area, "% of the canvas");
                    }
                    _line = _line + ".</li>";
                  }
                  shapeList = shapeList + _line;
                  shapeNumber++;
                }
              }
              return {
                numShapes: shapeNumber,
                listShapes: shapeList
              };
            }
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "core-js/modules/es.array.concat": 167
          }
        ],
        273: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            var _main2 = _interopRequireDefault2(_dereq_2("./core/main"));
            _dereq_2("./core/constants");
            _dereq_2("./core/environment");
            _dereq_2("./core/friendly_errors/stacktrace");
            _dereq_2("./core/friendly_errors/validate_params");
            _dereq_2("./core/friendly_errors/file_errors");
            _dereq_2("./core/friendly_errors/fes_core");
            _dereq_2("./core/friendly_errors/sketch_reader");
            _dereq_2("./core/helpers");
            _dereq_2("./core/legacy");
            _dereq_2("./core/preload");
            _dereq_2("./core/p5.Element");
            _dereq_2("./core/p5.Graphics");
            _dereq_2("./core/p5.Renderer");
            _dereq_2("./core/p5.Renderer2D");
            _dereq_2("./core/rendering");
            _dereq_2("./core/shim");
            _dereq_2("./core/structure");
            _dereq_2("./core/transform");
            _dereq_2("./core/shape/2d_primitives");
            _dereq_2("./core/shape/attributes");
            _dereq_2("./core/shape/curves");
            _dereq_2("./core/shape/vertex");
            _dereq_2("./accessibility/outputs");
            _dereq_2("./accessibility/textOutput");
            _dereq_2("./accessibility/gridOutput");
            _dereq_2("./accessibility/color_namer");
            _dereq_2("./color/color_conversion");
            _dereq_2("./color/creating_reading");
            _dereq_2("./color/p5.Color");
            _dereq_2("./color/setting");
            _dereq_2("./data/p5.TypedDict");
            _dereq_2("./data/local_storage.js");
            _dereq_2("./dom/dom");
            _dereq_2("./accessibility/describe");
            _dereq_2("./events/acceleration");
            _dereq_2("./events/keyboard");
            _dereq_2("./events/mouse");
            _dereq_2("./events/touch");
            _dereq_2("./image/filters");
            _dereq_2("./image/image");
            _dereq_2("./image/loading_displaying");
            _dereq_2("./image/p5.Image");
            _dereq_2("./image/pixels");
            _dereq_2("./io/files");
            _dereq_2("./io/p5.Table");
            _dereq_2("./io/p5.TableRow");
            _dereq_2("./io/p5.XML");
            _dereq_2("./math/calculation");
            _dereq_2("./math/math");
            _dereq_2("./math/noise");
            _dereq_2("./math/p5.Vector");
            _dereq_2("./math/random");
            _dereq_2("./math/trigonometry");
            _dereq_2("./typography/attributes");
            _dereq_2("./typography/loading_displaying");
            _dereq_2("./typography/p5.Font");
            _dereq_2("./utilities/array_functions");
            _dereq_2("./utilities/conversion");
            _dereq_2("./utilities/string_functions");
            _dereq_2("./utilities/time_date");
            _dereq_2("./webgl/3d_primitives");
            _dereq_2("./webgl/interaction");
            _dereq_2("./webgl/light");
            _dereq_2("./webgl/loading");
            _dereq_2("./webgl/material");
            _dereq_2("./webgl/p5.Camera");
            _dereq_2("./webgl/p5.Geometry");
            _dereq_2("./webgl/p5.Matrix");
            _dereq_2("./webgl/p5.RendererGL.Immediate");
            _dereq_2("./webgl/p5.RendererGL");
            _dereq_2("./webgl/p5.RendererGL.Retained");
            _dereq_2("./webgl/p5.Shader");
            _dereq_2("./webgl/p5.RenderBuffer");
            _dereq_2("./webgl/p5.Texture");
            _dereq_2("./webgl/text");
            _dereq_2("./core/init");
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            module2.exports = _main2.default;
          },
          {
            "./accessibility/color_namer": 268,
            "./accessibility/describe": 269,
            "./accessibility/gridOutput": 270,
            "./accessibility/outputs": 271,
            "./accessibility/textOutput": 272,
            "./color/color_conversion": 274,
            "./color/creating_reading": 275,
            "./color/p5.Color": 276,
            "./color/setting": 277,
            "./core/constants": 278,
            "./core/environment": 279,
            "./core/friendly_errors/fes_core": 281,
            "./core/friendly_errors/file_errors": 282,
            "./core/friendly_errors/sketch_reader": 283,
            "./core/friendly_errors/stacktrace": 284,
            "./core/friendly_errors/validate_params": 285,
            "./core/helpers": 286,
            "./core/init": 287,
            "./core/legacy": 289,
            "./core/main": 290,
            "./core/p5.Element": 291,
            "./core/p5.Graphics": 292,
            "./core/p5.Renderer": 293,
            "./core/p5.Renderer2D": 294,
            "./core/preload": 295,
            "./core/rendering": 296,
            "./core/shape/2d_primitives": 297,
            "./core/shape/attributes": 298,
            "./core/shape/curves": 299,
            "./core/shape/vertex": 300,
            "./core/shim": 301,
            "./core/structure": 302,
            "./core/transform": 303,
            "./data/local_storage.js": 304,
            "./data/p5.TypedDict": 305,
            "./dom/dom": 306,
            "./events/acceleration": 307,
            "./events/keyboard": 308,
            "./events/mouse": 309,
            "./events/touch": 310,
            "./image/filters": 311,
            "./image/image": 312,
            "./image/loading_displaying": 313,
            "./image/p5.Image": 314,
            "./image/pixels": 315,
            "./io/files": 316,
            "./io/p5.Table": 317,
            "./io/p5.TableRow": 318,
            "./io/p5.XML": 319,
            "./math/calculation": 320,
            "./math/math": 321,
            "./math/noise": 322,
            "./math/p5.Vector": 323,
            "./math/random": 324,
            "./math/trigonometry": 325,
            "./typography/attributes": 326,
            "./typography/loading_displaying": 327,
            "./typography/p5.Font": 328,
            "./utilities/array_functions": 329,
            "./utilities/conversion": 330,
            "./utilities/string_functions": 331,
            "./utilities/time_date": 332,
            "./webgl/3d_primitives": 333,
            "./webgl/interaction": 334,
            "./webgl/light": 335,
            "./webgl/loading": 336,
            "./webgl/material": 337,
            "./webgl/p5.Camera": 338,
            "./webgl/p5.Geometry": 339,
            "./webgl/p5.Matrix": 340,
            "./webgl/p5.RenderBuffer": 341,
            "./webgl/p5.RendererGL": 344,
            "./webgl/p5.RendererGL.Immediate": 342,
            "./webgl/p5.RendererGL.Retained": 343,
            "./webgl/p5.Shader": 345,
            "./webgl/p5.Texture": 346,
            "./webgl/text": 347
          }
        ],
        274: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.ColorConversion = {};
            _main2.default.ColorConversion._hsbaToHSLA = function(hsba) {
              var hue = hsba[0];
              var sat = hsba[1];
              var val = hsba[2];
              var li = (2 - sat) * val / 2;
              if (li !== 0) {
                if (li === 1) {
                  sat = 0;
                } else if (li < 0.5) {
                  sat = sat / (2 - sat);
                } else {
                  sat = sat * val / (2 - li * 2);
                }
              }
              return [
                hue,
                sat,
                li,
                hsba[3]
              ];
            };
            _main2.default.ColorConversion._hsbaToRGBA = function(hsba) {
              var hue = hsba[0] * 6;
              var sat = hsba[1];
              var val = hsba[2];
              var RGBA = [];
              if (sat === 0) {
                RGBA = [
                  val,
                  val,
                  val,
                  hsba[3]
                ];
              } else {
                var sector = Math.floor(hue);
                var tint1 = val * (1 - sat);
                var tint2 = val * (1 - sat * (hue - sector));
                var tint3 = val * (1 - sat * (1 + sector - hue));
                var red, green, blue;
                if (sector === 1) {
                  red = tint2;
                  green = val;
                  blue = tint1;
                } else if (sector === 2) {
                  red = tint1;
                  green = val;
                  blue = tint3;
                } else if (sector === 3) {
                  red = tint1;
                  green = tint2;
                  blue = val;
                } else if (sector === 4) {
                  red = tint3;
                  green = tint1;
                  blue = val;
                } else if (sector === 5) {
                  red = val;
                  green = tint1;
                  blue = tint2;
                } else {
                  red = val;
                  green = tint3;
                  blue = tint1;
                }
                RGBA = [
                  red,
                  green,
                  blue,
                  hsba[3]
                ];
              }
              return RGBA;
            };
            _main2.default.ColorConversion._hslaToHSBA = function(hsla) {
              var hue = hsla[0];
              var sat = hsla[1];
              var li = hsla[2];
              var val;
              if (li < 0.5) {
                val = (1 + sat) * li;
              } else {
                val = li + sat - li * sat;
              }
              sat = 2 * (val - li) / val;
              return [
                hue,
                sat,
                val,
                hsla[3]
              ];
            };
            _main2.default.ColorConversion._hslaToRGBA = function(hsla) {
              var hue = hsla[0] * 6;
              var sat = hsla[1];
              var li = hsla[2];
              var RGBA = [];
              if (sat === 0) {
                RGBA = [
                  li,
                  li,
                  li,
                  hsla[3]
                ];
              } else {
                var val;
                if (li < 0.5) {
                  val = (1 + sat) * li;
                } else {
                  val = li + sat - li * sat;
                }
                var zest = 2 * li - val;
                var hzvToRGB = function hzvToRGB2(hue2, zest2, val2) {
                  if (hue2 < 0) {
                    hue2 += 6;
                  } else if (hue2 >= 6) {
                    hue2 -= 6;
                  }
                  if (hue2 < 1) {
                    return zest2 + (val2 - zest2) * hue2;
                  } else if (hue2 < 3) {
                    return val2;
                  } else if (hue2 < 4) {
                    return zest2 + (val2 - zest2) * (4 - hue2);
                  } else {
                    return zest2;
                  }
                };
                RGBA = [
                  hzvToRGB(hue + 2, zest, val),
                  hzvToRGB(hue, zest, val),
                  hzvToRGB(hue - 2, zest, val),
                  hsla[3]
                ];
              }
              return RGBA;
            };
            _main2.default.ColorConversion._rgbaToHSBA = function(rgba) {
              var red = rgba[0];
              var green = rgba[1];
              var blue = rgba[2];
              var val = Math.max(red, green, blue);
              var chroma = val - Math.min(red, green, blue);
              var hue, sat;
              if (chroma === 0) {
                hue = 0;
                sat = 0;
              } else {
                sat = chroma / val;
                if (red === val) {
                  hue = (green - blue) / chroma;
                } else if (green === val) {
                  hue = 2 + (blue - red) / chroma;
                } else if (blue === val) {
                  hue = 4 + (red - green) / chroma;
                }
                if (hue < 0) {
                  hue += 6;
                } else if (hue >= 6) {
                  hue -= 6;
                }
              }
              return [
                hue / 6,
                sat,
                val,
                rgba[3]
              ];
            };
            _main2.default.ColorConversion._rgbaToHSLA = function(rgba) {
              var red = rgba[0];
              var green = rgba[1];
              var blue = rgba[2];
              var val = Math.max(red, green, blue);
              var min = Math.min(red, green, blue);
              var li = val + min;
              var chroma = val - min;
              var hue, sat;
              if (chroma === 0) {
                hue = 0;
                sat = 0;
              } else {
                if (li < 1) {
                  sat = chroma / li;
                } else {
                  sat = chroma / (2 - li);
                }
                if (red === val) {
                  hue = (green - blue) / chroma;
                } else if (green === val) {
                  hue = 2 + (blue - red) / chroma;
                } else if (blue === val) {
                  hue = 4 + (red - green) / chroma;
                }
                if (hue < 0) {
                  hue += 6;
                } else if (hue >= 6) {
                  hue -= 6;
                }
              }
              return [
                hue / 6,
                sat,
                li / 2,
                rgba[3]
              ];
            };
            var _default2 = _main2.default.ColorConversion;
            exports2.default = _default2;
          },
          {
            "../core/main": 290
          }
        ],
        275: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _dereq_2("core-js/modules/es.array.map");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../core/constants"));
            _dereq_2("./p5.Color");
            _dereq_2("../core/friendly_errors/validate_params");
            _dereq_2("../core/friendly_errors/file_errors");
            _dereq_2("../core/friendly_errors/fes_core");
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.alpha = function(c) {
              _main2.default._validateParameters("alpha", arguments);
              return this.color(c)._getAlpha();
            };
            _main2.default.prototype.blue = function(c) {
              _main2.default._validateParameters("blue", arguments);
              return this.color(c)._getBlue();
            };
            _main2.default.prototype.brightness = function(c) {
              _main2.default._validateParameters("brightness", arguments);
              return this.color(c)._getBrightness();
            };
            _main2.default.prototype.color = function() {
              _main2.default._validateParameters("color", arguments);
              if (arguments[0] instanceof _main2.default.Color) {
                return arguments[0];
              }
              var args = arguments[0] instanceof Array ? arguments[0] : arguments;
              return new _main2.default.Color(this, args);
            };
            _main2.default.prototype.green = function(c) {
              _main2.default._validateParameters("green", arguments);
              return this.color(c)._getGreen();
            };
            _main2.default.prototype.hue = function(c) {
              _main2.default._validateParameters("hue", arguments);
              return this.color(c)._getHue();
            };
            _main2.default.prototype.lerpColor = function(c1, c2, amt) {
              _main2.default._validateParameters("lerpColor", arguments);
              var mode = this._colorMode;
              var maxes = this._colorMaxes;
              var l0, l1, l2, l3;
              var fromArray, toArray;
              if (mode === constants2.RGB) {
                fromArray = c1.levels.map(function(level) {
                  return level / 255;
                });
                toArray = c2.levels.map(function(level) {
                  return level / 255;
                });
              } else if (mode === constants2.HSB) {
                c1._getBrightness();
                c2._getBrightness();
                fromArray = c1.hsba;
                toArray = c2.hsba;
              } else if (mode === constants2.HSL) {
                c1._getLightness();
                c2._getLightness();
                fromArray = c1.hsla;
                toArray = c2.hsla;
              } else {
                throw new Error("".concat(mode, "cannot be used for interpolation."));
              }
              amt = Math.max(Math.min(amt, 1), 0);
              if (typeof this.lerp === "undefined") {
                this.lerp = function(start, stop, amt2) {
                  return amt2 * (stop - start) + start;
                };
              }
              l0 = this.lerp(fromArray[0], toArray[0], amt);
              l1 = this.lerp(fromArray[1], toArray[1], amt);
              l2 = this.lerp(fromArray[2], toArray[2], amt);
              l3 = this.lerp(fromArray[3], toArray[3], amt);
              l0 *= maxes[mode][0];
              l1 *= maxes[mode][1];
              l2 *= maxes[mode][2];
              l3 *= maxes[mode][3];
              return this.color(l0, l1, l2, l3);
            };
            _main2.default.prototype.lightness = function(c) {
              _main2.default._validateParameters("lightness", arguments);
              return this.color(c)._getLightness();
            };
            _main2.default.prototype.red = function(c) {
              _main2.default._validateParameters("red", arguments);
              return this.color(c)._getRed();
            };
            _main2.default.prototype.saturation = function(c) {
              _main2.default._validateParameters("saturation", arguments);
              return this.color(c)._getSaturation();
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/constants": 278,
            "../core/friendly_errors/fes_core": 281,
            "../core/friendly_errors/file_errors": 282,
            "../core/friendly_errors/validate_params": 285,
            "../core/main": 290,
            "./p5.Color": 276,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.map": 179,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        276: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.join");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.constructor");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.trim");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _dereq_2("core-js/modules/es.array.join");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.constructor");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.trim");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../core/constants"));
            var _color_conversion = _interopRequireDefault2(_dereq_2("./color_conversion"));
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.Color = function(pInst, vals) {
              this._storeModeAndMaxes(pInst._colorMode, pInst._colorMaxes);
              if (this.mode !== constants2.RGB && this.mode !== constants2.HSL && this.mode !== constants2.HSB) {
                throw new Error("".concat(this.mode, " is an invalid colorMode."));
              } else {
                this._array = _main2.default.Color._parseInputs.apply(this, vals);
              }
              this._calculateLevels();
              return this;
            };
            _main2.default.Color.prototype.toString = function(format) {
              var a = this.levels;
              var f = this._array;
              var alpha = f[3];
              switch (format) {
                case "#rrggbb":
                  return "#".concat(a[0] < 16 ? "0".concat(a[0].toString(16)) : a[0].toString(16), a[1] < 16 ? "0".concat(a[1].toString(16)) : a[1].toString(16), a[2] < 16 ? "0".concat(a[2].toString(16)) : a[2].toString(16));
                case "#rrggbbaa":
                  return "#".concat(a[0] < 16 ? "0".concat(a[0].toString(16)) : a[0].toString(16), a[1] < 16 ? "0".concat(a[1].toString(16)) : a[1].toString(16), a[2] < 16 ? "0".concat(a[2].toString(16)) : a[2].toString(16), a[3] < 16 ? "0".concat(a[3].toString(16)) : a[3].toString(16));
                case "#rgb":
                  return "#".concat(Math.round(f[0] * 15).toString(16), Math.round(f[1] * 15).toString(16), Math.round(f[2] * 15).toString(16));
                case "#rgba":
                  return "#".concat(Math.round(f[0] * 15).toString(16), Math.round(f[1] * 15).toString(16), Math.round(f[2] * 15).toString(16), Math.round(f[3] * 15).toString(16));
                case "rgb":
                  return "rgb(".concat(a[0], ", ", a[1], ", ", a[2], ")");
                case "rgb%":
                  return "rgb(".concat((100 * f[0]).toPrecision(3), "%, ", (100 * f[1]).toPrecision(3), "%, ", (100 * f[2]).toPrecision(3), "%)");
                case "rgba%":
                  return "rgba(".concat((100 * f[0]).toPrecision(3), "%, ", (100 * f[1]).toPrecision(3), "%, ", (100 * f[2]).toPrecision(3), "%, ", (100 * f[3]).toPrecision(3), "%)");
                case "hsb":
                case "hsv":
                  if (!this.hsba)
                    this.hsba = _color_conversion.default._rgbaToHSBA(this._array);
                  return "hsb(".concat(this.hsba[0] * this.maxes[constants2.HSB][0], ", ", this.hsba[1] * this.maxes[constants2.HSB][1], ", ", this.hsba[2] * this.maxes[constants2.HSB][2], ")");
                case "hsb%":
                case "hsv%":
                  if (!this.hsba)
                    this.hsba = _color_conversion.default._rgbaToHSBA(this._array);
                  return "hsb(".concat((100 * this.hsba[0]).toPrecision(3), "%, ", (100 * this.hsba[1]).toPrecision(3), "%, ", (100 * this.hsba[2]).toPrecision(3), "%)");
                case "hsba":
                case "hsva":
                  if (!this.hsba)
                    this.hsba = _color_conversion.default._rgbaToHSBA(this._array);
                  return "hsba(".concat(this.hsba[0] * this.maxes[constants2.HSB][0], ", ", this.hsba[1] * this.maxes[constants2.HSB][1], ", ", this.hsba[2] * this.maxes[constants2.HSB][2], ", ", alpha, ")");
                case "hsba%":
                case "hsva%":
                  if (!this.hsba)
                    this.hsba = _color_conversion.default._rgbaToHSBA(this._array);
                  return "hsba(".concat((100 * this.hsba[0]).toPrecision(3), "%, ", (100 * this.hsba[1]).toPrecision(3), "%, ", (100 * this.hsba[2]).toPrecision(3), "%, ", (100 * alpha).toPrecision(3), "%)");
                case "hsl":
                  if (!this.hsla)
                    this.hsla = _color_conversion.default._rgbaToHSLA(this._array);
                  return "hsl(".concat(this.hsla[0] * this.maxes[constants2.HSL][0], ", ", this.hsla[1] * this.maxes[constants2.HSL][1], ", ", this.hsla[2] * this.maxes[constants2.HSL][2], ")");
                case "hsl%":
                  if (!this.hsla)
                    this.hsla = _color_conversion.default._rgbaToHSLA(this._array);
                  return "hsl(".concat((100 * this.hsla[0]).toPrecision(3), "%, ", (100 * this.hsla[1]).toPrecision(3), "%, ", (100 * this.hsla[2]).toPrecision(3), "%)");
                case "hsla":
                  if (!this.hsla)
                    this.hsla = _color_conversion.default._rgbaToHSLA(this._array);
                  return "hsla(".concat(this.hsla[0] * this.maxes[constants2.HSL][0], ", ", this.hsla[1] * this.maxes[constants2.HSL][1], ", ", this.hsla[2] * this.maxes[constants2.HSL][2], ", ", alpha, ")");
                case "hsla%":
                  if (!this.hsla)
                    this.hsla = _color_conversion.default._rgbaToHSLA(this._array);
                  return "hsl(".concat((100 * this.hsla[0]).toPrecision(3), "%, ", (100 * this.hsla[1]).toPrecision(3), "%, ", (100 * this.hsla[2]).toPrecision(3), "%, ", (100 * alpha).toPrecision(3), "%)");
                case "rgba":
                default:
                  return "rgba(".concat(a[0], ",", a[1], ",", a[2], ",", alpha, ")");
              }
            };
            _main2.default.Color.prototype.setRed = function(new_red) {
              this._array[0] = new_red / this.maxes[constants2.RGB][0];
              this._calculateLevels();
            };
            _main2.default.Color.prototype.setGreen = function(new_green) {
              this._array[1] = new_green / this.maxes[constants2.RGB][1];
              this._calculateLevels();
            };
            _main2.default.Color.prototype.setBlue = function(new_blue) {
              this._array[2] = new_blue / this.maxes[constants2.RGB][2];
              this._calculateLevels();
            };
            _main2.default.Color.prototype.setAlpha = function(new_alpha) {
              this._array[3] = new_alpha / this.maxes[this.mode][3];
              this._calculateLevels();
            };
            _main2.default.Color.prototype._calculateLevels = function() {
              var array = this._array;
              var levels = this.levels = new Array(array.length);
              for (var i2 = array.length - 1; i2 >= 0; --i2) {
                levels[i2] = Math.round(array[i2] * 255);
              }
              this.hsla = null;
              this.hsba = null;
            };
            _main2.default.Color.prototype._getAlpha = function() {
              return this._array[3] * this.maxes[this.mode][3];
            };
            _main2.default.Color.prototype._storeModeAndMaxes = function(new_mode, new_maxes) {
              this.mode = new_mode;
              this.maxes = new_maxes;
            };
            _main2.default.Color.prototype._getMode = function() {
              return this.mode;
            };
            _main2.default.Color.prototype._getMaxes = function() {
              return this.maxes;
            };
            _main2.default.Color.prototype._getBlue = function() {
              return this._array[2] * this.maxes[constants2.RGB][2];
            };
            _main2.default.Color.prototype._getBrightness = function() {
              if (!this.hsba) {
                this.hsba = _color_conversion.default._rgbaToHSBA(this._array);
              }
              return this.hsba[2] * this.maxes[constants2.HSB][2];
            };
            _main2.default.Color.prototype._getGreen = function() {
              return this._array[1] * this.maxes[constants2.RGB][1];
            };
            _main2.default.Color.prototype._getHue = function() {
              if (this.mode === constants2.HSB) {
                if (!this.hsba) {
                  this.hsba = _color_conversion.default._rgbaToHSBA(this._array);
                }
                return this.hsba[0] * this.maxes[constants2.HSB][0];
              } else {
                if (!this.hsla) {
                  this.hsla = _color_conversion.default._rgbaToHSLA(this._array);
                }
                return this.hsla[0] * this.maxes[constants2.HSL][0];
              }
            };
            _main2.default.Color.prototype._getLightness = function() {
              if (!this.hsla) {
                this.hsla = _color_conversion.default._rgbaToHSLA(this._array);
              }
              return this.hsla[2] * this.maxes[constants2.HSL][2];
            };
            _main2.default.Color.prototype._getRed = function() {
              return this._array[0] * this.maxes[constants2.RGB][0];
            };
            _main2.default.Color.prototype._getSaturation = function() {
              if (this.mode === constants2.HSB) {
                if (!this.hsba) {
                  this.hsba = _color_conversion.default._rgbaToHSBA(this._array);
                }
                return this.hsba[1] * this.maxes[constants2.HSB][1];
              } else {
                if (!this.hsla) {
                  this.hsla = _color_conversion.default._rgbaToHSLA(this._array);
                }
                return this.hsla[1] * this.maxes[constants2.HSL][1];
              }
            };
            var namedColors = {
              aliceblue: "#f0f8ff",
              antiquewhite: "#faebd7",
              aqua: "#00ffff",
              aquamarine: "#7fffd4",
              azure: "#f0ffff",
              beige: "#f5f5dc",
              bisque: "#ffe4c4",
              black: "#000000",
              blanchedalmond: "#ffebcd",
              blue: "#0000ff",
              blueviolet: "#8a2be2",
              brown: "#a52a2a",
              burlywood: "#deb887",
              cadetblue: "#5f9ea0",
              chartreuse: "#7fff00",
              chocolate: "#d2691e",
              coral: "#ff7f50",
              cornflowerblue: "#6495ed",
              cornsilk: "#fff8dc",
              crimson: "#dc143c",
              cyan: "#00ffff",
              darkblue: "#00008b",
              darkcyan: "#008b8b",
              darkgoldenrod: "#b8860b",
              darkgray: "#a9a9a9",
              darkgreen: "#006400",
              darkgrey: "#a9a9a9",
              darkkhaki: "#bdb76b",
              darkmagenta: "#8b008b",
              darkolivegreen: "#556b2f",
              darkorange: "#ff8c00",
              darkorchid: "#9932cc",
              darkred: "#8b0000",
              darksalmon: "#e9967a",
              darkseagreen: "#8fbc8f",
              darkslateblue: "#483d8b",
              darkslategray: "#2f4f4f",
              darkslategrey: "#2f4f4f",
              darkturquoise: "#00ced1",
              darkviolet: "#9400d3",
              deeppink: "#ff1493",
              deepskyblue: "#00bfff",
              dimgray: "#696969",
              dimgrey: "#696969",
              dodgerblue: "#1e90ff",
              firebrick: "#b22222",
              floralwhite: "#fffaf0",
              forestgreen: "#228b22",
              fuchsia: "#ff00ff",
              gainsboro: "#dcdcdc",
              ghostwhite: "#f8f8ff",
              gold: "#ffd700",
              goldenrod: "#daa520",
              gray: "#808080",
              green: "#008000",
              greenyellow: "#adff2f",
              grey: "#808080",
              honeydew: "#f0fff0",
              hotpink: "#ff69b4",
              indianred: "#cd5c5c",
              indigo: "#4b0082",
              ivory: "#fffff0",
              khaki: "#f0e68c",
              lavender: "#e6e6fa",
              lavenderblush: "#fff0f5",
              lawngreen: "#7cfc00",
              lemonchiffon: "#fffacd",
              lightblue: "#add8e6",
              lightcoral: "#f08080",
              lightcyan: "#e0ffff",
              lightgoldenrodyellow: "#fafad2",
              lightgray: "#d3d3d3",
              lightgreen: "#90ee90",
              lightgrey: "#d3d3d3",
              lightpink: "#ffb6c1",
              lightsalmon: "#ffa07a",
              lightseagreen: "#20b2aa",
              lightskyblue: "#87cefa",
              lightslategray: "#778899",
              lightslategrey: "#778899",
              lightsteelblue: "#b0c4de",
              lightyellow: "#ffffe0",
              lime: "#00ff00",
              limegreen: "#32cd32",
              linen: "#faf0e6",
              magenta: "#ff00ff",
              maroon: "#800000",
              mediumaquamarine: "#66cdaa",
              mediumblue: "#0000cd",
              mediumorchid: "#ba55d3",
              mediumpurple: "#9370db",
              mediumseagreen: "#3cb371",
              mediumslateblue: "#7b68ee",
              mediumspringgreen: "#00fa9a",
              mediumturquoise: "#48d1cc",
              mediumvioletred: "#c71585",
              midnightblue: "#191970",
              mintcream: "#f5fffa",
              mistyrose: "#ffe4e1",
              moccasin: "#ffe4b5",
              navajowhite: "#ffdead",
              navy: "#000080",
              oldlace: "#fdf5e6",
              olive: "#808000",
              olivedrab: "#6b8e23",
              orange: "#ffa500",
              orangered: "#ff4500",
              orchid: "#da70d6",
              palegoldenrod: "#eee8aa",
              palegreen: "#98fb98",
              paleturquoise: "#afeeee",
              palevioletred: "#db7093",
              papayawhip: "#ffefd5",
              peachpuff: "#ffdab9",
              peru: "#cd853f",
              pink: "#ffc0cb",
              plum: "#dda0dd",
              powderblue: "#b0e0e6",
              purple: "#800080",
              rebeccapurple: "#663399",
              red: "#ff0000",
              rosybrown: "#bc8f8f",
              royalblue: "#4169e1",
              saddlebrown: "#8b4513",
              salmon: "#fa8072",
              sandybrown: "#f4a460",
              seagreen: "#2e8b57",
              seashell: "#fff5ee",
              sienna: "#a0522d",
              silver: "#c0c0c0",
              skyblue: "#87ceeb",
              slateblue: "#6a5acd",
              slategray: "#708090",
              slategrey: "#708090",
              snow: "#fffafa",
              springgreen: "#00ff7f",
              steelblue: "#4682b4",
              tan: "#d2b48c",
              teal: "#008080",
              thistle: "#d8bfd8",
              tomato: "#ff6347",
              turquoise: "#40e0d0",
              violet: "#ee82ee",
              wheat: "#f5deb3",
              white: "#ffffff",
              whitesmoke: "#f5f5f5",
              yellow: "#ffff00",
              yellowgreen: "#9acd32"
            };
            var WHITESPACE = /\s*/;
            var INTEGER = /(\d{1,3})/;
            var DECIMAL = /((?:\d+(?:\.\d+)?)|(?:\.\d+))/;
            var PERCENT = new RegExp("".concat(DECIMAL.source, "%"));
            var colorPatterns = {
              // Match colors in format #XXX, e.g. #416.
              HEX3: /^#([a-f0-9])([a-f0-9])([a-f0-9])$/i,
              // Match colors in format #XXXX, e.g. #5123.
              HEX4: /^#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])$/i,
              // Match colors in format #XXXXXX, e.g. #b4d455.
              HEX6: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,
              // Match colors in format #XXXXXXXX, e.g. #b4d45535.
              HEX8: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,
              // Match colors in format rgb(R, G, B), e.g. rgb(255, 0, 128).
              RGB: new RegExp([
                "^rgb\\(",
                INTEGER.source,
                ",",
                INTEGER.source,
                ",",
                INTEGER.source,
                "\\)$"
              ].join(WHITESPACE.source), "i"),
              // Match colors in format rgb(R%, G%, B%), e.g. rgb(100%, 0%, 28.9%).
              RGB_PERCENT: new RegExp([
                "^rgb\\(",
                PERCENT.source,
                ",",
                PERCENT.source,
                ",",
                PERCENT.source,
                "\\)$"
              ].join(WHITESPACE.source), "i"),
              // Match colors in format rgb(R, G, B, A), e.g. rgb(255, 0, 128, 0.25).
              RGBA: new RegExp([
                "^rgba\\(",
                INTEGER.source,
                ",",
                INTEGER.source,
                ",",
                INTEGER.source,
                ",",
                DECIMAL.source,
                "\\)$"
              ].join(WHITESPACE.source), "i"),
              // Match colors in format rgb(R%, G%, B%, A), e.g. rgb(100%, 0%, 28.9%, 0.5).
              RGBA_PERCENT: new RegExp([
                "^rgba\\(",
                PERCENT.source,
                ",",
                PERCENT.source,
                ",",
                PERCENT.source,
                ",",
                DECIMAL.source,
                "\\)$"
              ].join(WHITESPACE.source), "i"),
              // Match colors in format hsla(H, S%, L%), e.g. hsl(100, 40%, 28.9%).
              HSL: new RegExp([
                "^hsl\\(",
                INTEGER.source,
                ",",
                PERCENT.source,
                ",",
                PERCENT.source,
                "\\)$"
              ].join(WHITESPACE.source), "i"),
              // Match colors in format hsla(H, S%, L%, A), e.g. hsla(100, 40%, 28.9%, 0.5).
              HSLA: new RegExp([
                "^hsla\\(",
                INTEGER.source,
                ",",
                PERCENT.source,
                ",",
                PERCENT.source,
                ",",
                DECIMAL.source,
                "\\)$"
              ].join(WHITESPACE.source), "i"),
              // Match colors in format hsb(H, S%, B%), e.g. hsb(100, 40%, 28.9%).
              HSB: new RegExp([
                "^hsb\\(",
                INTEGER.source,
                ",",
                PERCENT.source,
                ",",
                PERCENT.source,
                "\\)$"
              ].join(WHITESPACE.source), "i"),
              // Match colors in format hsba(H, S%, B%, A), e.g. hsba(100, 40%, 28.9%, 0.5).
              HSBA: new RegExp([
                "^hsba\\(",
                INTEGER.source,
                ",",
                PERCENT.source,
                ",",
                PERCENT.source,
                ",",
                DECIMAL.source,
                "\\)$"
              ].join(WHITESPACE.source), "i")
            };
            _main2.default.Color._parseInputs = function(r, g, b, a) {
              var numArgs = arguments.length;
              var mode = this.mode;
              var maxes = this.maxes[mode];
              var results = [];
              var i2;
              if (numArgs >= 3) {
                results[0] = r / maxes[0];
                results[1] = g / maxes[1];
                results[2] = b / maxes[2];
                if (typeof a === "number") {
                  results[3] = a / maxes[3];
                } else {
                  results[3] = 1;
                }
                for (i2 = results.length - 1; i2 >= 0; --i2) {
                  var result = results[i2];
                  if (result < 0) {
                    results[i2] = 0;
                  } else if (result > 1) {
                    results[i2] = 1;
                  }
                }
                if (mode === constants2.HSL) {
                  return _color_conversion.default._hslaToRGBA(results);
                } else if (mode === constants2.HSB) {
                  return _color_conversion.default._hsbaToRGBA(results);
                } else {
                  return results;
                }
              } else if (numArgs === 1 && typeof r === "string") {
                var str = r.trim().toLowerCase();
                if (namedColors[str]) {
                  return _main2.default.Color._parseInputs.call(this, namedColors[str]);
                }
                if (colorPatterns.HEX3.test(str)) {
                  results = colorPatterns.HEX3.exec(str).slice(1).map(function(color) {
                    return parseInt(color + color, 16) / 255;
                  });
                  results[3] = 1;
                  return results;
                } else if (colorPatterns.HEX6.test(str)) {
                  results = colorPatterns.HEX6.exec(str).slice(1).map(function(color) {
                    return parseInt(color, 16) / 255;
                  });
                  results[3] = 1;
                  return results;
                } else if (colorPatterns.HEX4.test(str)) {
                  results = colorPatterns.HEX4.exec(str).slice(1).map(function(color) {
                    return parseInt(color + color, 16) / 255;
                  });
                  return results;
                } else if (colorPatterns.HEX8.test(str)) {
                  results = colorPatterns.HEX8.exec(str).slice(1).map(function(color) {
                    return parseInt(color, 16) / 255;
                  });
                  return results;
                } else if (colorPatterns.RGB.test(str)) {
                  results = colorPatterns.RGB.exec(str).slice(1).map(function(color) {
                    return color / 255;
                  });
                  results[3] = 1;
                  return results;
                } else if (colorPatterns.RGB_PERCENT.test(str)) {
                  results = colorPatterns.RGB_PERCENT.exec(str).slice(1).map(function(color) {
                    return parseFloat(color) / 100;
                  });
                  results[3] = 1;
                  return results;
                } else if (colorPatterns.RGBA.test(str)) {
                  results = colorPatterns.RGBA.exec(str).slice(1).map(function(color, idx) {
                    if (idx === 3) {
                      return parseFloat(color);
                    }
                    return color / 255;
                  });
                  return results;
                } else if (colorPatterns.RGBA_PERCENT.test(str)) {
                  results = colorPatterns.RGBA_PERCENT.exec(str).slice(1).map(function(color, idx) {
                    if (idx === 3) {
                      return parseFloat(color);
                    }
                    return parseFloat(color) / 100;
                  });
                  return results;
                }
                if (colorPatterns.HSL.test(str)) {
                  results = colorPatterns.HSL.exec(str).slice(1).map(function(color, idx) {
                    if (idx === 0) {
                      return parseInt(color, 10) / 360;
                    }
                    return parseInt(color, 10) / 100;
                  });
                  results[3] = 1;
                } else if (colorPatterns.HSLA.test(str)) {
                  results = colorPatterns.HSLA.exec(str).slice(1).map(function(color, idx) {
                    if (idx === 0) {
                      return parseInt(color, 10) / 360;
                    } else if (idx === 3) {
                      return parseFloat(color);
                    }
                    return parseInt(color, 10) / 100;
                  });
                }
                results = results.map(function(value) {
                  return Math.max(Math.min(value, 1), 0);
                });
                if (results.length) {
                  return _color_conversion.default._hslaToRGBA(results);
                }
                if (colorPatterns.HSB.test(str)) {
                  results = colorPatterns.HSB.exec(str).slice(1).map(function(color, idx) {
                    if (idx === 0) {
                      return parseInt(color, 10) / 360;
                    }
                    return parseInt(color, 10) / 100;
                  });
                  results[3] = 1;
                } else if (colorPatterns.HSBA.test(str)) {
                  results = colorPatterns.HSBA.exec(str).slice(1).map(function(color, idx) {
                    if (idx === 0) {
                      return parseInt(color, 10) / 360;
                    } else if (idx === 3) {
                      return parseFloat(color);
                    }
                    return parseInt(color, 10) / 100;
                  });
                }
                if (results.length) {
                  for (i2 = results.length - 1; i2 >= 0; --i2) {
                    results[i2] = Math.max(Math.min(results[i2], 1), 0);
                  }
                  return _color_conversion.default._hsbaToRGBA(results);
                }
                results = [
                  1,
                  1,
                  1,
                  1
                ];
              } else if ((numArgs === 1 || numArgs === 2) && typeof r === "number") {
                results[0] = r / maxes[2];
                results[1] = r / maxes[2];
                results[2] = r / maxes[2];
                if (typeof g === "number") {
                  results[3] = g / maxes[3];
                } else {
                  results[3] = 1;
                }
                results = results.map(function(value) {
                  return Math.max(Math.min(value, 1), 0);
                });
              } else {
                throw new Error("".concat(arguments, "is not a valid color representation."));
              }
              return results;
            };
            var _default2 = _main2.default.Color;
            exports2.default = _default2;
          },
          {
            "../core/constants": 278,
            "../core/main": 290,
            "./color_conversion": 274,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.join": 177,
            "core-js/modules/es.array.map": 179,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.constructor": 198,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.string.trim": 211,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        277: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.fill");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _dereq_2("core-js/modules/es.array.fill");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../core/constants"));
            _dereq_2("./p5.Color");
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.background = function() {
              var _this$_renderer;
              (_this$_renderer = this._renderer).background.apply(_this$_renderer, arguments);
              return this;
            };
            _main2.default.prototype.clear = function() {
              var _r = (arguments.length <= 0 ? void 0 : arguments[0]) || 0;
              var _g = (arguments.length <= 1 ? void 0 : arguments[1]) || 0;
              var _b = (arguments.length <= 2 ? void 0 : arguments[2]) || 0;
              var _a = (arguments.length <= 3 ? void 0 : arguments[3]) || 0;
              this._renderer.clear(_r, _g, _b, _a);
              return this;
            };
            _main2.default.prototype.colorMode = function(mode, max1, max2, max3, maxA) {
              _main2.default._validateParameters("colorMode", arguments);
              if (mode === constants2.RGB || mode === constants2.HSB || mode === constants2.HSL) {
                this._colorMode = mode;
                var maxes = this._colorMaxes[mode];
                if (arguments.length === 2) {
                  maxes[0] = max1;
                  maxes[1] = max1;
                  maxes[2] = max1;
                  maxes[3] = max1;
                } else if (arguments.length === 4) {
                  maxes[0] = max1;
                  maxes[1] = max2;
                  maxes[2] = max3;
                } else if (arguments.length === 5) {
                  maxes[0] = max1;
                  maxes[1] = max2;
                  maxes[2] = max3;
                  maxes[3] = maxA;
                }
              }
              return this;
            };
            _main2.default.prototype.fill = function() {
              var _this$_renderer2;
              this._renderer._setProperty("_fillSet", true);
              this._renderer._setProperty("_doFill", true);
              (_this$_renderer2 = this._renderer).fill.apply(_this$_renderer2, arguments);
              return this;
            };
            _main2.default.prototype.noFill = function() {
              this._renderer._setProperty("_doFill", false);
              return this;
            };
            _main2.default.prototype.noStroke = function() {
              this._renderer._setProperty("_doStroke", false);
              return this;
            };
            _main2.default.prototype.stroke = function() {
              var _this$_renderer3;
              this._renderer._setProperty("_strokeSet", true);
              this._renderer._setProperty("_doStroke", true);
              (_this$_renderer3 = this._renderer).stroke.apply(_this$_renderer3, arguments);
              return this;
            };
            _main2.default.prototype.erase = function() {
              var opacityFill = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 255;
              var opacityStroke = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 255;
              this._renderer.erase(opacityFill, opacityStroke);
              return this;
            };
            _main2.default.prototype.noErase = function() {
              this._renderer.noErase();
              return this;
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/constants": 278,
            "../core/main": 290,
            "./p5.Color": 276,
            "core-js/modules/es.array.fill": 170,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        278: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.BEZIER = exports2.QUADRATIC = exports2.LINEAR = exports2._CTX_MIDDLE = exports2._DEFAULT_LEADMULT = exports2._DEFAULT_TEXT_FILL = exports2.WORD = exports2.CHAR = exports2.BOLDITALIC = exports2.BOLD = exports2.ITALIC = exports2.NORMAL = exports2.BLUR = exports2.ERODE = exports2.DILATE = exports2.POSTERIZE = exports2.INVERT = exports2.OPAQUE = exports2.GRAY = exports2.THRESHOLD = exports2.BURN = exports2.DODGE = exports2.SOFT_LIGHT = exports2.HARD_LIGHT = exports2.OVERLAY = exports2.REPLACE = exports2.SCREEN = exports2.MULTIPLY = exports2.EXCLUSION = exports2.SUBTRACT = exports2.DIFFERENCE = exports2.LIGHTEST = exports2.DARKEST = exports2.ADD = exports2.REMOVE = exports2.BLEND = exports2.UP_ARROW = exports2.TAB = exports2.SHIFT = exports2.RIGHT_ARROW = exports2.RETURN = exports2.OPTION = exports2.LEFT_ARROW = exports2.ESCAPE = exports2.ENTER = exports2.DOWN_ARROW = exports2.DELETE = exports2.CONTROL = exports2.BACKSPACE = exports2.ALT = exports2.AUTO = exports2.HSL = exports2.HSB = exports2.RGB = exports2.MITER = exports2.BEVEL = exports2.ROUND = exports2.SQUARE = exports2.PROJECT = exports2.PIE = exports2.CHORD = exports2.OPEN = exports2.CLOSE = exports2.TESS = exports2.QUAD_STRIP = exports2.QUADS = exports2.TRIANGLE_STRIP = exports2.TRIANGLE_FAN = exports2.TRIANGLES = exports2.LINE_LOOP = exports2.LINE_STRIP = exports2.LINES = exports2.POINTS = exports2.BASELINE = exports2.BOTTOM = exports2.TOP = exports2.CENTER = exports2.LEFT = exports2.RIGHT = exports2.RADIUS = exports2.CORNERS = exports2.CORNER = exports2.RAD_TO_DEG = exports2.DEG_TO_RAD = exports2.RADIANS = exports2.DEGREES = exports2.TWO_PI = exports2.TAU = exports2.QUARTER_PI = exports2.PI = exports2.HALF_PI = exports2.WAIT = exports2.TEXT = exports2.MOVE = exports2.HAND = exports2.CROSS = exports2.ARROW = exports2.WEBGL = exports2.P2D = exports2.VERSION = void 0;
            exports2.COVER = exports2.CONTAIN = exports2.FALLBACK = exports2.LABEL = exports2.AXES = exports2.GRID = exports2._DEFAULT_FILL = exports2._DEFAULT_STROKE = exports2.PORTRAIT = exports2.LANDSCAPE = exports2.MIRROR = exports2.CLAMP = exports2.REPEAT = exports2.NEAREST = exports2.IMAGE = exports2.IMMEDIATE = exports2.TEXTURE = exports2.FILL = exports2.STROKE = exports2.CURVE = void 0;
            var _PI2 = Math.PI;
            var VERSION = "1.6.0";
            exports2.VERSION = VERSION;
            var P2D = "p2d";
            exports2.P2D = P2D;
            var WEBGL = "webgl";
            exports2.WEBGL = WEBGL;
            var ARROW = "default";
            exports2.ARROW = ARROW;
            var CROSS = "crosshair";
            exports2.CROSS = CROSS;
            var HAND = "pointer";
            exports2.HAND = HAND;
            var MOVE = "move";
            exports2.MOVE = MOVE;
            var TEXT = "text";
            exports2.TEXT = TEXT;
            var WAIT = "wait";
            exports2.WAIT = WAIT;
            var HALF_PI = _PI2 / 2;
            exports2.HALF_PI = HALF_PI;
            var PI = _PI2;
            exports2.PI = PI;
            var QUARTER_PI = _PI2 / 4;
            exports2.QUARTER_PI = QUARTER_PI;
            var TAU = _PI2 * 2;
            exports2.TAU = TAU;
            var TWO_PI = _PI2 * 2;
            exports2.TWO_PI = TWO_PI;
            var DEGREES = "degrees";
            exports2.DEGREES = DEGREES;
            var RADIANS = "radians";
            exports2.RADIANS = RADIANS;
            var DEG_TO_RAD = _PI2 / 180;
            exports2.DEG_TO_RAD = DEG_TO_RAD;
            var RAD_TO_DEG = 180 / _PI2;
            exports2.RAD_TO_DEG = RAD_TO_DEG;
            var CORNER = "corner";
            exports2.CORNER = CORNER;
            var CORNERS = "corners";
            exports2.CORNERS = CORNERS;
            var RADIUS = "radius";
            exports2.RADIUS = RADIUS;
            var RIGHT = "right";
            exports2.RIGHT = RIGHT;
            var LEFT = "left";
            exports2.LEFT = LEFT;
            var CENTER = "center";
            exports2.CENTER = CENTER;
            var TOP = "top";
            exports2.TOP = TOP;
            var BOTTOM = "bottom";
            exports2.BOTTOM = BOTTOM;
            var BASELINE = "alphabetic";
            exports2.BASELINE = BASELINE;
            var POINTS = 0;
            exports2.POINTS = POINTS;
            var LINES = 1;
            exports2.LINES = LINES;
            var LINE_STRIP = 3;
            exports2.LINE_STRIP = LINE_STRIP;
            var LINE_LOOP = 2;
            exports2.LINE_LOOP = LINE_LOOP;
            var TRIANGLES = 4;
            exports2.TRIANGLES = TRIANGLES;
            var TRIANGLE_FAN = 6;
            exports2.TRIANGLE_FAN = TRIANGLE_FAN;
            var TRIANGLE_STRIP = 5;
            exports2.TRIANGLE_STRIP = TRIANGLE_STRIP;
            var QUADS = "quads";
            exports2.QUADS = QUADS;
            var QUAD_STRIP = "quad_strip";
            exports2.QUAD_STRIP = QUAD_STRIP;
            var TESS = "tess";
            exports2.TESS = TESS;
            var CLOSE = "close";
            exports2.CLOSE = CLOSE;
            var OPEN = "open";
            exports2.OPEN = OPEN;
            var CHORD = "chord";
            exports2.CHORD = CHORD;
            var PIE = "pie";
            exports2.PIE = PIE;
            var PROJECT = "square";
            exports2.PROJECT = PROJECT;
            var SQUARE = "butt";
            exports2.SQUARE = SQUARE;
            var ROUND = "round";
            exports2.ROUND = ROUND;
            var BEVEL = "bevel";
            exports2.BEVEL = BEVEL;
            var MITER = "miter";
            exports2.MITER = MITER;
            var RGB = "rgb";
            exports2.RGB = RGB;
            var HSB = "hsb";
            exports2.HSB = HSB;
            var HSL = "hsl";
            exports2.HSL = HSL;
            var AUTO = "auto";
            exports2.AUTO = AUTO;
            var ALT = 18;
            exports2.ALT = ALT;
            var BACKSPACE = 8;
            exports2.BACKSPACE = BACKSPACE;
            var CONTROL = 17;
            exports2.CONTROL = CONTROL;
            var DELETE = 46;
            exports2.DELETE = DELETE;
            var DOWN_ARROW = 40;
            exports2.DOWN_ARROW = DOWN_ARROW;
            var ENTER = 13;
            exports2.ENTER = ENTER;
            var ESCAPE = 27;
            exports2.ESCAPE = ESCAPE;
            var LEFT_ARROW = 37;
            exports2.LEFT_ARROW = LEFT_ARROW;
            var OPTION = 18;
            exports2.OPTION = OPTION;
            var RETURN = 13;
            exports2.RETURN = RETURN;
            var RIGHT_ARROW = 39;
            exports2.RIGHT_ARROW = RIGHT_ARROW;
            var SHIFT = 16;
            exports2.SHIFT = SHIFT;
            var TAB = 9;
            exports2.TAB = TAB;
            var UP_ARROW = 38;
            exports2.UP_ARROW = UP_ARROW;
            var BLEND = "source-over";
            exports2.BLEND = BLEND;
            var REMOVE = "destination-out";
            exports2.REMOVE = REMOVE;
            var ADD = "lighter";
            exports2.ADD = ADD;
            var DARKEST = "darken";
            exports2.DARKEST = DARKEST;
            var LIGHTEST = "lighten";
            exports2.LIGHTEST = LIGHTEST;
            var DIFFERENCE = "difference";
            exports2.DIFFERENCE = DIFFERENCE;
            var SUBTRACT = "subtract";
            exports2.SUBTRACT = SUBTRACT;
            var EXCLUSION = "exclusion";
            exports2.EXCLUSION = EXCLUSION;
            var MULTIPLY = "multiply";
            exports2.MULTIPLY = MULTIPLY;
            var SCREEN = "screen";
            exports2.SCREEN = SCREEN;
            var REPLACE = "copy";
            exports2.REPLACE = REPLACE;
            var OVERLAY = "overlay";
            exports2.OVERLAY = OVERLAY;
            var HARD_LIGHT = "hard-light";
            exports2.HARD_LIGHT = HARD_LIGHT;
            var SOFT_LIGHT = "soft-light";
            exports2.SOFT_LIGHT = SOFT_LIGHT;
            var DODGE = "color-dodge";
            exports2.DODGE = DODGE;
            var BURN = "color-burn";
            exports2.BURN = BURN;
            var THRESHOLD = "threshold";
            exports2.THRESHOLD = THRESHOLD;
            var GRAY = "gray";
            exports2.GRAY = GRAY;
            var OPAQUE = "opaque";
            exports2.OPAQUE = OPAQUE;
            var INVERT = "invert";
            exports2.INVERT = INVERT;
            var POSTERIZE = "posterize";
            exports2.POSTERIZE = POSTERIZE;
            var DILATE = "dilate";
            exports2.DILATE = DILATE;
            var ERODE = "erode";
            exports2.ERODE = ERODE;
            var BLUR = "blur";
            exports2.BLUR = BLUR;
            var NORMAL = "normal";
            exports2.NORMAL = NORMAL;
            var ITALIC = "italic";
            exports2.ITALIC = ITALIC;
            var BOLD = "bold";
            exports2.BOLD = BOLD;
            var BOLDITALIC = "bold italic";
            exports2.BOLDITALIC = BOLDITALIC;
            var CHAR = "CHAR";
            exports2.CHAR = CHAR;
            var WORD = "WORD";
            exports2.WORD = WORD;
            var _DEFAULT_TEXT_FILL = "#000000";
            exports2._DEFAULT_TEXT_FILL = _DEFAULT_TEXT_FILL;
            var _DEFAULT_LEADMULT = 1.25;
            exports2._DEFAULT_LEADMULT = _DEFAULT_LEADMULT;
            var _CTX_MIDDLE = "middle";
            exports2._CTX_MIDDLE = _CTX_MIDDLE;
            var LINEAR = "linear";
            exports2.LINEAR = LINEAR;
            var QUADRATIC = "quadratic";
            exports2.QUADRATIC = QUADRATIC;
            var BEZIER = "bezier";
            exports2.BEZIER = BEZIER;
            var CURVE = "curve";
            exports2.CURVE = CURVE;
            var STROKE = "stroke";
            exports2.STROKE = STROKE;
            var FILL = "fill";
            exports2.FILL = FILL;
            var TEXTURE = "texture";
            exports2.TEXTURE = TEXTURE;
            var IMMEDIATE = "immediate";
            exports2.IMMEDIATE = IMMEDIATE;
            var IMAGE = "image";
            exports2.IMAGE = IMAGE;
            var NEAREST = "nearest";
            exports2.NEAREST = NEAREST;
            var REPEAT = "repeat";
            exports2.REPEAT = REPEAT;
            var CLAMP = "clamp";
            exports2.CLAMP = CLAMP;
            var MIRROR = "mirror";
            exports2.MIRROR = MIRROR;
            var LANDSCAPE = "landscape";
            exports2.LANDSCAPE = LANDSCAPE;
            var PORTRAIT = "portrait";
            exports2.PORTRAIT = PORTRAIT;
            var _DEFAULT_STROKE = "#000000";
            exports2._DEFAULT_STROKE = _DEFAULT_STROKE;
            var _DEFAULT_FILL = "#FFFFFF";
            exports2._DEFAULT_FILL = _DEFAULT_FILL;
            var GRID = "grid";
            exports2.GRID = GRID;
            var AXES = "axes";
            exports2.AXES = AXES;
            var LABEL = "label";
            exports2.LABEL = LABEL;
            var FALLBACK = "fallback";
            exports2.FALLBACK = FALLBACK;
            var CONTAIN = "contain";
            exports2.CONTAIN = CONTAIN;
            var COVER = "cover";
            exports2.COVER = COVER;
          },
          {}
        ],
        279: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.string.includes");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.search");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.string.includes");
            _dereq_2("core-js/modules/es.string.search");
            _dereq_2("core-js/modules/es.string.split");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("./main"));
            var C = _interopRequireWildcard2(_dereq_2("./constants"));
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            var standardCursors = [
              C.ARROW,
              C.CROSS,
              C.HAND,
              C.MOVE,
              C.TEXT,
              C.WAIT
            ];
            _main2.default.prototype._frameRate = 0;
            _main2.default.prototype._lastFrameTime = window.performance.now();
            _main2.default.prototype._targetFrameRate = 60;
            var _windowPrint = window.print;
            _main2.default.prototype.print = function() {
              if (!arguments.length) {
                _windowPrint();
              } else {
                var _console;
                (_console = console).log.apply(_console, arguments);
              }
            };
            _main2.default.prototype.frameCount = 0;
            _main2.default.prototype.deltaTime = 0;
            _main2.default.prototype.focused = document.hasFocus();
            _main2.default.prototype.cursor = function(type, x, y) {
              var cursor = "auto";
              var canvas = this._curElement.elt;
              if (standardCursors.includes(type)) {
                cursor = type;
              } else if (typeof type === "string") {
                var coords = "";
                if (x && y && typeof x === "number" && typeof y === "number") {
                  coords = "".concat(x, " ").concat(y);
                }
                if (type.substring(0, 7) === "http://" || type.substring(0, 8) === "https://") {
                  cursor = "url(".concat(type, ") ").concat(coords, ", auto");
                } else if (/\.(cur|jpg|jpeg|gif|png|CUR|JPG|JPEG|GIF|PNG)$/.test(type)) {
                  cursor = "url(".concat(type, ") ").concat(coords, ", auto");
                } else {
                  cursor = type;
                }
              }
              canvas.style.cursor = cursor;
            };
            _main2.default.prototype.frameRate = function(fps) {
              _main2.default._validateParameters("frameRate", arguments);
              if (typeof fps !== "number" || fps < 0) {
                return this._frameRate;
              } else {
                this._setProperty("_targetFrameRate", fps);
                if (fps === 0) {
                  this._setProperty("_frameRate", fps);
                }
                return this;
              }
            };
            _main2.default.prototype.getFrameRate = function() {
              return this.frameRate();
            };
            _main2.default.prototype.setFrameRate = function(fps) {
              return this.frameRate(fps);
            };
            _main2.default.prototype.getTargetFrameRate = function() {
              return this._targetFrameRate;
            };
            _main2.default.prototype.noCursor = function() {
              this._curElement.elt.style.cursor = "none";
            };
            _main2.default.prototype.displayWidth = screen.width;
            _main2.default.prototype.displayHeight = screen.height;
            _main2.default.prototype.windowWidth = getWindowWidth();
            _main2.default.prototype.windowHeight = getWindowHeight();
            _main2.default.prototype._onresize = function(e2) {
              this._setProperty("windowWidth", getWindowWidth());
              this._setProperty("windowHeight", getWindowHeight());
              var context = this._isGlobal ? window : this;
              var executeDefault;
              if (typeof context.windowResized === "function") {
                executeDefault = context.windowResized(e2);
                if (executeDefault !== void 0 && !executeDefault) {
                  e2.preventDefault();
                }
              }
            };
            function getWindowWidth() {
              return window.innerWidth || document.documentElement && document.documentElement.clientWidth || document.body && document.body.clientWidth || 0;
            }
            function getWindowHeight() {
              return window.innerHeight || document.documentElement && document.documentElement.clientHeight || document.body && document.body.clientHeight || 0;
            }
            _main2.default.prototype.width = 0;
            _main2.default.prototype.height = 0;
            _main2.default.prototype.fullscreen = function(val) {
              _main2.default._validateParameters("fullscreen", arguments);
              if (typeof val === "undefined") {
                return document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;
              } else {
                if (val) {
                  launchFullscreen(document.documentElement);
                } else {
                  exitFullscreen();
                }
              }
            };
            _main2.default.prototype.pixelDensity = function(val) {
              _main2.default._validateParameters("pixelDensity", arguments);
              var returnValue;
              if (typeof val === "number") {
                if (val !== this._pixelDensity) {
                  this._pixelDensity = val;
                }
                returnValue = this;
                this.resizeCanvas(this.width, this.height, true);
              } else {
                returnValue = this._pixelDensity;
              }
              return returnValue;
            };
            _main2.default.prototype.displayDensity = function() {
              return window.devicePixelRatio;
            };
            function launchFullscreen(element2) {
              var enabled = document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled;
              if (!enabled) {
                throw new Error("Fullscreen not enabled in this browser.");
              }
              if (element2.requestFullscreen) {
                element2.requestFullscreen();
              } else if (element2.mozRequestFullScreen) {
                element2.mozRequestFullScreen();
              } else if (element2.webkitRequestFullscreen) {
                element2.webkitRequestFullscreen();
              } else if (element2.msRequestFullscreen) {
                element2.msRequestFullscreen();
              }
            }
            function exitFullscreen() {
              if (document.exitFullscreen) {
                document.exitFullscreen();
              } else if (document.mozCancelFullScreen) {
                document.mozCancelFullScreen();
              } else if (document.webkitExitFullscreen) {
                document.webkitExitFullscreen();
              } else if (document.msExitFullscreen) {
                document.msExitFullscreen();
              }
            }
            _main2.default.prototype.getURL = function() {
              return location.href;
            };
            _main2.default.prototype.getURLPath = function() {
              return location.pathname.split("/").filter(function(v) {
                return v !== "";
              });
            };
            _main2.default.prototype.getURLParams = function() {
              var re = /[?&]([^&=]+)(?:[&=])([^&=]+)/gim;
              var m;
              var v = {};
              while ((m = re.exec(location.search)) != null) {
                if (m.index === re.lastIndex) {
                  re.lastIndex++;
                }
                v[m[1]] = m[2];
              }
              return v;
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "./constants": 278,
            "./main": 290,
            "core-js/modules/es.array.concat": 167,
            "core-js/modules/es.array.filter": 171,
            "core-js/modules/es.array.includes": 174,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.string.includes": 203,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.string.search": 208,
            "core-js/modules/es.string.split": 209,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        280: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var strings = {
              ReferenceError: [
                {
                  msg: "{{}} is not defined",
                  type: "NOTDEFINED",
                  browser: "all"
                },
                {
                  msg: "Can't find variable: {{}}",
                  type: "NOTDEFINED",
                  browser: "Safari"
                },
                {
                  msg: "Cannot access '{{.}}' before initialization",
                  type: "CANNOTACCESS",
                  browser: "Chrome"
                },
                {
                  msg: "can't access lexical declaration '{{.}}' before initialization",
                  type: "CANNOTACCESS",
                  browser: "Firefox"
                }
              ],
              SyntaxError: [
                {
                  msg: "illegal character",
                  type: "INVALIDTOKEN",
                  browser: "Firefox"
                },
                {
                  msg: "Invalid character",
                  type: "INVALIDTOKEN",
                  browser: "Safari"
                },
                {
                  msg: "Invalid or unexpected token",
                  type: "INVALIDTOKEN",
                  browser: "Chrome"
                },
                {
                  msg: "Unexpected token '{{.}}'",
                  type: "UNEXPECTEDTOKEN",
                  browser: "Chrome"
                },
                {
                  msg: "expected {{.}}, got '{{.}}'",
                  type: "UNEXPECTEDTOKEN",
                  browser: "Chrome"
                },
                {
                  msg: "Identifier '{{.}}' has already been declared",
                  type: "REDECLAREDVARIABLE",
                  browser: "Chrome"
                },
                {
                  msg: "redeclaration of {} {{.}}",
                  type: "REDECLAREDVARIABLE",
                  browser: "Firefox"
                },
                {
                  msg: "Missing initializer in const declaration",
                  type: "MISSINGINITIALIZER",
                  browser: "Chrome"
                },
                {
                  msg: "missing = in const declaration",
                  type: "MISSINGINITIALIZER",
                  browser: "Firefox"
                },
                {
                  msg: "Illegal return statement",
                  type: "BADRETURNORYIELD",
                  browser: "Chrome"
                },
                {
                  msg: "return not in function",
                  type: "BADRETURNORYIELD",
                  browser: "Firefox"
                }
              ],
              TypeError: [
                {
                  msg: "{{.}} is not a function",
                  type: "NOTFUNC",
                  browser: "all"
                },
                {
                  msg: "Cannot read {{.}} null",
                  type: "READNULL",
                  browser: "Chrome"
                },
                {
                  msg: "{{.}} is null",
                  type: "READNULL",
                  browser: "Firefox"
                },
                {
                  msg: "Cannot read {{.}} undefined",
                  type: "READUDEFINED",
                  browser: "Chrome"
                },
                {
                  msg: "{{.}} is undefined",
                  type: "READUDEFINED",
                  browser: "Firefox"
                },
                {
                  msg: "Assignment to constant variable",
                  type: "CONSTASSIGN",
                  browser: "Chrome"
                },
                {
                  msg: "invalid assignment to const '{{.}}'",
                  type: "CONSTASSIGN",
                  browser: "Firefox"
                }
              ]
            };
            var _default2 = strings;
            exports2.default = _default2;
          },
          {}
        ],
        281: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.for-each");
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.join");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.array.some");
            _dereq_2("core-js/modules/es.function.name");
            _dereq_2("core-js/modules/es.object.assign");
            _dereq_2("core-js/modules/es.object.get-own-property-names");
            _dereq_2("core-js/modules/es.object.keys");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.constructor");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.match");
            _dereq_2("core-js/modules/es.string.replace");
            _dereq_2("core-js/modules/es.string.search");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/web.dom-collections.for-each");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.for-each");
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.join");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.array.some");
            _dereq_2("core-js/modules/es.function.name");
            _dereq_2("core-js/modules/es.object.assign");
            _dereq_2("core-js/modules/es.object.get-own-property-names");
            _dereq_2("core-js/modules/es.object.keys");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.constructor");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.match");
            _dereq_2("core-js/modules/es.string.replace");
            _dereq_2("core-js/modules/es.string.search");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/web.dom-collections.for-each");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../main"));
            var _internationalization2 = _dereq_2("../internationalization");
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            function _slicedToArray(arr, i2) {
              return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _nonIterableRest();
            }
            function _nonIterableRest() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
            function _iterableToArrayLimit(arr, i2) {
              if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
                return;
              }
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = void 0;
              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);
                  if (i2 && _arr.length === i2)
                    break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"] != null)
                    _i["return"]();
                } finally {
                  if (_d)
                    throw _e;
                }
              }
              return _arr;
            }
            function _arrayWithHoles(arr) {
              if (Array.isArray(arr))
                return arr;
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            var typeColors = [
              "#2D7BB6",
              "#EE9900",
              "#4DB200",
              "#C83C00"
            ];
            var misusedAtTopLevelCode = null;
            var defineMisusedAtTopLevelCode = null;
            var EDIT_DIST_THRESHOLD = 2;
            var ENABLE_FES_STYLING = false;
            if (typeof IS_MINIFIED !== "undefined") {
              _main2.default._friendlyError = _main2.default._checkForUserDefinedFunctions = _main2.default._fesErrorMonitor = function() {
              };
            } else {
              var doFriendlyWelcome = false;
              var errorTable = _dereq_2("./browser_errors").default;
              var class2type = {};
              var _toString = class2type.toString;
              var names = [
                "Boolean",
                "Number",
                "String",
                "Function",
                "Array",
                "Date",
                "RegExp",
                "Object",
                "Error"
              ];
              for (var n = 0; n < names.length; n++) {
                class2type["[object ".concat(names[n], "]")] = names[n].toLowerCase();
              }
              var getType = function getType2(obj) {
                if (obj == null) {
                  return "".concat(obj);
                }
                return _typeof3(obj) === "object" || typeof obj === "function" ? class2type[_toString.call(obj)] || "object" : _typeof3(obj);
              };
              var entryPoints = [
                "setup",
                "draw",
                "preload",
                "deviceMoved",
                "deviceTurned",
                "deviceShaken",
                "doubleClicked",
                "mousePressed",
                "mouseReleased",
                "mouseMoved",
                "mouseDragged",
                "mouseClicked",
                "mouseWheel",
                "touchStarted",
                "touchMoved",
                "touchEnded",
                "keyPressed",
                "keyReleased",
                "keyTyped",
                "windowResized"
              ];
              var friendlyWelcome = function friendlyWelcome2() {
                var welcomeMessage = (0, _internationalization2.translator)("fes.pre", {
                  message: (0, _internationalization2.translator)("fes.welcome")
                });
                console.log("    _ \n /\\| |/\\ \n \\ ` ' /  \n / , . \\  \n \\/|_|\\/ \n\n" + welcomeMessage);
              };
              var mapToReference = function mapToReference2(message, func) {
                var msgWithReference = "";
                if (func == null || func.substring(0, 4) === "load") {
                  msgWithReference = message;
                } else {
                  var methodParts = func.split(".");
                  var referenceSection = methodParts.length > 1 ? "".concat(methodParts[0], ".").concat(methodParts[1]) : "p5";
                  var funcName = methodParts.length === 1 ? func : methodParts.slice(2).join("/");
                  msgWithReference = "".concat(message, " (http://p5js.org/reference/#/").concat(referenceSection, "/").concat(funcName, ")");
                }
                return msgWithReference;
              };
              _main2.default._report = function(message, func, color) {
                var log = _main2.default._fesLogger == null ? console.log.bind(console) : _main2.default._fesLogger;
                if (doFriendlyWelcome) {
                  friendlyWelcome();
                  doFriendlyWelcome = false;
                }
                if ("undefined" === getType(color)) {
                  color = "#B40033";
                } else if (getType(color) === "number") {
                  color = typeColors[color];
                }
                message = mapToReference(message, func);
                var style = [
                  "color: ".concat(color),
                  "font-family: Arial",
                  "font-size: larger"
                ];
                var prefixedMsg = (0, _internationalization2.translator)("fes.pre", {
                  message
                });
                if (ENABLE_FES_STYLING) {
                  log("%c" + prefixedMsg, style.join(";"));
                } else {
                  log(prefixedMsg);
                }
              };
              _main2.default._friendlyError = function(message, func, color) {
                _main2.default._report(message, func, color);
              };
              _main2.default._friendlyAutoplayError = function(src) {
                var message = (0, _internationalization2.translator)("fes.autoplay", {
                  src,
                  url: "https://developer.mozilla.org/docs/Web/Media/Autoplay_guide"
                });
                console.log((0, _internationalization2.translator)("fes.pre", {
                  message
                }));
              };
              var computeEditDistance = function computeEditDistance2(w1, w2) {
                var l1 = w1.length, l2 = w2.length;
                if (l1 === 0)
                  return w2;
                if (l2 === 0)
                  return w1;
                var prev = [];
                var cur = [];
                for (var j = 0; j < l2 + 1; j++) {
                  cur[j] = j;
                }
                prev = cur;
                for (var i2 = 1; i2 < l1 + 1; i2++) {
                  cur = [];
                  for (var _j = 0; _j < l2 + 1; _j++) {
                    if (_j === 0) {
                      cur[_j] = i2;
                    } else {
                      var a1 = w1[i2 - 1], a2 = w2[_j - 1];
                      var temp = 999999;
                      var cost = a1.toLowerCase() === a2.toLowerCase() ? 0 : 1;
                      temp = temp > cost + prev[_j - 1] ? cost + prev[_j - 1] : temp;
                      temp = temp > 1 + cur[_j - 1] ? 1 + cur[_j - 1] : temp;
                      temp = temp > 1 + prev[_j] ? 1 + prev[_j] : temp;
                      cur[_j] = temp;
                    }
                  }
                  prev = cur;
                }
                return cur[l2];
              };
              var checkForUserDefinedFunctions = function checkForUserDefinedFunctions2(context) {
                if (_main2.default.disableFriendlyErrors)
                  return;
                var instanceMode = context instanceof _main2.default;
                context = instanceMode ? context : window;
                var fnNames = entryPoints;
                var fxns = {};
                fnNames.forEach(function(symbol) {
                  fxns[symbol.toLowerCase()] = symbol;
                });
                for (var _i = 0, _Object$keys = Object.keys(context); _i < _Object$keys.length; _i++) {
                  var prop = _Object$keys[_i];
                  var lowercase = prop.toLowerCase();
                  if (fxns[lowercase] && !context[fxns[lowercase]] && typeof context[prop] === "function") {
                    var msg = (0, _internationalization2.translator)("fes.checkUserDefinedFns", {
                      name: prop,
                      actualName: fxns[lowercase]
                    });
                    _main2.default._friendlyError(msg, fxns[lowercase]);
                  }
                }
              };
              var handleMisspelling = function handleMisspelling2(errSym, error) {
                if (!misusedAtTopLevelCode) {
                  defineMisusedAtTopLevelCode();
                }
                var distanceMap = {};
                var min = 999999;
                misusedAtTopLevelCode.forEach(function(symbol) {
                  var dist = computeEditDistance(errSym, symbol.name);
                  if (distanceMap[dist])
                    distanceMap[dist].push(symbol);
                  else
                    distanceMap[dist] = [
                      symbol
                    ];
                  if (dist < min)
                    min = dist;
                });
                if (min > Math.min(EDIT_DIST_THRESHOLD, errSym.length))
                  return false;
                var matchedSymbols = distanceMap[min].filter(function(symbol) {
                  return symbol.name !== errSym;
                });
                if (matchedSymbols.length !== 0) {
                  var parsed = _main2.default._getErrorStackParser().parse(error);
                  var locationObj;
                  if (parsed && parsed[0] && parsed[0].fileName && parsed[0].lineNumber && parsed[0].columnNumber) {
                    locationObj = {
                      location: "".concat(parsed[0].fileName, ":").concat(parsed[0].lineNumber, ":").concat(parsed[0].columnNumber),
                      file: parsed[0].fileName.split("/").slice(-1),
                      line: parsed[0].lineNumber
                    };
                  }
                  var msg;
                  if (matchedSymbols.length === 1) {
                    msg = (0, _internationalization2.translator)("fes.misspelling", {
                      name: errSym,
                      actualName: matchedSymbols[0].name,
                      type: matchedSymbols[0].type,
                      location: locationObj ? (0, _internationalization2.translator)("fes.location", locationObj) : "",
                      count: matchedSymbols.length
                    });
                  } else {
                    var suggestions = matchedSymbols.map(function(symbol) {
                      var message = "▶️ " + symbol.name + (symbol.type === "function" ? "()" : "");
                      return mapToReference(message, symbol.name);
                    }).join("\n");
                    msg = (0, _internationalization2.translator)("fes.misspelling", {
                      name: errSym,
                      suggestions,
                      location: locationObj ? (0, _internationalization2.translator)("fes.location", locationObj) : "",
                      count: matchedSymbols.length
                    });
                  }
                  _main2.default._friendlyError(msg, matchedSymbols.length === 1 ? matchedSymbols[0].name : void 0);
                  return true;
                }
                return false;
              };
              var printFriendlyStack = function printFriendlyStack2(friendlyStack) {
                var log = _main2.default._fesLogger && typeof _main2.default._fesLogger === "function" ? _main2.default._fesLogger : console.log.bind(console);
                if (friendlyStack.length > 1) {
                  var stacktraceMsg = "";
                  friendlyStack.forEach(function(frame, idx) {
                    var location2 = "".concat(frame.fileName, ":").concat(frame.lineNumber, ":").concat(frame.columnNumber);
                    var frameMsg, translationObj = {
                      func: frame.functionName,
                      line: frame.lineNumber,
                      location: location2,
                      file: frame.fileName.split("/").slice(-1)
                    };
                    if (idx === 0) {
                      frameMsg = (0, _internationalization2.translator)("fes.globalErrors.stackTop", translationObj);
                    } else {
                      frameMsg = (0, _internationalization2.translator)("fes.globalErrors.stackSubseq", translationObj);
                    }
                    stacktraceMsg += frameMsg;
                  });
                  log(stacktraceMsg);
                }
              };
              var processStack = function processStack2(error, stacktrace) {
                if (!stacktrace)
                  return [
                    false,
                    null
                  ];
                stacktrace.forEach(function(frame) {
                  frame.functionName = frame.functionName || "";
                });
                var isInternal = false;
                var p5FileName, friendlyStack, currentEntryPoint;
                for (var i2 = stacktrace.length - 1; i2 >= 0; i2--) {
                  var splitted = stacktrace[i2].functionName.split(".");
                  if (entryPoints.includes(splitted[splitted.length - 1])) {
                    friendlyStack = stacktrace.slice(0, i2 + 1);
                    currentEntryPoint = splitted[splitted.length - 1];
                    for (var j = 0; j < i2; j++) {
                      if (stacktrace[j].functionName.search("_main.default") !== -1) {
                        isInternal = true;
                        p5FileName = stacktrace[j].fileName;
                        break;
                      }
                    }
                    break;
                  }
                }
                if (!friendlyStack)
                  friendlyStack = stacktrace;
                if (isInternal) {
                  friendlyStack = friendlyStack.map(function(frame, index) {
                    frame.frameIndex = index;
                    return frame;
                  }).filter(function(frame) {
                    return frame.fileName !== p5FileName;
                  });
                  if (friendlyStack.length === 0)
                    return [
                      true,
                      null
                    ];
                  var func = stacktrace[friendlyStack[0].frameIndex - 1].functionName.split(".").slice(-1)[0];
                  var locationObj;
                  if (friendlyStack[0].fileName && friendlyStack[0].lineNumber && friendlyStack[0].columnNumber) {
                    locationObj = {
                      location: "".concat(friendlyStack[0].fileName, ":").concat(friendlyStack[0].lineNumber, ":").concat(friendlyStack[0].columnNumber),
                      file: friendlyStack[0].fileName.split("/").slice(-1),
                      line: friendlyStack[0].lineNumber
                    };
                    if (_main2.default._fesLogCache[locationObj.location])
                      return [
                        true,
                        null
                      ];
                  }
                  if (currentEntryPoint === "preload" && _main2.default.prototype._preloadMethods[func] == null) {
                    _main2.default._friendlyError((0, _internationalization2.translator)("fes.wrongPreload", {
                      func,
                      location: locationObj ? (0, _internationalization2.translator)("fes.location", locationObj) : "",
                      error: error.message
                    }), "preload");
                  } else {
                    _main2.default._friendlyError((0, _internationalization2.translator)("fes.libraryError", {
                      func,
                      location: locationObj ? (0, _internationalization2.translator)("fes.location", locationObj) : "",
                      error: error.message
                    }), func);
                  }
                  if (friendlyStack && friendlyStack.length) {
                    printFriendlyStack(friendlyStack);
                  }
                }
                return [
                  isInternal,
                  friendlyStack
                ];
              };
              var fesErrorMonitor = function fesErrorMonitor2(e2) {
                if (_main2.default.disableFriendlyErrors)
                  return;
                var error;
                if (e2 instanceof Error) {
                  error = e2;
                } else if (e2 instanceof ErrorEvent) {
                  error = e2.error;
                } else if (e2 instanceof PromiseRejectionEvent) {
                  error = e2.reason;
                  if (!(error instanceof Error))
                    return;
                }
                if (!error)
                  return;
                var stacktrace = _main2.default._getErrorStackParser().parse(error);
                var _processStack = processStack(error, stacktrace), _processStack2 = _slicedToArray(_processStack, 2), isInternal = _processStack2[0], friendlyStack = _processStack2[1];
                if (isInternal) {
                  return;
                }
                var errList = errorTable[error.name];
                if (!errList)
                  return;
                var matchedError;
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = void 0;
                try {
                  for (var _iterator = errList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var obj = _step.value;
                    var string = obj.msg;
                    string = string.replace(new RegExp("{{}}", "g"), "([a-zA-Z0-9_]+)");
                    string = string.replace(new RegExp("{{.}}", "g"), "(.+)");
                    string = string.replace(new RegExp("{}", "g"), "(?:[a-zA-Z0-9_]+)");
                    var matched = error.message.match(string);
                    if (matched) {
                      matchedError = Object.assign({}, obj);
                      matchedError.match = matched;
                      break;
                    }
                  }
                } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                      _iterator.return();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                }
                if (!matchedError)
                  return;
                var locationObj;
                if (stacktrace && stacktrace[0].fileName && stacktrace[0].lineNumber && stacktrace[0].columnNumber) {
                  locationObj = {
                    location: "".concat(stacktrace[0].fileName, ":").concat(stacktrace[0].lineNumber, ":").concat(stacktrace[0].columnNumber),
                    file: stacktrace[0].fileName.split("/").slice(-1),
                    line: friendlyStack[0].lineNumber
                  };
                }
                switch (error.name) {
                  case "SyntaxError": {
                    switch (matchedError.type) {
                      case "INVALIDTOKEN": {
                        var url2 = "https://developer.mozilla.org/docs/Web/JavaScript/Reference/Errors/Illegal_character#What_went_wrong";
                        _main2.default._friendlyError((0, _internationalization2.translator)("fes.globalErrors.syntax.invalidToken", {
                          url: url2
                        }));
                        break;
                      }
                      case "UNEXPECTEDTOKEN": {
                        var _url = "https://developer.mozilla.org/docs/Web/JavaScript/Reference/Errors/Unexpected_token#What_went_wrong";
                        _main2.default._friendlyError((0, _internationalization2.translator)("fes.globalErrors.syntax.unexpectedToken", {
                          url: _url
                        }));
                        break;
                      }
                      case "REDECLAREDVARIABLE": {
                        var errSym = matchedError.match[1];
                        var _url22 = "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter#what_went_wrong";
                        _main2.default._friendlyError((0, _internationalization2.translator)("fes.globalErrors.syntax.redeclaredVariable", {
                          symbol: errSym,
                          url: _url22
                        }));
                        break;
                      }
                      case "MISSINGINITIALIZER": {
                        var _url3 = "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const#what_went_wrong";
                        _main2.default._friendlyError((0, _internationalization2.translator)("fes.globalErrors.syntax.missingInitializer", {
                          url: _url3
                        }));
                        break;
                      }
                      case "BADRETURNORYIELD": {
                        var _url4 = "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield#what_went_wrong";
                        _main2.default._friendlyError((0, _internationalization2.translator)("fes.globalErrors.syntax.badReturnOrYield", {
                          url: _url4
                        }));
                        break;
                      }
                    }
                    break;
                  }
                  case "ReferenceError": {
                    switch (matchedError.type) {
                      case "NOTDEFINED": {
                        var _errSym = matchedError.match[1];
                        if (_errSym && handleMisspelling(_errSym, error)) {
                          break;
                        }
                        var _url5 = "https://p5js.org/examples/data-variable-scope.html";
                        _main2.default._friendlyError((0, _internationalization2.translator)("fes.globalErrors.reference.notDefined", {
                          url: _url5,
                          symbol: _errSym,
                          location: locationObj ? (0, _internationalization2.translator)("fes.location", locationObj) : ""
                        }));
                        if (friendlyStack)
                          printFriendlyStack(friendlyStack);
                        break;
                      }
                      case "CANNOTACCESS": {
                        var _errSym2 = matchedError.match[1];
                        var _url6 = "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init#what_went_wrong";
                        _main2.default._friendlyError((0, _internationalization2.translator)("fes.globalErrors.reference.cannotAccess", {
                          url: _url6,
                          symbol: _errSym2,
                          location: locationObj ? (0, _internationalization2.translator)("fes.location", locationObj) : ""
                        }));
                        if (friendlyStack)
                          printFriendlyStack(friendlyStack);
                        break;
                      }
                    }
                    break;
                  }
                  case "TypeError": {
                    switch (matchedError.type) {
                      case "NOTFUNC": {
                        var _errSym3 = matchedError.match[1];
                        var splitSym = _errSym3.split(".");
                        var _url7 = "https://developer.mozilla.org/docs/Web/JavaScript/Reference/Errors/Not_a_function#What_went_wrong";
                        var translationObj = {
                          url: _url7,
                          symbol: splitSym[splitSym.length - 1],
                          obj: splitSym.slice(0, splitSym.length - 1).join("."),
                          location: locationObj ? (0, _internationalization2.translator)("fes.location", locationObj) : ""
                        };
                        if (splitSym.length > 1) {
                          _main2.default._friendlyError((0, _internationalization2.translator)("fes.globalErrors.type.notfuncObj", translationObj));
                        } else {
                          _main2.default._friendlyError((0, _internationalization2.translator)("fes.globalErrors.type.notfunc", translationObj));
                        }
                        if (friendlyStack)
                          printFriendlyStack(friendlyStack);
                        break;
                      }
                      case "READNULL": {
                        var _errSym4 = matchedError.match[1];
                        var _url8 = "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_property#what_went_wrong";
                        _main2.default._friendlyError((0, _internationalization2.translator)("fes.globalErrors.type.readFromNull", {
                          url: _url8,
                          symbol: _errSym4,
                          location: locationObj ? (0, _internationalization2.translator)("fes.location", locationObj) : ""
                        }));
                        if (friendlyStack)
                          printFriendlyStack(friendlyStack);
                        break;
                      }
                      case "READUDEFINED": {
                        var _errSym5 = matchedError.match[1];
                        var _url9 = "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_property#what_went_wrong";
                        _main2.default._friendlyError((0, _internationalization2.translator)("fes.globalErrors.type.readFromUndefined", {
                          url: _url9,
                          symbol: _errSym5,
                          location: locationObj ? (0, _internationalization2.translator)("fes.location", locationObj) : ""
                        }));
                        if (friendlyStack)
                          printFriendlyStack(friendlyStack);
                        break;
                      }
                      case "CONSTASSIGN": {
                        var _url10 = "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment#what_went_wrong";
                        _main2.default._friendlyError((0, _internationalization2.translator)("fes.globalErrors.type.constAssign", {
                          url: _url10,
                          location: locationObj ? (0, _internationalization2.translator)("fes.location", locationObj) : ""
                        }));
                        if (friendlyStack)
                          printFriendlyStack(friendlyStack);
                        break;
                      }
                    }
                  }
                }
              };
              _main2.default._fesErrorMonitor = fesErrorMonitor;
              _main2.default._checkForUserDefinedFunctions = checkForUserDefinedFunctions;
              _main2.default._fesLogger = null;
              _main2.default._fesLogCache = {};
              window.addEventListener("load", checkForUserDefinedFunctions, false);
              window.addEventListener("error", _main2.default._fesErrorMonitor, false);
              window.addEventListener("unhandledrejection", _main2.default._fesErrorMonitor, false);
            }
            misusedAtTopLevelCode = null;
            var FAQ_URL = "https://github.com/processing/p5.js/wiki/p5.js-overview#why-cant-i-assign-variables-using-p5-functions-and-variables-before-setup";
            defineMisusedAtTopLevelCode = function defineMisusedAtTopLevelCode2() {
              var uniqueNamesFound = {};
              var getSymbols = function getSymbols2(obj) {
                return Object.getOwnPropertyNames(obj).filter(function(name) {
                  if (name[0] === "_") {
                    return false;
                  }
                  if (name in uniqueNamesFound) {
                    return false;
                  }
                  uniqueNamesFound[name] = true;
                  return true;
                }).map(function(name) {
                  var type;
                  if (typeof obj[name] === "function") {
                    type = "function";
                  } else if (name === name.toUpperCase()) {
                    type = "constant";
                  } else {
                    type = "variable";
                  }
                  return {
                    name,
                    type
                  };
                });
              };
              misusedAtTopLevelCode = [].concat(
                getSymbols(_main2.default.prototype),
                // At present, p5 only adds its constants to p5.prototype during
                // construction, which may not have happened at the time a
                // ReferenceError is thrown, so we'll manually add them to our list.
                getSymbols(_dereq_2("../constants"))
              );
              misusedAtTopLevelCode.sort(function(a, b) {
                return b.name.length - a.name.length;
              });
            };
            var helpForMisusedAtTopLevelCode = function helpForMisusedAtTopLevelCode2(e2, log) {
              if (!log) {
                log = console.log.bind(console);
              }
              if (!misusedAtTopLevelCode) {
                defineMisusedAtTopLevelCode();
              }
              misusedAtTopLevelCode.some(function(symbol) {
                if (e2.message && e2.message.match("\\W?".concat(symbol.name, "\\W")) !== null) {
                  var symbolName = symbol.type === "function" ? "".concat(symbol.name, "()") : symbol.name;
                  if (typeof IS_MINIFIED !== "undefined") {
                    log("Did you just try to use p5.js's ".concat(symbolName, " ").concat(symbol.type, "? If so, you may want to move it into your sketch's setup() function.\n\nFor more details, see: ").concat(FAQ_URL));
                  } else {
                    log((0, _internationalization2.translator)("fes.misusedTopLevel", {
                      symbolName,
                      symbolType: symbol.type,
                      url: FAQ_URL
                    }));
                  }
                  return true;
                }
              });
            };
            _main2.default.prototype._helpForMisusedAtTopLevelCode = helpForMisusedAtTopLevelCode;
            if (document.readyState !== "complete") {
              window.addEventListener("error", helpForMisusedAtTopLevelCode, false);
              window.addEventListener("load", function() {
                window.removeEventListener("error", helpForMisusedAtTopLevelCode, false);
              });
            }
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../constants": 278,
            "../internationalization": 288,
            "../main": 290,
            "./browser_errors": 280,
            "core-js/modules/es.array.concat": 167,
            "core-js/modules/es.array.filter": 171,
            "core-js/modules/es.array.for-each": 172,
            "core-js/modules/es.array.includes": 174,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.join": 177,
            "core-js/modules/es.array.map": 179,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.array.some": 181,
            "core-js/modules/es.function.name": 183,
            "core-js/modules/es.object.assign": 190,
            "core-js/modules/es.object.get-own-property-names": 192,
            "core-js/modules/es.object.keys": 194,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.constructor": 198,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.string.match": 205,
            "core-js/modules/es.string.replace": 207,
            "core-js/modules/es.string.search": 208,
            "core-js/modules/es.string.split": 209,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/web.dom-collections.for-each": 247,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        282: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../main"));
            var _internationalization2 = _dereq_2("../internationalization");
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            if (typeof IS_MINIFIED !== "undefined") {
              _main2.default._friendlyFileLoadError = function() {
              };
            } else {
              var fileLoadErrorCases = function fileLoadErrorCases2(num, filePath) {
                var suggestion = (0, _internationalization2.translator)("fes.fileLoadError.suggestion", {
                  filePath,
                  url: "https://github.com/processing/p5.js/wiki/Local-server"
                });
                switch (num) {
                  case 0:
                    return {
                      message: (0, _internationalization2.translator)("fes.fileLoadError.image", {
                        suggestion
                      }),
                      method: "loadImage"
                    };
                  case 1:
                    return {
                      message: (0, _internationalization2.translator)("fes.fileLoadError.xml", {
                        suggestion
                      }),
                      method: "loadXML"
                    };
                  case 2:
                    return {
                      message: (0, _internationalization2.translator)("fes.fileLoadError.table", {
                        suggestion
                      }),
                      method: "loadTable"
                    };
                  case 3:
                    return {
                      message: (0, _internationalization2.translator)("fes.fileLoadError.strings", {
                        suggestion
                      }),
                      method: "loadStrings"
                    };
                  case 4:
                    return {
                      message: (0, _internationalization2.translator)("fes.fileLoadError.font", {
                        suggestion
                      }),
                      method: "loadFont"
                    };
                  case 5:
                    return {
                      message: (0, _internationalization2.translator)("fes.fileLoadError.json", {
                        suggestion
                      }),
                      method: "loadJSON"
                    };
                  case 6:
                    return {
                      message: (0, _internationalization2.translator)("fes.fileLoadError.bytes", {
                        suggestion
                      }),
                      method: "loadBytes"
                    };
                  case 7:
                    return {
                      message: (0, _internationalization2.translator)("fes.fileLoadError.large"),
                      method: "loadX"
                    };
                  case 8:
                    return {
                      message: (0, _internationalization2.translator)("fes.fileLoadError.gif"),
                      method: "loadImage"
                    };
                }
              };
              _main2.default._friendlyFileLoadError = function(errorType, filePath) {
                var _fileLoadErrorCases = fileLoadErrorCases(errorType, filePath), message = _fileLoadErrorCases.message, method = _fileLoadErrorCases.method;
                _main2.default._friendlyError(message, method, 3);
              };
            }
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../internationalization": 288,
            "../main": 290
          }
        ],
        283: [
          function(_dereq_, module, exports) {
            "use strict";
            _dereq_("core-js/modules/es.symbol");
            _dereq_("core-js/modules/es.symbol.description");
            _dereq_("core-js/modules/es.symbol.iterator");
            _dereq_("core-js/modules/es.array.filter");
            _dereq_("core-js/modules/es.array.for-each");
            _dereq_("core-js/modules/es.array.from");
            _dereq_("core-js/modules/es.array.includes");
            _dereq_("core-js/modules/es.array.index-of");
            _dereq_("core-js/modules/es.array.iterator");
            _dereq_("core-js/modules/es.array.join");
            _dereq_("core-js/modules/es.array.map");
            _dereq_("core-js/modules/es.array.slice");
            _dereq_("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_("core-js/modules/es.object.keys");
            _dereq_("core-js/modules/es.object.to-string");
            _dereq_("core-js/modules/es.regexp.constructor");
            _dereq_("core-js/modules/es.regexp.exec");
            _dereq_("core-js/modules/es.regexp.to-string");
            _dereq_("core-js/modules/es.string.includes");
            _dereq_("core-js/modules/es.string.iterator");
            _dereq_("core-js/modules/es.string.match");
            _dereq_("core-js/modules/es.string.split");
            _dereq_("core-js/modules/es.string.trim");
            _dereq_("core-js/modules/es.weak-map");
            _dereq_("core-js/modules/web.dom-collections.for-each");
            _dereq_("core-js/modules/web.dom-collections.iterator");
            function _typeof2(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof2 = function _typeof22(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof2 = function _typeof22(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof2(obj);
            }
            function _typeof(obj) {
              if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
                _typeof = function _typeof3(obj2) {
                  return _typeof2(obj2);
                };
              } else {
                _typeof = function _typeof3(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof2(obj2);
                };
              }
              return _typeof(obj);
            }
            _dereq_("core-js/modules/es.symbol");
            _dereq_("core-js/modules/es.symbol.description");
            _dereq_("core-js/modules/es.symbol.iterator");
            _dereq_("core-js/modules/es.array.filter");
            _dereq_("core-js/modules/es.array.for-each");
            _dereq_("core-js/modules/es.array.from");
            _dereq_("core-js/modules/es.array.includes");
            _dereq_("core-js/modules/es.array.index-of");
            _dereq_("core-js/modules/es.array.iterator");
            _dereq_("core-js/modules/es.array.join");
            _dereq_("core-js/modules/es.array.map");
            _dereq_("core-js/modules/es.array.slice");
            _dereq_("core-js/modules/es.object.keys");
            _dereq_("core-js/modules/es.object.to-string");
            _dereq_("core-js/modules/es.regexp.constructor");
            _dereq_("core-js/modules/es.regexp.exec");
            _dereq_("core-js/modules/es.regexp.to-string");
            _dereq_("core-js/modules/es.string.includes");
            _dereq_("core-js/modules/es.string.iterator");
            _dereq_("core-js/modules/es.string.match");
            _dereq_("core-js/modules/es.string.split");
            _dereq_("core-js/modules/es.string.trim");
            _dereq_("core-js/modules/web.dom-collections.for-each");
            _dereq_("core-js/modules/web.dom-collections.iterator");
            Object.defineProperty(exports, "__esModule", {
              value: true
            });
            exports.default = void 0;
            var _main = _interopRequireDefault(_dereq_("../main"));
            var _internationalization = _dereq_("../internationalization");
            var constants = _interopRequireWildcard(_dereq_("../constants"));
            function _getRequireWildcardCache() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache = function _getRequireWildcardCache2() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            function _toConsumableArray(arr) {
              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
            }
            function _nonIterableSpread() {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            }
            function _iterableToArray(iter) {
              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]")
                return Array.from(iter);
            }
            function _arrayWithoutHoles(arr) {
              if (Array.isArray(arr)) {
                for (var i2 = 0, arr2 = new Array(arr.length); i2 < arr.length; i2++) {
                  arr2[i2] = arr[i2];
                }
                return arr2;
              }
            }
            if (typeof IS_MINIFIED !== "undefined") {
              _main.default._fesCodeReader = function() {
              };
            } else {
              var ignoreFunction = [
                "setup",
                "draw",
                "preload",
                "deviceMoved",
                "deviceTurned",
                "deviceShaken",
                "doubleClicked",
                "mousePressed",
                "mouseReleased",
                "mouseMoved",
                "mouseDragged",
                "mouseClicked",
                "mouseWheel",
                "touchStarted",
                "touchMoved",
                "touchEnded",
                "keyPressed",
                "keyReleased",
                "keyTyped",
                "windowResized",
                "name",
                "parent",
                "toString",
                "print",
                "stop",
                "onended"
              ];
              var checkForConstsAndFuncs = function checkForConstsAndFuncs2(variableArray) {
                for (var i2 = 0; i2 < variableArray.length; i2++) {
                  if (constants[variableArray[i2]] !== void 0) {
                    var url2 = "https://p5js.org/reference/#/p5/".concat(variableArray[i2]);
                    _main.default._friendlyError((0, _internationalization.translator)("fes.sketchReaderErrors.reservedConst", {
                      url: url2,
                      symbol: variableArray[i2]
                    }));
                    return;
                  }
                }
                var p5Constructors2 = {};
                for (var _i = 0, _Object$keys = Object.keys(_main.default); _i < _Object$keys.length; _i++) {
                  var key2 = _Object$keys[_i];
                  if (typeof _main.default[key2] === "function" && key2[0] !== key2[0].toLowerCase()) {
                    p5Constructors2[key2] = _main.default[key2];
                  }
                }
                for (var _i2 = 0; _i2 < variableArray.length; _i2++) {
                  if (!ignoreFunction.includes(variableArray[_i2])) {
                    var keyArray2 = Object.keys(p5Constructors2);
                    var j = 0;
                    for (; j < keyArray2.length; j++) {
                      if (p5Constructors2[keyArray2[j]].prototype[variableArray[_i2]] !== void 0) {
                        var _url = "https://p5js.org/reference/#/p5/".concat(variableArray[_i2]);
                        _main.default._friendlyError((0, _internationalization.translator)("fes.sketchReaderErrors.reservedFunc", {
                          url: _url,
                          symbol: variableArray[_i2]
                        }));
                        return;
                      }
                    }
                  }
                }
              };
              var optionalVarKeyword = /(?:(?:let|const|var)\s+)?/;
              var roundBracketedExpr = /(?:\([^)]*\))/;
              var squareBracketedExpr = /(?:\[[^\]]*\])/;
              var curlyBracketedExpr = /(?:\{[^}]*\})/;
              var bracketedExpr = new RegExp([
                roundBracketedExpr,
                squareBracketedExpr,
                curlyBracketedExpr
              ].map(function(regex) {
                return regex.source;
              }).join("|"));
              var rightHandSide = new RegExp("(?:" + bracketedExpr.source + "|[^\\n,])+");
              var leftHandSide = /([\w$]+)/;
              var assignmentOperator = /\s*=\s*/;
              var singleAssignment = new RegExp(leftHandSide.source + assignmentOperator.source + rightHandSide.source);
              var listSeparator = /,\s*/;
              var oneOrMoreAssignments = new RegExp("(?:" + singleAssignment.source + listSeparator.source + ")*" + singleAssignment.source);
              var assignmentStatement = new RegExp("^" + optionalVarKeyword.source + oneOrMoreAssignments.source);
              var letConstName = /(?:(?:let|const)\s+)([\w$]+)/;
              var extractVariables = function extractVariables2(linesArray) {
                var matches = [];
                linesArray.forEach(function(ele) {
                  var match = ele.match(assignmentStatement);
                  if (!match)
                    return;
                  matches.push.apply(matches, _toConsumableArray(match.slice(1).filter(function(group) {
                    return group !== void 0;
                  })));
                });
                checkForConstsAndFuncs(matches);
              };
              var extractFuncVariables = function extractFuncVariables2(linesArray) {
                var matches = [];
                linesArray.forEach(function(ele) {
                  var m = ele.match(letConstName);
                  if (m !== null)
                    matches.push(ele.match(letConstName)[1]);
                });
                checkForConstsAndFuncs(matches);
              };
              var codeToLines = function codeToLines2(code) {
                var arrayVariables = code.split("\n").map(function(line) {
                  return line.trim();
                }).filter(
                  function(line) {
                    return line !== "" && !line.includes("//") && (line.includes("let") || line.includes("const")) && !line.includes("=>") && !line.includes("function");
                  }
                  //filter out lines containing variable names
                );
                var arrayFunctions = code.split("\n").map(function(line) {
                  return line.trim();
                }).filter(function(line) {
                  return line !== "" && !line.includes("//") && (line.includes("let") || line.includes("const")) && (line.includes("=>") || line.includes("function"));
                });
                extractVariables(arrayVariables);
                extractFuncVariables(arrayFunctions);
              };
              var removeMultilineComments = function removeMultilineComments2(code) {
                var start = code.indexOf("/*");
                var end = code.indexOf("*/");
                while (start !== -1 && end !== -1) {
                  if (start === 0) {
                    code = code.slice(end + 2);
                  } else
                    code = code.slice(0, start) + code.slice(end + 2);
                  start = code.indexOf("/*");
                  end = code.indexOf("*/");
                }
                return code;
              };
              var globalConstFuncCheck = function globalConstFuncCheck() {
                var tempArray = Object.keys(constants);
                var element;
                for (var i = 0; i < tempArray.length; i++) {
                  try {
                    element = eval(tempArray[i]);
                  } catch (e2) {
                    continue;
                  }
                  if (constants[tempArray[i]] !== element) {
                    var url = "https://p5js.org/reference/#/p5/".concat(tempArray[i]);
                    _main.default._friendlyError((0, _internationalization.translator)("fes.sketchReaderErrors.reservedConst", {
                      url,
                      symbol: tempArray[i]
                    }));
                    return true;
                  }
                }
                var p5Constructors = {};
                for (var _i3 = 0, _Object$keys2 = Object.keys(_main.default); _i3 < _Object$keys2.length; _i3++) {
                  var key = _Object$keys2[_i3];
                  if (typeof _main.default[key] === "function" && key[0] !== key[0].toLowerCase()) {
                    p5Constructors[key] = _main.default[key];
                  }
                }
                var keyArray = Object.keys(p5Constructors);
                var functionArray = [];
                for (var _i4 = 0; _i4 < keyArray.length; _i4++) {
                  var _functionArray;
                  (_functionArray = functionArray).push.apply(_functionArray, _toConsumableArray(Object.keys(p5Constructors[keyArray[_i4]].prototype)));
                }
                functionArray = functionArray.filter(function(ele) {
                  return !ele.includes("_");
                });
                for (var _i5 = 0; _i5 < functionArray.length; _i5++) {
                  if (!ignoreFunction.includes(functionArray[_i5])) {
                    try {
                      element = eval(functionArray[_i5]);
                    } catch (e2) {
                      continue;
                    }
                    for (var k = 0; k < keyArray.length; k++) {
                      if (p5Constructors[keyArray[k]].prototype[functionArray[_i5]] === void 0)
                        ;
                      else {
                        if (p5Constructors[keyArray[k]].prototype[functionArray[_i5]] !== element) {
                          var _url2 = "https://p5js.org/reference/#/p5/".concat(functionArray[_i5]);
                          _main.default._friendlyError((0, _internationalization.translator)("fes.sketchReaderErrors.reservedFunc", {
                            url: _url2,
                            symbol: functionArray[_i5]
                          }));
                          return true;
                        }
                      }
                    }
                  }
                }
              };
              var fesCodeReader = function fesCodeReader2() {
                var moveAhead = globalConstFuncCheck();
                if (moveAhead)
                  return;
                var code = "";
                try {
                  code += "" + setup;
                } catch (e2) {
                  code += "";
                }
                try {
                  code += "\n" + draw;
                } catch (e2) {
                  code += "";
                }
                if (code === "")
                  return;
                code = removeMultilineComments(code);
                codeToLines(code);
              };
              _main.default._fesCodeReader = fesCodeReader;
              window.addEventListener("load", _main.default._fesCodeReader);
            }
            var _default = _main.default;
            exports.default = _default;
          },
          {
            "../constants": 278,
            "../internationalization": 288,
            "../main": 290,
            "core-js/modules/es.array.filter": 171,
            "core-js/modules/es.array.for-each": 172,
            "core-js/modules/es.array.from": 173,
            "core-js/modules/es.array.includes": 174,
            "core-js/modules/es.array.index-of": 175,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.join": 177,
            "core-js/modules/es.array.map": 179,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.keys": 194,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.constructor": 198,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.string.includes": 203,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.string.match": 205,
            "core-js/modules/es.string.split": 209,
            "core-js/modules/es.string.trim": 211,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.for-each": 247,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        284: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.join");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.string.match");
            _dereq_2("core-js/modules/es.string.replace");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.join");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.string.match");
            _dereq_2("core-js/modules/es.string.replace");
            _dereq_2("core-js/modules/es.string.split");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            function ErrorStackParser() {
              "use strict";
              var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+:\d+/;
              var CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+:\d+|\(native\))/m;
              var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code])?$/;
              return {
                /**
                * Given an Error object, extract the most information from it.
                * @private
                * @param {Error} error object
                * @return {Array} of stack frames
                */
                parse: function ErrorStackParser$$parse(error) {
                  if (typeof error.stacktrace !== "undefined" || typeof error["opera#sourceloc"] !== "undefined") {
                    return this.parseOpera(error);
                  } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
                    return this.parseV8OrIE(error);
                  } else if (error.stack) {
                    return this.parseFFOrSafari(error);
                  } else {
                  }
                },
                // Separate line and column numbers from a string of the form: (URI:Line:Column)
                extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
                  if (urlLike.indexOf(":") === -1) {
                    return [urlLike];
                  }
                  var regExp = /(.+?)(?::(\d+))?(?::(\d+))?$/;
                  var parts = regExp.exec(urlLike.replace(/[()]/g, ""));
                  return [
                    parts[1],
                    parts[2] || void 0,
                    parts[3] || void 0
                  ];
                },
                parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
                  var filtered = error.stack.split("\n").filter(function(line) {
                    return !!line.match(CHROME_IE_STACK_REGEXP);
                  }, this);
                  return filtered.map(function(line) {
                    if (line.indexOf("(eval ") > -1) {
                      line = line.replace(/eval code/g, "eval").replace(/(\(eval at [^()]*)|(\),.*$)/g, "");
                    }
                    var sanitizedLine = line.replace(/^\s+/, "").replace(/\(eval code/g, "(");
                    var location2 = sanitizedLine.match(/ (\((.+):(\d+):(\d+)\)$)/);
                    sanitizedLine = location2 ? sanitizedLine.replace(location2[0], "") : sanitizedLine;
                    var tokens = sanitizedLine.split(/\s+/).slice(1);
                    var locationParts = this.extractLocation(location2 ? location2[1] : tokens.pop());
                    var functionName = tokens.join(" ") || void 0;
                    var fileName = [
                      "eval",
                      "<anonymous>"
                    ].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];
                    return {
                      functionName,
                      fileName,
                      lineNumber: locationParts[1],
                      columnNumber: locationParts[2],
                      source: line
                    };
                  }, this);
                },
                parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
                  var filtered = error.stack.split("\n").filter(function(line) {
                    return !line.match(SAFARI_NATIVE_CODE_REGEXP);
                  }, this);
                  return filtered.map(function(line) {
                    if (line.indexOf(" > eval") > -1) {
                      line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ":$1");
                    }
                    if (line.indexOf("@") === -1 && line.indexOf(":") === -1) {
                      return {
                        functionName: line
                      };
                    } else {
                      var functionNameRegex = /((.*".+"[^@]*)?[^@]*)(?:@)/;
                      var matches = line.match(functionNameRegex);
                      var functionName = matches && matches[1] ? matches[1] : void 0;
                      var locationParts = this.extractLocation(line.replace(functionNameRegex, ""));
                      return {
                        functionName,
                        fileName: locationParts[0],
                        lineNumber: locationParts[1],
                        columnNumber: locationParts[2],
                        source: line
                      };
                    }
                  }, this);
                },
                parseOpera: function ErrorStackParser$$parseOpera(e2) {
                  if (!e2.stacktrace || e2.message.indexOf("\n") > -1 && e2.message.split("\n").length > e2.stacktrace.split("\n").length) {
                    return this.parseOpera9(e2);
                  } else if (!e2.stack) {
                    return this.parseOpera10(e2);
                  } else {
                    return this.parseOpera11(e2);
                  }
                },
                parseOpera9: function ErrorStackParser$$parseOpera9(e2) {
                  var lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
                  var lines = e2.message.split("\n");
                  var result = [];
                  for (var i2 = 2, len = lines.length; i2 < len; i2 += 2) {
                    var match = lineRE.exec(lines[i2]);
                    if (match) {
                      result.push({
                        fileName: match[2],
                        lineNumber: match[1],
                        source: lines[i2]
                      });
                    }
                  }
                  return result;
                },
                parseOpera10: function ErrorStackParser$$parseOpera10(e2) {
                  var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
                  var lines = e2.stacktrace.split("\n");
                  var result = [];
                  for (var i2 = 0, len = lines.length; i2 < len; i2 += 2) {
                    var match = lineRE.exec(lines[i2]);
                    if (match) {
                      result.push({
                        functionName: match[3] || void 0,
                        fileName: match[2],
                        lineNumber: match[1],
                        source: lines[i2]
                      });
                    }
                  }
                  return result;
                },
                // Opera 10.65+ Error.stack very similar to FF/Safari
                parseOpera11: function ErrorStackParser$$parseOpera11(error) {
                  var filtered = error.stack.split("\n").filter(function(line) {
                    return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
                  }, this);
                  return filtered.map(function(line) {
                    var tokens = line.split("@");
                    var locationParts = this.extractLocation(tokens.pop());
                    var functionCall = tokens.shift() || "";
                    var functionName = functionCall.replace(/<anonymous function(: (\w+))?>/, "$2").replace(/\([^)]*\)/g, "") || void 0;
                    var argsRaw;
                    if (functionCall.match(/\(([^)]*)\)/)) {
                      argsRaw = functionCall.replace(/^[^(]+\(([^)]*)\)$/, "$1");
                    }
                    var args = argsRaw === void 0 || argsRaw === "[arguments not available]" ? void 0 : argsRaw.split(",");
                    return {
                      functionName,
                      args,
                      fileName: locationParts[0],
                      lineNumber: locationParts[1],
                      columnNumber: locationParts[2],
                      source: line
                    };
                  }, this);
                }
              };
            }
            _main2.default._getErrorStackParser = function getErrorStackParser() {
              return new ErrorStackParser();
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../main": 290,
            "core-js/modules/es.array.filter": 171,
            "core-js/modules/es.array.index-of": 175,
            "core-js/modules/es.array.join": 177,
            "core-js/modules/es.array.map": 179,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.string.match": 205,
            "core-js/modules/es.string.replace": 207,
            "core-js/modules/es.string.split": 209
          }
        ],
        285: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.for-each");
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.join");
            _dereq_2("core-js/modules/es.array.last-index-of");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.function.name");
            _dereq_2("core-js/modules/es.map");
            _dereq_2("core-js/modules/es.number.constructor");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.get-prototype-of");
            _dereq_2("core-js/modules/es.object.keys");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.reflect.construct");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.set");
            _dereq_2("core-js/modules/es.string.includes");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.for-each");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.for-each");
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.join");
            _dereq_2("core-js/modules/es.array.last-index-of");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.function.name");
            _dereq_2("core-js/modules/es.map");
            _dereq_2("core-js/modules/es.number.constructor");
            _dereq_2("core-js/modules/es.object.get-prototype-of");
            _dereq_2("core-js/modules/es.object.keys");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.reflect.construct");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.set");
            _dereq_2("core-js/modules/es.string.includes");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/web.dom-collections.for-each");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../constants"));
            var _internationalization2 = _dereq_2("../internationalization");
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key3 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key3)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key3) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key3, desc);
                  } else {
                    newObj[key3] = obj[key3];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass)
                _setPrototypeOf(subClass, superClass);
            }
            function _createSuper(Derived) {
              function isNativeReflectConstruct2() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                  }));
                  return true;
                } catch (e2) {
                  return false;
                }
              }
              return function() {
                var Super = _getPrototypeOf(Derived), result;
                if (isNativeReflectConstruct2()) {
                  var NewTarget = _getPrototypeOf(this).constructor;
                  result = Reflect.construct(Super, arguments, NewTarget);
                } else {
                  result = Super.apply(this, arguments);
                }
                return _possibleConstructorReturn(this, result);
              };
            }
            function _possibleConstructorReturn(self2, call) {
              if (call && (_typeof3(call) === "object" || typeof call === "function")) {
                return call;
              }
              return _assertThisInitialized(self2);
            }
            function _assertThisInitialized(self2) {
              if (self2 === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return self2;
            }
            function _wrapNativeSuper(Class) {
              var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
              _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
                if (Class2 === null || !_isNativeFunction(Class2))
                  return Class2;
                if (typeof Class2 !== "function") {
                  throw new TypeError("Super expression must either be null or a function");
                }
                if (typeof _cache !== "undefined") {
                  if (_cache.has(Class2))
                    return _cache.get(Class2);
                  _cache.set(Class2, Wrapper);
                }
                function Wrapper() {
                  return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
                }
                Wrapper.prototype = Object.create(Class2.prototype, {
                  constructor: {
                    value: Wrapper,
                    enumerable: false,
                    writable: true,
                    configurable: true
                  }
                });
                return _setPrototypeOf(Wrapper, Class2);
              };
              return _wrapNativeSuper(Class);
            }
            function isNativeReflectConstruct() {
              if (typeof Reflect === "undefined" || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if (typeof Proxy === "function")
                return true;
              try {
                Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                }));
                return true;
              } catch (e2) {
                return false;
              }
            }
            function _construct(Parent, args, Class) {
              if (isNativeReflectConstruct()) {
                _construct = Reflect.construct;
              } else {
                _construct = function _construct2(Parent2, args2, Class2) {
                  var a = [
                    null
                  ];
                  a.push.apply(a, args2);
                  var Constructor = Function.bind.apply(Parent2, a);
                  var instance = new Constructor();
                  if (Class2)
                    _setPrototypeOf(instance, Class2.prototype);
                  return instance;
                };
              }
              return _construct.apply(null, arguments);
            }
            function _isNativeFunction(fn) {
              return Function.toString.call(fn).indexOf("[native code]") !== -1;
            }
            function _setPrototypeOf(o, p) {
              _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return _setPrototypeOf(o, p);
            }
            function _getPrototypeOf(o) {
              _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                return o2.__proto__ || Object.getPrototypeOf(o2);
              };
              return _getPrototypeOf(o);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            if (typeof IS_MINIFIED !== "undefined") {
              _main2.default._validateParameters = _main2.default._clearValidateParamsCache = function() {
              };
            } else {
              var dataDoc = _dereq_2("../../../docs/parameterData.json");
              var arrDoc = JSON.parse(JSON.stringify(dataDoc));
              var docCache = {};
              var builtinTypes = /* @__PURE__ */ new Set([
                "null",
                "number",
                "string",
                "boolean",
                "constant",
                "function",
                "any",
                "integer"
              ]);
              var basicTypes = {
                number: true,
                boolean: true,
                string: true,
                function: true,
                undefined: true
              };
              var constantsReverseMap = {};
              for (var key2 in constants2) {
                constantsReverseMap[constants2[key2]] = key2;
              }
              var p5Constructors2 = {};
              var funcSpecificConstructors = {};
              window.addEventListener("load", function() {
                for (var _i = 0, _Object$keys = Object.keys(_main2.default); _i < _Object$keys.length; _i++) {
                  var _key = _Object$keys[_i];
                  if (typeof _main2.default[_key] === "function" && _key[0] !== _key[0].toLowerCase()) {
                    p5Constructors2[_key] = _main2.default[_key];
                  }
                }
              });
              var argumentTree = {};
              var addType = function addType2(value, obj, func) {
                var type = _typeof3(value);
                if (basicTypes[type]) {
                  if (constantsReverseMap[value]) {
                    obj = obj[value] || (obj[value] = {});
                  } else {
                    obj = obj[type] || (obj[type] = {});
                  }
                } else if (value === null) {
                  obj = obj["null"] || (obj["null"] = {});
                } else {
                  if (value.constructor && value.constructor.name) {
                    obj = obj[value.constructor.name] || (obj[value.constructor.name] = {});
                    return obj;
                  }
                  var p5C = funcSpecificConstructors[func];
                  if (p5C === void 0) {
                    p5C = funcSpecificConstructors[func] = {};
                  }
                  for (var _key2 in p5C) {
                    if (value instanceof p5C[_key2]) {
                      obj = obj[_key2] || (obj[_key2] = {});
                      return obj;
                    }
                  }
                  for (var _key3 in p5Constructors2) {
                    if (value instanceof p5Constructors2[_key3]) {
                      obj = obj[_key3] || (obj[_key3] = {});
                      p5C[_key3] = p5Constructors2[_key3];
                      return obj;
                    }
                  }
                  obj = obj[type] || (obj[type] = {});
                }
                return obj;
              };
              var buildArgTypeCache = function buildArgTypeCache2(func, arr) {
                var obj = argumentTree[func];
                if (obj === void 0) {
                  obj = argumentTree[func] = {};
                }
                for (var i2 = 0, len = arr.length; i2 < len; ++i2) {
                  var value = arr[i2];
                  if (value instanceof Array) {
                    obj = obj["as"] || (obj["as"] = {});
                    for (var j = 0, lenA = value.length; j < lenA; ++j) {
                      obj = addType(value[j], obj, func);
                    }
                  } else {
                    obj = addType(value, obj, func);
                  }
                }
                return obj;
              };
              var lookupParamDoc = function lookupParamDoc2(func) {
                var ichDot = func.lastIndexOf(".");
                var funcName = func.slice(ichDot + 1);
                var funcClass = func.slice(0, ichDot !== -1 ? ichDot : 0) || "p5";
                var classitems = arrDoc;
                var queryResult = classitems[funcClass][funcName];
                var overloads = [];
                if (queryResult.hasOwnProperty("overloads")) {
                  for (var i2 = 0; i2 < queryResult.overloads.length; i2++) {
                    overloads.push({
                      formats: queryResult.overloads[i2].params
                    });
                  }
                } else {
                  overloads.push({
                    formats: queryResult.params || []
                  });
                }
                var mapConstants = {};
                var maxParams = 0;
                overloads.forEach(function(overload) {
                  var formats = overload.formats;
                  if (maxParams < formats.length) {
                    maxParams = formats.length;
                  }
                  var minParams = formats.length;
                  while (minParams > 0 && formats[minParams - 1].optional) {
                    minParams--;
                  }
                  overload.minParams = minParams;
                  formats.forEach(function(format) {
                    format.types = format.type.split("|").map(function ct(type) {
                      if (type.slice(-2) === "[]") {
                        return {
                          name: type,
                          array: ct(type.slice(0, -2))
                        };
                      }
                      var lowerType = type.toLowerCase();
                      if (lowerType === "constant") {
                        var constant;
                        if (mapConstants.hasOwnProperty(format.name)) {
                          constant = mapConstants[format.name];
                        } else {
                          var myRe = /either\s+(?:[A-Z0-9_]+\s*,?\s*(?:or)?\s*)+/g;
                          var values = {};
                          var names = [];
                          constant = mapConstants[format.name] = {
                            values,
                            names
                          };
                          var myArray = myRe.exec(format.description);
                          if (func === "endShape" && format.name === "mode") {
                            values[constants2.CLOSE] = true;
                            names.push("CLOSE");
                          } else {
                            var match = myArray[0];
                            var reConst = /[A-Z0-9_]+/g;
                            var matchConst;
                            while ((matchConst = reConst.exec(match)) !== null) {
                              var name = matchConst[0];
                              if (constants2.hasOwnProperty(name)) {
                                values[constants2[name]] = true;
                                names.push(name);
                              }
                            }
                          }
                        }
                        return {
                          name: type,
                          builtin: lowerType,
                          names: constant.names,
                          values: constant.values
                        };
                      }
                      if (lowerType.slice(0, "function".length) === "function") {
                        lowerType = "function";
                      }
                      if (builtinTypes.has(lowerType)) {
                        return {
                          name: type,
                          builtin: lowerType
                        };
                      }
                      var t = window;
                      var typeParts = type.split(".");
                      if (typeParts[0] === "p5") {
                        t = _main2.default;
                        typeParts.shift();
                      }
                      typeParts.forEach(function(p) {
                        t = t && t[p];
                      });
                      if (t) {
                        return {
                          name: type,
                          prototype: t
                        };
                      }
                      return {
                        name: type,
                        type: lowerType
                      };
                    });
                  });
                });
                return {
                  overloads,
                  maxParams
                };
              };
              var isNumber = function isNumber2(param) {
                switch (_typeof3(param)) {
                  case "number":
                    return true;
                  case "string":
                    return !isNaN(param);
                  default:
                    return false;
                }
              };
              var testParamType = function testParamType2(param, type) {
                var isArray = param instanceof Array;
                var matches = true;
                if (type.array && isArray) {
                  for (var i2 = 0; i2 < param.length; i2++) {
                    var error = testParamType2(param[i2], type.array);
                    if (error)
                      return error / 2;
                  }
                } else if (type.prototype) {
                  matches = param instanceof type.prototype;
                } else if (type.builtin) {
                  switch (type.builtin) {
                    case "number":
                      matches = isNumber(param);
                      break;
                    case "integer":
                      matches = isNumber(param) && Number(param) === Math.floor(param);
                      break;
                    case "boolean":
                    case "any":
                      matches = true;
                      break;
                    case "array":
                      matches = isArray;
                      break;
                    case "string":
                      matches = /*typeof param === 'number' ||*/
                      typeof param === "string";
                      break;
                    case "constant":
                      matches = type.values.hasOwnProperty(param);
                      break;
                    case "function":
                      matches = param instanceof Function;
                      break;
                    case "null":
                      matches = param === null;
                      break;
                  }
                } else {
                  matches = _typeof3(param) === type.t;
                }
                return matches ? 0 : 1;
              };
              var testParamTypes = function testParamTypes2(param, types) {
                var minScore = 9999;
                for (var i2 = 0; minScore > 0 && i2 < types.length; i2++) {
                  var score = testParamType(param, types[i2]);
                  if (minScore > score)
                    minScore = score;
                }
                return minScore;
              };
              var scoreOverload = function scoreOverload2(args, argCount, overload, minScore) {
                var score = 0;
                var formats = overload.formats;
                var minParams = overload.minParams;
                if (argCount < minParams) {
                  score = (minParams - argCount) * 2;
                } else if (argCount > formats.length) {
                  score = (argCount - formats.length) * 2;
                }
                for (var p = 0; score <= minScore && p < formats.length; p++) {
                  var arg = args[p];
                  var format = formats[p];
                  if (arg == null) {
                    if (!format.optional || p < minParams || p < argCount) {
                      score += 1;
                    }
                  } else {
                    score += testParamTypes(arg, format.types);
                  }
                }
                return score;
              };
              var getOverloadErrors = function getOverloadErrors2(args, argCount, overload) {
                var formats = overload.formats;
                var minParams = overload.minParams;
                if (argCount < minParams) {
                  return [
                    {
                      type: "TOO_FEW_ARGUMENTS",
                      argCount,
                      minParams
                    }
                  ];
                } else if (argCount > formats.length) {
                  return [
                    {
                      type: "TOO_MANY_ARGUMENTS",
                      argCount,
                      maxParams: formats.length
                    }
                  ];
                }
                var errorArray = [];
                for (var p = 0; p < formats.length; p++) {
                  var arg = args[p];
                  var format = formats[p];
                  if (arg == null) {
                    if (!format.optional || p < minParams || p < argCount) {
                      errorArray.push({
                        type: "EMPTY_VAR",
                        position: p,
                        format
                      });
                    }
                  } else if (testParamTypes(arg, format.types) > 0) {
                    errorArray.push({
                      type: "WRONG_TYPE",
                      position: p,
                      format,
                      arg
                    });
                  }
                }
                return errorArray;
              };
              _main2.default.ValidationError = function(name) {
                var err = function(_Error) {
                  _inherits(err2, _Error);
                  var _super = _createSuper(err2);
                  function err2(message, func, type) {
                    var _this;
                    _classCallCheck(this, err2);
                    _this = _super.call(this);
                    _this.message = message;
                    _this.func = func;
                    _this.type = type;
                    if ("captureStackTrace" in Error)
                      Error.captureStackTrace(_assertThisInitialized(_this), err2);
                    else
                      _this.stack = new Error().stack;
                    return _this;
                  }
                  return err2;
                }(
                  _wrapNativeSuper(Error)
                );
                err.prototype.name = name;
                return err;
              }("ValidationError");
              _main2.default._friendlyParamError = function(errorObj, func) {
                var message;
                var translationObj;
                function formatType() {
                  var format = errorObj.format;
                  return format.types.map(function(type) {
                    return type.names ? type.names.join("|") : type.name;
                  }).join("|");
                }
                switch (errorObj.type) {
                  case "EMPTY_VAR": {
                    translationObj = {
                      func,
                      formatType: formatType(),
                      // It needs to be this way for i18next-extract to work. The comment
                      // specifies the values that the context can take so that it can
                      // statically prepare the translation files with them.
                      /* i18next-extract-mark-context-next-line ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"] */
                      position: (0, _internationalization2.translator)("fes.positions.p", {
                        context: (errorObj.position + 1).toString(),
                        defaultValue: (errorObj.position + 1).toString()
                      }),
                      url: "https://p5js.org/examples/data-variable-scope.html"
                    };
                    break;
                  }
                  case "WRONG_TYPE": {
                    var arg = errorObj.arg;
                    var argType = arg instanceof Array ? "array" : arg === null ? "null" : arg.name || _typeof3(arg);
                    translationObj = {
                      func,
                      formatType: formatType(),
                      argType,
                      /* i18next-extract-mark-context-next-line ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"] */
                      position: (0, _internationalization2.translator)("fes.positions.p", {
                        context: (errorObj.position + 1).toString(),
                        defaultValue: (errorObj.position + 1).toString()
                      })
                    };
                    break;
                  }
                  case "TOO_FEW_ARGUMENTS": {
                    translationObj = {
                      func,
                      minParams: errorObj.minParams,
                      argCount: errorObj.argCount
                    };
                    break;
                  }
                  case "TOO_MANY_ARGUMENTS": {
                    translationObj = {
                      func,
                      maxParams: errorObj.maxParams,
                      argCount: errorObj.argCount
                    };
                    break;
                  }
                }
                if (translationObj) {
                  try {
                    var myError = new Error();
                    var parsed = _main2.default._getErrorStackParser().parse(myError);
                    if (parsed[3] && parsed[3].functionName && parsed[3].functionName.includes(".") && _main2.default.prototype[parsed[3].functionName.split(".").slice(-1)[0]]) {
                      return;
                    }
                    if (_main2.default._throwValidationErrors) {
                      throw new _main2.default.ValidationError(message, func, errorObj.type);
                    }
                    if (parsed[3] && parsed[3].fileName && parsed[3].lineNumber && parsed[3].columnNumber) {
                      var location2 = "".concat(parsed[3].fileName, ":").concat(parsed[3].lineNumber, ":").concat(parsed[3].columnNumber);
                      translationObj.location = (0, _internationalization2.translator)("fes.location", {
                        location: location2,
                        // for e.g. get "sketch.js" from "https://example.com/abc/sketch.js"
                        file: parsed[3].fileName.split("/").slice(-1),
                        line: parsed[3].lineNumber
                      });
                      _main2.default._fesLogCache[location2] = true;
                    }
                  } catch (err) {
                    if (err instanceof _main2.default.ValidationError) {
                      throw err;
                    }
                  }
                  translationObj.context = errorObj.type;
                  message = (0, _internationalization2.translator)("fes.friendlyParamError.type", translationObj);
                  _main2.default._friendlyError("".concat(message), func, 3);
                }
              };
              _main2.default._clearValidateParamsCache = function clearValidateParamsCache() {
                for (var _i2 = 0, _Object$keys22 = Object.keys(argumentTree); _i2 < _Object$keys22.length; _i2++) {
                  var _key4 = _Object$keys22[_i2];
                  delete argumentTree[_key4];
                }
              };
              _main2.default._getValidateParamsArgTree = function getValidateParamsArgTree() {
                return argumentTree;
              };
              _main2.default._validateParameters = function validateParameters(func, args) {
                if (_main2.default.disableFriendlyErrors) {
                  return;
                }
                var obj = buildArgTypeCache(func, args);
                if (obj.seen) {
                  return;
                }
                obj.seen = true;
                var docs = docCache[func] || (docCache[func] = lookupParamDoc(func));
                var overloads = docs.overloads;
                var argCount = args.length;
                var minScore = 99999;
                var minOverload;
                for (var i2 = 0; i2 < overloads.length; i2++) {
                  var score = scoreOverload(args, argCount, overloads[i2], minScore);
                  if (score === 0) {
                    return;
                  } else if (minScore > score) {
                    minScore = score;
                    minOverload = i2;
                  }
                }
                if (minScore > 0) {
                  var errorArray = getOverloadErrors(args, argCount, overloads[minOverload]);
                  for (var n = 0; n < errorArray.length; n++) {
                    _main2.default._friendlyParamError(errorArray[n], func);
                  }
                }
              };
              _main2.default.prototype._validateParameters = _main2.default.validateParameters;
            }
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../../../docs/parameterData.json": 1,
            "../constants": 278,
            "../internationalization": 288,
            "../main": 290,
            "core-js/modules/es.array.concat": 167,
            "core-js/modules/es.array.for-each": 172,
            "core-js/modules/es.array.includes": 174,
            "core-js/modules/es.array.index-of": 175,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.join": 177,
            "core-js/modules/es.array.last-index-of": 178,
            "core-js/modules/es.array.map": 179,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.function.name": 183,
            "core-js/modules/es.map": 184,
            "core-js/modules/es.number.constructor": 187,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.get-prototype-of": 193,
            "core-js/modules/es.object.keys": 194,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.reflect.construct": 197,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.set": 201,
            "core-js/modules/es.string.includes": 203,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.string.split": 209,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.for-each": 247,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        286: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var constants2 = _interopRequireWildcard2(_dereq_2("./constants"));
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function modeAdjust(a, b, c, d, mode) {
              if (mode === constants2.CORNER) {
                return {
                  x: a,
                  y: b,
                  w: c,
                  h: d
                };
              } else if (mode === constants2.CORNERS) {
                return {
                  x: a,
                  y: b,
                  w: c - a,
                  h: d - b
                };
              } else if (mode === constants2.RADIUS) {
                return {
                  x: a - c,
                  y: b - d,
                  w: 2 * c,
                  h: 2 * d
                };
              } else if (mode === constants2.CENTER) {
                return {
                  x: a - c * 0.5,
                  y: b - d * 0.5,
                  w: c,
                  h: d
                };
              }
            }
            var _default2 = {
              modeAdjust
            };
            exports2.default = _default2;
          },
          {
            "./constants": 278,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        287: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.promise");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.promise");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var _internationalization2 = _dereq_2("./internationalization");
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            var _globalInit = function _globalInit2() {
              if (typeof window._setupDone !== "undefined") {
                console.warn("p5.js seems to have been imported multiple times. Please remove the duplicate import");
                return;
              }
              if (!window.mocha) {
                if ((window.setup && typeof window.setup === "function" || window.draw && typeof window.draw === "function") && !_main2.default.instance) {
                  new _main2.default();
                }
              }
            };
            var waitForDocumentReady = function waitForDocumentReady2() {
              return new Promise(function(resolve, reject) {
                if (document.readyState === "complete") {
                  resolve();
                } else {
                  window.addEventListener("load", resolve, false);
                }
              });
            };
            var waitingForTranslator = typeof IS_MINIFIED === "undefined" ? (0, _internationalization2.initialize)() : Promise.resolve();
            Promise.all([
              waitForDocumentReady(),
              waitingForTranslator
            ]).then(_globalInit);
          },
          {
            "../core/main": 290,
            "./internationalization": 288,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.promise": 196,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        288: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.join");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.keys");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.promise");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.string.includes");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.join");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.keys");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.promise");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.string.includes");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.setTranslatorLanguage = exports2.currentTranslatorLanguage = exports2.availableTranslatorLanguages = exports2.initialize = exports2.translator = void 0;
            var _i18next = _interopRequireDefault2(_dereq_2("i18next"));
            var _i18nextBrowserLanguagedetector = _interopRequireDefault2(_dereq_2("i18next-browser-languagedetector"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties(target, props) {
              for (var i2 = 0; i2 < props.length; i2++) {
                var descriptor = props[i2];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            var fallbackResources, languages;
            if (typeof IS_MINIFIED === "undefined") {
              var translationsModule = _dereq_2("../../translations");
              fallbackResources = translationsModule.default;
              languages = translationsModule.languages;
              if (typeof P5_DEV_BUILD !== "undefined") {
                var completeResources = _dereq_2("../../translations/dev");
                for (var _i = 0, _Object$keys = Object.keys(completeResources); _i < _Object$keys.length; _i++) {
                  var language = _Object$keys[_i];
                  var parts = language.split("_");
                  var lng = parts.slice(0, parts.length - 1).join("-");
                  var ns = parts[parts.length - 1];
                  fallbackResources[lng] = fallbackResources[lng] || {};
                  fallbackResources[lng][ns] = completeResources[language];
                }
              }
            }
            var FetchResources = function() {
              function FetchResources2(services, options) {
                _classCallCheck(this, FetchResources2);
                this.init(services, options);
              }
              _createClass(FetchResources2, [
                {
                  key: "fetchWithTimeout",
                  value: function fetchWithTimeout(url2, options) {
                    var timeout = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 2e3;
                    return Promise.race([
                      fetch(url2, options),
                      new Promise(function(_, reject) {
                        return setTimeout(function() {
                          return reject(new Error("timeout"));
                        }, timeout);
                      })
                    ]);
                  }
                },
                {
                  key: "init",
                  value: function init(services) {
                    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                    this.services = services;
                    this.options = options;
                  }
                },
                {
                  key: "read",
                  value: function read(language2, namespace, callback) {
                    var loadPath = this.options.loadPath;
                    if (language2 === this.options.fallback) {
                      callback(null, fallbackResources[language2][namespace]);
                    } else if (languages.includes(language2)) {
                      var url2 = this.services.interpolator.interpolate(loadPath, {
                        lng: language2,
                        ns: namespace
                      });
                      this.loadUrl(url2, callback);
                    } else {
                      callback("Not found", false);
                    }
                  }
                },
                {
                  key: "loadUrl",
                  value: function loadUrl(url2, callback) {
                    this.fetchWithTimeout(url2).then(function(response) {
                      var ok = response.ok;
                      if (!ok) {
                        throw new Error("failed loading ".concat(url2));
                      }
                      return response.json();
                    }, function() {
                      throw new Error("failed loading ".concat(url2));
                    }).then(function(data) {
                      return callback(null, data);
                    }).catch(callback);
                  }
                }
              ]);
              return FetchResources2;
            }();
            FetchResources.type = "backend";
            var translator = function translator2(key2, values) {
              console.debug("p5.js translator called before translations were loaded");
              _i18next.default.t(key2, values);
            };
            exports2.translator = translator;
            var initialize = function initialize2() {
              var i18init = _i18next.default.use(_i18nextBrowserLanguagedetector.default).use(FetchResources).init({
                fallbackLng: "en",
                nestingPrefix: "$tr(",
                nestingSuffix: ")",
                defaultNS: "translation",
                returnEmptyString: false,
                interpolation: {
                  escapeValue: false
                },
                detection: {
                  checkWhitelist: false,
                  // prevent storing or locating language from cookie or localStorage
                  // more info on https://github.com/processing/p5.js/issues/4862
                  order: [
                    "querystring",
                    "navigator",
                    "htmlTag",
                    "path",
                    "subdomain"
                  ],
                  caches: []
                },
                backend: {
                  fallback: "en",
                  loadPath: "https://cdn.jsdelivr.net/npm/p5/translations/{{lng}}/{{ns}}.json"
                },
                partialBundledLanguages: true,
                resources: fallbackResources
              }).then(function(translateFn) {
                exports2.translator = translator = translateFn;
              }, function(e2) {
                return console.debug("Translations failed to load (".concat(e2, ")"));
              });
              return i18init;
            };
            exports2.initialize = initialize;
            var availableTranslatorLanguages = function availableTranslatorLanguages2() {
              return _i18next.default.languages;
            };
            exports2.availableTranslatorLanguages = availableTranslatorLanguages;
            var currentTranslatorLanguage = function currentTranslatorLanguage2(language2) {
              return _i18next.default.language;
            };
            exports2.currentTranslatorLanguage = currentTranslatorLanguage;
            var setTranslatorLanguage = function setTranslatorLanguage2(language2) {
              return _i18next.default.changeLanguage(language2 || void 0, function(e2) {
                return console.debug("Translations failed to load (".concat(e2, ")"));
              });
            };
            exports2.setTranslatorLanguage = setTranslatorLanguage;
          },
          {
            "../../translations": 349,
            "../../translations/dev": void 0,
            "core-js/modules/es.array.includes": 174,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.join": 177,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.object.keys": 194,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.promise": 196,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.string.includes": 203,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.string.split": 209,
            "core-js/modules/web.dom-collections.iterator": 248,
            "i18next": 259,
            "i18next-browser-languagedetector": 256
          }
        ],
        289: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("./main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.pushStyle = function() {
              throw new Error("pushStyle() not used, see push()");
            };
            _main2.default.prototype.popStyle = function() {
              throw new Error("popStyle() not used, see pop()");
            };
            _main2.default.prototype.popMatrix = function() {
              throw new Error("popMatrix() not used, see pop()");
            };
            _main2.default.prototype.pushMatrix = function() {
              throw new Error("pushMatrix() not used, see push()");
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "./main": 290
          }
        ],
        290: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.for-each");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.get-own-property-names");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.for-each");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.for-each");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.get-own-property-names");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/web.dom-collections.for-each");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            _dereq_2("./shim");
            var constants2 = _interopRequireWildcard2(_dereq_2("./constants"));
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties(target, props) {
              for (var i2 = 0; i2 < props.length; i2++) {
                var descriptor = props[i2];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            var p52 = function() {
              function p53(sketch2, node, sync) {
                var _this = this;
                _classCallCheck(this, p53);
                this._setupDone = false;
                this._preloadDone = false;
                this._pixelDensity = Math.ceil(window.devicePixelRatio) || 1;
                this._userNode = node;
                this._curElement = null;
                this._elements = [];
                this._glAttributes = null;
                this._requestAnimId = 0;
                this._preloadCount = 0;
                this._isGlobal = false;
                this._loop = true;
                this._initializeInstanceVariables();
                this._defaultCanvasSize = {
                  width: 100,
                  height: 100
                };
                this._events = {
                  // keep track of user-events for unregistering later
                  mousemove: null,
                  mousedown: null,
                  mouseup: null,
                  dragend: null,
                  dragover: null,
                  click: null,
                  dblclick: null,
                  mouseover: null,
                  mouseout: null,
                  keydown: null,
                  keyup: null,
                  keypress: null,
                  touchstart: null,
                  touchmove: null,
                  touchend: null,
                  resize: null,
                  blur: null
                };
                this._millisStart = -1;
                this._recording = false;
                this._lcg_random_state = null;
                this._gaussian_previous = false;
                this._events.wheel = null;
                this._loadingScreenId = "p5_loading";
                this._registeredMethods = {};
                var methods = Object.getOwnPropertyNames(p53.prototype._registeredMethods);
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = void 0;
                try {
                  for (var _iterator = methods[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var prop = _step.value;
                    this._registeredMethods[prop] = p53.prototype._registeredMethods[prop].slice();
                  }
                } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                      _iterator.return();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                }
                if (window.DeviceOrientationEvent) {
                  this._events.deviceorientation = null;
                }
                if (window.DeviceMotionEvent && !window._isNodeWebkit) {
                  this._events.devicemotion = null;
                }
                this._start = function() {
                  if (_this._userNode) {
                    if (typeof _this._userNode === "string") {
                      _this._userNode = document.getElementById(_this._userNode);
                    }
                  }
                  var context = _this._isGlobal ? window : _this;
                  if (context.preload) {
                    var loadingScreen = document.getElementById(_this._loadingScreenId);
                    if (!loadingScreen) {
                      loadingScreen = document.createElement("div");
                      loadingScreen.innerHTML = "Loading...";
                      loadingScreen.style.position = "absolute";
                      loadingScreen.id = _this._loadingScreenId;
                      var _node = _this._userNode || document.body;
                      _node.appendChild(loadingScreen);
                    }
                    var _methods = _this._preloadMethods;
                    for (var method in _methods) {
                      _methods[method] = _methods[method] || p53;
                      var obj = _methods[method];
                      if (obj === p53.prototype || obj === p53) {
                        if (_this._isGlobal) {
                          window[method] = _this._wrapPreload(_this, method);
                        }
                        obj = _this;
                      }
                      _this._registeredPreloadMethods[method] = obj[method];
                      obj[method] = _this._wrapPreload(obj, method);
                    }
                    context.preload();
                    _this._runIfPreloadsAreDone();
                  } else {
                    _this._setup();
                    if (!_this._recording) {
                      _this._draw();
                    }
                  }
                };
                this._runIfPreloadsAreDone = function() {
                  var context = this._isGlobal ? window : this;
                  if (context._preloadCount === 0) {
                    var loadingScreen = document.getElementById(context._loadingScreenId);
                    if (loadingScreen) {
                      loadingScreen.parentNode.removeChild(loadingScreen);
                    }
                    if (!this._setupDone) {
                      this._lastTargetFrameTime = window.performance.now();
                      this._lastRealFrameTime = window.performance.now();
                      context._setup();
                      if (!this._recording) {
                        context._draw();
                      }
                    }
                  }
                };
                this._decrementPreload = function() {
                  var context = this._isGlobal ? window : this;
                  if (!context._preloadDone && typeof context.preload === "function") {
                    context._setProperty("_preloadCount", context._preloadCount - 1);
                    context._runIfPreloadsAreDone();
                  }
                };
                this._wrapPreload = function(obj, fnName) {
                  var _this2 = this;
                  return function() {
                    _this2._incrementPreload();
                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                    return _this2._registeredPreloadMethods[fnName].apply(obj, args);
                  };
                };
                this._incrementPreload = function() {
                  var context = this._isGlobal ? window : this;
                  if (context._preloadDone)
                    return;
                  context._setProperty("_preloadCount", context._preloadCount + 1);
                };
                this._setup = function() {
                  _this.createCanvas(_this._defaultCanvasSize.width, _this._defaultCanvasSize.height, "p2d");
                  var context = _this._isGlobal ? window : _this;
                  if (typeof context.preload === "function") {
                    for (var f2 in _this._preloadMethods) {
                      context[f2] = _this._preloadMethods[f2][f2];
                      if (context[f2] && _this) {
                        context[f2] = context[f2].bind(_this);
                      }
                    }
                  }
                  _this._millisStart = window.performance.now();
                  context._preloadDone = true;
                  if (typeof context.setup === "function") {
                    context.setup();
                  }
                  var canvases = document.getElementsByTagName("canvas");
                  var _iteratorNormalCompletion2 = true;
                  var _didIteratorError2 = false;
                  var _iteratorError2 = void 0;
                  try {
                    for (var _iterator2 = canvases[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                      var k3 = _step2.value;
                      if (k3.dataset.hidden === "true") {
                        k3.style.visibility = "";
                        delete k3.dataset.hidden;
                      }
                    }
                  } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                        _iterator2.return();
                      }
                    } finally {
                      if (_didIteratorError2) {
                        throw _iteratorError2;
                      }
                    }
                  }
                  _this._lastTargetFrameTime = window.performance.now();
                  _this._lastRealFrameTime = window.performance.now();
                  _this._setupDone = true;
                  if (_this._accessibleOutputs.grid || _this._accessibleOutputs.text) {
                    _this._updateAccsOutput();
                  }
                };
                this._draw = function() {
                  var now = window.performance.now();
                  var time_since_last = now - _this._lastTargetFrameTime;
                  var target_time_between_frames = 1e3 / _this._targetFrameRate;
                  var epsilon = 5;
                  if (!_this._loop || time_since_last >= target_time_between_frames - epsilon) {
                    _this.redraw();
                    _this._frameRate = 1e3 / (now - _this._lastRealFrameTime);
                    _this.deltaTime = now - _this._lastRealFrameTime;
                    _this._setProperty("deltaTime", _this.deltaTime);
                    _this._lastTargetFrameTime = Math.max(_this._lastTargetFrameTime + target_time_between_frames, now);
                    _this._lastRealFrameTime = now;
                    if (typeof _this._updateMouseCoords !== "undefined") {
                      _this._updateMouseCoords();
                      _this._setProperty("movedX", 0);
                      _this._setProperty("movedY", 0);
                    }
                  }
                  if (_this._loop) {
                    _this._requestAnimId = window.requestAnimationFrame(_this._draw);
                  }
                };
                this._setProperty = function(prop2, value) {
                  _this[prop2] = value;
                  if (_this._isGlobal) {
                    window[prop2] = value;
                  }
                };
                this.remove = function() {
                  var loadingScreen = document.getElementById(_this._loadingScreenId);
                  if (loadingScreen) {
                    loadingScreen.parentNode.removeChild(loadingScreen);
                    _this._incrementPreload();
                  }
                  if (_this._curElement) {
                    _this._loop = false;
                    if (_this._requestAnimId) {
                      window.cancelAnimationFrame(_this._requestAnimId);
                    }
                    for (var ev2 in _this._events) {
                      window.removeEventListener(ev2, _this._events[ev2]);
                    }
                    var _iteratorNormalCompletion3 = true;
                    var _didIteratorError3 = false;
                    var _iteratorError3 = void 0;
                    try {
                      for (var _iterator3 = _this._elements[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var e3 = _step3.value;
                        if (e3.elt && e3.elt.parentNode) {
                          e3.elt.parentNode.removeChild(e3.elt);
                        }
                        for (var elt_ev in e3._events) {
                          e3.elt.removeEventListener(elt_ev, e3._events[elt_ev]);
                        }
                      }
                    } catch (err) {
                      _didIteratorError3 = true;
                      _iteratorError3 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                          _iterator3.return();
                        }
                      } finally {
                        if (_didIteratorError3) {
                          throw _iteratorError3;
                        }
                      }
                    }
                    var self2 = _this;
                    _this._registeredMethods.remove.forEach(function(f2) {
                      if (typeof f2 !== "undefined") {
                        f2.call(self2);
                      }
                    });
                  }
                  if (_this._isGlobal) {
                    for (var p3 in p53.prototype) {
                      try {
                        delete window[p3];
                      } catch (x) {
                        window[p3] = void 0;
                      }
                    }
                    for (var p22 in _this) {
                      if (_this.hasOwnProperty(p22)) {
                        try {
                          delete window[p22];
                        } catch (x) {
                          window[p22] = void 0;
                        }
                      }
                    }
                    p53.instance = null;
                  }
                };
                this._registeredMethods.init.forEach(function(f2) {
                  if (typeof f2 !== "undefined") {
                    f2.call(this);
                  }
                }, this);
                this._setupPromisePreloads();
                var friendlyBindGlobal = this._createFriendlyGlobalFunctionBinder();
                if (!sketch2) {
                  this._isGlobal = true;
                  p53.instance = this;
                  for (var p in p53.prototype) {
                    if (typeof p53.prototype[p] === "function") {
                      var ev = p.substring(2);
                      if (!this._events.hasOwnProperty(ev)) {
                        if (Math.hasOwnProperty(p) && Math[p] === p53.prototype[p]) {
                          friendlyBindGlobal(p, p53.prototype[p]);
                        } else {
                          friendlyBindGlobal(p, p53.prototype[p].bind(this));
                        }
                      }
                    } else {
                      friendlyBindGlobal(p, p53.prototype[p]);
                    }
                  }
                  for (var p2 in this) {
                    if (this.hasOwnProperty(p2)) {
                      friendlyBindGlobal(p2, this[p2]);
                    }
                  }
                } else {
                  sketch2(this);
                  p53._checkForUserDefinedFunctions(this);
                }
                for (var e2 in this._events) {
                  var f = this["_on".concat(e2)];
                  if (f) {
                    var m = f.bind(this);
                    window.addEventListener(e2, m, {
                      passive: false
                    });
                    this._events[e2] = m;
                  }
                }
                var focusHandler = function focusHandler2() {
                  _this._setProperty("focused", true);
                };
                var blurHandler = function blurHandler2() {
                  _this._setProperty("focused", false);
                };
                window.addEventListener("focus", focusHandler);
                window.addEventListener("blur", blurHandler);
                this.registerMethod("remove", function() {
                  window.removeEventListener("focus", focusHandler);
                  window.removeEventListener("blur", blurHandler);
                });
                if (document.readyState === "complete") {
                  this._start();
                } else {
                  window.addEventListener("load", this._start.bind(this), false);
                }
              }
              _createClass(p53, [
                {
                  key: "_initializeInstanceVariables",
                  value: function _initializeInstanceVariables() {
                    this._accessibleOutputs = {
                      text: false,
                      grid: false,
                      textLabel: false,
                      gridLabel: false
                    };
                    this._styles = [];
                    this._bezierDetail = 20;
                    this._curveDetail = 20;
                    this._colorMode = constants2.RGB;
                    this._colorMaxes = {
                      rgb: [
                        255,
                        255,
                        255,
                        255
                      ],
                      hsb: [
                        360,
                        100,
                        100,
                        1
                      ],
                      hsl: [
                        360,
                        100,
                        100,
                        1
                      ]
                    };
                    this._downKeys = {};
                  }
                },
                {
                  key: "registerPreloadMethod",
                  value: function registerPreloadMethod(fnString, obj) {
                    if (!p53.prototype._preloadMethods.hasOwnProperty(fnString)) {
                      p53.prototype._preloadMethods[fnString] = obj;
                    }
                  }
                },
                {
                  key: "registerMethod",
                  value: function registerMethod(name, m) {
                    var target = this || p53.prototype;
                    if (!target._registeredMethods.hasOwnProperty(name)) {
                      target._registeredMethods[name] = [];
                    }
                    target._registeredMethods[name].push(m);
                  }
                  // create a function which provides a standardized process for binding
                  // globals; this is implemented as a factory primarily so that there's a
                  // way to redefine what "global" means for the binding function so it
                  // can be used in scenarios like unit testing where the window object
                  // might not exist
                },
                {
                  key: "_createFriendlyGlobalFunctionBinder",
                  value: function _createFriendlyGlobalFunctionBinder() {
                    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                    var globalObject = options.globalObject || window;
                    var log = options.log || console.log.bind(console);
                    var propsToForciblyOverwrite = {
                      // p5.print actually always overwrites an existing global function,
                      // albeit one that is very unlikely to be used:
                      //
                      //   https://developer.mozilla.org/en-US/docs/Web/API/Window/print
                      print: true
                    };
                    return function(prop, value) {
                      if (!p53.disableFriendlyErrors && typeof IS_MINIFIED === "undefined" && typeof value === "function" && !(prop in p53.prototype._preloadMethods)) {
                        try {
                          if (prop in globalObject && !(prop in propsToForciblyOverwrite)) {
                            throw new Error('global "'.concat(prop, '" already exists'));
                          }
                          Object.defineProperty(globalObject, prop, {
                            configurable: true,
                            enumerable: true,
                            get: function get() {
                              return value;
                            },
                            set: function set(newValue) {
                              Object.defineProperty(globalObject, prop, {
                                configurable: true,
                                enumerable: true,
                                value: newValue,
                                writable: true
                              });
                              log('You just changed the value of "'.concat(prop, `", which was a p5 function. This could cause problems later if you're not careful.`));
                            }
                          });
                        } catch (e2) {
                          var message = 'p5 had problems creating the global function "'.concat(prop, '", possibly because your code is already using that name as a variable. You may want to rename your variable to something else.');
                          p53._friendlyError(message, prop);
                          globalObject[prop] = value;
                        }
                      } else {
                        globalObject[prop] = value;
                      }
                    };
                  }
                }
              ]);
              return p53;
            }();
            p52.instance = null;
            p52.disableFriendlyErrors = false;
            for (var k2 in constants2) {
              p52.prototype[k2] = constants2[k2];
            }
            p52.VERSION = constants2.VERSION;
            p52.prototype._preloadMethods = {
              loadJSON: p52.prototype,
              loadImage: p52.prototype,
              loadStrings: p52.prototype,
              loadXML: p52.prototype,
              loadBytes: p52.prototype,
              loadTable: p52.prototype,
              loadFont: p52.prototype,
              loadModel: p52.prototype,
              loadShader: p52.prototype
            };
            p52.prototype._registeredMethods = {
              init: [],
              pre: [],
              post: [],
              remove: []
            };
            p52.prototype._registeredPreloadMethods = {};
            var _default2 = p52;
            exports2.default = _default2;
          },
          {
            "./constants": 278,
            "./shim": 301,
            "core-js/modules/es.array.for-each": 172,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.get-own-property-names": 192,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.for-each": 247,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        291: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("./main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.Element = function(elt, pInst) {
              this.elt = elt;
              this._pInst = this._pixelsState = pInst;
              this._events = {};
              this.width = this.elt.offsetWidth;
              this.height = this.elt.offsetHeight;
            };
            _main2.default.Element.prototype.parent = function(p) {
              if (typeof p === "undefined") {
                return this.elt.parentNode;
              }
              if (typeof p === "string") {
                if (p[0] === "#") {
                  p = p.substring(1);
                }
                p = document.getElementById(p);
              } else if (p instanceof _main2.default.Element) {
                p = p.elt;
              }
              p.appendChild(this.elt);
              return this;
            };
            _main2.default.Element.prototype.id = function(id) {
              if (typeof id === "undefined") {
                return this.elt.id;
              }
              this.elt.id = id;
              this.width = this.elt.offsetWidth;
              this.height = this.elt.offsetHeight;
              return this;
            };
            _main2.default.Element.prototype.class = function(c) {
              if (typeof c === "undefined") {
                return this.elt.className;
              }
              this.elt.className = c;
              return this;
            };
            _main2.default.Element.prototype.mousePressed = function(fxn) {
              var eventPrependedFxn = function eventPrependedFxn2(event) {
                this._pInst._setProperty("mouseIsPressed", true);
                this._pInst._setMouseButton(event);
                return fxn.call(this, event);
              };
              _main2.default.Element._adjustListener("mousedown", eventPrependedFxn, this);
              return this;
            };
            _main2.default.Element.prototype.doubleClicked = function(fxn) {
              _main2.default.Element._adjustListener("dblclick", fxn, this);
              return this;
            };
            _main2.default.Element.prototype.mouseWheel = function(fxn) {
              _main2.default.Element._adjustListener("wheel", fxn, this);
              return this;
            };
            _main2.default.Element.prototype.mouseReleased = function(fxn) {
              _main2.default.Element._adjustListener("mouseup", fxn, this);
              return this;
            };
            _main2.default.Element.prototype.mouseClicked = function(fxn) {
              _main2.default.Element._adjustListener("click", fxn, this);
              return this;
            };
            _main2.default.Element.prototype.mouseMoved = function(fxn) {
              _main2.default.Element._adjustListener("mousemove", fxn, this);
              return this;
            };
            _main2.default.Element.prototype.mouseOver = function(fxn) {
              _main2.default.Element._adjustListener("mouseover", fxn, this);
              return this;
            };
            _main2.default.Element.prototype.mouseOut = function(fxn) {
              _main2.default.Element._adjustListener("mouseout", fxn, this);
              return this;
            };
            _main2.default.Element.prototype.touchStarted = function(fxn) {
              _main2.default.Element._adjustListener("touchstart", fxn, this);
              return this;
            };
            _main2.default.Element.prototype.touchMoved = function(fxn) {
              _main2.default.Element._adjustListener("touchmove", fxn, this);
              return this;
            };
            _main2.default.Element.prototype.touchEnded = function(fxn) {
              _main2.default.Element._adjustListener("touchend", fxn, this);
              return this;
            };
            _main2.default.Element.prototype.dragOver = function(fxn) {
              _main2.default.Element._adjustListener("dragover", fxn, this);
              return this;
            };
            _main2.default.Element.prototype.dragLeave = function(fxn) {
              _main2.default.Element._adjustListener("dragleave", fxn, this);
              return this;
            };
            _main2.default.Element._adjustListener = function(ev, fxn, ctx) {
              if (fxn === false) {
                _main2.default.Element._detachListener(ev, ctx);
              } else {
                _main2.default.Element._attachListener(ev, fxn, ctx);
              }
              return this;
            };
            _main2.default.Element._attachListener = function(ev, fxn, ctx) {
              if (ctx._events[ev]) {
                _main2.default.Element._detachListener(ev, ctx);
              }
              var f = fxn.bind(ctx);
              ctx.elt.addEventListener(ev, f, false);
              ctx._events[ev] = f;
            };
            _main2.default.Element._detachListener = function(ev, ctx) {
              var f = ctx._events[ev];
              ctx.elt.removeEventListener(ev, f, false);
              ctx._events[ev] = null;
            };
            _main2.default.Element.prototype._setProperty = function(prop, value) {
              this[prop] = value;
            };
            var _default2 = _main2.default.Element;
            exports2.default = _default2;
          },
          {
            "./main": 290
          }
        ],
        292: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.splice");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.splice");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("./main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("./constants"));
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.Graphics = function(w, h, renderer, pInst) {
              var r = renderer || constants2.P2D;
              this.canvas = document.createElement("canvas");
              var node = pInst._userNode || document.body;
              node.appendChild(this.canvas);
              _main2.default.Element.call(this, this.canvas, pInst);
              for (var p in _main2.default.prototype) {
                if (!this[p]) {
                  if (typeof _main2.default.prototype[p] === "function") {
                    this[p] = _main2.default.prototype[p].bind(this);
                  } else {
                    this[p] = _main2.default.prototype[p];
                  }
                }
              }
              _main2.default.prototype._initializeInstanceVariables.apply(this);
              this.width = w;
              this.height = h;
              this._pixelDensity = pInst._pixelDensity;
              if (r === constants2.WEBGL) {
                this._renderer = new _main2.default.RendererGL(this.canvas, this, false);
              } else {
                this._renderer = new _main2.default.Renderer2D(this.canvas, this, false);
              }
              pInst._elements.push(this);
              Object.defineProperty(this, "deltaTime", {
                get: function get() {
                  return this._pInst.deltaTime;
                }
              });
              this._renderer.resize(w, h);
              this._renderer._applyDefaults();
              return this;
            };
            _main2.default.Graphics.prototype = Object.create(_main2.default.Element.prototype);
            _main2.default.Graphics.prototype.reset = function() {
              this._renderer.resetMatrix();
              if (this._renderer.isP3D) {
                this._renderer._update();
              }
            };
            _main2.default.Graphics.prototype.remove = function() {
              if (this.elt.parentNode) {
                this.elt.parentNode.removeChild(this.elt);
              }
              var idx = this._pInst._elements.indexOf(this);
              if (idx !== -1) {
                this._pInst._elements.splice(idx, 1);
              }
              for (var elt_ev in this._events) {
                this.elt.removeEventListener(elt_ev, this._events[elt_ev]);
              }
            };
            var _default2 = _main2.default.Graphics;
            exports2.default = _default2;
          },
          {
            "./constants": 278,
            "./main": 290,
            "core-js/modules/es.array.index-of": 175,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.splice": 182,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        293: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.number.constructor");
            _dereq_2("core-js/modules/es.object.assign");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.replace");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.string.trim");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.number.constructor");
            _dereq_2("core-js/modules/es.object.assign");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.replace");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.string.trim");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("./main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../core/constants"));
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _main2.default.Renderer = function(elt, pInst, isMainCanvas) {
              _main2.default.Element.call(this, elt, pInst);
              this.canvas = elt;
              this._pixelsState = pInst;
              if (isMainCanvas) {
                this._isMainCanvas = true;
                this._pInst._setProperty("_curElement", this);
                this._pInst._setProperty("canvas", this.canvas);
                this._pInst._setProperty("width", this.width);
                this._pInst._setProperty("height", this.height);
              } else {
                this.canvas.style.display = "none";
                this._styles = [];
              }
              this._textSize = 12;
              this._textLeading = 15;
              this._textFont = "sans-serif";
              this._textStyle = constants2.NORMAL;
              this._textAscent = null;
              this._textDescent = null;
              this._textAlign = constants2.LEFT;
              this._textBaseline = constants2.BASELINE;
              this._textWrap = constants2.WORD;
              this._rectMode = constants2.CORNER;
              this._ellipseMode = constants2.CENTER;
              this._curveTightness = 0;
              this._imageMode = constants2.CORNER;
              this._tint = null;
              this._doStroke = true;
              this._doFill = true;
              this._strokeSet = false;
              this._fillSet = false;
              this._leadingSet = false;
            };
            _main2.default.Renderer.prototype = Object.create(_main2.default.Element.prototype);
            _main2.default.Renderer.prototype.push = function() {
              return {
                properties: {
                  _doStroke: this._doStroke,
                  _strokeSet: this._strokeSet,
                  _doFill: this._doFill,
                  _fillSet: this._fillSet,
                  _tint: this._tint,
                  _imageMode: this._imageMode,
                  _rectMode: this._rectMode,
                  _ellipseMode: this._ellipseMode,
                  _textFont: this._textFont,
                  _textLeading: this._textLeading,
                  _leadingSet: this._leadingSet,
                  _textSize: this._textSize,
                  _textAlign: this._textAlign,
                  _textBaseline: this._textBaseline,
                  _textStyle: this._textStyle,
                  _textWrap: this._textWrap
                }
              };
            };
            _main2.default.Renderer.prototype.pop = function(style) {
              if (style.properties) {
                Object.assign(this, style.properties);
              }
            };
            _main2.default.Renderer.prototype.resize = function(w, h) {
              this.width = w;
              this.height = h;
              this.elt.width = w * this._pInst._pixelDensity;
              this.elt.height = h * this._pInst._pixelDensity;
              this.elt.style.width = "".concat(w, "px");
              this.elt.style.height = "".concat(h, "px");
              if (this._isMainCanvas) {
                this._pInst._setProperty("width", this.width);
                this._pInst._setProperty("height", this.height);
              }
            };
            _main2.default.Renderer.prototype.get = function(x, y, w, h) {
              var pixelsState = this._pixelsState;
              var pd = pixelsState._pixelDensity;
              var canvas = this.canvas;
              if (typeof x === "undefined" && typeof y === "undefined") {
                x = y = 0;
                w = pixelsState.width;
                h = pixelsState.height;
              } else {
                x *= pd;
                y *= pd;
                if (typeof w === "undefined" && typeof h === "undefined") {
                  if (x < 0 || y < 0 || x >= canvas.width || y >= canvas.height) {
                    return [
                      0,
                      0,
                      0,
                      0
                    ];
                  }
                  return this._getPixel(x, y);
                }
              }
              var region = new _main2.default.Image(w, h);
              region.canvas.getContext("2d").drawImage(canvas, x, y, w * pd, h * pd, 0, 0, w, h);
              return region;
            };
            _main2.default.Renderer.prototype.textLeading = function(l) {
              if (typeof l === "number") {
                this._setProperty("_leadingSet", true);
                this._setProperty("_textLeading", l);
                return this._pInst;
              }
              return this._textLeading;
            };
            _main2.default.Renderer.prototype.textSize = function(s) {
              if (typeof s === "number") {
                this._setProperty("_textSize", s);
                if (!this._leadingSet) {
                  this._setProperty("_textLeading", s * constants2._DEFAULT_LEADMULT);
                }
                return this._applyTextProperties();
              }
              return this._textSize;
            };
            _main2.default.Renderer.prototype.textStyle = function(s) {
              if (s) {
                if (s === constants2.NORMAL || s === constants2.ITALIC || s === constants2.BOLD || s === constants2.BOLDITALIC) {
                  this._setProperty("_textStyle", s);
                }
                return this._applyTextProperties();
              }
              return this._textStyle;
            };
            _main2.default.Renderer.prototype.textAscent = function() {
              if (this._textAscent === null) {
                this._updateTextMetrics();
              }
              return this._textAscent;
            };
            _main2.default.Renderer.prototype.textDescent = function() {
              if (this._textDescent === null) {
                this._updateTextMetrics();
              }
              return this._textDescent;
            };
            _main2.default.Renderer.prototype.textAlign = function(h, v) {
              if (typeof h !== "undefined") {
                this._setProperty("_textAlign", h);
                if (typeof v !== "undefined") {
                  this._setProperty("_textBaseline", v);
                }
                return this._applyTextProperties();
              } else {
                return {
                  horizontal: this._textAlign,
                  vertical: this._textBaseline
                };
              }
            };
            _main2.default.Renderer.prototype.textWrap = function(wrapStyle) {
              this._setProperty("_textWrap", wrapStyle);
              return this._textWrap;
            };
            _main2.default.Renderer.prototype.text = function(str, x, y, maxWidth, maxHeight) {
              var p = this._pInst;
              var textWrapStyle = this._textWrap;
              var lines;
              var line;
              var testLine;
              var testWidth;
              var words;
              var chars;
              var shiftedY;
              var finalMaxHeight = Number.MAX_VALUE;
              var finalMinHeight = y;
              if (!(this._doFill || this._doStroke)) {
                return;
              }
              if (typeof str === "undefined") {
                return;
              } else if (typeof str !== "string") {
                str = str.toString();
              }
              str = str.replace(/(\t)/g, "  ");
              lines = str.split("\n");
              if (typeof maxWidth !== "undefined") {
                if (this._rectMode === constants2.CENTER) {
                  x -= maxWidth / 2;
                }
                switch (this._textAlign) {
                  case constants2.CENTER:
                    x += maxWidth / 2;
                    break;
                  case constants2.RIGHT:
                    x += maxWidth;
                    break;
                }
                if (typeof maxHeight !== "undefined") {
                  if (this._rectMode === constants2.CENTER) {
                    y -= maxHeight / 2;
                    finalMinHeight -= maxHeight / 2;
                  }
                  var originalY = y;
                  var ascent = p.textAscent();
                  switch (this._textBaseline) {
                    case constants2.BOTTOM:
                      shiftedY = y + maxHeight;
                      y = Math.max(shiftedY, y);
                      finalMinHeight += ascent;
                      break;
                    case constants2.CENTER:
                      shiftedY = y + maxHeight / 2;
                      y = Math.max(shiftedY, y);
                      finalMinHeight += ascent / 2;
                      break;
                  }
                  finalMaxHeight = y + maxHeight - ascent;
                  if (this._textBaseline === constants2.CENTER) {
                    finalMaxHeight = originalY + maxHeight - ascent / 2;
                  }
                } else {
                  if (this._textBaseline === constants2.BOTTOM) {
                    return console.warn("textAlign(*, BOTTOM) requires x, y, width and height");
                  }
                  if (this._textBaseline === constants2.CENTER) {
                    return console.warn("textAlign(*, CENTER) requires x, y, width and height");
                  }
                }
                if (textWrapStyle === constants2.WORD) {
                  var nlines = [];
                  for (var lineIndex = 0; lineIndex < lines.length; lineIndex++) {
                    line = "";
                    words = lines[lineIndex].split(" ");
                    for (var wordIndex = 0; wordIndex < words.length; wordIndex++) {
                      testLine = "".concat(line + words[wordIndex]) + " ";
                      testWidth = this.textWidth(testLine);
                      if (testWidth > maxWidth && line.length > 0) {
                        nlines.push(line);
                        line = "".concat(words[wordIndex]) + " ";
                      } else {
                        line = testLine;
                      }
                    }
                    nlines.push(line);
                  }
                  var offset = 0;
                  if (this._textBaseline === constants2.CENTER) {
                    offset = (nlines.length - 1) * p.textLeading() / 2;
                  } else if (this._textBaseline === constants2.BOTTOM) {
                    offset = (nlines.length - 1) * p.textLeading();
                  }
                  for (var _lineIndex = 0; _lineIndex < lines.length; _lineIndex++) {
                    line = "";
                    words = lines[_lineIndex].split(" ");
                    for (var _wordIndex = 0; _wordIndex < words.length; _wordIndex++) {
                      testLine = "".concat(line + words[_wordIndex]) + " ";
                      testWidth = this.textWidth(testLine);
                      if (testWidth > maxWidth && line.length > 0) {
                        this._renderText(p, line.trim(), x, y - offset, finalMaxHeight, finalMinHeight);
                        line = "".concat(words[_wordIndex]) + " ";
                        y += p.textLeading();
                      } else {
                        line = testLine;
                      }
                    }
                    this._renderText(p, line.trim(), x, y - offset, finalMaxHeight, finalMinHeight);
                    y += p.textLeading();
                  }
                } else {
                  var _nlines = [];
                  for (var _lineIndex2 = 0; _lineIndex2 < lines.length; _lineIndex2++) {
                    line = "";
                    chars = lines[_lineIndex2].split("");
                    for (var charIndex = 0; charIndex < chars.length; charIndex++) {
                      testLine = "".concat(line + chars[charIndex]);
                      testWidth = this.textWidth(testLine);
                      if (testWidth <= maxWidth) {
                        line += chars[charIndex];
                      } else if (testWidth > maxWidth && line.length > 0) {
                        _nlines.push(line);
                        line = "".concat(chars[charIndex]);
                      }
                    }
                  }
                  _nlines.push(line);
                  var _offset = 0;
                  if (this._textBaseline === constants2.CENTER) {
                    _offset = (_nlines.length - 1) * p.textLeading() / 2;
                  } else if (this._textBaseline === constants2.BOTTOM) {
                    _offset = (_nlines.length - 1) * p.textLeading();
                  }
                  for (var _lineIndex3 = 0; _lineIndex3 < lines.length; _lineIndex3++) {
                    line = "";
                    chars = lines[_lineIndex3].split("");
                    for (var _charIndex = 0; _charIndex < chars.length; _charIndex++) {
                      testLine = "".concat(line + chars[_charIndex]);
                      testWidth = this.textWidth(testLine);
                      if (testWidth <= maxWidth) {
                        line += chars[_charIndex];
                      } else if (testWidth > maxWidth && line.length > 0) {
                        this._renderText(p, line.trim(), x, y - _offset, finalMaxHeight, finalMinHeight);
                        y += p.textLeading();
                        line = "".concat(chars[_charIndex]);
                      }
                    }
                  }
                  this._renderText(p, line.trim(), x, y - _offset, finalMaxHeight, finalMinHeight);
                  y += p.textLeading();
                }
              } else {
                var _offset2 = 0;
                if (this._textBaseline === constants2.CENTER) {
                  _offset2 = (lines.length - 1) * p.textLeading() / 2;
                } else if (this._textBaseline === constants2.BOTTOM) {
                  _offset2 = (lines.length - 1) * p.textLeading();
                }
                for (var i2 = 0; i2 < lines.length; i2++) {
                  this._renderText(p, lines[i2], x, y - _offset2, finalMaxHeight, finalMinHeight - _offset2);
                  y += p.textLeading();
                }
              }
              return p;
            };
            _main2.default.Renderer.prototype._applyDefaults = function() {
              return this;
            };
            _main2.default.Renderer.prototype._isOpenType = function() {
              var f = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this._textFont;
              return _typeof3(f) === "object" && f.font && f.font.supported;
            };
            _main2.default.Renderer.prototype._updateTextMetrics = function() {
              if (this._isOpenType()) {
                this._setProperty("_textAscent", this._textFont._textAscent());
                this._setProperty("_textDescent", this._textFont._textDescent());
                return this;
              }
              var text = document.createElement("span");
              text.style.fontFamily = this._textFont;
              text.style.fontSize = "".concat(this._textSize, "px");
              text.innerHTML = "ABCjgq|";
              var block = document.createElement("div");
              block.style.display = "inline-block";
              block.style.width = "1px";
              block.style.height = "0px";
              var container = document.createElement("div");
              container.appendChild(text);
              container.appendChild(block);
              container.style.height = "0px";
              container.style.overflow = "hidden";
              document.body.appendChild(container);
              block.style.verticalAlign = "baseline";
              var blockOffset = calculateOffset(block);
              var textOffset = calculateOffset(text);
              var ascent = blockOffset[1] - textOffset[1];
              block.style.verticalAlign = "bottom";
              blockOffset = calculateOffset(block);
              textOffset = calculateOffset(text);
              var height2 = blockOffset[1] - textOffset[1];
              var descent = height2 - ascent;
              document.body.removeChild(container);
              this._setProperty("_textAscent", ascent);
              this._setProperty("_textDescent", descent);
              return this;
            };
            function calculateOffset(object) {
              var currentLeft = 0, currentTop = 0;
              if (object.offsetParent) {
                do {
                  currentLeft += object.offsetLeft;
                  currentTop += object.offsetTop;
                } while (object = object.offsetParent);
              } else {
                currentLeft += object.offsetLeft;
                currentTop += object.offsetTop;
              }
              return [
                currentLeft,
                currentTop
              ];
            }
            var _default2 = _main2.default.Renderer;
            exports2.default = _default2;
          },
          {
            "../core/constants": 278,
            "./main": 290,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.number.constructor": 187,
            "core-js/modules/es.object.assign": 190,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.string.replace": 207,
            "core-js/modules/es.string.split": 209,
            "core-js/modules/es.string.trim": 211,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        294: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.fill");
            _dereq_2("core-js/modules/es.array.for-each");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.join");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.function.name");
            _dereq_2("core-js/modules/es.number.to-fixed");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.fill");
            _dereq_2("core-js/modules/es.array.for-each");
            _dereq_2("core-js/modules/es.array.join");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.function.name");
            _dereq_2("core-js/modules/es.number.to-fixed");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.to-string");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("./main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("./constants"));
            _dereq_2("./p5.Renderer");
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            var styleEmpty = "rgba(0,0,0,0)";
            _main2.default.Renderer2D = function(elt, pInst, isMainCanvas) {
              _main2.default.Renderer.call(this, elt, pInst, isMainCanvas);
              this.drawingContext = this.canvas.getContext("2d");
              this._pInst._setProperty("drawingContext", this.drawingContext);
              return this;
            };
            _main2.default.Renderer2D.prototype = Object.create(_main2.default.Renderer.prototype);
            _main2.default.Renderer2D.prototype._applyDefaults = function() {
              this._cachedFillStyle = this._cachedStrokeStyle = void 0;
              this._cachedBlendMode = constants2.BLEND;
              this._setFill(constants2._DEFAULT_FILL);
              this._setStroke(constants2._DEFAULT_STROKE);
              this.drawingContext.lineCap = constants2.ROUND;
              this.drawingContext.font = "normal 12px sans-serif";
            };
            _main2.default.Renderer2D.prototype.resize = function(w, h) {
              _main2.default.Renderer.prototype.resize.call(this, w, h);
              this.drawingContext.scale(this._pInst._pixelDensity, this._pInst._pixelDensity);
            };
            _main2.default.Renderer2D.prototype.background = function() {
              this.drawingContext.save();
              this.resetMatrix();
              if ((arguments.length <= 0 ? void 0 : arguments[0]) instanceof _main2.default.Image) {
                if ((arguments.length <= 1 ? void 0 : arguments[1]) >= 0) {
                  var img = arguments.length <= 0 ? void 0 : arguments[0];
                  this.drawingContext.globalAlpha = (arguments.length <= 1 ? void 0 : arguments[1]) / 255;
                  this._pInst.image(img, 0, 0, this.width, this.height);
                } else {
                  this._pInst.image(arguments.length <= 0 ? void 0 : arguments[0], 0, 0, this.width, this.height);
                }
              } else {
                var _this$_pInst;
                var curFill = this._getFill();
                var color = (_this$_pInst = this._pInst).color.apply(_this$_pInst, arguments);
                if (this._pInst._addAccsOutput()) {
                  this._pInst._accsBackground(color.levels);
                }
                var newFill = color.toString();
                this._setFill(newFill);
                if (this._isErasing) {
                  this.blendMode(this._cachedBlendMode);
                }
                this.drawingContext.fillRect(0, 0, this.width, this.height);
                this._setFill(curFill);
                if (this._isErasing) {
                  this._pInst.erase();
                }
              }
              this.drawingContext.restore();
            };
            _main2.default.Renderer2D.prototype.clear = function() {
              this.drawingContext.save();
              this.resetMatrix();
              this.drawingContext.clearRect(0, 0, this.width, this.height);
              this.drawingContext.restore();
            };
            _main2.default.Renderer2D.prototype.fill = function() {
              var _this$_pInst2;
              var color = (_this$_pInst2 = this._pInst).color.apply(_this$_pInst2, arguments);
              this._setFill(color.toString());
              if (this._pInst._addAccsOutput()) {
                this._pInst._accsCanvasColors("fill", color.levels);
              }
            };
            _main2.default.Renderer2D.prototype.stroke = function() {
              var _this$_pInst3;
              var color = (_this$_pInst3 = this._pInst).color.apply(_this$_pInst3, arguments);
              this._setStroke(color.toString());
              if (this._pInst._addAccsOutput()) {
                this._pInst._accsCanvasColors("stroke", color.levels);
              }
            };
            _main2.default.Renderer2D.prototype.erase = function(opacityFill, opacityStroke) {
              if (!this._isErasing) {
                this._cachedFillStyle = this.drawingContext.fillStyle;
                var newFill = this._pInst.color(255, opacityFill).toString();
                this.drawingContext.fillStyle = newFill;
                this._cachedStrokeStyle = this.drawingContext.strokeStyle;
                var newStroke = this._pInst.color(255, opacityStroke).toString();
                this.drawingContext.strokeStyle = newStroke;
                var tempBlendMode = this._cachedBlendMode;
                this.blendMode(constants2.REMOVE);
                this._cachedBlendMode = tempBlendMode;
                this._isErasing = true;
              }
            };
            _main2.default.Renderer2D.prototype.noErase = function() {
              if (this._isErasing) {
                this.drawingContext.fillStyle = this._cachedFillStyle;
                this.drawingContext.strokeStyle = this._cachedStrokeStyle;
                this.blendMode(this._cachedBlendMode);
                this._isErasing = false;
              }
            };
            _main2.default.Renderer2D.prototype.image = function(img, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) {
              var cnv;
              if (img.gifProperties) {
                img._animateGif(this._pInst);
              }
              try {
                if (_main2.default.MediaElement && img instanceof _main2.default.MediaElement) {
                  img._ensureCanvas();
                }
                if (this._tint && img.canvas) {
                  cnv = this._getTintedImageCanvas(img);
                }
                if (!cnv) {
                  cnv = img.canvas || img.elt;
                }
                var s = 1;
                if (img.width && img.width > 0) {
                  s = cnv.width / img.width;
                }
                if (this._isErasing) {
                  this.blendMode(this._cachedBlendMode);
                }
                this.drawingContext.drawImage(cnv, s * sx, s * sy, s * sWidth, s * sHeight, dx, dy, dWidth, dHeight);
                if (this._isErasing) {
                  this._pInst.erase();
                }
              } catch (e2) {
                if (e2.name !== "NS_ERROR_NOT_AVAILABLE") {
                  throw e2;
                }
              }
            };
            _main2.default.Renderer2D.prototype._getTintedImageCanvas = function(img) {
              if (!img.canvas) {
                return img;
              }
              if (!img.tintCanvas) {
                img.tintCanvas = document.createElement("canvas");
              }
              if (img.tintCanvas.width !== img.canvas.width) {
                img.tintCanvas.width = img.canvas.width;
              }
              if (img.tintCanvas.height !== img.canvas.height) {
                img.tintCanvas.height = img.canvas.height;
              }
              var ctx = img.tintCanvas.getContext("2d");
              ctx.save();
              ctx.clearRect(0, 0, img.canvas.width, img.canvas.height);
              if (this._tint[0] < 255 || this._tint[1] < 255 || this._tint[2] < 255) {
                ctx.drawImage(img.canvas, 0, 0);
                ctx.globalCompositeOperation = "luminosity";
                ctx.drawImage(img.canvas, 0, 0);
                ctx.globalCompositeOperation = "color";
                ctx.drawImage(img.canvas, 0, 0);
                ctx.globalCompositeOperation = "multiply";
                ctx.fillStyle = "rgb(".concat(this._tint.slice(0, 3).join(", "), ")");
                ctx.fillRect(0, 0, img.canvas.width, img.canvas.height);
                ctx.globalCompositeOperation = "destination-in";
                ctx.globalAlpha = this._tint[3] / 255;
                ctx.drawImage(img.canvas, 0, 0);
              } else {
                ctx.globalAlpha = this._tint[3] / 255;
                ctx.drawImage(img.canvas, 0, 0);
              }
              ctx.restore();
              return img.tintCanvas;
            };
            _main2.default.Renderer2D.prototype.blendMode = function(mode) {
              if (mode === constants2.SUBTRACT) {
                console.warn("blendMode(SUBTRACT) only works in WEBGL mode.");
              } else if (mode === constants2.BLEND || mode === constants2.REMOVE || mode === constants2.DARKEST || mode === constants2.LIGHTEST || mode === constants2.DIFFERENCE || mode === constants2.MULTIPLY || mode === constants2.EXCLUSION || mode === constants2.SCREEN || mode === constants2.REPLACE || mode === constants2.OVERLAY || mode === constants2.HARD_LIGHT || mode === constants2.SOFT_LIGHT || mode === constants2.DODGE || mode === constants2.BURN || mode === constants2.ADD) {
                this._cachedBlendMode = mode;
                this.drawingContext.globalCompositeOperation = mode;
              } else {
                throw new Error("Mode ".concat(mode, " not recognized."));
              }
            };
            _main2.default.Renderer2D.prototype.blend = function() {
              var currBlend = this.drawingContext.globalCompositeOperation;
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              var blendMode = args[args.length - 1];
              var copyArgs = Array.prototype.slice.call(args, 0, args.length - 1);
              this.drawingContext.globalCompositeOperation = blendMode;
              _main2.default.prototype.copy.apply(this, copyArgs);
              this.drawingContext.globalCompositeOperation = currBlend;
            };
            _main2.default.Renderer2D.prototype._getPixel = function(x, y) {
              var imageData, index;
              imageData = this.drawingContext.getImageData(x, y, 1, 1).data;
              index = 0;
              return [
                imageData[index + 0],
                imageData[index + 1],
                imageData[index + 2],
                imageData[index + 3]
              ];
            };
            _main2.default.Renderer2D.prototype.loadPixels = function() {
              var pixelsState = this._pixelsState;
              var pd = pixelsState._pixelDensity;
              var w = this.width * pd;
              var h = this.height * pd;
              var imageData = this.drawingContext.getImageData(0, 0, w, h);
              pixelsState._setProperty("imageData", imageData);
              pixelsState._setProperty("pixels", imageData.data);
            };
            _main2.default.Renderer2D.prototype.set = function(x, y, imgOrCol) {
              x = Math.floor(x);
              y = Math.floor(y);
              var pixelsState = this._pixelsState;
              if (imgOrCol instanceof _main2.default.Image) {
                this.drawingContext.save();
                this.drawingContext.setTransform(1, 0, 0, 1, 0, 0);
                this.drawingContext.scale(pixelsState._pixelDensity, pixelsState._pixelDensity);
                this.drawingContext.clearRect(x, y, imgOrCol.width, imgOrCol.height);
                this.drawingContext.drawImage(imgOrCol.canvas, x, y);
                this.drawingContext.restore();
              } else {
                var r = 0, g = 0, b = 0, a = 0;
                var idx = 4 * (y * pixelsState._pixelDensity * (this.width * pixelsState._pixelDensity) + x * pixelsState._pixelDensity);
                if (!pixelsState.imageData) {
                  pixelsState.loadPixels.call(pixelsState);
                }
                if (typeof imgOrCol === "number") {
                  if (idx < pixelsState.pixels.length) {
                    r = imgOrCol;
                    g = imgOrCol;
                    b = imgOrCol;
                    a = 255;
                  }
                } else if (imgOrCol instanceof Array) {
                  if (imgOrCol.length < 4) {
                    throw new Error("pixel array must be of the form [R, G, B, A]");
                  }
                  if (idx < pixelsState.pixels.length) {
                    r = imgOrCol[0];
                    g = imgOrCol[1];
                    b = imgOrCol[2];
                    a = imgOrCol[3];
                  }
                } else if (imgOrCol instanceof _main2.default.Color) {
                  if (idx < pixelsState.pixels.length) {
                    r = imgOrCol.levels[0];
                    g = imgOrCol.levels[1];
                    b = imgOrCol.levels[2];
                    a = imgOrCol.levels[3];
                  }
                }
                for (var i2 = 0; i2 < pixelsState._pixelDensity; i2++) {
                  for (var j = 0; j < pixelsState._pixelDensity; j++) {
                    idx = 4 * ((y * pixelsState._pixelDensity + j) * this.width * pixelsState._pixelDensity + (x * pixelsState._pixelDensity + i2));
                    pixelsState.pixels[idx] = r;
                    pixelsState.pixels[idx + 1] = g;
                    pixelsState.pixels[idx + 2] = b;
                    pixelsState.pixels[idx + 3] = a;
                  }
                }
              }
            };
            _main2.default.Renderer2D.prototype.updatePixels = function(x, y, w, h) {
              var pixelsState = this._pixelsState;
              var pd = pixelsState._pixelDensity;
              if (x === void 0 && y === void 0 && w === void 0 && h === void 0) {
                x = 0;
                y = 0;
                w = this.width;
                h = this.height;
              }
              x *= pd;
              y *= pd;
              w *= pd;
              h *= pd;
              if (this.gifProperties) {
                this.gifProperties.frames[this.gifProperties.displayIndex].image = pixelsState.imageData;
              }
              this.drawingContext.putImageData(pixelsState.imageData, x, y, 0, 0, w, h);
            };
            _main2.default.Renderer2D.prototype._acuteArcToBezier = function _acuteArcToBezier(start, size) {
              var alpha = size / 2, cos_alpha = Math.cos(alpha), sin_alpha = Math.sin(alpha), cot_alpha = 1 / Math.tan(alpha), phi = start + alpha, cos_phi = Math.cos(phi), sin_phi = Math.sin(phi), lambda = (4 - cos_alpha) / 3, mu = sin_alpha + (cos_alpha - lambda) * cot_alpha;
              return {
                ax: Math.cos(start).toFixed(7),
                ay: Math.sin(start).toFixed(7),
                bx: (lambda * cos_phi + mu * sin_phi).toFixed(7),
                by: (lambda * sin_phi - mu * cos_phi).toFixed(7),
                cx: (lambda * cos_phi - mu * sin_phi).toFixed(7),
                cy: (lambda * sin_phi + mu * cos_phi).toFixed(7),
                dx: Math.cos(start + size).toFixed(7),
                dy: Math.sin(start + size).toFixed(7)
              };
            };
            _main2.default.Renderer2D.prototype.arc = function(x, y, w, h, start, stop, mode) {
              var ctx = this.drawingContext;
              var rx = w / 2;
              var ry = h / 2;
              var epsilon = 1e-5;
              var arcToDraw = 0;
              var curves = [];
              x += rx;
              y += ry;
              while (stop - start >= epsilon) {
                arcToDraw = Math.min(stop - start, constants2.HALF_PI);
                curves.push(this._acuteArcToBezier(start, arcToDraw));
                start += arcToDraw;
              }
              if (this._doFill) {
                ctx.beginPath();
                curves.forEach(function(curve, index) {
                  if (index === 0) {
                    ctx.moveTo(x + curve.ax * rx, y + curve.ay * ry);
                  }
                  ctx.bezierCurveTo(x + curve.bx * rx, y + curve.by * ry, x + curve.cx * rx, y + curve.cy * ry, x + curve.dx * rx, y + curve.dy * ry);
                });
                if (mode === constants2.PIE || mode == null) {
                  ctx.lineTo(x, y);
                }
                ctx.closePath();
                ctx.fill();
              }
              if (this._doStroke) {
                ctx.beginPath();
                curves.forEach(function(curve, index) {
                  if (index === 0) {
                    ctx.moveTo(x + curve.ax * rx, y + curve.ay * ry);
                  }
                  ctx.bezierCurveTo(x + curve.bx * rx, y + curve.by * ry, x + curve.cx * rx, y + curve.cy * ry, x + curve.dx * rx, y + curve.dy * ry);
                });
                if (mode === constants2.PIE) {
                  ctx.lineTo(x, y);
                  ctx.closePath();
                } else if (mode === constants2.CHORD) {
                  ctx.closePath();
                }
                ctx.stroke();
              }
              return this;
            };
            _main2.default.Renderer2D.prototype.ellipse = function(args) {
              var ctx = this.drawingContext;
              var doFill = this._doFill, doStroke = this._doStroke;
              var x = parseFloat(args[0]), y = parseFloat(args[1]), w = parseFloat(args[2]), h = parseFloat(args[3]);
              if (doFill && !doStroke) {
                if (this._getFill() === styleEmpty) {
                  return this;
                }
              } else if (!doFill && doStroke) {
                if (this._getStroke() === styleEmpty) {
                  return this;
                }
              }
              var kappa = 0.5522847498, ox = w / 2 * kappa, oy = h / 2 * kappa, xe = x + w, ye = y + h, xm = x + w / 2, ym = y + h / 2;
              ctx.beginPath();
              ctx.moveTo(x, ym);
              ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
              ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
              ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
              ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
              if (doFill) {
                ctx.fill();
              }
              if (doStroke) {
                ctx.stroke();
              }
            };
            _main2.default.Renderer2D.prototype.line = function(x1, y1, x2, y2) {
              var ctx = this.drawingContext;
              if (!this._doStroke) {
                return this;
              } else if (this._getStroke() === styleEmpty) {
                return this;
              }
              ctx.beginPath();
              ctx.moveTo(x1, y1);
              ctx.lineTo(x2, y2);
              ctx.stroke();
              return this;
            };
            _main2.default.Renderer2D.prototype.point = function(x, y) {
              var ctx = this.drawingContext;
              if (!this._doStroke) {
                return this;
              } else if (this._getStroke() === styleEmpty) {
                return this;
              }
              var s = this._getStroke();
              var f = this._getFill();
              this._setFill(s);
              ctx.beginPath();
              ctx.arc(x, y, ctx.lineWidth / 2, 0, constants2.TWO_PI, false);
              ctx.fill();
              this._setFill(f);
            };
            _main2.default.Renderer2D.prototype.quad = function(x1, y1, x2, y2, x3, y3, x4, y4) {
              var ctx = this.drawingContext;
              var doFill = this._doFill, doStroke = this._doStroke;
              if (doFill && !doStroke) {
                if (this._getFill() === styleEmpty) {
                  return this;
                }
              } else if (!doFill && doStroke) {
                if (this._getStroke() === styleEmpty) {
                  return this;
                }
              }
              ctx.beginPath();
              ctx.moveTo(x1, y1);
              ctx.lineTo(x2, y2);
              ctx.lineTo(x3, y3);
              ctx.lineTo(x4, y4);
              ctx.closePath();
              if (doFill) {
                ctx.fill();
              }
              if (doStroke) {
                ctx.stroke();
              }
              return this;
            };
            _main2.default.Renderer2D.prototype.rect = function(args) {
              var x = args[0];
              var y = args[1];
              var w = args[2];
              var h = args[3];
              var tl = args[4];
              var tr = args[5];
              var br = args[6];
              var bl = args[7];
              var ctx = this.drawingContext;
              var doFill = this._doFill, doStroke = this._doStroke;
              if (doFill && !doStroke) {
                if (this._getFill() === styleEmpty) {
                  return this;
                }
              } else if (!doFill && doStroke) {
                if (this._getStroke() === styleEmpty) {
                  return this;
                }
              }
              ctx.beginPath();
              if (typeof tl === "undefined") {
                ctx.rect(x, y, w, h);
              } else {
                if (typeof tr === "undefined") {
                  tr = tl;
                }
                if (typeof br === "undefined") {
                  br = tr;
                }
                if (typeof bl === "undefined") {
                  bl = br;
                }
                var absW = Math.abs(w);
                var absH = Math.abs(h);
                var hw = absW / 2;
                var hh = absH / 2;
                if (absW < 2 * tl) {
                  tl = hw;
                }
                if (absH < 2 * tl) {
                  tl = hh;
                }
                if (absW < 2 * tr) {
                  tr = hw;
                }
                if (absH < 2 * tr) {
                  tr = hh;
                }
                if (absW < 2 * br) {
                  br = hw;
                }
                if (absH < 2 * br) {
                  br = hh;
                }
                if (absW < 2 * bl) {
                  bl = hw;
                }
                if (absH < 2 * bl) {
                  bl = hh;
                }
                ctx.beginPath();
                ctx.moveTo(x + tl, y);
                ctx.arcTo(x + w, y, x + w, y + h, tr);
                ctx.arcTo(x + w, y + h, x, y + h, br);
                ctx.arcTo(x, y + h, x, y, bl);
                ctx.arcTo(x, y, x + w, y, tl);
                ctx.closePath();
              }
              if (this._doFill) {
                ctx.fill();
              }
              if (this._doStroke) {
                ctx.stroke();
              }
              return this;
            };
            _main2.default.Renderer2D.prototype.triangle = function(args) {
              var ctx = this.drawingContext;
              var doFill = this._doFill, doStroke = this._doStroke;
              var x1 = args[0], y1 = args[1];
              var x2 = args[2], y2 = args[3];
              var x3 = args[4], y3 = args[5];
              if (doFill && !doStroke) {
                if (this._getFill() === styleEmpty) {
                  return this;
                }
              } else if (!doFill && doStroke) {
                if (this._getStroke() === styleEmpty) {
                  return this;
                }
              }
              ctx.beginPath();
              ctx.moveTo(x1, y1);
              ctx.lineTo(x2, y2);
              ctx.lineTo(x3, y3);
              ctx.closePath();
              if (doFill) {
                ctx.fill();
              }
              if (doStroke) {
                ctx.stroke();
              }
            };
            _main2.default.Renderer2D.prototype.endShape = function(mode, vertices, isCurve, isBezier, isQuadratic, isContour, shapeKind) {
              if (vertices.length === 0) {
                return this;
              }
              if (!this._doStroke && !this._doFill) {
                return this;
              }
              var closeShape = mode === constants2.CLOSE;
              var v;
              if (closeShape && !isContour) {
                vertices.push(vertices[0]);
              }
              var i2, j;
              var numVerts = vertices.length;
              if (isCurve && (shapeKind === constants2.POLYGON || shapeKind === null)) {
                if (numVerts > 3) {
                  var b = [], s = 1 - this._curveTightness;
                  this.drawingContext.beginPath();
                  this.drawingContext.moveTo(vertices[1][0], vertices[1][1]);
                  for (i2 = 1; i2 + 2 < numVerts; i2++) {
                    v = vertices[i2];
                    b[0] = [
                      v[0],
                      v[1]
                    ];
                    b[1] = [
                      v[0] + (s * vertices[i2 + 1][0] - s * vertices[i2 - 1][0]) / 6,
                      v[1] + (s * vertices[i2 + 1][1] - s * vertices[i2 - 1][1]) / 6
                    ];
                    b[2] = [
                      vertices[i2 + 1][0] + (s * vertices[i2][0] - s * vertices[i2 + 2][0]) / 6,
                      vertices[i2 + 1][1] + (s * vertices[i2][1] - s * vertices[i2 + 2][1]) / 6
                    ];
                    b[3] = [
                      vertices[i2 + 1][0],
                      vertices[i2 + 1][1]
                    ];
                    this.drawingContext.bezierCurveTo(b[1][0], b[1][1], b[2][0], b[2][1], b[3][0], b[3][1]);
                  }
                  if (closeShape) {
                    this.drawingContext.lineTo(vertices[i2 + 1][0], vertices[i2 + 1][1]);
                  }
                  this._doFillStrokeClose(closeShape);
                }
              } else if (isBezier && (shapeKind === constants2.POLYGON || shapeKind === null)) {
                this.drawingContext.beginPath();
                for (i2 = 0; i2 < numVerts; i2++) {
                  if (vertices[i2].isVert) {
                    if (vertices[i2].moveTo) {
                      this.drawingContext.moveTo(vertices[i2][0], vertices[i2][1]);
                    } else {
                      this.drawingContext.lineTo(vertices[i2][0], vertices[i2][1]);
                    }
                  } else {
                    this.drawingContext.bezierCurveTo(vertices[i2][0], vertices[i2][1], vertices[i2][2], vertices[i2][3], vertices[i2][4], vertices[i2][5]);
                  }
                }
                this._doFillStrokeClose(closeShape);
              } else if (isQuadratic && (shapeKind === constants2.POLYGON || shapeKind === null)) {
                this.drawingContext.beginPath();
                for (i2 = 0; i2 < numVerts; i2++) {
                  if (vertices[i2].isVert) {
                    if (vertices[i2].moveTo) {
                      this.drawingContext.moveTo(vertices[i2][0], vertices[i2][1]);
                    } else {
                      this.drawingContext.lineTo(vertices[i2][0], vertices[i2][1]);
                    }
                  } else {
                    this.drawingContext.quadraticCurveTo(vertices[i2][0], vertices[i2][1], vertices[i2][2], vertices[i2][3]);
                  }
                }
                this._doFillStrokeClose(closeShape);
              } else {
                if (shapeKind === constants2.POINTS) {
                  for (i2 = 0; i2 < numVerts; i2++) {
                    v = vertices[i2];
                    if (this._doStroke) {
                      this._pInst.stroke(v[6]);
                    }
                    this._pInst.point(v[0], v[1]);
                  }
                } else if (shapeKind === constants2.LINES) {
                  for (i2 = 0; i2 + 1 < numVerts; i2 += 2) {
                    v = vertices[i2];
                    if (this._doStroke) {
                      this._pInst.stroke(vertices[i2 + 1][6]);
                    }
                    this._pInst.line(v[0], v[1], vertices[i2 + 1][0], vertices[i2 + 1][1]);
                  }
                } else if (shapeKind === constants2.TRIANGLES) {
                  for (i2 = 0; i2 + 2 < numVerts; i2 += 3) {
                    v = vertices[i2];
                    this.drawingContext.beginPath();
                    this.drawingContext.moveTo(v[0], v[1]);
                    this.drawingContext.lineTo(vertices[i2 + 1][0], vertices[i2 + 1][1]);
                    this.drawingContext.lineTo(vertices[i2 + 2][0], vertices[i2 + 2][1]);
                    this.drawingContext.closePath();
                    if (this._doFill) {
                      this._pInst.fill(vertices[i2 + 2][5]);
                      this.drawingContext.fill();
                    }
                    if (this._doStroke) {
                      this._pInst.stroke(vertices[i2 + 2][6]);
                      this.drawingContext.stroke();
                    }
                  }
                } else if (shapeKind === constants2.TRIANGLE_STRIP) {
                  for (i2 = 0; i2 + 1 < numVerts; i2++) {
                    v = vertices[i2];
                    this.drawingContext.beginPath();
                    this.drawingContext.moveTo(vertices[i2 + 1][0], vertices[i2 + 1][1]);
                    this.drawingContext.lineTo(v[0], v[1]);
                    if (this._doStroke) {
                      this._pInst.stroke(vertices[i2 + 1][6]);
                    }
                    if (this._doFill) {
                      this._pInst.fill(vertices[i2 + 1][5]);
                    }
                    if (i2 + 2 < numVerts) {
                      this.drawingContext.lineTo(vertices[i2 + 2][0], vertices[i2 + 2][1]);
                      if (this._doStroke) {
                        this._pInst.stroke(vertices[i2 + 2][6]);
                      }
                      if (this._doFill) {
                        this._pInst.fill(vertices[i2 + 2][5]);
                      }
                    }
                    this._doFillStrokeClose(closeShape);
                  }
                } else if (shapeKind === constants2.TRIANGLE_FAN) {
                  if (numVerts > 2) {
                    this.drawingContext.beginPath();
                    for (i2 = 2; i2 < numVerts; i2++) {
                      v = vertices[i2];
                      this.drawingContext.moveTo(vertices[0][0], vertices[0][1]);
                      this.drawingContext.lineTo(vertices[i2 - 1][0], vertices[i2 - 1][1]);
                      this.drawingContext.lineTo(v[0], v[1]);
                      this.drawingContext.lineTo(vertices[0][0], vertices[0][1]);
                      if (i2 < numVerts - 1) {
                        if (this._doFill && v[5] !== vertices[i2 + 1][5] || this._doStroke && v[6] !== vertices[i2 + 1][6]) {
                          if (this._doFill) {
                            this._pInst.fill(v[5]);
                            this.drawingContext.fill();
                            this._pInst.fill(vertices[i2 + 1][5]);
                          }
                          if (this._doStroke) {
                            this._pInst.stroke(v[6]);
                            this.drawingContext.stroke();
                            this._pInst.stroke(vertices[i2 + 1][6]);
                          }
                          this.drawingContext.closePath();
                          this.drawingContext.beginPath();
                        }
                      }
                    }
                    this._doFillStrokeClose(closeShape);
                  }
                } else if (shapeKind === constants2.QUADS) {
                  for (i2 = 0; i2 + 3 < numVerts; i2 += 4) {
                    v = vertices[i2];
                    this.drawingContext.beginPath();
                    this.drawingContext.moveTo(v[0], v[1]);
                    for (j = 1; j < 4; j++) {
                      this.drawingContext.lineTo(vertices[i2 + j][0], vertices[i2 + j][1]);
                    }
                    this.drawingContext.lineTo(v[0], v[1]);
                    if (this._doFill) {
                      this._pInst.fill(vertices[i2 + 3][5]);
                    }
                    if (this._doStroke) {
                      this._pInst.stroke(vertices[i2 + 3][6]);
                    }
                    this._doFillStrokeClose(closeShape);
                  }
                } else if (shapeKind === constants2.QUAD_STRIP) {
                  if (numVerts > 3) {
                    for (i2 = 0; i2 + 1 < numVerts; i2 += 2) {
                      v = vertices[i2];
                      this.drawingContext.beginPath();
                      if (i2 + 3 < numVerts) {
                        this.drawingContext.moveTo(vertices[i2 + 2][0], vertices[i2 + 2][1]);
                        this.drawingContext.lineTo(v[0], v[1]);
                        this.drawingContext.lineTo(vertices[i2 + 1][0], vertices[i2 + 1][1]);
                        this.drawingContext.lineTo(vertices[i2 + 3][0], vertices[i2 + 3][1]);
                        if (this._doFill) {
                          this._pInst.fill(vertices[i2 + 3][5]);
                        }
                        if (this._doStroke) {
                          this._pInst.stroke(vertices[i2 + 3][6]);
                        }
                      } else {
                        this.drawingContext.moveTo(v[0], v[1]);
                        this.drawingContext.lineTo(vertices[i2 + 1][0], vertices[i2 + 1][1]);
                      }
                      this._doFillStrokeClose(closeShape);
                    }
                  }
                } else {
                  this.drawingContext.beginPath();
                  this.drawingContext.moveTo(vertices[0][0], vertices[0][1]);
                  for (i2 = 1; i2 < numVerts; i2++) {
                    v = vertices[i2];
                    if (v.isVert) {
                      if (v.moveTo) {
                        this.drawingContext.moveTo(v[0], v[1]);
                      } else {
                        this.drawingContext.lineTo(v[0], v[1]);
                      }
                    }
                  }
                  this._doFillStrokeClose(closeShape);
                }
              }
              isCurve = false;
              isBezier = false;
              isQuadratic = false;
              isContour = false;
              if (closeShape) {
                vertices.pop();
              }
              return this;
            };
            _main2.default.Renderer2D.prototype.strokeCap = function(cap) {
              if (cap === constants2.ROUND || cap === constants2.SQUARE || cap === constants2.PROJECT) {
                this.drawingContext.lineCap = cap;
              }
              return this;
            };
            _main2.default.Renderer2D.prototype.strokeJoin = function(join) {
              if (join === constants2.ROUND || join === constants2.BEVEL || join === constants2.MITER) {
                this.drawingContext.lineJoin = join;
              }
              return this;
            };
            _main2.default.Renderer2D.prototype.strokeWeight = function(w) {
              if (typeof w === "undefined" || w === 0) {
                this.drawingContext.lineWidth = 1e-4;
              } else {
                this.drawingContext.lineWidth = w;
              }
              return this;
            };
            _main2.default.Renderer2D.prototype._getFill = function() {
              if (!this._cachedFillStyle) {
                this._cachedFillStyle = this.drawingContext.fillStyle;
              }
              return this._cachedFillStyle;
            };
            _main2.default.Renderer2D.prototype._setFill = function(fillStyle) {
              if (fillStyle !== this._cachedFillStyle) {
                this.drawingContext.fillStyle = fillStyle;
                this._cachedFillStyle = fillStyle;
              }
            };
            _main2.default.Renderer2D.prototype._getStroke = function() {
              if (!this._cachedStrokeStyle) {
                this._cachedStrokeStyle = this.drawingContext.strokeStyle;
              }
              return this._cachedStrokeStyle;
            };
            _main2.default.Renderer2D.prototype._setStroke = function(strokeStyle) {
              if (strokeStyle !== this._cachedStrokeStyle) {
                this.drawingContext.strokeStyle = strokeStyle;
                this._cachedStrokeStyle = strokeStyle;
              }
            };
            _main2.default.Renderer2D.prototype.bezier = function(x1, y1, x2, y2, x3, y3, x4, y4) {
              this._pInst.beginShape();
              this._pInst.vertex(x1, y1);
              this._pInst.bezierVertex(x2, y2, x3, y3, x4, y4);
              this._pInst.endShape();
              return this;
            };
            _main2.default.Renderer2D.prototype.curve = function(x1, y1, x2, y2, x3, y3, x4, y4) {
              this._pInst.beginShape();
              this._pInst.curveVertex(x1, y1);
              this._pInst.curveVertex(x2, y2);
              this._pInst.curveVertex(x3, y3);
              this._pInst.curveVertex(x4, y4);
              this._pInst.endShape();
              return this;
            };
            _main2.default.Renderer2D.prototype._doFillStrokeClose = function(closeShape) {
              if (closeShape) {
                this.drawingContext.closePath();
              }
              if (this._doFill) {
                this.drawingContext.fill();
              }
              if (this._doStroke) {
                this.drawingContext.stroke();
              }
            };
            _main2.default.Renderer2D.prototype.applyMatrix = function(a, b, c, d, e2, f) {
              this.drawingContext.transform(a, b, c, d, e2, f);
            };
            _main2.default.Renderer2D.prototype.resetMatrix = function() {
              this.drawingContext.setTransform(1, 0, 0, 1, 0, 0);
              this.drawingContext.scale(this._pInst._pixelDensity, this._pInst._pixelDensity);
              return this;
            };
            _main2.default.Renderer2D.prototype.rotate = function(rad) {
              this.drawingContext.rotate(rad);
            };
            _main2.default.Renderer2D.prototype.scale = function(x, y) {
              this.drawingContext.scale(x, y);
              return this;
            };
            _main2.default.Renderer2D.prototype.translate = function(x, y) {
              if (x instanceof _main2.default.Vector) {
                y = x.y;
                x = x.x;
              }
              this.drawingContext.translate(x, y);
              return this;
            };
            _main2.default.Renderer2D.prototype.text = function(str, x, y, maxWidth, maxHeight) {
              var baselineHacked;
              if (typeof maxWidth !== "undefined") {
                if (this.drawingContext.textBaseline === constants2.BASELINE) {
                  baselineHacked = true;
                  this.drawingContext.textBaseline = constants2.TOP;
                }
              }
              var p = _main2.default.Renderer.prototype.text.apply(this, arguments);
              if (baselineHacked) {
                this.drawingContext.textBaseline = constants2.BASELINE;
              }
              return p;
            };
            _main2.default.Renderer2D.prototype._renderText = function(p, line, x, y, maxY, minY) {
              if (y < minY || y >= maxY) {
                return;
              }
              p.push();
              if (!this._isOpenType()) {
                if (this._doStroke && this._strokeSet) {
                  this.drawingContext.strokeText(line, x, y);
                }
                if (this._doFill) {
                  if (!this._fillSet) {
                    this._setFill(constants2._DEFAULT_TEXT_FILL);
                  }
                  this.drawingContext.fillText(line, x, y);
                }
              } else {
                this._textFont._renderPath(line, x, y, {
                  renderer: this
                });
              }
              p.pop();
              return p;
            };
            _main2.default.Renderer2D.prototype.textWidth = function(s) {
              if (this._isOpenType()) {
                return this._textFont._textWidth(s, this._textSize);
              }
              return this.drawingContext.measureText(s).width;
            };
            _main2.default.Renderer2D.prototype._applyTextProperties = function() {
              var font;
              var p = this._pInst;
              this._setProperty("_textAscent", null);
              this._setProperty("_textDescent", null);
              font = this._textFont;
              if (this._isOpenType()) {
                font = this._textFont.font.familyName;
                this._setProperty("_textStyle", this._textFont.font.styleName);
              }
              this.drawingContext.font = "".concat(this._textStyle || "normal", " ").concat(this._textSize || 12, "px ").concat(font || "sans-serif");
              this.drawingContext.textAlign = this._textAlign;
              if (this._textBaseline === constants2.CENTER) {
                this.drawingContext.textBaseline = constants2._CTX_MIDDLE;
              } else {
                this.drawingContext.textBaseline = this._textBaseline;
              }
              return p;
            };
            _main2.default.Renderer2D.prototype.push = function() {
              this.drawingContext.save();
              return _main2.default.Renderer.prototype.push.apply(this);
            };
            _main2.default.Renderer2D.prototype.pop = function(style) {
              this.drawingContext.restore();
              this._cachedFillStyle = this.drawingContext.fillStyle;
              this._cachedStrokeStyle = this.drawingContext.strokeStyle;
              _main2.default.Renderer.prototype.pop.call(this, style);
            };
            var _default2 = _main2.default.Renderer2D;
            exports2.default = _default2;
          },
          {
            "./constants": 278,
            "./main": 290,
            "./p5.Renderer": 293,
            "core-js/modules/es.array.concat": 167,
            "core-js/modules/es.array.fill": 170,
            "core-js/modules/es.array.for-each": 172,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.join": 177,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.function.name": 183,
            "core-js/modules/es.number.to-fixed": 189,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        295: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.assign");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.promise");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.assign");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.promise");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            var _main2 = _interopRequireDefault2(_dereq_2("./main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype._promisePreloads = [
              /* Example object
              {
                target: p5.prototype, // The target object to have the method modified
                method: 'loadXAsync', // The name of the preload function to wrap
                addCallbacks: true,   // Whether to automatically handle the p5 callbacks
                legacyPreloadSetup: { // Optional object to generate a legacy-style preload
                  method: 'loadX',    // The name of the legacy preload function to generate
                  createBaseObject: function() {
                    return {};
                  } // An optional function to create the base object for the legacy preload.
                }
              }
              */
            ];
            _main2.default.prototype.registerPromisePreload = function(setup2) {
              _main2.default.prototype._promisePreloads.push(setup2);
            };
            var initialSetupRan = false;
            _main2.default.prototype._setupPromisePreloads = function() {
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = void 0;
              try {
                for (var _iterator = this._promisePreloads[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var preloadSetup = _step.value;
                  var thisValue = this;
                  var method = preloadSetup.method, addCallbacks = preloadSetup.addCallbacks, legacyPreloadSetup = preloadSetup.legacyPreloadSetup;
                  var target = preloadSetup.target || this;
                  var sourceFunction = target[method].bind(target);
                  if (target === _main2.default.prototype) {
                    if (initialSetupRan) {
                      continue;
                    }
                    thisValue = null;
                    sourceFunction = target[method];
                  }
                  target[method] = this._wrapPromisePreload(thisValue, sourceFunction, addCallbacks);
                  if (legacyPreloadSetup) {
                    var legacyMethod = legacyPreloadSetup.method;
                    target[legacyMethod] = this._legacyPreloadGenerator(thisValue, legacyPreloadSetup, target[method]);
                  }
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }
              initialSetupRan = true;
            };
            _main2.default.prototype._wrapPromisePreload = function(thisValue, fn, addCallbacks) {
              var replacementFunction = function replacementFunction2() {
                var _this = this;
                this._incrementPreload();
                var callback = null;
                var errorCallback = null;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                if (addCallbacks) {
                  for (var i2 = args.length - 1; i2 >= 0 && !errorCallback; i2--) {
                    if (typeof args[i2] !== "function") {
                      break;
                    }
                    errorCallback = callback;
                    callback = args.pop();
                  }
                }
                var promise = Promise.resolve(fn.apply(this, args));
                if (callback) {
                  promise.then(callback);
                }
                if (errorCallback) {
                  promise.catch(errorCallback);
                }
                promise.then(function() {
                  return _this._decrementPreload();
                });
                return promise;
              };
              if (thisValue) {
                replacementFunction = replacementFunction.bind(thisValue);
              }
              return replacementFunction;
            };
            var objectCreator = function objectCreator2() {
              return {};
            };
            _main2.default.prototype._legacyPreloadGenerator = function(thisValue, legacyPreloadSetup, fn) {
              var baseValueGenerator = legacyPreloadSetup.createBaseObject || objectCreator;
              var returnedFunction = function returnedFunction2() {
                var _this2 = this;
                this._incrementPreload();
                var returnValue = baseValueGenerator.apply(this, arguments);
                fn.apply(this, arguments).then(function(data) {
                  Object.assign(returnValue, data);
                  _this2._decrementPreload();
                });
                return returnValue;
              };
              if (thisValue) {
                returnedFunction = returnedFunction.bind(thisValue);
              }
              return returnedFunction;
            };
          },
          {
            "./main": 290,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.object.assign": 190,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.promise": 196,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        296: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("./main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("./constants"));
            _dereq_2("./p5.Graphics");
            _dereq_2("./p5.Renderer2D");
            _dereq_2("../webgl/p5.RendererGL");
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            var defaultId = "defaultCanvas0";
            var defaultClass = "p5Canvas";
            _main2.default.prototype.createCanvas = function(w, h, renderer) {
              _main2.default._validateParameters("createCanvas", arguments);
              var r = renderer || constants2.P2D;
              var c;
              if (r === constants2.WEBGL) {
                c = document.getElementById(defaultId);
                if (c) {
                  c.parentNode.removeChild(c);
                  var thisRenderer = this._renderer;
                  this._elements = this._elements.filter(function(e2) {
                    return e2 !== thisRenderer;
                  });
                }
                c = document.createElement("canvas");
                c.id = defaultId;
                c.classList.add(defaultClass);
              } else {
                if (!this._defaultGraphicsCreated) {
                  c = document.createElement("canvas");
                  var i2 = 0;
                  while (document.getElementById("defaultCanvas".concat(i2))) {
                    i2++;
                  }
                  defaultId = "defaultCanvas".concat(i2);
                  c.id = defaultId;
                  c.classList.add(defaultClass);
                } else {
                  c = this.canvas;
                }
              }
              if (!this._setupDone) {
                c.dataset.hidden = true;
                c.style.visibility = "hidden";
              }
              if (this._userNode) {
                this._userNode.appendChild(c);
              } else {
                if (document.getElementsByTagName("main").length === 0) {
                  var m = document.createElement("main");
                  document.body.appendChild(m);
                }
                document.getElementsByTagName("main")[0].appendChild(c);
              }
              if (r === constants2.WEBGL) {
                this._setProperty("_renderer", new _main2.default.RendererGL(c, this, true));
                this._elements.push(this._renderer);
              } else {
                if (!this._defaultGraphicsCreated) {
                  this._setProperty("_renderer", new _main2.default.Renderer2D(c, this, true));
                  this._defaultGraphicsCreated = true;
                  this._elements.push(this._renderer);
                }
              }
              this._renderer.resize(w, h);
              this._renderer._applyDefaults();
              return this._renderer;
            };
            _main2.default.prototype.resizeCanvas = function(w, h, noRedraw) {
              _main2.default._validateParameters("resizeCanvas", arguments);
              if (this._renderer) {
                var props = {};
                for (var key2 in this.drawingContext) {
                  var val = this.drawingContext[key2];
                  if (_typeof3(val) !== "object" && typeof val !== "function") {
                    props[key2] = val;
                  }
                }
                this._renderer.resize(w, h);
                this.width = w;
                this.height = h;
                for (var savedKey in props) {
                  try {
                    this.drawingContext[savedKey] = props[savedKey];
                  } catch (err) {
                  }
                }
                if (!noRedraw) {
                  this.redraw();
                }
              }
              if (this._addAccsOutput()) {
                this._updateAccsOutput();
              }
            };
            _main2.default.prototype.noCanvas = function() {
              if (this.canvas) {
                this.canvas.parentNode.removeChild(this.canvas);
              }
            };
            _main2.default.prototype.createGraphics = function(w, h, renderer) {
              _main2.default._validateParameters("createGraphics", arguments);
              return new _main2.default.Graphics(w, h, renderer, this);
            };
            _main2.default.prototype.blendMode = function(mode) {
              _main2.default._validateParameters("blendMode", arguments);
              if (mode === constants2.NORMAL) {
                console.warn("NORMAL has been deprecated for use in blendMode. defaulting to BLEND instead.");
                mode = constants2.BLEND;
              }
              this._renderer.blendMode(mode);
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../webgl/p5.RendererGL": 344,
            "./constants": 278,
            "./main": 290,
            "./p5.Graphics": 292,
            "./p5.Renderer2D": 294,
            "core-js/modules/es.array.filter": 171,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        297: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _dereq_2("core-js/modules/es.array.slice");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../constants"));
            var _helpers = _interopRequireDefault2(_dereq_2("../helpers"));
            _dereq_2("../friendly_errors/fes_core");
            _dereq_2("../friendly_errors/file_errors");
            _dereq_2("../friendly_errors/validate_params");
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype._normalizeArcAngles = function(start, stop, width2, height2, correctForScaling) {
              var epsilon = 1e-5;
              var separation;
              start = start - constants2.TWO_PI * Math.floor(start / constants2.TWO_PI);
              stop = stop - constants2.TWO_PI * Math.floor(stop / constants2.TWO_PI);
              separation = Math.min(Math.abs(start - stop), constants2.TWO_PI - Math.abs(start - stop));
              if (correctForScaling) {
                if (start <= constants2.HALF_PI) {
                  start = Math.atan(width2 / height2 * Math.tan(start));
                } else if (start > constants2.HALF_PI && start <= 3 * constants2.HALF_PI) {
                  start = Math.atan(width2 / height2 * Math.tan(start)) + constants2.PI;
                } else {
                  start = Math.atan(width2 / height2 * Math.tan(start)) + constants2.TWO_PI;
                }
                if (stop <= constants2.HALF_PI) {
                  stop = Math.atan(width2 / height2 * Math.tan(stop));
                } else if (stop > constants2.HALF_PI && stop <= 3 * constants2.HALF_PI) {
                  stop = Math.atan(width2 / height2 * Math.tan(stop)) + constants2.PI;
                } else {
                  stop = Math.atan(width2 / height2 * Math.tan(stop)) + constants2.TWO_PI;
                }
              }
              if (start > stop) {
                stop += constants2.TWO_PI;
              }
              return {
                start,
                stop,
                correspondToSamePoint: separation < epsilon
              };
            };
            _main2.default.prototype.arc = function(x, y, w, h, start, stop, mode, detail) {
              _main2.default._validateParameters("arc", arguments);
              if (!this._renderer._doStroke && !this._renderer._doFill) {
                return this;
              }
              if (start === stop) {
                return this;
              }
              start = this._toRadians(start);
              stop = this._toRadians(stop);
              w = Math.abs(w);
              h = Math.abs(h);
              var vals = _helpers.default.modeAdjust(x, y, w, h, this._renderer._ellipseMode);
              var angles = this._normalizeArcAngles(start, stop, vals.w, vals.h, true);
              if (angles.correspondToSamePoint) {
                this._renderer.ellipse([
                  vals.x,
                  vals.y,
                  vals.w,
                  vals.h,
                  detail
                ]);
              } else {
                this._renderer.arc(
                  vals.x,
                  vals.y,
                  vals.w,
                  vals.h,
                  angles.start,
                  // [0, TWO_PI)
                  angles.stop,
                  // [start, start + TWO_PI)
                  mode,
                  detail
                );
                if (this._accessibleOutputs.grid || this._accessibleOutputs.text) {
                  this._accsOutput("arc", [
                    vals.x,
                    vals.y,
                    vals.w,
                    vals.h,
                    angles.start,
                    angles.stop,
                    mode
                  ]);
                }
              }
              return this;
            };
            _main2.default.prototype.ellipse = function(x, y, w, h, detailX) {
              _main2.default._validateParameters("ellipse", arguments);
              return this._renderEllipse.apply(this, arguments);
            };
            _main2.default.prototype.circle = function() {
              _main2.default._validateParameters("circle", arguments);
              var args = Array.prototype.slice.call(arguments, 0, 2);
              args.push(arguments[2]);
              args.push(arguments[2]);
              return this._renderEllipse.apply(this, args);
            };
            _main2.default.prototype._renderEllipse = function(x, y, w, h, detailX) {
              if (!this._renderer._doStroke && !this._renderer._doFill) {
                return this;
              }
              if (w < 0) {
                w = Math.abs(w);
              }
              if (typeof h === "undefined") {
                h = w;
              } else if (h < 0) {
                h = Math.abs(h);
              }
              var vals = _helpers.default.modeAdjust(x, y, w, h, this._renderer._ellipseMode);
              this._renderer.ellipse([
                vals.x,
                vals.y,
                vals.w,
                vals.h,
                detailX
              ]);
              if (this._accessibleOutputs.grid || this._accessibleOutputs.text) {
                this._accsOutput("ellipse", [
                  vals.x,
                  vals.y,
                  vals.w,
                  vals.h
                ]);
              }
              return this;
            };
            _main2.default.prototype.line = function() {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              _main2.default._validateParameters("line", args);
              if (this._renderer._doStroke) {
                var _this$_renderer;
                (_this$_renderer = this._renderer).line.apply(_this$_renderer, args);
              }
              if (this._accessibleOutputs.grid || this._accessibleOutputs.text) {
                this._accsOutput("line", args);
              }
              return this;
            };
            _main2.default.prototype.point = function() {
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }
              _main2.default._validateParameters("point", args);
              if (this._renderer._doStroke) {
                if (args.length === 1 && args[0] instanceof _main2.default.Vector) {
                  this._renderer.point.call(this._renderer, args[0].x, args[0].y, args[0].z);
                } else {
                  var _this$_renderer2;
                  (_this$_renderer2 = this._renderer).point.apply(_this$_renderer2, args);
                  if (this._accessibleOutputs.grid || this._accessibleOutputs.text) {
                    this._accsOutput("point", args);
                  }
                }
              }
              return this;
            };
            _main2.default.prototype.quad = function() {
              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
              }
              _main2.default._validateParameters("quad", args);
              if (this._renderer._doStroke || this._renderer._doFill) {
                if (this._renderer.isP3D && args.length < 12) {
                  this._renderer.quad.call(this._renderer, args[0], args[1], 0, args[2], args[3], 0, args[4], args[5], 0, args[6], args[7], 0, args[8], args[9]);
                } else {
                  var _this$_renderer3;
                  (_this$_renderer3 = this._renderer).quad.apply(_this$_renderer3, args);
                  if (this._accessibleOutputs.grid || this._accessibleOutputs.text) {
                    this._accsOutput("quadrilateral", args);
                  }
                }
              }
              return this;
            };
            _main2.default.prototype.rect = function() {
              _main2.default._validateParameters("rect", arguments);
              return this._renderRect.apply(this, arguments);
            };
            _main2.default.prototype.square = function(x, y, s, tl, tr, br, bl) {
              _main2.default._validateParameters("square", arguments);
              return this._renderRect.call(this, x, y, s, s, tl, tr, br, bl);
            };
            _main2.default.prototype._renderRect = function() {
              if (this._renderer._doStroke || this._renderer._doFill) {
                if (arguments.length === 3) {
                  arguments[3] = arguments[2];
                }
                var vals = _helpers.default.modeAdjust(arguments[0], arguments[1], arguments[2], arguments[3], this._renderer._rectMode);
                var args = [
                  vals.x,
                  vals.y,
                  vals.w,
                  vals.h
                ];
                for (var i2 = 4; i2 < arguments.length; i2++) {
                  args[i2] = arguments[i2];
                }
                this._renderer.rect(args);
                if (this._accessibleOutputs.grid || this._accessibleOutputs.text) {
                  this._accsOutput("rectangle", [
                    vals.x,
                    vals.y,
                    vals.w,
                    vals.h
                  ]);
                }
              }
              return this;
            };
            _main2.default.prototype.triangle = function() {
              for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                args[_key4] = arguments[_key4];
              }
              _main2.default._validateParameters("triangle", args);
              if (this._renderer._doStroke || this._renderer._doFill) {
                this._renderer.triangle(args);
              }
              if (this._accessibleOutputs.grid || this._accessibleOutputs.text) {
                this._accsOutput("triangle", args);
              }
              return this;
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../constants": 278,
            "../friendly_errors/fes_core": 281,
            "../friendly_errors/file_errors": 282,
            "../friendly_errors/validate_params": 285,
            "../helpers": 286,
            "../main": 290,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        298: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../constants"));
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.ellipseMode = function(m) {
              _main2.default._validateParameters("ellipseMode", arguments);
              if (m === constants2.CORNER || m === constants2.CORNERS || m === constants2.RADIUS || m === constants2.CENTER) {
                this._renderer._ellipseMode = m;
              }
              return this;
            };
            _main2.default.prototype.noSmooth = function() {
              if (!this._renderer.isP3D) {
                if ("imageSmoothingEnabled" in this.drawingContext) {
                  this.drawingContext.imageSmoothingEnabled = false;
                }
              } else {
                this.setAttributes("antialias", false);
              }
              return this;
            };
            _main2.default.prototype.rectMode = function(m) {
              _main2.default._validateParameters("rectMode", arguments);
              if (m === constants2.CORNER || m === constants2.CORNERS || m === constants2.RADIUS || m === constants2.CENTER) {
                this._renderer._rectMode = m;
              }
              return this;
            };
            _main2.default.prototype.smooth = function() {
              this.setAttributes("antialias", true);
              if (!this._renderer.isP3D) {
                if ("imageSmoothingEnabled" in this.drawingContext) {
                  this.drawingContext.imageSmoothingEnabled = true;
                }
              }
              return this;
            };
            _main2.default.prototype.strokeCap = function(cap) {
              _main2.default._validateParameters("strokeCap", arguments);
              if (cap === constants2.ROUND || cap === constants2.SQUARE || cap === constants2.PROJECT) {
                this._renderer.strokeCap(cap);
              }
              return this;
            };
            _main2.default.prototype.strokeJoin = function(join) {
              _main2.default._validateParameters("strokeJoin", arguments);
              if (join === constants2.ROUND || join === constants2.BEVEL || join === constants2.MITER) {
                this._renderer.strokeJoin(join);
              }
              return this;
            };
            _main2.default.prototype.strokeWeight = function(w) {
              _main2.default._validateParameters("strokeWeight", arguments);
              this._renderer.strokeWeight(w);
              return this;
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../constants": 278,
            "../main": 290,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        299: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../main"));
            _dereq_2("../friendly_errors/fes_core");
            _dereq_2("../friendly_errors/file_errors");
            _dereq_2("../friendly_errors/validate_params");
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.bezier = function() {
              var _this$_renderer;
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              _main2.default._validateParameters("bezier", args);
              if (!this._renderer._doStroke && !this._renderer._doFill) {
                return this;
              }
              (_this$_renderer = this._renderer).bezier.apply(_this$_renderer, args);
              return this;
            };
            _main2.default.prototype.bezierDetail = function(d) {
              _main2.default._validateParameters("bezierDetail", arguments);
              this._bezierDetail = d;
              return this;
            };
            _main2.default.prototype.bezierPoint = function(a, b, c, d, t) {
              _main2.default._validateParameters("bezierPoint", arguments);
              var adjustedT = 1 - t;
              return Math.pow(adjustedT, 3) * a + 3 * Math.pow(adjustedT, 2) * t * b + 3 * adjustedT * Math.pow(t, 2) * c + Math.pow(t, 3) * d;
            };
            _main2.default.prototype.bezierTangent = function(a, b, c, d, t) {
              _main2.default._validateParameters("bezierTangent", arguments);
              var adjustedT = 1 - t;
              return 3 * d * Math.pow(t, 2) - 3 * c * Math.pow(t, 2) + 6 * c * adjustedT * t - 6 * b * adjustedT * t + 3 * b * Math.pow(adjustedT, 2) - 3 * a * Math.pow(adjustedT, 2);
            };
            _main2.default.prototype.curve = function() {
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }
              _main2.default._validateParameters("curve", args);
              if (this._renderer._doStroke) {
                var _this$_renderer2;
                (_this$_renderer2 = this._renderer).curve.apply(_this$_renderer2, args);
              }
              return this;
            };
            _main2.default.prototype.curveDetail = function(d) {
              _main2.default._validateParameters("curveDetail", arguments);
              if (d < 3) {
                this._curveDetail = 3;
              } else {
                this._curveDetail = d;
              }
              return this;
            };
            _main2.default.prototype.curveTightness = function(t) {
              _main2.default._validateParameters("curveTightness", arguments);
              this._renderer._curveTightness = t;
              return this;
            };
            _main2.default.prototype.curvePoint = function(a, b, c, d, t) {
              _main2.default._validateParameters("curvePoint", arguments);
              var s = this._renderer._curveTightness, t3 = t * t * t, t2 = t * t, f1 = (s - 1) / 2 * t3 + (1 - s) * t2 + (s - 1) / 2 * t, f2 = (s + 3) / 2 * t3 + (-5 - s) / 2 * t2 + 1, f3 = (-3 - s) / 2 * t3 + (s + 2) * t2 + (1 - s) / 2 * t, f4 = (1 - s) / 2 * t3 + (s - 1) / 2 * t2;
              return a * f1 + b * f2 + c * f3 + d * f4;
            };
            _main2.default.prototype.curveTangent = function(a, b, c, d, t) {
              _main2.default._validateParameters("curveTangent", arguments);
              var s = this._renderer._curveTightness, tt3 = t * t * 3, t2 = t * 2, f1 = (s - 1) / 2 * tt3 + (1 - s) * t2 + (s - 1) / 2, f2 = (s + 3) / 2 * tt3 + (-5 - s) / 2 * t2, f3 = (-3 - s) / 2 * tt3 + (s + 2) * t2 + (1 - s) / 2, f4 = (1 - s) / 2 * tt3 + (s - 1) / 2 * t2;
              return a * f1 + b * f2 + c * f3 + d * f4;
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../friendly_errors/fes_core": 281,
            "../friendly_errors/file_errors": 282,
            "../friendly_errors/validate_params": 285,
            "../main": 290
          }
        ],
        300: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _dereq_2("core-js/modules/es.array.slice");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../constants"));
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            var shapeKind = null;
            var vertices = [];
            var contourVertices = [];
            var isBezier = false;
            var isCurve = false;
            var isQuadratic = false;
            var isContour = false;
            var isFirstContour = true;
            _main2.default.prototype.beginContour = function() {
              contourVertices = [];
              isContour = true;
              return this;
            };
            _main2.default.prototype.beginShape = function(kind) {
              _main2.default._validateParameters("beginShape", arguments);
              if (this._renderer.isP3D) {
                var _this$_renderer;
                (_this$_renderer = this._renderer).beginShape.apply(_this$_renderer, arguments);
              } else {
                if (kind === constants2.POINTS || kind === constants2.LINES || kind === constants2.TRIANGLES || kind === constants2.TRIANGLE_FAN || kind === constants2.TRIANGLE_STRIP || kind === constants2.QUADS || kind === constants2.QUAD_STRIP) {
                  shapeKind = kind;
                } else {
                  shapeKind = null;
                }
                vertices = [];
                contourVertices = [];
              }
              return this;
            };
            _main2.default.prototype.bezierVertex = function() {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              _main2.default._validateParameters("bezierVertex", args);
              if (this._renderer.isP3D) {
                var _this$_renderer2;
                (_this$_renderer2 = this._renderer).bezierVertex.apply(_this$_renderer2, args);
              } else {
                if (vertices.length === 0) {
                  _main2.default._friendlyError("vertex() must be used once before calling bezierVertex()", "bezierVertex");
                } else {
                  isBezier = true;
                  var vert = [];
                  for (var i2 = 0; i2 < args.length; i2++) {
                    vert[i2] = args[i2];
                  }
                  vert.isVert = false;
                  if (isContour) {
                    contourVertices.push(vert);
                  } else {
                    vertices.push(vert);
                  }
                }
              }
              return this;
            };
            _main2.default.prototype.curveVertex = function() {
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }
              _main2.default._validateParameters("curveVertex", args);
              if (this._renderer.isP3D) {
                var _this$_renderer3;
                (_this$_renderer3 = this._renderer).curveVertex.apply(_this$_renderer3, args);
              } else {
                isCurve = true;
                this.vertex(args[0], args[1]);
              }
              return this;
            };
            _main2.default.prototype.endContour = function() {
              var vert = contourVertices[0].slice();
              vert.isVert = contourVertices[0].isVert;
              vert.moveTo = false;
              contourVertices.push(vert);
              if (isFirstContour) {
                vertices.push(vertices[0]);
                isFirstContour = false;
              }
              for (var i2 = 0; i2 < contourVertices.length; i2++) {
                vertices.push(contourVertices[i2]);
              }
              return this;
            };
            _main2.default.prototype.endShape = function(mode) {
              _main2.default._validateParameters("endShape", arguments);
              if (this._renderer.isP3D) {
                this._renderer.endShape(mode, isCurve, isBezier, isQuadratic, isContour, shapeKind);
              } else {
                if (vertices.length === 0) {
                  return this;
                }
                if (!this._renderer._doStroke && !this._renderer._doFill) {
                  return this;
                }
                var closeShape = mode === constants2.CLOSE;
                if (closeShape && !isContour) {
                  vertices.push(vertices[0]);
                }
                this._renderer.endShape(mode, vertices, isCurve, isBezier, isQuadratic, isContour, shapeKind);
                isCurve = false;
                isBezier = false;
                isQuadratic = false;
                isContour = false;
                isFirstContour = true;
                if (closeShape) {
                  vertices.pop();
                }
              }
              return this;
            };
            _main2.default.prototype.quadraticVertex = function() {
              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
              }
              _main2.default._validateParameters("quadraticVertex", args);
              if (this._renderer.isP3D) {
                var _this$_renderer4;
                (_this$_renderer4 = this._renderer).quadraticVertex.apply(_this$_renderer4, args);
              } else {
                if (this._contourInited) {
                  var pt = {};
                  pt.x = args[0];
                  pt.y = args[1];
                  pt.x3 = args[2];
                  pt.y3 = args[3];
                  pt.type = constants2.QUADRATIC;
                  this._contourVertices.push(pt);
                  return this;
                }
                if (vertices.length > 0) {
                  isQuadratic = true;
                  var vert = [];
                  for (var i2 = 0; i2 < args.length; i2++) {
                    vert[i2] = args[i2];
                  }
                  vert.isVert = false;
                  if (isContour) {
                    contourVertices.push(vert);
                  } else {
                    vertices.push(vert);
                  }
                } else {
                  _main2.default._friendlyError("vertex() must be used once before calling quadraticVertex()", "quadraticVertex");
                }
              }
              return this;
            };
            _main2.default.prototype.vertex = function(x, y, moveTo, u, v) {
              if (this._renderer.isP3D) {
                var _this$_renderer5;
                (_this$_renderer5 = this._renderer).vertex.apply(_this$_renderer5, arguments);
              } else {
                var vert = [];
                vert.isVert = true;
                vert[0] = x;
                vert[1] = y;
                vert[2] = 0;
                vert[3] = 0;
                vert[4] = 0;
                vert[5] = this._renderer._getFill();
                vert[6] = this._renderer._getStroke();
                if (moveTo) {
                  vert.moveTo = moveTo;
                }
                if (isContour) {
                  if (contourVertices.length === 0) {
                    vert.moveTo = true;
                  }
                  contourVertices.push(vert);
                } else {
                  vertices.push(vert);
                }
              }
              return this;
            };
            _main2.default.prototype.normal = function(x, y, z) {
              var _this$_renderer6;
              this._assert3d("normal");
              _main2.default._validateParameters("normal", arguments);
              (_this$_renderer6 = this._renderer).normal.apply(_this$_renderer6, arguments);
              return this;
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../constants": 278,
            "../main": 290,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        301: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.assign");
            _dereq_2("core-js/modules/es.object.keys");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.typed-array.uint8-clamped-array");
            _dereq_2("core-js/modules/es.typed-array.copy-within");
            _dereq_2("core-js/modules/es.typed-array.every");
            _dereq_2("core-js/modules/es.typed-array.fill");
            _dereq_2("core-js/modules/es.typed-array.filter");
            _dereq_2("core-js/modules/es.typed-array.find");
            _dereq_2("core-js/modules/es.typed-array.find-index");
            _dereq_2("core-js/modules/es.typed-array.for-each");
            _dereq_2("core-js/modules/es.typed-array.includes");
            _dereq_2("core-js/modules/es.typed-array.index-of");
            _dereq_2("core-js/modules/es.typed-array.iterator");
            _dereq_2("core-js/modules/es.typed-array.join");
            _dereq_2("core-js/modules/es.typed-array.last-index-of");
            _dereq_2("core-js/modules/es.typed-array.map");
            _dereq_2("core-js/modules/es.typed-array.reduce");
            _dereq_2("core-js/modules/es.typed-array.reduce-right");
            _dereq_2("core-js/modules/es.typed-array.reverse");
            _dereq_2("core-js/modules/es.typed-array.set");
            _dereq_2("core-js/modules/es.typed-array.slice");
            _dereq_2("core-js/modules/es.typed-array.some");
            _dereq_2("core-js/modules/es.typed-array.sort");
            _dereq_2("core-js/modules/es.typed-array.subarray");
            _dereq_2("core-js/modules/es.typed-array.to-locale-string");
            _dereq_2("core-js/modules/es.typed-array.to-string");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.assign");
            _dereq_2("core-js/modules/es.object.keys");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.typed-array.uint8-clamped-array");
            _dereq_2("core-js/modules/es.typed-array.copy-within");
            _dereq_2("core-js/modules/es.typed-array.every");
            _dereq_2("core-js/modules/es.typed-array.fill");
            _dereq_2("core-js/modules/es.typed-array.filter");
            _dereq_2("core-js/modules/es.typed-array.find");
            _dereq_2("core-js/modules/es.typed-array.find-index");
            _dereq_2("core-js/modules/es.typed-array.for-each");
            _dereq_2("core-js/modules/es.typed-array.includes");
            _dereq_2("core-js/modules/es.typed-array.index-of");
            _dereq_2("core-js/modules/es.typed-array.iterator");
            _dereq_2("core-js/modules/es.typed-array.join");
            _dereq_2("core-js/modules/es.typed-array.last-index-of");
            _dereq_2("core-js/modules/es.typed-array.map");
            _dereq_2("core-js/modules/es.typed-array.reduce");
            _dereq_2("core-js/modules/es.typed-array.reduce-right");
            _dereq_2("core-js/modules/es.typed-array.reverse");
            _dereq_2("core-js/modules/es.typed-array.set");
            _dereq_2("core-js/modules/es.typed-array.slice");
            _dereq_2("core-js/modules/es.typed-array.some");
            _dereq_2("core-js/modules/es.typed-array.sort");
            _dereq_2("core-js/modules/es.typed-array.subarray");
            _dereq_2("core-js/modules/es.typed-array.to-locale-string");
            _dereq_2("core-js/modules/es.typed-array.to-string");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            window.requestAnimationFrame = function() {
              return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element2) {
                window.setTimeout(callback, 1e3 / 60);
              };
            }();
            (function() {
              if (typeof Uint8ClampedArray !== "undefined" && !Uint8ClampedArray.prototype.slice) {
                Object.defineProperty(Uint8ClampedArray.prototype, "slice", {
                  value: Array.prototype.slice,
                  writable: true,
                  configurable: true,
                  enumerable: false
                });
              }
            })();
            (function() {
              if (!Object.assign) {
                var keys = Object.keys;
                var defineProperty = Object.defineProperty;
                var canBeObject = function canBeObject2(obj) {
                  return typeof obj !== "undefined" && obj !== null;
                };
                var hasSymbols = typeof Symbol === "function" && _typeof3(Symbol()) === "symbol";
                var propIsEnumerable = Object.prototype.propertyIsEnumerable;
                var isEnumerableOn = function isEnumerableOn2(obj) {
                  return function isEnumerable(prop) {
                    return propIsEnumerable.call(obj, prop);
                  };
                };
                var assignShim = function assign(target, source1) {
                  if (!canBeObject(target)) {
                    throw new TypeError("target must be an object");
                  }
                  var objTarget = Object(target);
                  var s, source, i2, props;
                  for (s = 1; s < arguments.length; ++s) {
                    source = Object(arguments[s]);
                    props = keys(source);
                    if (hasSymbols && Object.getOwnPropertySymbols) {
                      props.push.apply(props, Object.getOwnPropertySymbols(source).filter(isEnumerableOn(source)));
                    }
                    for (i2 = 0; i2 < props.length; ++i2) {
                      objTarget[props[i2]] = source[props[i2]];
                    }
                  }
                  return objTarget;
                };
                defineProperty(Object, "assign", {
                  value: assignShim,
                  configurable: true,
                  enumerable: false,
                  writable: true
                });
              }
            })();
          },
          {
            "core-js/modules/es.array.filter": 171,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.object.assign": 190,
            "core-js/modules/es.object.keys": 194,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.typed-array.copy-within": 215,
            "core-js/modules/es.typed-array.every": 216,
            "core-js/modules/es.typed-array.fill": 217,
            "core-js/modules/es.typed-array.filter": 218,
            "core-js/modules/es.typed-array.find": 220,
            "core-js/modules/es.typed-array.find-index": 219,
            "core-js/modules/es.typed-array.for-each": 223,
            "core-js/modules/es.typed-array.includes": 224,
            "core-js/modules/es.typed-array.index-of": 225,
            "core-js/modules/es.typed-array.iterator": 228,
            "core-js/modules/es.typed-array.join": 229,
            "core-js/modules/es.typed-array.last-index-of": 230,
            "core-js/modules/es.typed-array.map": 231,
            "core-js/modules/es.typed-array.reduce": 233,
            "core-js/modules/es.typed-array.reduce-right": 232,
            "core-js/modules/es.typed-array.reverse": 234,
            "core-js/modules/es.typed-array.set": 235,
            "core-js/modules/es.typed-array.slice": 236,
            "core-js/modules/es.typed-array.some": 237,
            "core-js/modules/es.typed-array.sort": 238,
            "core-js/modules/es.typed-array.subarray": 239,
            "core-js/modules/es.typed-array.to-locale-string": 240,
            "core-js/modules/es.typed-array.to-string": 241,
            "core-js/modules/es.typed-array.uint8-clamped-array": 245,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        302: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.for-each");
            _dereq_2("core-js/modules/es.object.assign");
            _dereq_2("core-js/modules/web.dom-collections.for-each");
            _dereq_2("core-js/modules/es.array.for-each");
            _dereq_2("core-js/modules/es.object.assign");
            _dereq_2("core-js/modules/web.dom-collections.for-each");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("./main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.noLoop = function() {
              this._loop = false;
            };
            _main2.default.prototype.loop = function() {
              if (!this._loop) {
                this._loop = true;
                if (this._setupDone) {
                  this._draw();
                }
              }
            };
            _main2.default.prototype.isLooping = function() {
              return this._loop;
            };
            _main2.default.prototype.push = function() {
              this._styles.push({
                props: {
                  _colorMode: this._colorMode
                },
                renderer: this._renderer.push()
              });
            };
            _main2.default.prototype.pop = function() {
              var style = this._styles.pop();
              if (style) {
                this._renderer.pop(style.renderer);
                Object.assign(this, style.props);
              } else {
                console.warn("pop() was called without matching push()");
              }
            };
            _main2.default.prototype.redraw = function(n) {
              if (this._inUserDraw || !this._setupDone) {
                return;
              }
              var numberOfRedraws = parseInt(n);
              if (isNaN(numberOfRedraws) || numberOfRedraws < 1) {
                numberOfRedraws = 1;
              }
              var context = this._isGlobal ? window : this;
              if (typeof context.draw === "function") {
                if (typeof context.setup === "undefined") {
                  context.scale(context._pixelDensity, context._pixelDensity);
                }
                var callMethod = function callMethod2(f) {
                  f.call(context);
                };
                for (var idxRedraw = 0; idxRedraw < numberOfRedraws; idxRedraw++) {
                  context.resetMatrix();
                  if (this._accessibleOutputs.grid || this._accessibleOutputs.text) {
                    this._updateAccsOutput();
                  }
                  if (context._renderer.isP3D) {
                    context._renderer._update();
                  }
                  context._setProperty("frameCount", context.frameCount + 1);
                  context._registeredMethods.pre.forEach(callMethod);
                  this._inUserDraw = true;
                  try {
                    context.draw();
                  } finally {
                    this._inUserDraw = false;
                  }
                  context._registeredMethods.post.forEach(callMethod);
                }
              }
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "./main": 290,
            "core-js/modules/es.array.for-each": 172,
            "core-js/modules/es.object.assign": 190,
            "core-js/modules/web.dom-collections.for-each": 247
          }
        ],
        303: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.from");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.get-prototype-of");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.typed-array.uint8-array");
            _dereq_2("core-js/modules/es.typed-array.copy-within");
            _dereq_2("core-js/modules/es.typed-array.every");
            _dereq_2("core-js/modules/es.typed-array.fill");
            _dereq_2("core-js/modules/es.typed-array.filter");
            _dereq_2("core-js/modules/es.typed-array.find");
            _dereq_2("core-js/modules/es.typed-array.find-index");
            _dereq_2("core-js/modules/es.typed-array.for-each");
            _dereq_2("core-js/modules/es.typed-array.includes");
            _dereq_2("core-js/modules/es.typed-array.index-of");
            _dereq_2("core-js/modules/es.typed-array.iterator");
            _dereq_2("core-js/modules/es.typed-array.join");
            _dereq_2("core-js/modules/es.typed-array.last-index-of");
            _dereq_2("core-js/modules/es.typed-array.map");
            _dereq_2("core-js/modules/es.typed-array.reduce");
            _dereq_2("core-js/modules/es.typed-array.reduce-right");
            _dereq_2("core-js/modules/es.typed-array.reverse");
            _dereq_2("core-js/modules/es.typed-array.set");
            _dereq_2("core-js/modules/es.typed-array.slice");
            _dereq_2("core-js/modules/es.typed-array.some");
            _dereq_2("core-js/modules/es.typed-array.sort");
            _dereq_2("core-js/modules/es.typed-array.subarray");
            _dereq_2("core-js/modules/es.typed-array.to-locale-string");
            _dereq_2("core-js/modules/es.typed-array.to-string");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.from");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.get-prototype-of");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.typed-array.uint8-array");
            _dereq_2("core-js/modules/es.typed-array.copy-within");
            _dereq_2("core-js/modules/es.typed-array.every");
            _dereq_2("core-js/modules/es.typed-array.fill");
            _dereq_2("core-js/modules/es.typed-array.filter");
            _dereq_2("core-js/modules/es.typed-array.find");
            _dereq_2("core-js/modules/es.typed-array.find-index");
            _dereq_2("core-js/modules/es.typed-array.for-each");
            _dereq_2("core-js/modules/es.typed-array.includes");
            _dereq_2("core-js/modules/es.typed-array.index-of");
            _dereq_2("core-js/modules/es.typed-array.iterator");
            _dereq_2("core-js/modules/es.typed-array.join");
            _dereq_2("core-js/modules/es.typed-array.last-index-of");
            _dereq_2("core-js/modules/es.typed-array.map");
            _dereq_2("core-js/modules/es.typed-array.reduce");
            _dereq_2("core-js/modules/es.typed-array.reduce-right");
            _dereq_2("core-js/modules/es.typed-array.reverse");
            _dereq_2("core-js/modules/es.typed-array.set");
            _dereq_2("core-js/modules/es.typed-array.slice");
            _dereq_2("core-js/modules/es.typed-array.some");
            _dereq_2("core-js/modules/es.typed-array.sort");
            _dereq_2("core-js/modules/es.typed-array.subarray");
            _dereq_2("core-js/modules/es.typed-array.to-locale-string");
            _dereq_2("core-js/modules/es.typed-array.to-string");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("./main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            function _toConsumableArray2(arr) {
              return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _nonIterableSpread2();
            }
            function _nonIterableSpread2() {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            }
            function _iterableToArray2(iter) {
              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]")
                return Array.from(iter);
            }
            function _arrayWithoutHoles2(arr) {
              if (Array.isArray(arr)) {
                for (var i2 = 0, arr2 = new Array(arr.length); i2 < arr.length; i2++) {
                  arr2[i2] = arr[i2];
                }
                return arr2;
              }
            }
            _main2.default.prototype.applyMatrix = function() {
              var isTypedArray = arguments[0] instanceof Object.getPrototypeOf(Uint8Array);
              if (Array.isArray(arguments[0]) || isTypedArray) {
                var _this$_renderer;
                (_this$_renderer = this._renderer).applyMatrix.apply(_this$_renderer, _toConsumableArray2(arguments[0]));
              } else {
                var _this$_renderer2;
                (_this$_renderer2 = this._renderer).applyMatrix.apply(_this$_renderer2, arguments);
              }
              return this;
            };
            _main2.default.prototype.resetMatrix = function() {
              this._renderer.resetMatrix();
              return this;
            };
            _main2.default.prototype.rotate = function(angle, axis) {
              _main2.default._validateParameters("rotate", arguments);
              this._renderer.rotate(this._toRadians(angle), axis);
              return this;
            };
            _main2.default.prototype.rotateX = function(angle) {
              this._assert3d("rotateX");
              _main2.default._validateParameters("rotateX", arguments);
              this._renderer.rotateX(this._toRadians(angle));
              return this;
            };
            _main2.default.prototype.rotateY = function(angle) {
              this._assert3d("rotateY");
              _main2.default._validateParameters("rotateY", arguments);
              this._renderer.rotateY(this._toRadians(angle));
              return this;
            };
            _main2.default.prototype.rotateZ = function(angle) {
              this._assert3d("rotateZ");
              _main2.default._validateParameters("rotateZ", arguments);
              this._renderer.rotateZ(this._toRadians(angle));
              return this;
            };
            _main2.default.prototype.scale = function(x, y, z) {
              _main2.default._validateParameters("scale", arguments);
              if (x instanceof _main2.default.Vector) {
                var v = x;
                x = v.x;
                y = v.y;
                z = v.z;
              } else if (x instanceof Array) {
                var rg = x;
                x = rg[0];
                y = rg[1];
                z = rg[2] || 1;
              }
              if (isNaN(y)) {
                y = z = x;
              } else if (isNaN(z)) {
                z = 1;
              }
              this._renderer.scale.call(this._renderer, x, y, z);
              return this;
            };
            _main2.default.prototype.shearX = function(angle) {
              _main2.default._validateParameters("shearX", arguments);
              var rad = this._toRadians(angle);
              this._renderer.applyMatrix(1, 0, Math.tan(rad), 1, 0, 0);
              return this;
            };
            _main2.default.prototype.shearY = function(angle) {
              _main2.default._validateParameters("shearY", arguments);
              var rad = this._toRadians(angle);
              this._renderer.applyMatrix(1, Math.tan(rad), 0, 1, 0, 0);
              return this;
            };
            _main2.default.prototype.translate = function(x, y, z) {
              _main2.default._validateParameters("translate", arguments);
              if (this._renderer.isP3D) {
                this._renderer.translate(x, y, z);
              } else {
                this._renderer.translate(x, y);
              }
              return this;
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "./main": 290,
            "core-js/modules/es.array.from": 173,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.object.get-prototype-of": 193,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.typed-array.copy-within": 215,
            "core-js/modules/es.typed-array.every": 216,
            "core-js/modules/es.typed-array.fill": 217,
            "core-js/modules/es.typed-array.filter": 218,
            "core-js/modules/es.typed-array.find": 220,
            "core-js/modules/es.typed-array.find-index": 219,
            "core-js/modules/es.typed-array.for-each": 223,
            "core-js/modules/es.typed-array.includes": 224,
            "core-js/modules/es.typed-array.index-of": 225,
            "core-js/modules/es.typed-array.iterator": 228,
            "core-js/modules/es.typed-array.join": 229,
            "core-js/modules/es.typed-array.last-index-of": 230,
            "core-js/modules/es.typed-array.map": 231,
            "core-js/modules/es.typed-array.reduce": 233,
            "core-js/modules/es.typed-array.reduce-right": 232,
            "core-js/modules/es.typed-array.reverse": 234,
            "core-js/modules/es.typed-array.set": 235,
            "core-js/modules/es.typed-array.slice": 236,
            "core-js/modules/es.typed-array.some": 237,
            "core-js/modules/es.typed-array.sort": 238,
            "core-js/modules/es.typed-array.subarray": 239,
            "core-js/modules/es.typed-array.to-locale-string": 240,
            "core-js/modules/es.typed-array.to-string": 241,
            "core-js/modules/es.typed-array.uint8-array": 244,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        304: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.from");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.ends-with");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.from");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.ends-with");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            function _toConsumableArray2(arr) {
              return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _nonIterableSpread2();
            }
            function _nonIterableSpread2() {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            }
            function _iterableToArray2(iter) {
              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]")
                return Array.from(iter);
            }
            function _arrayWithoutHoles2(arr) {
              if (Array.isArray(arr)) {
                for (var i2 = 0, arr2 = new Array(arr.length); i2 < arr.length; i2++) {
                  arr2[i2] = arr[i2];
                }
                return arr2;
              }
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _main2.default.prototype.storeItem = function(key2, value) {
              if (typeof key2 !== "string") {
                console.log("The argument that you passed to storeItem() - ".concat(key2, " is not a string."));
              }
              if (key2.endsWith("p5TypeID")) {
                console.log("The argument that you passed to storeItem() - ".concat(key2, " must not end with 'p5TypeID'."));
              }
              if (typeof value === "undefined") {
                console.log("You cannot store undefined variables using storeItem().");
              }
              var type = _typeof3(value);
              switch (type) {
                case "number":
                case "boolean":
                  value = value.toString();
                  break;
                case "object":
                  if (value instanceof _main2.default.Color) {
                    type = "p5.Color";
                  } else if (value instanceof _main2.default.Vector) {
                    type = "p5.Vector";
                    var coord = [
                      value.x,
                      value.y,
                      value.z
                    ];
                    value = coord;
                  }
                  value = JSON.stringify(value);
                  break;
                case "string":
                default:
                  break;
              }
              localStorage.setItem(key2, value);
              var typeKey = "".concat(key2, "p5TypeID");
              localStorage.setItem(typeKey, type);
            };
            _main2.default.prototype.getItem = function(key2) {
              var value = localStorage.getItem(key2);
              var type = localStorage.getItem("".concat(key2, "p5TypeID"));
              if (typeof type === "undefined") {
                console.log("Unable to determine type of item stored under ".concat(key2, "in local storage. Did you save the item with something other than setItem()?"));
              } else if (value !== null) {
                switch (type) {
                  case "number":
                    value = parseFloat(value);
                    break;
                  case "boolean":
                    value = value === "true";
                    break;
                  case "object":
                    value = JSON.parse(value);
                    break;
                  case "p5.Color":
                    value = JSON.parse(value);
                    value = this.color.apply(this, _toConsumableArray2(value.levels));
                    break;
                  case "p5.Vector":
                    value = JSON.parse(value);
                    value = this.createVector.apply(this, _toConsumableArray2(value));
                    break;
                  case "string":
                  default:
                    break;
                }
              }
              return value;
            };
            _main2.default.prototype.clearStorage = function() {
              localStorage.clear();
            };
            _main2.default.prototype.removeItem = function(key2) {
              if (typeof key2 !== "string") {
                console.log("The argument that you passed to removeItem() - ".concat(key2, " is not a string."));
              }
              localStorage.removeItem(key2);
              localStorage.removeItem("".concat(key2, "p5TypeID"));
            };
          },
          {
            "../core/main": 290,
            "core-js/modules/es.array.from": 173,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.string.ends-with": 202,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        305: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.object.keys");
            _dereq_2("core-js/modules/es.string.sub");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.object.keys");
            _dereq_2("core-js/modules/es.string.sub");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.createStringDict = function(key2, value) {
              _main2.default._validateParameters("createStringDict", arguments);
              return new _main2.default.StringDict(key2, value);
            };
            _main2.default.prototype.createNumberDict = function(key2, value) {
              _main2.default._validateParameters("createNumberDict", arguments);
              return new _main2.default.NumberDict(key2, value);
            };
            _main2.default.TypedDict = function(key2, value) {
              if (key2 instanceof Object) {
                this.data = key2;
              } else {
                this.data = {};
                this.data[key2] = value;
              }
              return this;
            };
            _main2.default.TypedDict.prototype.size = function() {
              return Object.keys(this.data).length;
            };
            _main2.default.TypedDict.prototype.hasKey = function(key2) {
              return this.data.hasOwnProperty(key2);
            };
            _main2.default.TypedDict.prototype.get = function(key2) {
              if (this.data.hasOwnProperty(key2)) {
                return this.data[key2];
              } else {
                console.log("".concat(key2, " does not exist in this Dictionary"));
              }
            };
            _main2.default.TypedDict.prototype.set = function(key2, value) {
              if (this._validate(value)) {
                this.data[key2] = value;
              } else {
                console.log("Those values dont work for this dictionary type.");
              }
            };
            _main2.default.TypedDict.prototype._addObj = function(obj) {
              for (var key2 in obj) {
                this.set(key2, obj[key2]);
              }
            };
            _main2.default.TypedDict.prototype.create = function(key2, value) {
              if (key2 instanceof Object && typeof value === "undefined") {
                this._addObj(key2);
              } else if (typeof key2 !== "undefined") {
                this.set(key2, value);
              } else {
                console.log("In order to create a new Dictionary entry you must pass an object or a key, value pair");
              }
            };
            _main2.default.TypedDict.prototype.clear = function() {
              this.data = {};
            };
            _main2.default.TypedDict.prototype.remove = function(key2) {
              if (this.data.hasOwnProperty(key2)) {
                delete this.data[key2];
              } else {
                throw new Error("".concat(key2, " does not exist in this Dictionary"));
              }
            };
            _main2.default.TypedDict.prototype.print = function() {
              for (var item in this.data) {
                console.log("key:".concat(item, " value:").concat(this.data[item]));
              }
            };
            _main2.default.TypedDict.prototype.saveTable = function(filename) {
              var output = "";
              for (var key2 in this.data) {
                output += "".concat(key2, ",").concat(this.data[key2], "\n");
              }
              var blob = new Blob([output], {
                type: "text/csv"
              });
              _main2.default.prototype.downloadFile(blob, filename || "mycsv", "csv");
            };
            _main2.default.TypedDict.prototype.saveJSON = function(filename, opt) {
              _main2.default.prototype.saveJSON(this.data, filename, opt);
            };
            _main2.default.TypedDict.prototype._validate = function(value) {
              return true;
            };
            _main2.default.StringDict = function() {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              _main2.default.TypedDict.apply(this, args);
            };
            _main2.default.StringDict.prototype = Object.create(_main2.default.TypedDict.prototype);
            _main2.default.StringDict.prototype._validate = function(value) {
              return typeof value === "string";
            };
            _main2.default.NumberDict = function() {
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }
              _main2.default.TypedDict.apply(this, args);
            };
            _main2.default.NumberDict.prototype = Object.create(_main2.default.TypedDict.prototype);
            _main2.default.NumberDict.prototype._validate = function(value) {
              return typeof value === "number";
            };
            _main2.default.NumberDict.prototype.add = function(key2, amount) {
              if (this.data.hasOwnProperty(key2)) {
                this.data[key2] += amount;
              } else {
                console.log("The key - ".concat(key2, " does not exist in this dictionary."));
              }
            };
            _main2.default.NumberDict.prototype.sub = function(key2, amount) {
              this.add(key2, -amount);
            };
            _main2.default.NumberDict.prototype.mult = function(key2, amount) {
              if (this.data.hasOwnProperty(key2)) {
                this.data[key2] *= amount;
              } else {
                console.log("The key - ".concat(key2, " does not exist in this dictionary."));
              }
            };
            _main2.default.NumberDict.prototype.div = function(key2, amount) {
              if (this.data.hasOwnProperty(key2)) {
                this.data[key2] /= amount;
              } else {
                console.log("The key - ".concat(key2, " does not exist in this dictionary."));
              }
            };
            _main2.default.NumberDict.prototype._valueTest = function(flip) {
              if (Object.keys(this.data).length === 0) {
                throw new Error("Unable to search for a minimum or maximum value on an empty NumberDict");
              } else if (Object.keys(this.data).length === 1) {
                return this.data[Object.keys(this.data)[0]];
              } else {
                var result = this.data[Object.keys(this.data)[0]];
                for (var key2 in this.data) {
                  if (this.data[key2] * flip < result * flip) {
                    result = this.data[key2];
                  }
                }
                return result;
              }
            };
            _main2.default.NumberDict.prototype.minValue = function() {
              return this._valueTest(1);
            };
            _main2.default.NumberDict.prototype.maxValue = function() {
              return this._valueTest(-1);
            };
            _main2.default.NumberDict.prototype._keyTest = function(flip) {
              if (Object.keys(this.data).length === 0) {
                throw new Error("Unable to use minValue on an empty NumberDict");
              } else if (Object.keys(this.data).length === 1) {
                return Object.keys(this.data)[0];
              } else {
                var result = Object.keys(this.data)[0];
                for (var i2 = 1; i2 < Object.keys(this.data).length; i2++) {
                  if (Object.keys(this.data)[i2] * flip < result * flip) {
                    result = Object.keys(this.data)[i2];
                  }
                }
                return result;
              }
            };
            _main2.default.NumberDict.prototype.minKey = function() {
              return this._keyTest(1);
            };
            _main2.default.NumberDict.prototype.maxKey = function() {
              return this._keyTest(-1);
            };
            var _default2 = _main2.default.TypedDict;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "core-js/modules/es.array.concat": 167,
            "core-js/modules/es.object.keys": 194,
            "core-js/modules/es.string.sub": 210
          }
        ],
        306: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.every");
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.for-each");
            _dereq_2("core-js/modules/es.array.from");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.array.splice");
            _dereq_2("core-js/modules/es.function.name");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.promise");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.replace");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.string.trim");
            _dereq_2("core-js/modules/web.dom-collections.for-each");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            _dereq_2("core-js/modules/web.url");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.every");
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.for-each");
            _dereq_2("core-js/modules/es.array.from");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.array.splice");
            _dereq_2("core-js/modules/es.function.name");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.promise");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.replace");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.string.trim");
            _dereq_2("core-js/modules/web.dom-collections.for-each");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            _dereq_2("core-js/modules/web.url");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _main2.default.prototype.select = function(e2, p) {
              _main2.default._validateParameters("select", arguments);
              var container = this._getContainer(p);
              var res = container.querySelector(e2);
              if (res) {
                return this._wrapElement(res);
              } else {
                return null;
              }
            };
            _main2.default.prototype.selectAll = function(e2, p) {
              _main2.default._validateParameters("selectAll", arguments);
              var arr = [];
              var container = this._getContainer(p);
              var res = container.querySelectorAll(e2);
              if (res) {
                for (var j = 0; j < res.length; j++) {
                  var obj = this._wrapElement(res[j]);
                  arr.push(obj);
                }
              }
              return arr;
            };
            _main2.default.prototype._getContainer = function(p) {
              var container = document;
              if (typeof p === "string") {
                container = document.querySelector(p) || document;
              } else if (p instanceof _main2.default.Element) {
                container = p.elt;
              } else if (p instanceof HTMLElement) {
                container = p;
              }
              return container;
            };
            _main2.default.prototype._wrapElement = function(elt) {
              var children = Array.prototype.slice.call(elt.children);
              if (elt.tagName === "INPUT" && elt.type === "checkbox") {
                var converted = new _main2.default.Element(elt, this);
                converted.checked = function() {
                  if (arguments.length === 0) {
                    return this.elt.checked;
                  } else if (arguments[0]) {
                    this.elt.checked = true;
                  } else {
                    this.elt.checked = false;
                  }
                  return this;
                };
                return converted;
              } else if (elt.tagName === "VIDEO" || elt.tagName === "AUDIO") {
                return new _main2.default.MediaElement(elt, this);
              } else if (elt.tagName === "SELECT") {
                return this.createSelect(new _main2.default.Element(elt, this));
              } else if (children.length > 0 && children.every(function(c) {
                return c.tagName === "INPUT" || c.tagName === "LABEL";
              })) {
                return this.createRadio(new _main2.default.Element(elt, this));
              } else {
                return new _main2.default.Element(elt, this);
              }
            };
            _main2.default.prototype.removeElements = function(e2) {
              _main2.default._validateParameters("removeElements", arguments);
              var isNotCanvasElement = function isNotCanvasElement2(el) {
                return !(el.elt instanceof HTMLCanvasElement);
              };
              var removeableElements = this._elements.filter(isNotCanvasElement);
              removeableElements.map(function(el) {
                return el.remove();
              });
            };
            _main2.default.Element.prototype.changed = function(fxn) {
              _main2.default.Element._adjustListener("change", fxn, this);
              return this;
            };
            _main2.default.Element.prototype.input = function(fxn) {
              _main2.default.Element._adjustListener("input", fxn, this);
              return this;
            };
            function addElement(elt, pInst, media) {
              var node = pInst._userNode ? pInst._userNode : document.body;
              node.appendChild(elt);
              var c = media ? new _main2.default.MediaElement(elt, pInst) : new _main2.default.Element(elt, pInst);
              pInst._elements.push(c);
              return c;
            }
            _main2.default.prototype.createDiv = function() {
              var html = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
              var elt = document.createElement("div");
              elt.innerHTML = html;
              return addElement(elt, this);
            };
            _main2.default.prototype.createP = function() {
              var html = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
              var elt = document.createElement("p");
              elt.innerHTML = html;
              return addElement(elt, this);
            };
            _main2.default.prototype.createSpan = function() {
              var html = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
              var elt = document.createElement("span");
              elt.innerHTML = html;
              return addElement(elt, this);
            };
            _main2.default.prototype.createImg = function() {
              _main2.default._validateParameters("createImg", arguments);
              var elt = document.createElement("img");
              var args = arguments;
              var self2;
              if (args.length > 1 && typeof args[1] === "string") {
                elt.alt = args[1];
              }
              if (args.length > 2 && typeof args[2] === "string") {
                elt.crossOrigin = args[2];
              }
              elt.src = args[0];
              self2 = addElement(elt, this);
              elt.addEventListener("load", function() {
                self2.width = elt.offsetWidth || elt.width;
                self2.height = elt.offsetHeight || elt.height;
                var last = args[args.length - 1];
                if (typeof last === "function")
                  last(self2);
              });
              return self2;
            };
            _main2.default.prototype.createA = function(href, html, target) {
              _main2.default._validateParameters("createA", arguments);
              var elt = document.createElement("a");
              elt.href = href;
              elt.innerHTML = html;
              if (target)
                elt.target = target;
              return addElement(elt, this);
            };
            _main2.default.prototype.createSlider = function(min, max, value, step) {
              _main2.default._validateParameters("createSlider", arguments);
              var elt = document.createElement("input");
              elt.type = "range";
              elt.min = min;
              elt.max = max;
              if (step === 0) {
                elt.step = 1e-18;
              } else if (step) {
                elt.step = step;
              }
              if (typeof value === "number")
                elt.value = value;
              return addElement(elt, this);
            };
            _main2.default.prototype.createButton = function(label, value) {
              _main2.default._validateParameters("createButton", arguments);
              var elt = document.createElement("button");
              elt.innerHTML = label;
              if (value)
                elt.value = value;
              return addElement(elt, this);
            };
            _main2.default.prototype.createCheckbox = function() {
              _main2.default._validateParameters("createCheckbox", arguments);
              var elt = document.createElement("div");
              var checkbox = document.createElement("input");
              checkbox.type = "checkbox";
              var label = document.createElement("label");
              label.appendChild(checkbox);
              elt.appendChild(label);
              var self2 = addElement(elt, this);
              self2.checked = function() {
                var cb = self2.elt.firstElementChild.getElementsByTagName("input")[0];
                if (cb) {
                  if (arguments.length === 0) {
                    return cb.checked;
                  } else if (arguments[0]) {
                    cb.checked = true;
                  } else {
                    cb.checked = false;
                  }
                }
                return self2;
              };
              this.value = function(val) {
                self2.value = val;
                return this;
              };
              if (arguments[0]) {
                self2.value(arguments[0]);
                var span = document.createElement("span");
                span.innerHTML = arguments[0];
                label.appendChild(span);
              }
              if (arguments[1]) {
                checkbox.checked = true;
              }
              return self2;
            };
            _main2.default.prototype.createSelect = function() {
              _main2.default._validateParameters("createSelect", arguments);
              var self2;
              var arg = arguments[0];
              if (arg instanceof _main2.default.Element && arg.elt instanceof HTMLSelectElement) {
                self2 = arg;
                this.elt = arg.elt;
              } else if (arg instanceof HTMLSelectElement) {
                self2 = addElement(arg, this);
                this.elt = arg;
              } else {
                var elt = document.createElement("select");
                if (arg && typeof arg === "boolean") {
                  elt.setAttribute("multiple", "true");
                }
                self2 = addElement(elt, this);
                this.elt = elt;
              }
              self2.option = function(name, value) {
                var index;
                if (name === void 0) {
                  return;
                }
                for (var i2 = 0; i2 < this.elt.length; i2 += 1) {
                  if (this.elt[i2].textContent === name) {
                    index = i2;
                    break;
                  }
                }
                if (index !== void 0) {
                  if (value === false) {
                    this.elt.remove(index);
                  } else {
                    this.elt[index].value = value;
                  }
                } else {
                  var opt = document.createElement("option");
                  opt.textContent = name;
                  opt.value = value === void 0 ? name : value;
                  this.elt.appendChild(opt);
                  this._pInst._elements.push(opt);
                }
              };
              self2.selected = function(value) {
                if (value !== void 0) {
                  for (var i2 = 0; i2 < this.elt.length; i2 += 1) {
                    if (this.elt[i2].value.toString() === value.toString()) {
                      this.elt.selectedIndex = i2;
                    }
                  }
                  return this;
                } else {
                  if (this.elt.getAttribute("multiple")) {
                    var arr = [];
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = void 0;
                    try {
                      for (var _iterator = this.elt.selectedOptions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var selectedOption = _step.value;
                        arr.push(selectedOption.value);
                      }
                    } catch (err) {
                      _didIteratorError = true;
                      _iteratorError = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                          _iterator.return();
                        }
                      } finally {
                        if (_didIteratorError) {
                          throw _iteratorError;
                        }
                      }
                    }
                    return arr;
                  } else {
                    return this.elt.value;
                  }
                }
              };
              self2.disable = function(value) {
                if (typeof value === "string") {
                  for (var i2 = 0; i2 < this.elt.length; i2++) {
                    if (this.elt[i2].value.toString() === value) {
                      this.elt[i2].disabled = true;
                      this.elt[i2].selected = false;
                    }
                  }
                } else {
                  this.elt.disabled = true;
                }
                return this;
              };
              return self2;
            };
            _main2.default.prototype.createRadio = function() {
              var self2;
              var radioElement;
              var name;
              var arg0 = arguments[0];
              if (arg0 instanceof _main2.default.Element && (arg0.elt instanceof HTMLDivElement || arg0.elt instanceof HTMLSpanElement)) {
                self2 = arg0;
                this.elt = arg0.elt;
              } else if (
                // If existing radio Element is provided as argument 0
                arg0 instanceof HTMLDivElement || arg0 instanceof HTMLSpanElement
              ) {
                self2 = addElement(arg0, this);
                this.elt = arg0;
                radioElement = arg0;
                if (typeof arguments[1] === "string")
                  name = arguments[1];
              } else {
                if (typeof arg0 === "string")
                  name = arg0;
                radioElement = document.createElement("div");
                self2 = addElement(radioElement, this);
                this.elt = radioElement;
              }
              self2._name = name || "radioOption";
              var isRadioInput = function isRadioInput2(el) {
                return el instanceof HTMLInputElement && el.type === "radio";
              };
              var isLabelElement = function isLabelElement2(el) {
                return el instanceof HTMLLabelElement;
              };
              var isSpanElement = function isSpanElement2(el) {
                return el instanceof HTMLSpanElement;
              };
              self2._getOptionsArray = function() {
                return Array.from(this.elt.children).filter(function(el) {
                  return isRadioInput(el) || isLabelElement(el) && isRadioInput(el.firstElementChild);
                }).map(function(el) {
                  return isRadioInput(el) ? el : el.firstElementChild;
                });
              };
              self2.option = function(value, label) {
                var optionEl;
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = void 0;
                try {
                  for (var _iterator2 = self2._getOptionsArray()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var option = _step2.value;
                    if (option.value === value) {
                      optionEl = option;
                      break;
                    }
                  }
                } catch (err) {
                  _didIteratorError2 = true;
                  _iteratorError2 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                      _iterator2.return();
                    }
                  } finally {
                    if (_didIteratorError2) {
                      throw _iteratorError2;
                    }
                  }
                }
                if (optionEl === void 0) {
                  optionEl = document.createElement("input");
                  optionEl.setAttribute("type", "radio");
                  optionEl.setAttribute("value", value);
                }
                optionEl.setAttribute("name", self2._name);
                var labelElement;
                if (!isLabelElement(optionEl.parentElement)) {
                  labelElement = document.createElement("label");
                  labelElement.insertAdjacentElement("afterbegin", optionEl);
                } else {
                  labelElement = optionEl.parentElement;
                }
                var spanElement;
                if (!isSpanElement(labelElement.lastElementChild)) {
                  spanElement = document.createElement("span");
                  optionEl.insertAdjacentElement("afterend", spanElement);
                } else {
                  spanElement = labelElement.lastElementChild;
                }
                spanElement.innerHTML = label === void 0 ? value : label;
                this.elt.appendChild(labelElement);
                return optionEl;
              };
              self2.remove = function(value) {
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = void 0;
                try {
                  for (var _iterator3 = self2._getOptionsArray()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var optionEl = _step3.value;
                    if (optionEl.value === value) {
                      if (isLabelElement(optionEl.parentElement)) {
                        optionEl.parentElement.remove();
                      } else {
                        optionEl.remove();
                      }
                      return;
                    }
                  }
                } catch (err) {
                  _didIteratorError3 = true;
                  _iteratorError3 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                      _iterator3.return();
                    }
                  } finally {
                    if (_didIteratorError3) {
                      throw _iteratorError3;
                    }
                  }
                }
              };
              self2.value = function() {
                var result = "";
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = void 0;
                try {
                  for (var _iterator4 = self2._getOptionsArray()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var option = _step4.value;
                    if (option.checked) {
                      result = option.value;
                      break;
                    }
                  }
                } catch (err) {
                  _didIteratorError4 = true;
                  _iteratorError4 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
                      _iterator4.return();
                    }
                  } finally {
                    if (_didIteratorError4) {
                      throw _iteratorError4;
                    }
                  }
                }
                return result;
              };
              self2.selected = function(value) {
                var result = null;
                if (value === void 0) {
                  var _iteratorNormalCompletion5 = true;
                  var _didIteratorError5 = false;
                  var _iteratorError5 = void 0;
                  try {
                    for (var _iterator5 = self2._getOptionsArray()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                      var option = _step5.value;
                      if (option.checked) {
                        result = option;
                        break;
                      }
                    }
                  } catch (err) {
                    _didIteratorError5 = true;
                    _iteratorError5 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
                        _iterator5.return();
                      }
                    } finally {
                      if (_didIteratorError5) {
                        throw _iteratorError5;
                      }
                    }
                  }
                } else {
                  self2._getOptionsArray().forEach(function(option2) {
                    option2.checked = false;
                    option2.removeAttribute("checked");
                  });
                  var _iteratorNormalCompletion6 = true;
                  var _didIteratorError6 = false;
                  var _iteratorError6 = void 0;
                  try {
                    for (var _iterator6 = self2._getOptionsArray()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                      var _option = _step6.value;
                      if (_option.value === value) {
                        _option.setAttribute("checked", true);
                        _option.checked = true;
                        result = _option;
                      }
                    }
                  } catch (err) {
                    _didIteratorError6 = true;
                    _iteratorError6 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
                        _iterator6.return();
                      }
                    } finally {
                      if (_didIteratorError6) {
                        throw _iteratorError6;
                      }
                    }
                  }
                }
                return result;
              };
              self2.disable = function() {
                var shouldDisable = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
                var _iteratorNormalCompletion7 = true;
                var _didIteratorError7 = false;
                var _iteratorError7 = void 0;
                try {
                  for (var _iterator7 = self2._getOptionsArray()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var radioInput = _step7.value;
                    radioInput.setAttribute("disabled", shouldDisable);
                  }
                } catch (err) {
                  _didIteratorError7 = true;
                  _iteratorError7 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
                      _iterator7.return();
                    }
                  } finally {
                    if (_didIteratorError7) {
                      throw _iteratorError7;
                    }
                  }
                }
              };
              return self2;
            };
            _main2.default.prototype.createColorPicker = function(value) {
              _main2.default._validateParameters("createColorPicker", arguments);
              var elt = document.createElement("input");
              var self2;
              elt.type = "color";
              if (value) {
                if (value instanceof _main2.default.Color) {
                  elt.value = value.toString("#rrggbb");
                } else {
                  _main2.default.prototype._colorMode = "rgb";
                  _main2.default.prototype._colorMaxes = {
                    rgb: [
                      255,
                      255,
                      255,
                      255
                    ],
                    hsb: [
                      360,
                      100,
                      100,
                      1
                    ],
                    hsl: [
                      360,
                      100,
                      100,
                      1
                    ]
                  };
                  elt.value = _main2.default.prototype.color(value).toString("#rrggbb");
                }
              } else {
                elt.value = "#000000";
              }
              self2 = addElement(elt, this);
              self2.color = function() {
                if (value) {
                  if (value.mode) {
                    _main2.default.prototype._colorMode = value.mode;
                  }
                  if (value.maxes) {
                    _main2.default.prototype._colorMaxes = value.maxes;
                  }
                }
                return _main2.default.prototype.color(this.elt.value);
              };
              return self2;
            };
            _main2.default.prototype.createInput = function() {
              var value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
              var type = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "text";
              _main2.default._validateParameters("createInput", arguments);
              var elt = document.createElement("input");
              elt.setAttribute("value", value);
              elt.setAttribute("type", type);
              return addElement(elt, this);
            };
            _main2.default.prototype.createFileInput = function(callback) {
              var multiple = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              _main2.default._validateParameters("createFileInput", arguments);
              var handleFileSelect = function handleFileSelect2(event) {
                var _iteratorNormalCompletion8 = true;
                var _didIteratorError8 = false;
                var _iteratorError8 = void 0;
                try {
                  for (var _iterator8 = event.target.files[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var file = _step8.value;
                    _main2.default.File._load(file, callback);
                  }
                } catch (err) {
                  _didIteratorError8 = true;
                  _iteratorError8 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
                      _iterator8.return();
                    }
                  } finally {
                    if (_didIteratorError8) {
                      throw _iteratorError8;
                    }
                  }
                }
              };
              if (!(window.File && window.FileReader && window.FileList && window.Blob)) {
                console.log("The File APIs are not fully supported in this browser. Cannot create element.");
                return;
              }
              var fileInput = document.createElement("input");
              fileInput.setAttribute("type", "file");
              if (multiple)
                fileInput.setAttribute("multiple", true);
              fileInput.addEventListener("change", handleFileSelect, false);
              return addElement(fileInput, this);
            };
            function createMedia(pInst, type, src, callback) {
              var elt = document.createElement(type);
              src = src || "";
              if (typeof src === "string") {
                src = [
                  src
                ];
              }
              var _iteratorNormalCompletion9 = true;
              var _didIteratorError9 = false;
              var _iteratorError9 = void 0;
              try {
                for (var _iterator9 = src[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                  var mediaSource = _step9.value;
                  var sourceEl = document.createElement("source");
                  sourceEl.setAttribute("src", mediaSource);
                  elt.appendChild(sourceEl);
                }
              } catch (err) {
                _didIteratorError9 = true;
                _iteratorError9 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion9 && _iterator9.return != null) {
                    _iterator9.return();
                  }
                } finally {
                  if (_didIteratorError9) {
                    throw _iteratorError9;
                  }
                }
              }
              if (typeof callback === "function") {
                var callbackHandler = function callbackHandler2() {
                  callback();
                  elt.removeEventListener("canplaythrough", callbackHandler2);
                };
                elt.addEventListener("canplaythrough", callbackHandler);
              }
              var mediaEl = addElement(elt, pInst, true);
              mediaEl.loadedmetadata = false;
              elt.addEventListener("loadedmetadata", function() {
                mediaEl.width = elt.videoWidth;
                mediaEl.height = elt.videoHeight;
                if (mediaEl.elt.width === 0)
                  mediaEl.elt.width = elt.videoWidth;
                if (mediaEl.elt.height === 0)
                  mediaEl.elt.height = elt.videoHeight;
                if (mediaEl.presetPlaybackRate) {
                  mediaEl.elt.playbackRate = mediaEl.presetPlaybackRate;
                  delete mediaEl.presetPlaybackRate;
                }
                mediaEl.loadedmetadata = true;
              });
              return mediaEl;
            }
            _main2.default.prototype.createVideo = function(src, callback) {
              _main2.default._validateParameters("createVideo", arguments);
              return createMedia(this, "video", src, callback);
            };
            _main2.default.prototype.createAudio = function(src, callback) {
              _main2.default._validateParameters("createAudio", arguments);
              return createMedia(this, "audio", src, callback);
            };
            _main2.default.prototype.VIDEO = "video";
            _main2.default.prototype.AUDIO = "audio";
            if (navigator.mediaDevices === void 0) {
              navigator.mediaDevices = {};
            }
            if (navigator.mediaDevices.getUserMedia === void 0) {
              navigator.mediaDevices.getUserMedia = function(constraints) {
                var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                if (!getUserMedia) {
                  return Promise.reject(new Error("getUserMedia is not implemented in this browser"));
                }
                return new Promise(function(resolve, reject) {
                  getUserMedia.call(navigator, constraints, resolve, reject);
                });
              };
            }
            _main2.default.prototype.createCapture = function() {
              _main2.default._validateParameters("createCapture", arguments);
              if (!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia)) {
                throw new DOMException("getUserMedia not supported in this browser");
              }
              var useVideo = true;
              var useAudio = true;
              var constraints;
              var callback;
              var _iteratorNormalCompletion10 = true;
              var _didIteratorError10 = false;
              var _iteratorError10 = void 0;
              try {
                for (var _iterator10 = arguments[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                  var arg = _step10.value;
                  if (arg === _main2.default.prototype.VIDEO)
                    useAudio = false;
                  else if (arg === _main2.default.prototype.AUDIO)
                    useVideo = false;
                  else if (_typeof3(arg) === "object")
                    constraints = arg;
                  else if (typeof arg === "function")
                    callback = arg;
                }
              } catch (err) {
                _didIteratorError10 = true;
                _iteratorError10 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion10 && _iterator10.return != null) {
                    _iterator10.return();
                  }
                } finally {
                  if (_didIteratorError10) {
                    throw _iteratorError10;
                  }
                }
              }
              if (!constraints)
                constraints = {
                  video: useVideo,
                  audio: useAudio
                };
              var domElement = document.createElement("video");
              domElement.setAttribute("playsinline", "");
              navigator.mediaDevices.getUserMedia(constraints).then(function(stream) {
                try {
                  if ("srcObject" in domElement) {
                    domElement.srcObject = stream;
                  } else {
                    domElement.src = window.URL.createObjectURL(stream);
                  }
                } catch (err) {
                  domElement.src = stream;
                }
              }, console.log);
              var videoEl = addElement(domElement, this, true);
              videoEl.loadedmetadata = false;
              domElement.addEventListener("loadedmetadata", function() {
                domElement.play();
                if (domElement.width) {
                  videoEl.width = domElement.width;
                  videoEl.height = domElement.height;
                } else {
                  videoEl.width = videoEl.elt.width = domElement.videoWidth;
                  videoEl.height = videoEl.elt.height = domElement.videoHeight;
                }
                videoEl.loadedmetadata = true;
                if (callback)
                  callback(domElement.srcObject);
              });
              return videoEl;
            };
            _main2.default.prototype.createElement = function(tag, content) {
              _main2.default._validateParameters("createElement", arguments);
              var elt = document.createElement(tag);
              if (typeof content !== "undefined") {
                elt.innerHTML = content;
              }
              return addElement(elt, this);
            };
            _main2.default.Element.prototype.addClass = function(c) {
              if (this.elt.className) {
                if (!this.hasClass(c)) {
                  this.elt.className = this.elt.className + " " + c;
                }
              } else {
                this.elt.className = c;
              }
              return this;
            };
            _main2.default.Element.prototype.removeClass = function(c) {
              this.elt.classList.remove(c);
              return this;
            };
            _main2.default.Element.prototype.hasClass = function(c) {
              return this.elt.classList.contains(c);
            };
            _main2.default.Element.prototype.toggleClass = function(c) {
              if (this.elt.classList.contains(c)) {
                this.elt.classList.remove(c);
              } else {
                this.elt.classList.add(c);
              }
              return this;
            };
            _main2.default.Element.prototype.child = function(childNode) {
              if (typeof childNode === "undefined") {
                return this.elt.childNodes;
              }
              if (typeof childNode === "string") {
                if (childNode[0] === "#") {
                  childNode = childNode.substring(1);
                }
                childNode = document.getElementById(childNode);
              } else if (childNode instanceof _main2.default.Element) {
                childNode = childNode.elt;
              }
              if (childNode instanceof HTMLElement) {
                this.elt.appendChild(childNode);
              }
              return this;
            };
            _main2.default.Element.prototype.center = function(align) {
              var style = this.elt.style.display;
              var hidden = this.elt.style.display === "none";
              var parentHidden = this.parent().style.display === "none";
              var pos = {
                x: this.elt.offsetLeft,
                y: this.elt.offsetTop
              };
              if (hidden)
                this.show();
              if (parentHidden)
                this.parent().show();
              this.elt.style.display = "block";
              this.position(0, 0);
              var wOffset = Math.abs(this.parent().offsetWidth - this.elt.offsetWidth);
              var hOffset = Math.abs(this.parent().offsetHeight - this.elt.offsetHeight);
              if (align === "both" || align === void 0) {
                this.position(wOffset / 2 + this.parent().offsetLeft, hOffset / 2 + this.parent().offsetTop);
              } else if (align === "horizontal") {
                this.position(wOffset / 2 + this.parent().offsetLeft, pos.y);
              } else if (align === "vertical") {
                this.position(pos.x, hOffset / 2 + this.parent().offsetTop);
              }
              this.style("display", style);
              if (hidden)
                this.hide();
              if (parentHidden)
                this.parent().hide();
              return this;
            };
            _main2.default.Element.prototype.html = function() {
              if (arguments.length === 0) {
                return this.elt.innerHTML;
              } else if (arguments[1]) {
                this.elt.insertAdjacentHTML("beforeend", arguments[0]);
                return this;
              } else {
                this.elt.innerHTML = arguments[0];
                return this;
              }
            };
            _main2.default.Element.prototype.position = function() {
              if (arguments.length === 0) {
                return {
                  x: this.elt.offsetLeft,
                  y: this.elt.offsetTop
                };
              } else {
                var positionType = "absolute";
                if (arguments[2] === "static" || arguments[2] === "fixed" || arguments[2] === "relative" || arguments[2] === "sticky" || arguments[2] === "initial" || arguments[2] === "inherit") {
                  positionType = arguments[2];
                }
                this.elt.style.position = positionType;
                this.elt.style.left = arguments[0] + "px";
                this.elt.style.top = arguments[1] + "px";
                this.x = arguments[0];
                this.y = arguments[1];
                return this;
              }
            };
            _main2.default.Element.prototype._translate = function() {
              this.elt.style.position = "absolute";
              var transform = "";
              if (this.elt.style.transform) {
                transform = this.elt.style.transform.replace(/translate3d\(.*\)/g, "");
                transform = transform.replace(/translate[X-Z]?\(.*\)/g, "");
              }
              if (arguments.length === 2) {
                this.elt.style.transform = "translate(" + arguments[0] + "px, " + arguments[1] + "px)";
              } else if (arguments.length > 2) {
                this.elt.style.transform = "translate3d(" + arguments[0] + "px," + arguments[1] + "px," + arguments[2] + "px)";
                if (arguments.length === 3) {
                  this.elt.parentElement.style.perspective = "1000px";
                } else {
                  this.elt.parentElement.style.perspective = arguments[3] + "px";
                }
              }
              this.elt.style.transform += transform;
              return this;
            };
            _main2.default.Element.prototype._rotate = function() {
              var transform = "";
              if (this.elt.style.transform) {
                transform = this.elt.style.transform.replace(/rotate3d\(.*\)/g, "");
                transform = transform.replace(/rotate[X-Z]?\(.*\)/g, "");
              }
              if (arguments.length === 1) {
                this.elt.style.transform = "rotate(" + arguments[0] + "deg)";
              } else if (arguments.length === 2) {
                this.elt.style.transform = "rotate(" + arguments[0] + "deg, " + arguments[1] + "deg)";
              } else if (arguments.length === 3) {
                this.elt.style.transform = "rotateX(" + arguments[0] + "deg)";
                this.elt.style.transform += "rotateY(" + arguments[1] + "deg)";
                this.elt.style.transform += "rotateZ(" + arguments[2] + "deg)";
              }
              this.elt.style.transform += transform;
              return this;
            };
            _main2.default.Element.prototype.style = function(prop, val) {
              var self2 = this;
              if (val instanceof _main2.default.Color) {
                val = "rgba(" + val.levels[0] + "," + val.levels[1] + "," + val.levels[2] + "," + val.levels[3] / 255 + ")";
              }
              if (typeof val === "undefined") {
                if (prop.indexOf(":") === -1) {
                  var styles = window.getComputedStyle(self2.elt);
                  var style = styles.getPropertyValue(prop);
                  return style;
                } else {
                  var attrs = prop.split(";");
                  for (var i2 = 0; i2 < attrs.length; i2++) {
                    var parts = attrs[i2].split(":");
                    if (parts[0] && parts[1]) {
                      this.elt.style[parts[0].trim()] = parts[1].trim();
                    }
                  }
                }
              } else {
                this.elt.style[prop] = val;
                if (prop === "width" || prop === "height" || prop === "left" || prop === "top") {
                  var _styles = window.getComputedStyle(self2.elt);
                  var styleVal = _styles.getPropertyValue(prop);
                  var numVal = styleVal.replace(/[^\d.]/g, "");
                  this[prop] = Math.round(parseFloat(numVal, 10));
                }
              }
              return this;
            };
            _main2.default.Element.prototype.attribute = function(attr, value) {
              if (this.elt.firstChild != null && (this.elt.firstChild.type === "checkbox" || this.elt.firstChild.type === "radio")) {
                if (typeof value === "undefined") {
                  return this.elt.firstChild.getAttribute(attr);
                } else {
                  for (var i2 = 0; i2 < this.elt.childNodes.length; i2++) {
                    this.elt.childNodes[i2].setAttribute(attr, value);
                  }
                }
              } else if (typeof value === "undefined") {
                return this.elt.getAttribute(attr);
              } else {
                this.elt.setAttribute(attr, value);
                return this;
              }
            };
            _main2.default.Element.prototype.removeAttribute = function(attr) {
              if (this.elt.firstChild != null && (this.elt.firstChild.type === "checkbox" || this.elt.firstChild.type === "radio")) {
                for (var i2 = 0; i2 < this.elt.childNodes.length; i2++) {
                  this.elt.childNodes[i2].removeAttribute(attr);
                }
              }
              this.elt.removeAttribute(attr);
              return this;
            };
            _main2.default.Element.prototype.value = function() {
              if (arguments.length > 0) {
                this.elt.value = arguments[0];
                return this;
              } else {
                if (this.elt.type === "range") {
                  return parseFloat(this.elt.value);
                } else
                  return this.elt.value;
              }
            };
            _main2.default.Element.prototype.show = function() {
              this.elt.style.display = "block";
              return this;
            };
            _main2.default.Element.prototype.hide = function() {
              this.elt.style.display = "none";
              return this;
            };
            _main2.default.Element.prototype.size = function(w, h) {
              if (arguments.length === 0) {
                return {
                  width: this.elt.offsetWidth,
                  height: this.elt.offsetHeight
                };
              } else {
                var aW = w;
                var aH = h;
                var AUTO = _main2.default.prototype.AUTO;
                if (aW !== AUTO || aH !== AUTO) {
                  if (aW === AUTO) {
                    aW = h * this.width / this.height;
                  } else if (aH === AUTO) {
                    aH = w * this.height / this.width;
                  }
                  if (this.elt instanceof HTMLCanvasElement) {
                    var j = {};
                    var k2 = this.elt.getContext("2d");
                    var prop;
                    for (prop in k2) {
                      j[prop] = k2[prop];
                    }
                    this.elt.setAttribute("width", aW * this._pInst._pixelDensity);
                    this.elt.setAttribute("height", aH * this._pInst._pixelDensity);
                    this.elt.style.width = aW + "px";
                    this.elt.style.height = aH + "px";
                    this._pInst.scale(this._pInst._pixelDensity, this._pInst._pixelDensity);
                    for (prop in j) {
                      this.elt.getContext("2d")[prop] = j[prop];
                    }
                  } else {
                    this.elt.style.width = aW + "px";
                    this.elt.style.height = aH + "px";
                    this.elt.width = aW;
                    this.elt.height = aH;
                  }
                  this.width = this.elt.offsetWidth;
                  this.height = this.elt.offsetHeight;
                  if (this._pInst && this._pInst._curElement) {
                    if (this._pInst._curElement.elt === this.elt) {
                      this._pInst._setProperty("width", this.elt.offsetWidth);
                      this._pInst._setProperty("height", this.elt.offsetHeight);
                    }
                  }
                }
                return this;
              }
            };
            _main2.default.Element.prototype.remove = function() {
              if (this instanceof _main2.default.MediaElement) {
                this.stop();
                var sources = this.elt.srcObject;
                if (sources !== null) {
                  var tracks = sources.getTracks();
                  tracks.forEach(function(track) {
                    track.stop();
                  });
                }
              }
              var index = this._pInst._elements.indexOf(this);
              if (index !== -1) {
                this._pInst._elements.splice(index, 1);
              }
              for (var ev in this._events) {
                this.elt.removeEventListener(ev, this._events[ev]);
              }
              if (this.elt && this.elt.parentNode) {
                this.elt.parentNode.removeChild(this.elt);
              }
            };
            _main2.default.Element.prototype.drop = function(callback, fxn) {
              if (window.File && window.FileReader && window.FileList && window.Blob) {
                if (!this._dragDisabled) {
                  this._dragDisabled = true;
                  var preventDefault = function preventDefault2(evt) {
                    evt.preventDefault();
                  };
                  this.elt.addEventListener("dragover", preventDefault);
                  this.elt.addEventListener("dragleave", preventDefault);
                }
                _main2.default.Element._attachListener("drop", function(evt) {
                  evt.preventDefault();
                  if (typeof fxn === "function") {
                    fxn.call(this, evt);
                  }
                  var files = evt.dataTransfer.files;
                  for (var i2 = 0; i2 < files.length; i2++) {
                    var f = files[i2];
                    _main2.default.File._load(f, callback);
                  }
                }, this);
              } else {
                console.log("The File APIs are not fully supported in this browser.");
              }
              return this;
            };
            _main2.default.MediaElement = function(elt, pInst) {
              _main2.default.Element.call(this, elt, pInst);
              var self2 = this;
              this.elt.crossOrigin = "anonymous";
              this._prevTime = 0;
              this._cueIDCounter = 0;
              this._cues = [];
              this._pixelsState = this;
              this._pixelDensity = 1;
              this._modified = false;
              Object.defineProperty(self2, "src", {
                get: function get() {
                  var firstChildSrc = self2.elt.children[0].src;
                  var srcVal = self2.elt.src === window.location.href ? "" : self2.elt.src;
                  var ret = firstChildSrc === window.location.href ? srcVal : firstChildSrc;
                  return ret;
                },
                set: function set(newValue) {
                  for (var i2 = 0; i2 < self2.elt.children.length; i2++) {
                    self2.elt.removeChild(self2.elt.children[i2]);
                  }
                  var source = document.createElement("source");
                  source.src = newValue;
                  elt.appendChild(source);
                  self2.elt.src = newValue;
                  self2.modified = true;
                }
              });
              self2._onended = function() {
              };
              self2.elt.onended = function() {
                self2._onended(self2);
              };
            };
            _main2.default.MediaElement.prototype = Object.create(_main2.default.Element.prototype);
            _main2.default.MediaElement.prototype.play = function() {
              var _this = this;
              if (this.elt.currentTime === this.elt.duration) {
                this.elt.currentTime = 0;
              }
              var promise;
              if (this.elt.readyState > 1) {
                promise = this.elt.play();
              } else {
                this.elt.load();
                promise = this.elt.play();
              }
              if (promise && promise.catch) {
                promise.catch(function(e2) {
                  if (e2.name === "NotAllowedError") {
                    if (typeof IS_MINIFIED === "undefined") {
                      _main2.default._friendlyAutoplayError(_this.src);
                    } else {
                      console.error(e2);
                    }
                  } else {
                    console.error("Media play method encountered an unexpected error", e2);
                  }
                });
              }
              return this;
            };
            _main2.default.MediaElement.prototype.stop = function() {
              this.elt.pause();
              this.elt.currentTime = 0;
              return this;
            };
            _main2.default.MediaElement.prototype.pause = function() {
              this.elt.pause();
              return this;
            };
            _main2.default.MediaElement.prototype.loop = function() {
              this.elt.setAttribute("loop", true);
              this.play();
              return this;
            };
            _main2.default.MediaElement.prototype.noLoop = function() {
              this.elt.removeAttribute("loop");
              return this;
            };
            _main2.default.MediaElement.prototype._setupAutoplayFailDetection = function() {
              var _this2 = this;
              var timeout = setTimeout(function() {
                if (typeof IS_MINIFIED === "undefined") {
                  _main2.default._friendlyAutoplayError(_this2.src);
                } else {
                  console.error(e);
                }
              }, 500);
              this.elt.addEventListener("play", function() {
                return clearTimeout(timeout);
              }, {
                passive: true,
                once: true
              });
            };
            _main2.default.MediaElement.prototype.autoplay = function(val) {
              var _this3 = this;
              var oldVal = this.elt.getAttribute("autoplay");
              this.elt.setAttribute("autoplay", val);
              if (val && !oldVal) {
                var setupAutoplayFailDetection = function setupAutoplayFailDetection2() {
                  return _this3._setupAutoplayFailDetection();
                };
                if (this.elt.readyState === 4) {
                  setupAutoplayFailDetection();
                } else {
                  this.elt.addEventListener("canplay", setupAutoplayFailDetection, {
                    passive: true,
                    once: true
                  });
                }
              }
              return this;
            };
            _main2.default.MediaElement.prototype.volume = function(val) {
              if (typeof val === "undefined") {
                return this.elt.volume;
              } else {
                this.elt.volume = val;
              }
            };
            _main2.default.MediaElement.prototype.speed = function(val) {
              if (typeof val === "undefined") {
                return this.presetPlaybackRate || this.elt.playbackRate;
              } else {
                if (this.loadedmetadata) {
                  this.elt.playbackRate = val;
                } else {
                  this.presetPlaybackRate = val;
                }
              }
            };
            _main2.default.MediaElement.prototype.time = function(val) {
              if (typeof val === "undefined") {
                return this.elt.currentTime;
              } else {
                this.elt.currentTime = val;
                return this;
              }
            };
            _main2.default.MediaElement.prototype.duration = function() {
              return this.elt.duration;
            };
            _main2.default.MediaElement.prototype.pixels = [];
            _main2.default.MediaElement.prototype._ensureCanvas = function() {
              if (!this.canvas) {
                this.canvas = document.createElement("canvas");
                this.drawingContext = this.canvas.getContext("2d");
                this.setModified(true);
              }
              if (this.loadedmetadata) {
                if (this.canvas.width !== this.elt.width) {
                  this.canvas.width = this.elt.width;
                  this.canvas.height = this.elt.height;
                  this.width = this.canvas.width;
                  this.height = this.canvas.height;
                }
                this.drawingContext.drawImage(this.elt, 0, 0, this.canvas.width, this.canvas.height);
                this.setModified(true);
              }
            };
            _main2.default.MediaElement.prototype.loadPixels = function() {
              this._ensureCanvas();
              return _main2.default.Renderer2D.prototype.loadPixels.apply(this, arguments);
            };
            _main2.default.MediaElement.prototype.updatePixels = function(x, y, w, h) {
              if (this.loadedmetadata) {
                this._ensureCanvas();
                _main2.default.Renderer2D.prototype.updatePixels.call(this, x, y, w, h);
              }
              this.setModified(true);
              return this;
            };
            _main2.default.MediaElement.prototype.get = function() {
              this._ensureCanvas();
              return _main2.default.Renderer2D.prototype.get.apply(this, arguments);
            };
            _main2.default.MediaElement.prototype._getPixel = function() {
              this.loadPixels();
              return _main2.default.Renderer2D.prototype._getPixel.apply(this, arguments);
            };
            _main2.default.MediaElement.prototype.set = function(x, y, imgOrCol) {
              if (this.loadedmetadata) {
                this._ensureCanvas();
                _main2.default.Renderer2D.prototype.set.call(this, x, y, imgOrCol);
                this.setModified(true);
              }
            };
            _main2.default.MediaElement.prototype.copy = function() {
              this._ensureCanvas();
              _main2.default.prototype.copy.apply(this, arguments);
            };
            _main2.default.MediaElement.prototype.mask = function() {
              this.loadPixels();
              this.setModified(true);
              _main2.default.Image.prototype.mask.apply(this, arguments);
            };
            _main2.default.MediaElement.prototype.isModified = function() {
              return this._modified;
            };
            _main2.default.MediaElement.prototype.setModified = function(value) {
              this._modified = value;
            };
            _main2.default.MediaElement.prototype.onended = function(callback) {
              this._onended = callback;
              return this;
            };
            _main2.default.MediaElement.prototype.connect = function(obj) {
              var audioContext, mainOutput;
              if (typeof _main2.default.prototype.getAudioContext === "function") {
                audioContext = _main2.default.prototype.getAudioContext();
                mainOutput = _main2.default.soundOut.input;
              } else {
                try {
                  audioContext = obj.context;
                  mainOutput = audioContext.destination;
                } catch (e2) {
                  throw "connect() is meant to be used with Web Audio API or p5.sound.js";
                }
              }
              if (!this.audioSourceNode) {
                this.audioSourceNode = audioContext.createMediaElementSource(this.elt);
                this.audioSourceNode.connect(mainOutput);
              }
              if (obj) {
                if (obj.input) {
                  this.audioSourceNode.connect(obj.input);
                } else {
                  this.audioSourceNode.connect(obj);
                }
              } else {
                this.audioSourceNode.connect(mainOutput);
              }
            };
            _main2.default.MediaElement.prototype.disconnect = function() {
              if (this.audioSourceNode) {
                this.audioSourceNode.disconnect();
              } else {
                throw "nothing to disconnect";
              }
            };
            _main2.default.MediaElement.prototype.showControls = function() {
              this.elt.style["text-align"] = "inherit";
              this.elt.controls = true;
            };
            _main2.default.MediaElement.prototype.hideControls = function() {
              this.elt.controls = false;
            };
            var Cue = function Cue2(callback, time, id, val) {
              this.callback = callback;
              this.time = time;
              this.id = id;
              this.val = val;
            };
            _main2.default.MediaElement.prototype.addCue = function(time, callback, val) {
              var id = this._cueIDCounter++;
              var cue = new Cue(callback, time, id, val);
              this._cues.push(cue);
              if (!this.elt.ontimeupdate) {
                this.elt.ontimeupdate = this._onTimeUpdate.bind(this);
              }
              return id;
            };
            _main2.default.MediaElement.prototype.removeCue = function(id) {
              for (var i2 = 0; i2 < this._cues.length; i2++) {
                if (this._cues[i2].id === id) {
                  console.log(id);
                  this._cues.splice(i2, 1);
                }
              }
              if (this._cues.length === 0) {
                this.elt.ontimeupdate = null;
              }
            };
            _main2.default.MediaElement.prototype.clearCues = function() {
              this._cues = [];
              this.elt.ontimeupdate = null;
            };
            _main2.default.MediaElement.prototype._onTimeUpdate = function() {
              var playbackTime = this.time();
              for (var i2 = 0; i2 < this._cues.length; i2++) {
                var callbackTime = this._cues[i2].time;
                var val = this._cues[i2].val;
                if (this._prevTime < callbackTime && callbackTime <= playbackTime) {
                  this._cues[i2].callback(val);
                }
              }
              this._prevTime = playbackTime;
            };
            _main2.default.File = function(file, pInst) {
              this.file = file;
              this._pInst = pInst;
              var typeList = file.type.split("/");
              this.type = typeList[0];
              this.subtype = typeList[1];
              this.name = file.name;
              this.size = file.size;
              this.data = void 0;
            };
            _main2.default.File._createLoader = function(theFile, callback) {
              var reader = new FileReader();
              reader.onload = function(e2) {
                var p5file = new _main2.default.File(theFile);
                if (p5file.file.type === "application/json") {
                  p5file.data = JSON.parse(e2.target.result);
                } else if (p5file.file.type === "text/xml") {
                  var parser = new DOMParser();
                  var xml = parser.parseFromString(e2.target.result, "text/xml");
                  p5file.data = new _main2.default.XML(xml.documentElement);
                } else {
                  p5file.data = e2.target.result;
                }
                callback(p5file);
              };
              return reader;
            };
            _main2.default.File._load = function(f, callback) {
              if (/^text\//.test(f.type) || f.type === "application/json") {
                _main2.default.File._createLoader(f, callback).readAsText(f);
              } else if (!/^(video|audio)\//.test(f.type)) {
                _main2.default.File._createLoader(f, callback).readAsDataURL(f);
              } else {
                var file = new _main2.default.File(f);
                file.data = URL.createObjectURL(f);
                callback(file);
              }
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "core-js/modules/es.array.every": 169,
            "core-js/modules/es.array.filter": 171,
            "core-js/modules/es.array.for-each": 172,
            "core-js/modules/es.array.from": 173,
            "core-js/modules/es.array.index-of": 175,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.map": 179,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.array.splice": 182,
            "core-js/modules/es.function.name": 183,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.promise": 196,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.string.replace": 207,
            "core-js/modules/es.string.split": 209,
            "core-js/modules/es.string.trim": 211,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/web.dom-collections.for-each": 247,
            "core-js/modules/web.dom-collections.iterator": 248,
            "core-js/modules/web.url": 250
          }
        ],
        307: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../core/constants"));
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.deviceOrientation = window.innerWidth / window.innerHeight > 1 ? "landscape" : "portrait";
            _main2.default.prototype.accelerationX = 0;
            _main2.default.prototype.accelerationY = 0;
            _main2.default.prototype.accelerationZ = 0;
            _main2.default.prototype.pAccelerationX = 0;
            _main2.default.prototype.pAccelerationY = 0;
            _main2.default.prototype.pAccelerationZ = 0;
            _main2.default.prototype._updatePAccelerations = function() {
              this._setProperty("pAccelerationX", this.accelerationX);
              this._setProperty("pAccelerationY", this.accelerationY);
              this._setProperty("pAccelerationZ", this.accelerationZ);
            };
            _main2.default.prototype.rotationX = 0;
            _main2.default.prototype.rotationY = 0;
            _main2.default.prototype.rotationZ = 0;
            _main2.default.prototype.pRotationX = 0;
            _main2.default.prototype.pRotationY = 0;
            _main2.default.prototype.pRotationZ = 0;
            var startAngleX = 0;
            var startAngleY = 0;
            var startAngleZ = 0;
            var rotateDirectionX = "clockwise";
            var rotateDirectionY = "clockwise";
            var rotateDirectionZ = "clockwise";
            _main2.default.prototype.pRotateDirectionX = void 0;
            _main2.default.prototype.pRotateDirectionY = void 0;
            _main2.default.prototype.pRotateDirectionZ = void 0;
            _main2.default.prototype._updatePRotations = function() {
              this._setProperty("pRotationX", this.rotationX);
              this._setProperty("pRotationY", this.rotationY);
              this._setProperty("pRotationZ", this.rotationZ);
            };
            _main2.default.prototype.turnAxis = void 0;
            var move_threshold = 0.5;
            var shake_threshold = 30;
            _main2.default.prototype.setMoveThreshold = function(val) {
              _main2.default._validateParameters("setMoveThreshold", arguments);
              move_threshold = val;
            };
            _main2.default.prototype.setShakeThreshold = function(val) {
              _main2.default._validateParameters("setShakeThreshold", arguments);
              shake_threshold = val;
            };
            _main2.default.prototype._ondeviceorientation = function(e2) {
              this._updatePRotations();
              if (this._angleMode === constants2.radians) {
                e2.beta = e2.beta * (_PI / 180);
                e2.gamma = e2.gamma * (_PI / 180);
                e2.alpha = e2.alpha * (_PI / 180);
              }
              this._setProperty("rotationX", e2.beta);
              this._setProperty("rotationY", e2.gamma);
              this._setProperty("rotationZ", e2.alpha);
              this._handleMotion();
            };
            _main2.default.prototype._ondevicemotion = function(e2) {
              this._updatePAccelerations();
              this._setProperty("accelerationX", e2.acceleration.x * 2);
              this._setProperty("accelerationY", e2.acceleration.y * 2);
              this._setProperty("accelerationZ", e2.acceleration.z * 2);
              this._handleMotion();
            };
            _main2.default.prototype._handleMotion = function() {
              if (window.orientation === 90 || window.orientation === -90) {
                this._setProperty("deviceOrientation", "landscape");
              } else if (window.orientation === 0) {
                this._setProperty("deviceOrientation", "portrait");
              } else if (window.orientation === void 0) {
                this._setProperty("deviceOrientation", "undefined");
              }
              var context = this._isGlobal ? window : this;
              if (typeof context.deviceMoved === "function") {
                if (Math.abs(this.accelerationX - this.pAccelerationX) > move_threshold || Math.abs(this.accelerationY - this.pAccelerationY) > move_threshold || Math.abs(this.accelerationZ - this.pAccelerationZ) > move_threshold) {
                  context.deviceMoved();
                }
              }
              if (typeof context.deviceTurned === "function") {
                var wRX = this.rotationX + 180;
                var wPRX = this.pRotationX + 180;
                var wSAX = startAngleX + 180;
                if (wRX - wPRX > 0 && wRX - wPRX < 270 || wRX - wPRX < -270) {
                  rotateDirectionX = "clockwise";
                } else if (wRX - wPRX < 0 || wRX - wPRX > 270) {
                  rotateDirectionX = "counter-clockwise";
                }
                if (rotateDirectionX !== this.pRotateDirectionX) {
                  wSAX = wRX;
                }
                if (Math.abs(wRX - wSAX) > 90 && Math.abs(wRX - wSAX) < 270) {
                  wSAX = wRX;
                  this._setProperty("turnAxis", "X");
                  context.deviceTurned();
                }
                this.pRotateDirectionX = rotateDirectionX;
                startAngleX = wSAX - 180;
                var wRY = this.rotationY + 180;
                var wPRY = this.pRotationY + 180;
                var wSAY = startAngleY + 180;
                if (wRY - wPRY > 0 && wRY - wPRY < 270 || wRY - wPRY < -270) {
                  rotateDirectionY = "clockwise";
                } else if (wRY - wPRY < 0 || wRY - this.pRotationY > 270) {
                  rotateDirectionY = "counter-clockwise";
                }
                if (rotateDirectionY !== this.pRotateDirectionY) {
                  wSAY = wRY;
                }
                if (Math.abs(wRY - wSAY) > 90 && Math.abs(wRY - wSAY) < 270) {
                  wSAY = wRY;
                  this._setProperty("turnAxis", "Y");
                  context.deviceTurned();
                }
                this.pRotateDirectionY = rotateDirectionY;
                startAngleY = wSAY - 180;
                if (this.rotationZ - this.pRotationZ > 0 && this.rotationZ - this.pRotationZ < 270 || this.rotationZ - this.pRotationZ < -270) {
                  rotateDirectionZ = "clockwise";
                } else if (this.rotationZ - this.pRotationZ < 0 || this.rotationZ - this.pRotationZ > 270) {
                  rotateDirectionZ = "counter-clockwise";
                }
                if (rotateDirectionZ !== this.pRotateDirectionZ) {
                  startAngleZ = this.rotationZ;
                }
                if (Math.abs(this.rotationZ - startAngleZ) > 90 && Math.abs(this.rotationZ - startAngleZ) < 270) {
                  startAngleZ = this.rotationZ;
                  this._setProperty("turnAxis", "Z");
                  context.deviceTurned();
                }
                this.pRotateDirectionZ = rotateDirectionZ;
                this._setProperty("turnAxis", void 0);
              }
              if (typeof context.deviceShaken === "function") {
                var accelerationChangeX;
                var accelerationChangeY;
                if (this.pAccelerationX !== null) {
                  accelerationChangeX = Math.abs(this.accelerationX - this.pAccelerationX);
                  accelerationChangeY = Math.abs(this.accelerationY - this.pAccelerationY);
                }
                if (accelerationChangeX + accelerationChangeY > shake_threshold) {
                  context.deviceShaken();
                }
              }
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/constants": 278,
            "../core/main": 290,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        308: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.isKeyPressed = false;
            _main2.default.prototype.keyIsPressed = false;
            _main2.default.prototype.key = "";
            _main2.default.prototype.keyCode = 0;
            _main2.default.prototype._onkeydown = function(e2) {
              if (this._downKeys[e2.which]) {
                return;
              }
              this._setProperty("isKeyPressed", true);
              this._setProperty("keyIsPressed", true);
              this._setProperty("keyCode", e2.which);
              this._downKeys[e2.which] = true;
              this._setProperty("key", e2.key || String.fromCharCode(e2.which) || e2.which);
              var context = this._isGlobal ? window : this;
              if (typeof context.keyPressed === "function" && !e2.charCode) {
                var executeDefault = context.keyPressed(e2);
                if (executeDefault === false) {
                  e2.preventDefault();
                }
              }
            };
            _main2.default.prototype._onkeyup = function(e2) {
              this._downKeys[e2.which] = false;
              if (!this._areDownKeys()) {
                this._setProperty("isKeyPressed", false);
                this._setProperty("keyIsPressed", false);
              }
              this._setProperty("_lastKeyCodeTyped", null);
              this._setProperty("key", e2.key || String.fromCharCode(e2.which) || e2.which);
              this._setProperty("keyCode", e2.which);
              var context = this._isGlobal ? window : this;
              if (typeof context.keyReleased === "function") {
                var executeDefault = context.keyReleased(e2);
                if (executeDefault === false) {
                  e2.preventDefault();
                }
              }
            };
            _main2.default.prototype._onkeypress = function(e2) {
              if (e2.which === this._lastKeyCodeTyped) {
                return;
              }
              this._setProperty("_lastKeyCodeTyped", e2.which);
              this._setProperty("key", e2.key || String.fromCharCode(e2.which) || e2.which);
              var context = this._isGlobal ? window : this;
              if (typeof context.keyTyped === "function") {
                var executeDefault = context.keyTyped(e2);
                if (executeDefault === false) {
                  e2.preventDefault();
                }
              }
            };
            _main2.default.prototype._onblur = function(e2) {
              this._downKeys = {};
            };
            _main2.default.prototype.keyIsDown = function(code) {
              _main2.default._validateParameters("keyIsDown", arguments);
              return this._downKeys[code] || false;
            };
            _main2.default.prototype._areDownKeys = function() {
              for (var key2 in this._downKeys) {
                if (this._downKeys.hasOwnProperty(key2) && this._downKeys[key2] === true) {
                  return true;
                }
              }
              return false;
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/main": 290
          }
        ],
        309: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.includes");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.string.includes");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../core/constants"));
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.movedX = 0;
            _main2.default.prototype.movedY = 0;
            _main2.default.prototype._hasMouseInteracted = false;
            _main2.default.prototype.mouseX = 0;
            _main2.default.prototype.mouseY = 0;
            _main2.default.prototype.pmouseX = 0;
            _main2.default.prototype.pmouseY = 0;
            _main2.default.prototype.winMouseX = 0;
            _main2.default.prototype.winMouseY = 0;
            _main2.default.prototype.pwinMouseX = 0;
            _main2.default.prototype.pwinMouseY = 0;
            _main2.default.prototype.mouseButton = 0;
            _main2.default.prototype.mouseIsPressed = false;
            _main2.default.prototype._updateNextMouseCoords = function(e2) {
              if (this._curElement !== null && (!e2.touches || e2.touches.length > 0)) {
                var mousePos = getMousePos(this._curElement.elt, this.width, this.height, e2);
                this._setProperty("movedX", e2.movementX);
                this._setProperty("movedY", e2.movementY);
                this._setProperty("mouseX", mousePos.x);
                this._setProperty("mouseY", mousePos.y);
                this._setProperty("winMouseX", mousePos.winX);
                this._setProperty("winMouseY", mousePos.winY);
              }
              if (!this._hasMouseInteracted) {
                this._updateMouseCoords();
                this._setProperty("_hasMouseInteracted", true);
              }
            };
            _main2.default.prototype._updateMouseCoords = function() {
              this._setProperty("pmouseX", this.mouseX);
              this._setProperty("pmouseY", this.mouseY);
              this._setProperty("pwinMouseX", this.winMouseX);
              this._setProperty("pwinMouseY", this.winMouseY);
              this._setProperty("_pmouseWheelDeltaY", this._mouseWheelDeltaY);
            };
            function getMousePos(canvas, w, h, evt) {
              if (evt && !evt.clientX) {
                if (evt.touches) {
                  evt = evt.touches[0];
                } else if (evt.changedTouches) {
                  evt = evt.changedTouches[0];
                }
              }
              var rect = canvas.getBoundingClientRect();
              var sx = canvas.scrollWidth / w || 1;
              var sy = canvas.scrollHeight / h || 1;
              return {
                x: (evt.clientX - rect.left) / sx,
                y: (evt.clientY - rect.top) / sy,
                winX: evt.clientX,
                winY: evt.clientY,
                id: evt.identifier
              };
            }
            _main2.default.prototype._setMouseButton = function(e2) {
              if (e2.button === 1) {
                this._setProperty("mouseButton", constants2.CENTER);
              } else if (e2.button === 2) {
                this._setProperty("mouseButton", constants2.RIGHT);
              } else {
                this._setProperty("mouseButton", constants2.LEFT);
              }
            };
            _main2.default.prototype._onmousemove = function(e2) {
              var context = this._isGlobal ? window : this;
              var executeDefault;
              this._updateNextMouseCoords(e2);
              if (!this.mouseIsPressed) {
                if (typeof context.mouseMoved === "function") {
                  executeDefault = context.mouseMoved(e2);
                  if (executeDefault === false) {
                    e2.preventDefault();
                  }
                }
              } else {
                if (typeof context.mouseDragged === "function") {
                  executeDefault = context.mouseDragged(e2);
                  if (executeDefault === false) {
                    e2.preventDefault();
                  }
                } else if (typeof context.touchMoved === "function") {
                  executeDefault = context.touchMoved(e2);
                  if (executeDefault === false) {
                    e2.preventDefault();
                  }
                }
              }
            };
            _main2.default.prototype._onmousedown = function(e2) {
              var context = this._isGlobal ? window : this;
              var executeDefault;
              this._setProperty("mouseIsPressed", true);
              this._setMouseButton(e2);
              this._updateNextMouseCoords(e2);
              if (typeof context.mousePressed === "function") {
                executeDefault = context.mousePressed(e2);
                if (executeDefault === false) {
                  e2.preventDefault();
                }
              } else if (navigator.userAgent.toLowerCase().includes("safari") && typeof context.touchStarted === "function") {
                executeDefault = context.touchStarted(e2);
                if (executeDefault === false) {
                  e2.preventDefault();
                }
              }
            };
            _main2.default.prototype._onmouseup = function(e2) {
              var context = this._isGlobal ? window : this;
              var executeDefault;
              this._setProperty("mouseIsPressed", false);
              if (typeof context.mouseReleased === "function") {
                executeDefault = context.mouseReleased(e2);
                if (executeDefault === false) {
                  e2.preventDefault();
                }
              } else if (typeof context.touchEnded === "function") {
                executeDefault = context.touchEnded(e2);
                if (executeDefault === false) {
                  e2.preventDefault();
                }
              }
            };
            _main2.default.prototype._ondragend = _main2.default.prototype._onmouseup;
            _main2.default.prototype._ondragover = _main2.default.prototype._onmousemove;
            _main2.default.prototype._onclick = function(e2) {
              var context = this._isGlobal ? window : this;
              if (typeof context.mouseClicked === "function") {
                var executeDefault = context.mouseClicked(e2);
                if (executeDefault === false) {
                  e2.preventDefault();
                }
              }
            };
            _main2.default.prototype._ondblclick = function(e2) {
              var context = this._isGlobal ? window : this;
              if (typeof context.doubleClicked === "function") {
                var executeDefault = context.doubleClicked(e2);
                if (executeDefault === false) {
                  e2.preventDefault();
                }
              }
            };
            _main2.default.prototype._mouseWheelDeltaY = 0;
            _main2.default.prototype._pmouseWheelDeltaY = 0;
            _main2.default.prototype._onwheel = function(e2) {
              var context = this._isGlobal ? window : this;
              this._setProperty("_mouseWheelDeltaY", e2.deltaY);
              if (typeof context.mouseWheel === "function") {
                e2.delta = e2.deltaY;
                var executeDefault = context.mouseWheel(e2);
                if (executeDefault === false) {
                  e2.preventDefault();
                }
              }
            };
            _main2.default.prototype.requestPointerLock = function() {
              var canvas = this._curElement.elt;
              canvas.requestPointerLock = canvas.requestPointerLock || canvas.mozRequestPointerLock;
              if (!canvas.requestPointerLock) {
                console.log("requestPointerLock is not implemented in this browser");
                return false;
              }
              canvas.requestPointerLock();
              return true;
            };
            _main2.default.prototype.exitPointerLock = function() {
              document.exitPointerLock();
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/constants": 278,
            "../core/main": 290,
            "core-js/modules/es.array.includes": 174,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.string.includes": 203,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        310: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.string.includes");
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.string.includes");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.touches = [];
            _main2.default.prototype._updateTouchCoords = function(e2) {
              if (this._curElement !== null) {
                var touches = [];
                for (var i2 = 0; i2 < e2.touches.length; i2++) {
                  touches[i2] = getTouchInfo(this._curElement.elt, this.width, this.height, e2, i2);
                }
                this._setProperty("touches", touches);
              }
            };
            function getTouchInfo(canvas, w, h, e2) {
              var i2 = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
              var rect = canvas.getBoundingClientRect();
              var sx = canvas.scrollWidth / w || 1;
              var sy = canvas.scrollHeight / h || 1;
              var touch = e2.touches[i2] || e2.changedTouches[i2];
              return {
                x: (touch.clientX - rect.left) / sx,
                y: (touch.clientY - rect.top) / sy,
                winX: touch.clientX,
                winY: touch.clientY,
                id: touch.identifier
              };
            }
            _main2.default.prototype._ontouchstart = function(e2) {
              var context = this._isGlobal ? window : this;
              var executeDefault;
              this._setProperty("mouseIsPressed", true);
              this._updateTouchCoords(e2);
              this._updateNextMouseCoords(e2);
              this._updateMouseCoords();
              if (typeof context.touchStarted === "function") {
                executeDefault = context.touchStarted(e2);
                if (executeDefault === false) {
                  e2.preventDefault();
                }
              } else if (navigator.userAgent.toLowerCase().includes("safari") && typeof context.mousePressed === "function") {
                executeDefault = context.mousePressed(e2);
                if (executeDefault === false) {
                  e2.preventDefault();
                }
              }
            };
            _main2.default.prototype._ontouchmove = function(e2) {
              var context = this._isGlobal ? window : this;
              var executeDefault;
              this._updateTouchCoords(e2);
              this._updateNextMouseCoords(e2);
              if (typeof context.touchMoved === "function") {
                executeDefault = context.touchMoved(e2);
                if (executeDefault === false) {
                  e2.preventDefault();
                }
              } else if (typeof context.mouseDragged === "function") {
                executeDefault = context.mouseDragged(e2);
                if (executeDefault === false) {
                  e2.preventDefault();
                }
              }
            };
            _main2.default.prototype._ontouchend = function(e2) {
              this._setProperty("mouseIsPressed", false);
              this._updateTouchCoords(e2);
              this._updateNextMouseCoords(e2);
              var context = this._isGlobal ? window : this;
              var executeDefault;
              if (typeof context.touchEnded === "function") {
                executeDefault = context.touchEnded(e2);
                if (executeDefault === false) {
                  e2.preventDefault();
                }
              } else if (typeof context.mouseReleased === "function") {
                executeDefault = context.mouseReleased(e2);
                if (executeDefault === false) {
                  e2.preventDefault();
                }
              }
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "core-js/modules/es.array.includes": 174,
            "core-js/modules/es.string.includes": 203
          }
        ],
        311: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.typed-array.int32-array");
            _dereq_2("core-js/modules/es.typed-array.uint8-array");
            _dereq_2("core-js/modules/es.typed-array.copy-within");
            _dereq_2("core-js/modules/es.typed-array.every");
            _dereq_2("core-js/modules/es.typed-array.fill");
            _dereq_2("core-js/modules/es.typed-array.filter");
            _dereq_2("core-js/modules/es.typed-array.find");
            _dereq_2("core-js/modules/es.typed-array.find-index");
            _dereq_2("core-js/modules/es.typed-array.for-each");
            _dereq_2("core-js/modules/es.typed-array.includes");
            _dereq_2("core-js/modules/es.typed-array.index-of");
            _dereq_2("core-js/modules/es.typed-array.iterator");
            _dereq_2("core-js/modules/es.typed-array.join");
            _dereq_2("core-js/modules/es.typed-array.last-index-of");
            _dereq_2("core-js/modules/es.typed-array.map");
            _dereq_2("core-js/modules/es.typed-array.reduce");
            _dereq_2("core-js/modules/es.typed-array.reduce-right");
            _dereq_2("core-js/modules/es.typed-array.reverse");
            _dereq_2("core-js/modules/es.typed-array.set");
            _dereq_2("core-js/modules/es.typed-array.slice");
            _dereq_2("core-js/modules/es.typed-array.some");
            _dereq_2("core-js/modules/es.typed-array.sort");
            _dereq_2("core-js/modules/es.typed-array.subarray");
            _dereq_2("core-js/modules/es.typed-array.to-locale-string");
            _dereq_2("core-js/modules/es.typed-array.to-string");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.typed-array.int32-array");
            _dereq_2("core-js/modules/es.typed-array.uint8-array");
            _dereq_2("core-js/modules/es.typed-array.copy-within");
            _dereq_2("core-js/modules/es.typed-array.every");
            _dereq_2("core-js/modules/es.typed-array.fill");
            _dereq_2("core-js/modules/es.typed-array.filter");
            _dereq_2("core-js/modules/es.typed-array.find");
            _dereq_2("core-js/modules/es.typed-array.find-index");
            _dereq_2("core-js/modules/es.typed-array.for-each");
            _dereq_2("core-js/modules/es.typed-array.includes");
            _dereq_2("core-js/modules/es.typed-array.index-of");
            _dereq_2("core-js/modules/es.typed-array.iterator");
            _dereq_2("core-js/modules/es.typed-array.join");
            _dereq_2("core-js/modules/es.typed-array.last-index-of");
            _dereq_2("core-js/modules/es.typed-array.map");
            _dereq_2("core-js/modules/es.typed-array.reduce");
            _dereq_2("core-js/modules/es.typed-array.reduce-right");
            _dereq_2("core-js/modules/es.typed-array.reverse");
            _dereq_2("core-js/modules/es.typed-array.set");
            _dereq_2("core-js/modules/es.typed-array.slice");
            _dereq_2("core-js/modules/es.typed-array.some");
            _dereq_2("core-js/modules/es.typed-array.sort");
            _dereq_2("core-js/modules/es.typed-array.subarray");
            _dereq_2("core-js/modules/es.typed-array.to-locale-string");
            _dereq_2("core-js/modules/es.typed-array.to-string");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var Filters = {};
            Filters._toPixels = function(canvas) {
              if (canvas instanceof ImageData) {
                return canvas.data;
              } else {
                if (canvas.getContext("2d")) {
                  return canvas.getContext("2d").getImageData(0, 0, canvas.width, canvas.height).data;
                } else if (canvas.getContext("webgl")) {
                  var gl = canvas.getContext("webgl");
                  var len = gl.drawingBufferWidth * gl.drawingBufferHeight * 4;
                  var data = new Uint8Array(len);
                  gl.readPixels(0, 0, canvas.width, canvas.height, gl.RGBA, gl.UNSIGNED_BYTE, data);
                  return data;
                }
              }
            };
            Filters._getARGB = function(data, i2) {
              var offset = i2 * 4;
              return data[offset + 3] << 24 & 4278190080 | data[offset] << 16 & 16711680 | data[offset + 1] << 8 & 65280 | data[offset + 2] & 255;
            };
            Filters._setPixels = function(pixels, data) {
              var offset = 0;
              for (var i2 = 0, al = pixels.length; i2 < al; i2++) {
                offset = i2 * 4;
                pixels[offset + 0] = (data[i2] & 16711680) >>> 16;
                pixels[offset + 1] = (data[i2] & 65280) >>> 8;
                pixels[offset + 2] = data[i2] & 255;
                pixels[offset + 3] = (data[i2] & 4278190080) >>> 24;
              }
            };
            Filters._toImageData = function(canvas) {
              if (canvas instanceof ImageData) {
                return canvas;
              } else {
                return canvas.getContext("2d").getImageData(0, 0, canvas.width, canvas.height);
              }
            };
            Filters._createImageData = function(width2, height2) {
              Filters._tmpCanvas = document.createElement("canvas");
              Filters._tmpCtx = Filters._tmpCanvas.getContext("2d");
              return this._tmpCtx.createImageData(width2, height2);
            };
            Filters.apply = function(canvas, func, filterParam) {
              var pixelsState = canvas.getContext("2d");
              var imageData = pixelsState.getImageData(0, 0, canvas.width, canvas.height);
              var newImageData = func(imageData, filterParam);
              if (newImageData instanceof ImageData) {
                pixelsState.putImageData(newImageData, 0, 0, 0, 0, canvas.width, canvas.height);
              } else {
                pixelsState.putImageData(imageData, 0, 0, 0, 0, canvas.width, canvas.height);
              }
            };
            Filters.threshold = function(canvas, level) {
              var pixels = Filters._toPixels(canvas);
              if (level === void 0) {
                level = 0.5;
              }
              var thresh = Math.floor(level * 255);
              for (var i2 = 0; i2 < pixels.length; i2 += 4) {
                var r = pixels[i2];
                var g = pixels[i2 + 1];
                var b = pixels[i2 + 2];
                var gray = 0.2126 * r + 0.7152 * g + 0.0722 * b;
                var val = void 0;
                if (gray >= thresh) {
                  val = 255;
                } else {
                  val = 0;
                }
                pixels[i2] = pixels[i2 + 1] = pixels[i2 + 2] = val;
              }
            };
            Filters.gray = function(canvas) {
              var pixels = Filters._toPixels(canvas);
              for (var i2 = 0; i2 < pixels.length; i2 += 4) {
                var r = pixels[i2];
                var g = pixels[i2 + 1];
                var b = pixels[i2 + 2];
                var gray = 0.2126 * r + 0.7152 * g + 0.0722 * b;
                pixels[i2] = pixels[i2 + 1] = pixels[i2 + 2] = gray;
              }
            };
            Filters.opaque = function(canvas) {
              var pixels = Filters._toPixels(canvas);
              for (var i2 = 0; i2 < pixels.length; i2 += 4) {
                pixels[i2 + 3] = 255;
              }
              return pixels;
            };
            Filters.invert = function(canvas) {
              var pixels = Filters._toPixels(canvas);
              for (var i2 = 0; i2 < pixels.length; i2 += 4) {
                pixels[i2] = 255 - pixels[i2];
                pixels[i2 + 1] = 255 - pixels[i2 + 1];
                pixels[i2 + 2] = 255 - pixels[i2 + 2];
              }
            };
            Filters.posterize = function(canvas, level) {
              var pixels = Filters._toPixels(canvas);
              if (level < 2 || level > 255) {
                throw new Error("Level must be greater than 2 and less than 255 for posterize");
              }
              var levels1 = level - 1;
              for (var i2 = 0; i2 < pixels.length; i2 += 4) {
                var rlevel = pixels[i2];
                var glevel = pixels[i2 + 1];
                var blevel = pixels[i2 + 2];
                pixels[i2] = (rlevel * level >> 8) * 255 / levels1;
                pixels[i2 + 1] = (glevel * level >> 8) * 255 / levels1;
                pixels[i2 + 2] = (blevel * level >> 8) * 255 / levels1;
              }
            };
            Filters.dilate = function(canvas) {
              var pixels = Filters._toPixels(canvas);
              var currIdx = 0;
              var maxIdx = pixels.length ? pixels.length / 4 : 0;
              var out = new Int32Array(maxIdx);
              var currRowIdx, maxRowIdx, colOrig, colOut, currLum;
              var idxRight, idxLeft, idxUp, idxDown;
              var colRight, colLeft, colUp, colDown;
              var lumRight, lumLeft, lumUp, lumDown;
              while (currIdx < maxIdx) {
                currRowIdx = currIdx;
                maxRowIdx = currIdx + canvas.width;
                while (currIdx < maxRowIdx) {
                  colOrig = colOut = Filters._getARGB(pixels, currIdx);
                  idxLeft = currIdx - 1;
                  idxRight = currIdx + 1;
                  idxUp = currIdx - canvas.width;
                  idxDown = currIdx + canvas.width;
                  if (idxLeft < currRowIdx) {
                    idxLeft = currIdx;
                  }
                  if (idxRight >= maxRowIdx) {
                    idxRight = currIdx;
                  }
                  if (idxUp < 0) {
                    idxUp = 0;
                  }
                  if (idxDown >= maxIdx) {
                    idxDown = currIdx;
                  }
                  colUp = Filters._getARGB(pixels, idxUp);
                  colLeft = Filters._getARGB(pixels, idxLeft);
                  colDown = Filters._getARGB(pixels, idxDown);
                  colRight = Filters._getARGB(pixels, idxRight);
                  currLum = 77 * (colOrig >> 16 & 255) + 151 * (colOrig >> 8 & 255) + 28 * (colOrig & 255);
                  lumLeft = 77 * (colLeft >> 16 & 255) + 151 * (colLeft >> 8 & 255) + 28 * (colLeft & 255);
                  lumRight = 77 * (colRight >> 16 & 255) + 151 * (colRight >> 8 & 255) + 28 * (colRight & 255);
                  lumUp = 77 * (colUp >> 16 & 255) + 151 * (colUp >> 8 & 255) + 28 * (colUp & 255);
                  lumDown = 77 * (colDown >> 16 & 255) + 151 * (colDown >> 8 & 255) + 28 * (colDown & 255);
                  if (lumLeft > currLum) {
                    colOut = colLeft;
                    currLum = lumLeft;
                  }
                  if (lumRight > currLum) {
                    colOut = colRight;
                    currLum = lumRight;
                  }
                  if (lumUp > currLum) {
                    colOut = colUp;
                    currLum = lumUp;
                  }
                  if (lumDown > currLum) {
                    colOut = colDown;
                    currLum = lumDown;
                  }
                  out[currIdx++] = colOut;
                }
              }
              Filters._setPixels(pixels, out);
            };
            Filters.erode = function(canvas) {
              var pixels = Filters._toPixels(canvas);
              var currIdx = 0;
              var maxIdx = pixels.length ? pixels.length / 4 : 0;
              var out = new Int32Array(maxIdx);
              var currRowIdx, maxRowIdx, colOrig, colOut, currLum;
              var idxRight, idxLeft, idxUp, idxDown;
              var colRight, colLeft, colUp, colDown;
              var lumRight, lumLeft, lumUp, lumDown;
              while (currIdx < maxIdx) {
                currRowIdx = currIdx;
                maxRowIdx = currIdx + canvas.width;
                while (currIdx < maxRowIdx) {
                  colOrig = colOut = Filters._getARGB(pixels, currIdx);
                  idxLeft = currIdx - 1;
                  idxRight = currIdx + 1;
                  idxUp = currIdx - canvas.width;
                  idxDown = currIdx + canvas.width;
                  if (idxLeft < currRowIdx) {
                    idxLeft = currIdx;
                  }
                  if (idxRight >= maxRowIdx) {
                    idxRight = currIdx;
                  }
                  if (idxUp < 0) {
                    idxUp = 0;
                  }
                  if (idxDown >= maxIdx) {
                    idxDown = currIdx;
                  }
                  colUp = Filters._getARGB(pixels, idxUp);
                  colLeft = Filters._getARGB(pixels, idxLeft);
                  colDown = Filters._getARGB(pixels, idxDown);
                  colRight = Filters._getARGB(pixels, idxRight);
                  currLum = 77 * (colOrig >> 16 & 255) + 151 * (colOrig >> 8 & 255) + 28 * (colOrig & 255);
                  lumLeft = 77 * (colLeft >> 16 & 255) + 151 * (colLeft >> 8 & 255) + 28 * (colLeft & 255);
                  lumRight = 77 * (colRight >> 16 & 255) + 151 * (colRight >> 8 & 255) + 28 * (colRight & 255);
                  lumUp = 77 * (colUp >> 16 & 255) + 151 * (colUp >> 8 & 255) + 28 * (colUp & 255);
                  lumDown = 77 * (colDown >> 16 & 255) + 151 * (colDown >> 8 & 255) + 28 * (colDown & 255);
                  if (lumLeft < currLum) {
                    colOut = colLeft;
                    currLum = lumLeft;
                  }
                  if (lumRight < currLum) {
                    colOut = colRight;
                    currLum = lumRight;
                  }
                  if (lumUp < currLum) {
                    colOut = colUp;
                    currLum = lumUp;
                  }
                  if (lumDown < currLum) {
                    colOut = colDown;
                    currLum = lumDown;
                  }
                  out[currIdx++] = colOut;
                }
              }
              Filters._setPixels(pixels, out);
            };
            var blurRadius;
            var blurKernelSize;
            var blurKernel;
            var blurMult;
            function buildBlurKernel(r) {
              var radius = r * 3.5 | 0;
              radius = radius < 1 ? 1 : radius < 248 ? radius : 248;
              if (blurRadius !== radius) {
                blurRadius = radius;
                blurKernelSize = 1 + blurRadius << 1;
                blurKernel = new Int32Array(blurKernelSize);
                blurMult = new Array(blurKernelSize);
                for (var l = 0; l < blurKernelSize; l++) {
                  blurMult[l] = new Int32Array(256);
                }
                var bk, bki;
                var bm, bmi;
                for (var i2 = 1, radiusi = radius - 1; i2 < radius; i2++) {
                  blurKernel[radius + i2] = blurKernel[radiusi] = bki = radiusi * radiusi;
                  bm = blurMult[radius + i2];
                  bmi = blurMult[radiusi--];
                  for (var j = 0; j < 256; j++) {
                    bm[j] = bmi[j] = bki * j;
                  }
                }
                bk = blurKernel[radius] = radius * radius;
                bm = blurMult[radius];
                for (var k2 = 0; k2 < 256; k2++) {
                  bm[k2] = bk * k2;
                }
              }
            }
            function blurARGB(canvas, radius) {
              var pixels = Filters._toPixels(canvas);
              var width2 = canvas.width;
              var height2 = canvas.height;
              var numPackedPixels = width2 * height2;
              var argb = new Int32Array(numPackedPixels);
              for (var j = 0; j < numPackedPixels; j++) {
                argb[j] = Filters._getARGB(pixels, j);
              }
              var sum, cr, cg, cb, ca;
              var read, ri, ym, ymi, bk0;
              var a2 = new Int32Array(numPackedPixels);
              var r2 = new Int32Array(numPackedPixels);
              var g2 = new Int32Array(numPackedPixels);
              var b2 = new Int32Array(numPackedPixels);
              var yi = 0;
              buildBlurKernel(radius);
              var x, y, i2;
              var bm;
              for (y = 0; y < height2; y++) {
                for (x = 0; x < width2; x++) {
                  cb = cg = cr = ca = sum = 0;
                  read = x - blurRadius;
                  if (read < 0) {
                    bk0 = -read;
                    read = 0;
                  } else {
                    if (read >= width2) {
                      break;
                    }
                    bk0 = 0;
                  }
                  for (i2 = bk0; i2 < blurKernelSize; i2++) {
                    if (read >= width2) {
                      break;
                    }
                    var c = argb[read + yi];
                    bm = blurMult[i2];
                    ca += bm[(c & -16777216) >>> 24];
                    cr += bm[(c & 16711680) >> 16];
                    cg += bm[(c & 65280) >> 8];
                    cb += bm[c & 255];
                    sum += blurKernel[i2];
                    read++;
                  }
                  ri = yi + x;
                  a2[ri] = ca / sum;
                  r2[ri] = cr / sum;
                  g2[ri] = cg / sum;
                  b2[ri] = cb / sum;
                }
                yi += width2;
              }
              yi = 0;
              ym = -blurRadius;
              ymi = ym * width2;
              for (y = 0; y < height2; y++) {
                for (x = 0; x < width2; x++) {
                  cb = cg = cr = ca = sum = 0;
                  if (ym < 0) {
                    bk0 = ri = -ym;
                    read = x;
                  } else {
                    if (ym >= height2) {
                      break;
                    }
                    bk0 = 0;
                    ri = ym;
                    read = x + ymi;
                  }
                  for (i2 = bk0; i2 < blurKernelSize; i2++) {
                    if (ri >= height2) {
                      break;
                    }
                    bm = blurMult[i2];
                    ca += bm[a2[read]];
                    cr += bm[r2[read]];
                    cg += bm[g2[read]];
                    cb += bm[b2[read]];
                    sum += blurKernel[i2];
                    ri++;
                    read += width2;
                  }
                  argb[x + yi] = ca / sum << 24 | cr / sum << 16 | cg / sum << 8 | cb / sum;
                }
                yi += width2;
                ymi += width2;
                ym++;
              }
              Filters._setPixels(pixels, argb);
            }
            Filters.blur = function(canvas, radius) {
              blurARGB(canvas, radius);
            };
            var _default2 = Filters;
            exports2.default = _default2;
          },
          {
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.typed-array.copy-within": 215,
            "core-js/modules/es.typed-array.every": 216,
            "core-js/modules/es.typed-array.fill": 217,
            "core-js/modules/es.typed-array.filter": 218,
            "core-js/modules/es.typed-array.find": 220,
            "core-js/modules/es.typed-array.find-index": 219,
            "core-js/modules/es.typed-array.for-each": 223,
            "core-js/modules/es.typed-array.includes": 224,
            "core-js/modules/es.typed-array.index-of": 225,
            "core-js/modules/es.typed-array.int32-array": 227,
            "core-js/modules/es.typed-array.iterator": 228,
            "core-js/modules/es.typed-array.join": 229,
            "core-js/modules/es.typed-array.last-index-of": 230,
            "core-js/modules/es.typed-array.map": 231,
            "core-js/modules/es.typed-array.reduce": 233,
            "core-js/modules/es.typed-array.reduce-right": 232,
            "core-js/modules/es.typed-array.reverse": 234,
            "core-js/modules/es.typed-array.set": 235,
            "core-js/modules/es.typed-array.slice": 236,
            "core-js/modules/es.typed-array.some": 237,
            "core-js/modules/es.typed-array.sort": 238,
            "core-js/modules/es.typed-array.subarray": 239,
            "core-js/modules/es.typed-array.to-locale-string": 240,
            "core-js/modules/es.typed-array.to-string": 241,
            "core-js/modules/es.typed-array.uint8-array": 244
          }
        ],
        312: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.from");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.keys");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.set");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.replace");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.typed-array.uint8-array");
            _dereq_2("core-js/modules/es.typed-array.uint32-array");
            _dereq_2("core-js/modules/es.typed-array.copy-within");
            _dereq_2("core-js/modules/es.typed-array.every");
            _dereq_2("core-js/modules/es.typed-array.fill");
            _dereq_2("core-js/modules/es.typed-array.filter");
            _dereq_2("core-js/modules/es.typed-array.find");
            _dereq_2("core-js/modules/es.typed-array.find-index");
            _dereq_2("core-js/modules/es.typed-array.for-each");
            _dereq_2("core-js/modules/es.typed-array.includes");
            _dereq_2("core-js/modules/es.typed-array.index-of");
            _dereq_2("core-js/modules/es.typed-array.iterator");
            _dereq_2("core-js/modules/es.typed-array.join");
            _dereq_2("core-js/modules/es.typed-array.last-index-of");
            _dereq_2("core-js/modules/es.typed-array.map");
            _dereq_2("core-js/modules/es.typed-array.reduce");
            _dereq_2("core-js/modules/es.typed-array.reduce-right");
            _dereq_2("core-js/modules/es.typed-array.reverse");
            _dereq_2("core-js/modules/es.typed-array.set");
            _dereq_2("core-js/modules/es.typed-array.slice");
            _dereq_2("core-js/modules/es.typed-array.some");
            _dereq_2("core-js/modules/es.typed-array.sort");
            _dereq_2("core-js/modules/es.typed-array.subarray");
            _dereq_2("core-js/modules/es.typed-array.to-locale-string");
            _dereq_2("core-js/modules/es.typed-array.to-string");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.from");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.keys");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.set");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.replace");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.typed-array.uint8-array");
            _dereq_2("core-js/modules/es.typed-array.uint32-array");
            _dereq_2("core-js/modules/es.typed-array.copy-within");
            _dereq_2("core-js/modules/es.typed-array.every");
            _dereq_2("core-js/modules/es.typed-array.fill");
            _dereq_2("core-js/modules/es.typed-array.filter");
            _dereq_2("core-js/modules/es.typed-array.find");
            _dereq_2("core-js/modules/es.typed-array.find-index");
            _dereq_2("core-js/modules/es.typed-array.for-each");
            _dereq_2("core-js/modules/es.typed-array.includes");
            _dereq_2("core-js/modules/es.typed-array.index-of");
            _dereq_2("core-js/modules/es.typed-array.iterator");
            _dereq_2("core-js/modules/es.typed-array.join");
            _dereq_2("core-js/modules/es.typed-array.last-index-of");
            _dereq_2("core-js/modules/es.typed-array.map");
            _dereq_2("core-js/modules/es.typed-array.reduce");
            _dereq_2("core-js/modules/es.typed-array.reduce-right");
            _dereq_2("core-js/modules/es.typed-array.reverse");
            _dereq_2("core-js/modules/es.typed-array.set");
            _dereq_2("core-js/modules/es.typed-array.slice");
            _dereq_2("core-js/modules/es.typed-array.some");
            _dereq_2("core-js/modules/es.typed-array.sort");
            _dereq_2("core-js/modules/es.typed-array.subarray");
            _dereq_2("core-js/modules/es.typed-array.to-locale-string");
            _dereq_2("core-js/modules/es.typed-array.to-string");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var _omggif = _interopRequireDefault2(_dereq_2("omggif"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            function _toConsumableArray2(arr) {
              return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _nonIterableSpread2();
            }
            function _nonIterableSpread2() {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            }
            function _iterableToArray2(iter) {
              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]")
                return Array.from(iter);
            }
            function _arrayWithoutHoles2(arr) {
              if (Array.isArray(arr)) {
                for (var i2 = 0, arr2 = new Array(arr.length); i2 < arr.length; i2++) {
                  arr2[i2] = arr[i2];
                }
                return arr2;
              }
            }
            _main2.default.prototype.createImage = function(width2, height2) {
              _main2.default._validateParameters("createImage", arguments);
              return new _main2.default.Image(width2, height2);
            };
            _main2.default.prototype.saveCanvas = function() {
              _main2.default._validateParameters("saveCanvas", arguments);
              var args = [].slice.call(arguments);
              var htmlCanvas, filename, extension;
              if (arguments[0] instanceof HTMLCanvasElement) {
                htmlCanvas = arguments[0];
                args.shift();
              } else if (arguments[0] instanceof _main2.default.Element) {
                htmlCanvas = arguments[0].elt;
                args.shift();
              } else {
                htmlCanvas = this._curElement && this._curElement.elt;
              }
              if (args.length >= 1) {
                filename = args[0];
              }
              if (args.length >= 2) {
                extension = args[1];
              }
              extension = extension || _main2.default.prototype._checkFileExtension(filename, extension)[1] || "png";
              var mimeType;
              switch (extension) {
                default:
                  mimeType = "image/png";
                  break;
                case "jpeg":
                case "jpg":
                  mimeType = "image/jpeg";
                  break;
              }
              htmlCanvas.toBlob(function(blob) {
                _main2.default.prototype.downloadFile(blob, filename, extension);
              }, mimeType);
            };
            _main2.default.prototype.encodeAndDownloadGif = function(pImg, filename) {
              var props = pImg.gifProperties;
              var loopLimit = props.loopLimit;
              if (loopLimit === 1) {
                loopLimit = null;
              } else if (loopLimit === null) {
                loopLimit = 0;
              }
              var buffer = new Uint8Array(pImg.width * pImg.height * props.numFrames);
              var allFramesPixelColors = [];
              var paletteFreqsAndFrames = {};
              for (var i2 = 0; i2 < props.numFrames; i2++) {
                var paletteSet = /* @__PURE__ */ new Set();
                var data = props.frames[i2].image.data;
                var dataLength = data.length;
                var pixelColors = new Uint32Array(pImg.width * pImg.height);
                for (var j = 0, k2 = 0; j < dataLength; j += 4, k2++) {
                  var r = data[j + 0];
                  var g = data[j + 1];
                  var b = data[j + 2];
                  var color = r << 16 | g << 8 | b << 0;
                  paletteSet.add(color);
                  pixelColors[k2] = color;
                }
                var paletteStr = _toConsumableArray2(paletteSet).sort().toString();
                if (paletteFreqsAndFrames[paletteStr] === void 0) {
                  paletteFreqsAndFrames[paletteStr] = {
                    freq: 1,
                    frames: [
                      i2
                    ]
                  };
                } else {
                  paletteFreqsAndFrames[paletteStr].freq += 1;
                  paletteFreqsAndFrames[paletteStr].frames.push(i2);
                }
                allFramesPixelColors.push(pixelColors);
              }
              var framesUsingGlobalPalette = [];
              var palettesSortedByFreq = Object.keys(paletteFreqsAndFrames).sort(function(a, b2) {
                return paletteFreqsAndFrames[b2].freq - paletteFreqsAndFrames[a].freq;
              });
              var globalPalette = palettesSortedByFreq[0].split(",").map(function(a) {
                return parseInt(a);
              });
              framesUsingGlobalPalette = framesUsingGlobalPalette.concat(paletteFreqsAndFrames[globalPalette].frames);
              var globalPaletteSet = new Set(globalPalette);
              for (var _i = 1; _i < palettesSortedByFreq.length; _i++) {
                var palette = palettesSortedByFreq[_i].split(",").map(function(a) {
                  return parseInt(a);
                });
                var difference = palette.filter(function(x) {
                  return !globalPaletteSet.has(x);
                });
                if (globalPalette.length + difference.length <= 256) {
                  for (var _j = 0; _j < difference.length; _j++) {
                    globalPalette.push(difference[_j]);
                    globalPaletteSet.add(difference[_j]);
                  }
                  framesUsingGlobalPalette = framesUsingGlobalPalette.concat(paletteFreqsAndFrames[palettesSortedByFreq[_i]].frames);
                }
              }
              framesUsingGlobalPalette = new Set(framesUsingGlobalPalette);
              var globalIndicesLookup = {};
              for (var _i2 = 0; _i2 < globalPalette.length; _i2++) {
                if (!globalIndicesLookup[globalPalette[_i2]]) {
                  globalIndicesLookup[globalPalette[_i2]] = _i2;
                }
              }
              var powof2 = 1;
              while (powof2 < globalPalette.length) {
                powof2 <<= 1;
              }
              globalPalette.length = powof2;
              var opts = {
                loop: loopLimit,
                palette: new Uint32Array(globalPalette)
              };
              var gifWriter = new _omggif.default.GifWriter(buffer, pImg.width, pImg.height, opts);
              var previousFrame = {};
              var _loop = function _loop2(_i33) {
                var localPaletteRequired = !framesUsingGlobalPalette.has(_i33);
                var palette2 = localPaletteRequired ? [] : globalPalette;
                var pixelPaletteIndex = new Uint8Array(pImg.width * pImg.height);
                var colorIndicesLookup = {};
                var cannotBeTransparent = /* @__PURE__ */ new Set();
                for (var _k = 0; _k < allFramesPixelColors[_i33].length; _k++) {
                  var _color = allFramesPixelColors[_i33][_k];
                  if (localPaletteRequired) {
                    if (colorIndicesLookup[_color] === void 0) {
                      colorIndicesLookup[_color] = palette2.length;
                      palette2.push(_color);
                    }
                    pixelPaletteIndex[_k] = colorIndicesLookup[_color];
                  } else {
                    pixelPaletteIndex[_k] = globalIndicesLookup[_color];
                  }
                  if (_i33 > 0) {
                    if (allFramesPixelColors[_i33 - 1][_k] !== _color) {
                      cannotBeTransparent.add(_color);
                    }
                  }
                }
                var frameOpts = {};
                var canBeTransparent = palette2.filter(function(a) {
                  return !cannotBeTransparent.has(a);
                });
                if (canBeTransparent.length > 0) {
                  var transparent = canBeTransparent[0];
                  var transparentIndex = localPaletteRequired ? colorIndicesLookup[transparent] : globalIndicesLookup[transparent];
                  if (_i33 > 0) {
                    for (var _k2 = 0; _k2 < allFramesPixelColors[_i33].length; _k2++) {
                      if (allFramesPixelColors[_i33 - 1][_k2] === allFramesPixelColors[_i33][_k2]) {
                        pixelPaletteIndex[_k2] = transparentIndex;
                      }
                    }
                    frameOpts.transparent = transparentIndex;
                    previousFrame.frameOpts.disposal = 1;
                  }
                }
                frameOpts.delay = props.frames[_i33].delay / 10;
                if (localPaletteRequired) {
                  var _powof = 1;
                  while (_powof < palette2.length) {
                    _powof <<= 1;
                  }
                  palette2.length = _powof;
                  frameOpts.palette = new Uint32Array(palette2);
                }
                if (_i33 > 0) {
                  gifWriter.addFrame(0, 0, pImg.width, pImg.height, previousFrame.pixelPaletteIndex, previousFrame.frameOpts);
                }
                previousFrame = {
                  pixelPaletteIndex,
                  frameOpts
                };
              };
              for (var _i32 = 0; _i32 < props.numFrames; _i32++) {
                _loop(_i32);
              }
              previousFrame.frameOpts.disposal = 1;
              gifWriter.addFrame(0, 0, pImg.width, pImg.height, previousFrame.pixelPaletteIndex, previousFrame.frameOpts);
              var extension = "gif";
              var blob = new Blob([buffer.slice(0, gifWriter.end())], {
                type: "image/gif"
              });
              _main2.default.prototype.downloadFile(blob, filename, extension);
            };
            _main2.default.prototype.saveFrames = function(fName, ext, _duration, _fps, callback) {
              _main2.default._validateParameters("saveFrames", arguments);
              var duration = _duration || 3;
              duration = _main2.default.prototype.constrain(duration, 0, 15);
              duration = duration * 1e3;
              var fps = _fps || 15;
              fps = _main2.default.prototype.constrain(fps, 0, 22);
              var count = 0;
              var makeFrame = _main2.default.prototype._makeFrame;
              var cnv = this._curElement.elt;
              var frames = [];
              var frameFactory = setInterval(function() {
                frames.push(makeFrame(fName + count, ext, cnv));
                count++;
              }, 1e3 / fps);
              setTimeout(function() {
                clearInterval(frameFactory);
                if (callback) {
                  callback(frames);
                } else {
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = void 0;
                  try {
                    for (var _iterator = frames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var f = _step.value;
                      _main2.default.prototype.downloadFile(f.imageData, f.filename, f.ext);
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }
                }
                frames = [];
              }, duration + 0.01);
            };
            _main2.default.prototype._makeFrame = function(filename, extension, _cnv) {
              var cnv;
              if (this) {
                cnv = this._curElement.elt;
              } else {
                cnv = _cnv;
              }
              var mimeType;
              if (!extension) {
                extension = "png";
                mimeType = "image/png";
              } else {
                switch (extension.toLowerCase()) {
                  case "png":
                    mimeType = "image/png";
                    break;
                  case "jpeg":
                    mimeType = "image/jpeg";
                    break;
                  case "jpg":
                    mimeType = "image/jpeg";
                    break;
                  default:
                    mimeType = "image/png";
                    break;
                }
              }
              var downloadMime = "image/octet-stream";
              var imageData = cnv.toDataURL(mimeType);
              imageData = imageData.replace(mimeType, downloadMime);
              var thisFrame = {};
              thisFrame.imageData = imageData;
              thisFrame.filename = filename;
              thisFrame.ext = extension;
              return thisFrame;
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "core-js/modules/es.array.concat": 167,
            "core-js/modules/es.array.filter": 171,
            "core-js/modules/es.array.from": 173,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.map": 179,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.object.keys": 194,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.set": 201,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.string.replace": 207,
            "core-js/modules/es.string.split": 209,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.typed-array.copy-within": 215,
            "core-js/modules/es.typed-array.every": 216,
            "core-js/modules/es.typed-array.fill": 217,
            "core-js/modules/es.typed-array.filter": 218,
            "core-js/modules/es.typed-array.find": 220,
            "core-js/modules/es.typed-array.find-index": 219,
            "core-js/modules/es.typed-array.for-each": 223,
            "core-js/modules/es.typed-array.includes": 224,
            "core-js/modules/es.typed-array.index-of": 225,
            "core-js/modules/es.typed-array.iterator": 228,
            "core-js/modules/es.typed-array.join": 229,
            "core-js/modules/es.typed-array.last-index-of": 230,
            "core-js/modules/es.typed-array.map": 231,
            "core-js/modules/es.typed-array.reduce": 233,
            "core-js/modules/es.typed-array.reduce-right": 232,
            "core-js/modules/es.typed-array.reverse": 234,
            "core-js/modules/es.typed-array.set": 235,
            "core-js/modules/es.typed-array.slice": 236,
            "core-js/modules/es.typed-array.some": 237,
            "core-js/modules/es.typed-array.sort": 238,
            "core-js/modules/es.typed-array.subarray": 239,
            "core-js/modules/es.typed-array.to-locale-string": 240,
            "core-js/modules/es.typed-array.to-string": 241,
            "core-js/modules/es.typed-array.uint32-array": 243,
            "core-js/modules/es.typed-array.uint8-array": 244,
            "core-js/modules/web.dom-collections.iterator": 248,
            "omggif": 262
          }
        ],
        313: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.copy-within");
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.promise");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.includes");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.typed-array.uint8-array");
            _dereq_2("core-js/modules/es.typed-array.uint8-clamped-array");
            _dereq_2("core-js/modules/es.typed-array.copy-within");
            _dereq_2("core-js/modules/es.typed-array.every");
            _dereq_2("core-js/modules/es.typed-array.fill");
            _dereq_2("core-js/modules/es.typed-array.filter");
            _dereq_2("core-js/modules/es.typed-array.find");
            _dereq_2("core-js/modules/es.typed-array.find-index");
            _dereq_2("core-js/modules/es.typed-array.for-each");
            _dereq_2("core-js/modules/es.typed-array.includes");
            _dereq_2("core-js/modules/es.typed-array.index-of");
            _dereq_2("core-js/modules/es.typed-array.iterator");
            _dereq_2("core-js/modules/es.typed-array.join");
            _dereq_2("core-js/modules/es.typed-array.last-index-of");
            _dereq_2("core-js/modules/es.typed-array.map");
            _dereq_2("core-js/modules/es.typed-array.reduce");
            _dereq_2("core-js/modules/es.typed-array.reduce-right");
            _dereq_2("core-js/modules/es.typed-array.reverse");
            _dereq_2("core-js/modules/es.typed-array.set");
            _dereq_2("core-js/modules/es.typed-array.slice");
            _dereq_2("core-js/modules/es.typed-array.some");
            _dereq_2("core-js/modules/es.typed-array.sort");
            _dereq_2("core-js/modules/es.typed-array.subarray");
            _dereq_2("core-js/modules/es.typed-array.to-locale-string");
            _dereq_2("core-js/modules/es.typed-array.to-string");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _dereq_2("core-js/modules/es.array.copy-within");
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.promise");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.includes");
            _dereq_2("core-js/modules/es.typed-array.uint8-array");
            _dereq_2("core-js/modules/es.typed-array.uint8-clamped-array");
            _dereq_2("core-js/modules/es.typed-array.copy-within");
            _dereq_2("core-js/modules/es.typed-array.every");
            _dereq_2("core-js/modules/es.typed-array.fill");
            _dereq_2("core-js/modules/es.typed-array.filter");
            _dereq_2("core-js/modules/es.typed-array.find");
            _dereq_2("core-js/modules/es.typed-array.find-index");
            _dereq_2("core-js/modules/es.typed-array.for-each");
            _dereq_2("core-js/modules/es.typed-array.includes");
            _dereq_2("core-js/modules/es.typed-array.index-of");
            _dereq_2("core-js/modules/es.typed-array.iterator");
            _dereq_2("core-js/modules/es.typed-array.join");
            _dereq_2("core-js/modules/es.typed-array.last-index-of");
            _dereq_2("core-js/modules/es.typed-array.map");
            _dereq_2("core-js/modules/es.typed-array.reduce");
            _dereq_2("core-js/modules/es.typed-array.reduce-right");
            _dereq_2("core-js/modules/es.typed-array.reverse");
            _dereq_2("core-js/modules/es.typed-array.set");
            _dereq_2("core-js/modules/es.typed-array.slice");
            _dereq_2("core-js/modules/es.typed-array.some");
            _dereq_2("core-js/modules/es.typed-array.sort");
            _dereq_2("core-js/modules/es.typed-array.subarray");
            _dereq_2("core-js/modules/es.typed-array.to-locale-string");
            _dereq_2("core-js/modules/es.typed-array.to-string");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            _dereq_2("regenerator-runtime/runtime");
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var _helpers = _interopRequireDefault2(_dereq_2("../core/helpers"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../core/constants"));
            var _omggif = _interopRequireDefault2(_dereq_2("omggif"));
            var _gifenc = _dereq_2("gifenc");
            _dereq_2("../core/friendly_errors/validate_params");
            _dereq_2("../core/friendly_errors/file_errors");
            _dereq_2("../core/friendly_errors/fes_core");
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key2, arg) {
              try {
                var info = gen[key2](arg);
                var value = info.value;
              } catch (error) {
                reject(error);
                return;
              }
              if (info.done) {
                resolve(value);
              } else {
                Promise.resolve(value).then(_next, _throw);
              }
            }
            function _asyncToGenerator(fn) {
              return function() {
                var self2 = this, args = arguments;
                return new Promise(function(resolve, reject) {
                  var gen = fn.apply(self2, args);
                  function _next(value) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                  }
                  function _throw(err) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                  }
                  _next(void 0);
                });
              };
            }
            _main2.default.prototype.loadImage = function(path, successCallback, failureCallback) {
              _main2.default._validateParameters("loadImage", arguments);
              var pImg = new _main2.default.Image(1, 1, this);
              var self2 = this;
              var req = new Request(path, {
                method: "GET",
                mode: "cors"
              });
              fetch(path, req).then(function(response) {
                var contentType = response.headers.get("content-type");
                if (contentType === null) {
                  console.warn("The image you loaded does not have a Content-Type header. If you are using the online editor consider reuploading the asset.");
                }
                if (contentType && contentType.includes("image/gif")) {
                  response.arrayBuffer().then(function(arrayBuffer) {
                    if (arrayBuffer) {
                      var byteArray = new Uint8Array(arrayBuffer);
                      _createGif(byteArray, pImg, successCallback, failureCallback, function(pImg2) {
                        self2._decrementPreload();
                      }.bind(self2));
                    }
                  }, function(e2) {
                    if (typeof failureCallback === "function") {
                      failureCallback(e2);
                      self2._decrementPreload();
                    } else {
                      console.error(e2);
                    }
                  });
                } else {
                  var img = new Image();
                  img.onload = function() {
                    pImg.width = pImg.canvas.width = img.width;
                    pImg.height = pImg.canvas.height = img.height;
                    pImg.drawingContext.drawImage(img, 0, 0);
                    pImg.modified = true;
                    if (typeof successCallback === "function") {
                      successCallback(pImg);
                    }
                    self2._decrementPreload();
                  };
                  img.onerror = function(e2) {
                    _main2.default._friendlyFileLoadError(0, img.src);
                    if (typeof failureCallback === "function") {
                      failureCallback(e2);
                      self2._decrementPreload();
                    } else {
                      console.error(e2);
                    }
                  };
                  if (path.indexOf("data:image/") !== 0) {
                    img.crossOrigin = "Anonymous";
                  }
                  img.src = path;
                }
                pImg.modified = true;
              }).catch(function(e2) {
                _main2.default._friendlyFileLoadError(0, path);
                if (typeof failureCallback === "function") {
                  failureCallback(e2);
                  self2._decrementPreload();
                } else {
                  console.error(e2);
                }
              });
              return pImg;
            };
            _main2.default.prototype.saveGif = function() {
              var _ref = _asyncToGenerator(
                regeneratorRuntime.mark(function _callee(fileName, duration) {
                  var options, delay, units, _frameRate, gifFrameDelay, nFrames, nFramesDelay, totalNumberOfFrames, frameIterator, lastPixelDensity, frames, progressBarIdName, p, pixels, gl, data, gif, globalPalette, paletteCache, getIndexedFrame, transparentIndex, prevIndexedFrame, i2, indexedFrame, originalIndexedFrame, _i, buffer, extension, blob, _args = arguments;
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          options = _args.length > 2 && _args[2] !== void 0 ? _args[2] : {
                            delay: 0,
                            units: "seconds"
                          };
                          if (!(typeof fileName !== "string")) {
                            _context.next = 3;
                            break;
                          }
                          throw TypeError("fileName parameter must be a string");
                        case 3:
                          if (!(typeof duration !== "number")) {
                            _context.next = 5;
                            break;
                          }
                          throw TypeError("Duration parameter must be a number");
                        case 5:
                          delay = options && options.delay || 0;
                          units = options && options.units || "seconds";
                          if (!(typeof delay !== "number")) {
                            _context.next = 9;
                            break;
                          }
                          throw TypeError("Delay parameter must be a number");
                        case 9:
                          if (!(units !== "seconds" && units !== "frames")) {
                            _context.next = 11;
                            break;
                          }
                          throw TypeError('Units parameter must be either "frames" or "seconds"');
                        case 11:
                          this._recording = true;
                          _frameRate = this._targetFrameRate;
                          if (_frameRate === Infinity || _frameRate === void 0 || _frameRate === 0) {
                            _frameRate = 60;
                          }
                          gifFrameDelay = 1 / _frameRate * 1e3;
                          gifFrameDelay = gifFrameDelay < 20 ? 20 : gifFrameDelay;
                          nFrames = units === "seconds" ? duration * _frameRate : duration;
                          nFramesDelay = units === "seconds" ? delay * _frameRate : delay;
                          totalNumberOfFrames = nFrames + nFramesDelay;
                          frameIterator = nFramesDelay;
                          this.frameCount = frameIterator;
                          lastPixelDensity = this._pixelDensity;
                          this.pixelDensity(1);
                          frames = [];
                          progressBarIdName = "p5.gif.progressBar";
                          if (document.getElementById(progressBarIdName) !== null)
                            document.getElementById(progressBarIdName).remove();
                          p = this.createP("");
                          p.id("progressBar");
                          p.style("font-size", "16px");
                          p.style("font-family", "Montserrat");
                          p.style("background-color", "#ffffffa0");
                          p.style("padding", "8px");
                          p.style("border-radius", "10px");
                          p.position(0, 0);
                          if (this.drawingContext instanceof WebGLRenderingContext) {
                            gl = document.getElementById("defaultCanvas0").getContext("webgl");
                            pixels = new Uint8Array(gl.drawingBufferWidth * gl.drawingBufferHeight * 4);
                          }
                          this.noLoop();
                        case 36:
                          if (!(frameIterator < totalNumberOfFrames)) {
                            _context.next = 47;
                            break;
                          }
                          this.redraw();
                          data = void 0;
                          if (this.drawingContext instanceof WebGLRenderingContext) {
                            pixels = new Uint8Array(gl.drawingBufferWidth * gl.drawingBufferHeight * 4);
                            gl.readPixels(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
                            data = _flipPixels(pixels);
                          } else {
                            data = this.drawingContext.getImageData(0, 0, this.width, this.height).data;
                          }
                          frames.push(data);
                          frameIterator++;
                          p.html("Saved frame <b>" + frames.length.toString() + "</b> out of " + nFrames.toString());
                          _context.next = 45;
                          return new Promise(function(resolve) {
                            return setTimeout(resolve, 0);
                          });
                        case 45:
                          _context.next = 36;
                          break;
                        case 47:
                          p.html("Frames processed, generating color palette...");
                          this.loop();
                          this.pixelDensity(lastPixelDensity);
                          gif = (0, _gifenc.GIFEncoder)();
                          globalPalette = _generateGlobalPalette(frames);
                          paletteCache = {};
                          getIndexedFrame = function getIndexedFrame2(frame) {
                            var length = frame.length / 4;
                            var index = new Uint8Array(length);
                            for (var i3 = 0; i3 < length; i3++) {
                              var key2 = frame[i3 * 4] << 24 | frame[i3 * 4 + 1] << 16 | frame[i3 * 4 + 2] << 8 | frame[i3 * 4 + 3];
                              if (paletteCache[key2] === void 0) {
                                paletteCache[key2] = (0, _gifenc.nearestColorIndex)(globalPalette, frame.slice(i3 * 4, (i3 + 1) * 4));
                              }
                              index[i3] = paletteCache[key2];
                            }
                            return index;
                          };
                          transparentIndex = globalPalette.length - 1;
                          prevIndexedFrame = [];
                          i2 = 0;
                        case 57:
                          if (!(i2 < frames.length)) {
                            _context.next = 68;
                            break;
                          }
                          indexedFrame = getIndexedFrame(frames[i2]);
                          originalIndexedFrame = indexedFrame.slice();
                          if (i2 === 0) {
                            gif.writeFrame(indexedFrame, this.width, this.height, {
                              palette: globalPalette,
                              delay: gifFrameDelay,
                              dispose: 1
                            });
                          } else {
                            for (_i = 0; _i < indexedFrame.length; _i++) {
                              if (indexedFrame[_i] === prevIndexedFrame[_i]) {
                                indexedFrame[_i] = transparentIndex;
                              }
                            }
                            gif.writeFrame(indexedFrame, this.width, this.height, {
                              delay: gifFrameDelay,
                              transparent: true,
                              transparentIndex,
                              dispose: 1
                            });
                          }
                          prevIndexedFrame = originalIndexedFrame;
                          p.html("Rendered frame <b>" + i2.toString() + "</b> out of " + nFrames.toString());
                          _context.next = 65;
                          return new Promise(function(resolve) {
                            return setTimeout(resolve, 0);
                          });
                        case 65:
                          i2++;
                          _context.next = 57;
                          break;
                        case 68:
                          gif.finish();
                          buffer = gif.bytesView();
                          extension = "gif";
                          blob = new Blob([buffer], {
                            type: "image/gif"
                          });
                          frames = [];
                          this._recording = false;
                          this.loop();
                          p.html("Done. Downloading your gif!🌸");
                          _main2.default.prototype.downloadFile(blob, fileName, extension);
                        case 77:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee, this);
                })
              );
              return function(_x, _x2) {
                return _ref.apply(this, arguments);
              };
            }();
            function _flipPixels(pixels) {
              var halfHeight = parseInt(height / 2);
              var bytesPerRow = width * 4;
              var temp = new Uint8Array(width * 4);
              for (var y = 0; y < halfHeight; ++y) {
                var topOffset = y * bytesPerRow;
                var bottomOffset = (height - y - 1) * bytesPerRow;
                temp.set(pixels.subarray(topOffset, topOffset + bytesPerRow));
                pixels.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);
                pixels.set(temp, bottomOffset);
              }
              return pixels;
            }
            function _generateGlobalPalette(frames) {
              var allColors = new Uint8Array(frames.length * frames[0].length);
              for (var f = 0; f < frames.length; f++) {
                allColors.set(frames[f], f * frames[0].length);
              }
              var colorPalette = (0, _gifenc.quantize)(allColors, 256, {
                format: "rgba4444",
                oneBitAlpha: true
              });
              if (colorPalette.length === 256) {
                colorPalette[colorPalette.length - 1] = [
                  Math.random() * 255,
                  Math.random() * 255,
                  Math.random() * 255,
                  0
                ];
              } else {
                colorPalette.push([
                  Math.random() * 255,
                  Math.random() * 255,
                  Math.random() * 255,
                  0
                ]);
              }
              return colorPalette;
            }
            function _createGif(arrayBuffer, pImg, successCallback, failureCallback, finishCallback) {
              var gifReader = new _omggif.default.GifReader(arrayBuffer);
              pImg.width = pImg.canvas.width = gifReader.width;
              pImg.height = pImg.canvas.height = gifReader.height;
              var frames = [];
              var numFrames = gifReader.numFrames();
              var framePixels = new Uint8ClampedArray(pImg.width * pImg.height * 4);
              if (numFrames > 1) {
                var loadGIFFrameIntoImage = function loadGIFFrameIntoImage2(frameNum, gifReader2) {
                  try {
                    gifReader2.decodeAndBlitFrameRGBA(frameNum, framePixels);
                  } catch (e2) {
                    _main2.default._friendlyFileLoadError(8, pImg.src);
                    if (typeof failureCallback === "function") {
                      failureCallback(e2);
                    } else {
                      console.error(e2);
                    }
                  }
                };
                for (var j = 0; j < numFrames; j++) {
                  var frameInfo = gifReader.frameInfo(j);
                  var prevFrameData = pImg.drawingContext.getImageData(0, 0, pImg.width, pImg.height);
                  framePixels = prevFrameData.data.slice();
                  loadGIFFrameIntoImage(j, gifReader);
                  var imageData = new ImageData(framePixels, pImg.width, pImg.height);
                  pImg.drawingContext.putImageData(imageData, 0, 0);
                  var frameDelay = frameInfo.delay;
                  if (frameDelay === 0) {
                    frameDelay = 10;
                  }
                  frames.push({
                    image: pImg.drawingContext.getImageData(0, 0, pImg.width, pImg.height),
                    delay: frameDelay * 10
                    //GIF stores delay in one-hundredth of a second, shift to ms
                  });
                  if (frameInfo.disposal === 2) {
                    pImg.drawingContext.clearRect(frameInfo.x, frameInfo.y, frameInfo.width, frameInfo.height);
                  } else if (frameInfo.disposal === 3) {
                    pImg.drawingContext.putImageData(prevFrameData, 0, 0, frameInfo.x, frameInfo.y, frameInfo.width, frameInfo.height);
                  }
                }
                var loopLimit = gifReader.loopCount();
                if (loopLimit === null) {
                  loopLimit = 1;
                } else if (loopLimit === 0) {
                  loopLimit = null;
                }
                pImg.drawingContext.putImageData(frames[0].image, 0, 0);
                pImg.gifProperties = {
                  displayIndex: 0,
                  loopLimit,
                  loopCount: 0,
                  frames,
                  numFrames,
                  playing: true,
                  timeDisplayed: 0,
                  lastChangeTime: 0
                };
              }
              if (typeof successCallback === "function") {
                successCallback(pImg);
              }
              finishCallback();
            }
            function _imageContain(xAlign, yAlign, dx, dy, dw, dh, sw, sh) {
              var r = Math.max(sw / dw, sh / dh);
              var adjusted_dw = sw / r, adjusted_dh = sh / r;
              var x = dx;
              var y = dy;
              if (xAlign === constants2.CENTER) {
                x += (dw - adjusted_dw) / 2;
              } else if (xAlign === constants2.RIGHT) {
                x += dw - adjusted_dw;
              }
              if (yAlign === constants2.CENTER) {
                y += (dh - adjusted_dh) / 2;
              } else if (yAlign === constants2.BOTTOM) {
                y += dh - adjusted_dh;
              }
              return {
                x,
                y,
                w: adjusted_dw,
                h: adjusted_dh
              };
            }
            function _imageCover(xAlign, yAlign, dw, dh, sx, sy, sw, sh) {
              var r = Math.max(dw / sw, dh / sh);
              var adjusted_sw = dw / r, adjusted_sh = dh / r;
              var x = sx;
              var y = sy;
              if (xAlign === constants2.CENTER) {
                x += (sw - adjusted_sw) / 2;
              } else if (xAlign === constants2.RIGHT) {
                x += sw - adjusted_sw;
              }
              if (yAlign === constants2.CENTER) {
                y += (sh - adjusted_sh) / 2;
              } else if (yAlign === constants2.BOTTOM) {
                y += sh - adjusted_sh;
              }
              return {
                x,
                y,
                w: adjusted_sw,
                h: adjusted_sh
              };
            }
            function _imageFit(fit, xAlign, yAlign, dx, dy, dw, dh, sx, sy, sw, sh) {
              if (fit === constants2.COVER) {
                var _imageCover2 = _imageCover(xAlign, yAlign, dw, dh, sx, sy, sw, sh), x = _imageCover2.x, y = _imageCover2.y, w = _imageCover2.w, h = _imageCover2.h;
                sx = x;
                sy = y;
                sw = w;
                sh = h;
              }
              if (fit === constants2.CONTAIN) {
                var _imageContain2 = _imageContain(xAlign, yAlign, dx, dy, dw, dh, sw, sh), _x3 = _imageContain2.x, _y = _imageContain2.y, _w = _imageContain2.w, _h = _imageContain2.h;
                dx = _x3;
                dy = _y;
                dw = _w;
                dh = _h;
              }
              return {
                sx,
                sy,
                sw,
                sh,
                dx,
                dy,
                dw,
                dh
              };
            }
            function _sAssign(sVal, iVal) {
              if (sVal > 0 && sVal < iVal) {
                return sVal;
              } else {
                return iVal;
              }
            }
            _main2.default.prototype.image = function(img, dx, dy, dWidth, dHeight, sx, sy, sWidth, sHeight, fit, xAlign, yAlign) {
              _main2.default._validateParameters("image", arguments);
              var defW = img.width;
              var defH = img.height;
              yAlign = yAlign || constants2.CENTER;
              xAlign = xAlign || constants2.CENTER;
              if (img.elt && img.elt.videoWidth && !img.canvas) {
                defW = img.elt.videoWidth;
                defH = img.elt.videoHeight;
              }
              var _dx = dx;
              var _dy = dy;
              var _dw = dWidth || defW;
              var _dh = dHeight || defH;
              var _sx = sx || 0;
              var _sy = sy || 0;
              var _sw = sWidth || defW;
              var _sh = sHeight || defH;
              _sw = _sAssign(_sw, defW);
              _sh = _sAssign(_sh, defH);
              var pd = 1;
              if (img.elt && !img.canvas && img.elt.style.width) {
                if (img.elt.videoWidth && !dWidth) {
                  pd = img.elt.videoWidth;
                } else {
                  pd = img.elt.width;
                }
                pd /= parseInt(img.elt.style.width, 10);
              }
              _sx *= pd;
              _sy *= pd;
              _sh *= pd;
              _sw *= pd;
              var vals = _helpers.default.modeAdjust(_dx, _dy, _dw, _dh, this._renderer._imageMode);
              vals = _imageFit(fit, xAlign, yAlign, vals.x, vals.y, vals.w, vals.h, _sx, _sy, _sw, _sh);
              this._renderer.image(img, vals.sx, vals.sy, vals.sw, vals.sh, vals.dx, vals.dy, vals.dw, vals.dh);
            };
            _main2.default.prototype.tint = function() {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              _main2.default._validateParameters("tint", args);
              var c = this.color.apply(this, args);
              this._renderer._tint = c.levels;
            };
            _main2.default.prototype.noTint = function() {
              this._renderer._tint = null;
            };
            _main2.default.prototype._getTintedImageCanvas = _main2.default.Renderer2D.prototype._getTintedImageCanvas;
            _main2.default.prototype.imageMode = function(m) {
              _main2.default._validateParameters("imageMode", arguments);
              if (m === constants2.CORNER || m === constants2.CORNERS || m === constants2.CENTER) {
                this._renderer._imageMode = m;
              }
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/constants": 278,
            "../core/friendly_errors/fes_core": 281,
            "../core/friendly_errors/file_errors": 282,
            "../core/friendly_errors/validate_params": 285,
            "../core/helpers": 286,
            "../core/main": 290,
            "core-js/modules/es.array.copy-within": 168,
            "core-js/modules/es.array.includes": 174,
            "core-js/modules/es.array.index-of": 175,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.promise": 196,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.string.includes": 203,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.typed-array.copy-within": 215,
            "core-js/modules/es.typed-array.every": 216,
            "core-js/modules/es.typed-array.fill": 217,
            "core-js/modules/es.typed-array.filter": 218,
            "core-js/modules/es.typed-array.find": 220,
            "core-js/modules/es.typed-array.find-index": 219,
            "core-js/modules/es.typed-array.for-each": 223,
            "core-js/modules/es.typed-array.includes": 224,
            "core-js/modules/es.typed-array.index-of": 225,
            "core-js/modules/es.typed-array.iterator": 228,
            "core-js/modules/es.typed-array.join": 229,
            "core-js/modules/es.typed-array.last-index-of": 230,
            "core-js/modules/es.typed-array.map": 231,
            "core-js/modules/es.typed-array.reduce": 233,
            "core-js/modules/es.typed-array.reduce-right": 232,
            "core-js/modules/es.typed-array.reverse": 234,
            "core-js/modules/es.typed-array.set": 235,
            "core-js/modules/es.typed-array.slice": 236,
            "core-js/modules/es.typed-array.some": 237,
            "core-js/modules/es.typed-array.sort": 238,
            "core-js/modules/es.typed-array.subarray": 239,
            "core-js/modules/es.typed-array.to-locale-string": 240,
            "core-js/modules/es.typed-array.to-string": 241,
            "core-js/modules/es.typed-array.uint8-array": 244,
            "core-js/modules/es.typed-array.uint8-clamped-array": 245,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248,
            "gifenc": 255,
            "omggif": 262,
            "regenerator-runtime/runtime": 266
          }
        ],
        314: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var _filters = _interopRequireDefault2(_dereq_2("./filters"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.Image = function(width2, height2) {
              this.width = width2;
              this.height = height2;
              this.canvas = document.createElement("canvas");
              this.canvas.width = this.width;
              this.canvas.height = this.height;
              this.drawingContext = this.canvas.getContext("2d");
              this._pixelsState = this;
              this._pixelDensity = 1;
              this.gifProperties = null;
              this._modified = false;
              this.pixels = [];
            };
            _main2.default.Image.prototype._animateGif = function(pInst) {
              var props = this.gifProperties;
              var curTime = pInst._lastFrameTime;
              if (props.lastChangeTime === 0) {
                props.lastChangeTime = curTime;
              }
              if (props.playing) {
                props.timeDisplayed = curTime - props.lastChangeTime;
                var curDelay = props.frames[props.displayIndex].delay;
                if (props.timeDisplayed >= curDelay) {
                  var skips = Math.floor(props.timeDisplayed / curDelay);
                  props.timeDisplayed = 0;
                  props.lastChangeTime = curTime;
                  props.displayIndex += skips;
                  props.loopCount = Math.floor(props.displayIndex / props.numFrames);
                  if (props.loopLimit !== null && props.loopCount >= props.loopLimit) {
                    props.playing = false;
                  } else {
                    var ind = props.displayIndex % props.numFrames;
                    this.drawingContext.putImageData(props.frames[ind].image, 0, 0);
                    props.displayIndex = ind;
                    this.setModified(true);
                  }
                }
              }
            };
            _main2.default.Image.prototype._setProperty = function(prop, value) {
              this[prop] = value;
              this.setModified(true);
            };
            _main2.default.Image.prototype.loadPixels = function() {
              _main2.default.Renderer2D.prototype.loadPixels.call(this);
              this.setModified(true);
            };
            _main2.default.Image.prototype.updatePixels = function(x, y, w, h) {
              _main2.default.Renderer2D.prototype.updatePixels.call(this, x, y, w, h);
              this.setModified(true);
            };
            _main2.default.Image.prototype.get = function(x, y, w, h) {
              _main2.default._validateParameters("p5.Image.get", arguments);
              return _main2.default.Renderer2D.prototype.get.apply(this, arguments);
            };
            _main2.default.Image.prototype._getPixel = _main2.default.Renderer2D.prototype._getPixel;
            _main2.default.Image.prototype.set = function(x, y, imgOrCol) {
              _main2.default.Renderer2D.prototype.set.call(this, x, y, imgOrCol);
              this.setModified(true);
            };
            _main2.default.Image.prototype.resize = function(width2, height2) {
              if (width2 === 0 && height2 === 0) {
                width2 = this.canvas.width;
                height2 = this.canvas.height;
              } else if (width2 === 0) {
                width2 = this.canvas.width * height2 / this.canvas.height;
              } else if (height2 === 0) {
                height2 = this.canvas.height * width2 / this.canvas.width;
              }
              width2 = Math.floor(width2);
              height2 = Math.floor(height2);
              var tempCanvas = document.createElement("canvas");
              tempCanvas.width = width2;
              tempCanvas.height = height2;
              if (this.gifProperties) {
                var props = this.gifProperties;
                var nearestNeighbor = function nearestNeighbor2(src, dst) {
                  var pos = 0;
                  for (var y = 0; y < dst.height; y++) {
                    for (var x = 0; x < dst.width; x++) {
                      var srcX = Math.floor(x * src.width / dst.width);
                      var srcY = Math.floor(y * src.height / dst.height);
                      var srcPos = (srcY * src.width + srcX) * 4;
                      dst.data[pos++] = src.data[srcPos++];
                      dst.data[pos++] = src.data[srcPos++];
                      dst.data[pos++] = src.data[srcPos++];
                      dst.data[pos++] = src.data[srcPos++];
                    }
                  }
                };
                for (var i2 = 0; i2 < props.numFrames; i2++) {
                  var resizedImageData = this.drawingContext.createImageData(width2, height2);
                  nearestNeighbor(props.frames[i2].image, resizedImageData);
                  props.frames[i2].image = resizedImageData;
                }
              }
              tempCanvas.getContext("2d").drawImage(this.canvas, 0, 0, this.canvas.width, this.canvas.height, 0, 0, tempCanvas.width, tempCanvas.height);
              this.canvas.width = this.width = width2;
              this.canvas.height = this.height = height2;
              this.drawingContext.drawImage(tempCanvas, 0, 0, width2, height2, 0, 0, width2, height2);
              if (this.pixels.length > 0) {
                this.loadPixels();
              }
              this.setModified(true);
            };
            _main2.default.Image.prototype.copy = function() {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              _main2.default.prototype.copy.apply(this, args);
            };
            _main2.default.Image.prototype.mask = function(p5Image) {
              if (p5Image === void 0) {
                p5Image = this;
              }
              var currBlend = this.drawingContext.globalCompositeOperation;
              var scaleFactor = 1;
              if (p5Image instanceof _main2.default.Renderer) {
                scaleFactor = p5Image._pInst._pixelDensity;
              }
              var copyArgs = [
                p5Image,
                0,
                0,
                scaleFactor * p5Image.width,
                scaleFactor * p5Image.height,
                0,
                0,
                this.width,
                this.height
              ];
              this.drawingContext.globalCompositeOperation = "destination-in";
              if (this.gifProperties) {
                for (var i2 = 0; i2 < this.gifProperties.frames.length; i2++) {
                  this.drawingContext.putImageData(this.gifProperties.frames[i2].image, 0, 0);
                  _main2.default.Image.prototype.copy.apply(this, copyArgs);
                  this.gifProperties.frames[i2].image = this.drawingContext.getImageData(0, 0, this.width, this.height);
                }
                this.drawingContext.putImageData(this.gifProperties.frames[this.gifProperties.displayIndex].image, 0, 0);
              } else {
                _main2.default.Image.prototype.copy.apply(this, copyArgs);
              }
              this.drawingContext.globalCompositeOperation = currBlend;
              this.setModified(true);
            };
            _main2.default.Image.prototype.filter = function(operation, value) {
              _filters.default.apply(this.canvas, _filters.default[operation], value);
              this.setModified(true);
            };
            _main2.default.Image.prototype.blend = function() {
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }
              _main2.default._validateParameters("p5.Image.blend", arguments);
              _main2.default.prototype.blend.apply(this, args);
              this.setModified(true);
            };
            _main2.default.Image.prototype.setModified = function(val) {
              this._modified = val;
            };
            _main2.default.Image.prototype.isModified = function() {
              return this._modified;
            };
            _main2.default.Image.prototype.save = function(filename, extension) {
              if (this.gifProperties) {
                _main2.default.prototype.encodeAndDownloadGif(this, filename);
              } else {
                _main2.default.prototype.saveCanvas(this.canvas, filename, extension);
              }
            };
            _main2.default.Image.prototype.reset = function() {
              if (this.gifProperties) {
                var props = this.gifProperties;
                props.playing = true;
                props.timeSinceStart = 0;
                props.timeDisplayed = 0;
                props.lastChangeTime = 0;
                props.loopCount = 0;
                props.displayIndex = 0;
                this.drawingContext.putImageData(props.frames[0].image, 0, 0);
              }
            };
            _main2.default.Image.prototype.getCurrentFrame = function() {
              if (this.gifProperties) {
                var props = this.gifProperties;
                return props.displayIndex % props.numFrames;
              }
            };
            _main2.default.Image.prototype.setFrame = function(index) {
              if (this.gifProperties) {
                var props = this.gifProperties;
                if (index < props.numFrames && index >= 0) {
                  props.timeDisplayed = 0;
                  props.lastChangeTime = 0;
                  props.displayIndex = index;
                  this.drawingContext.putImageData(props.frames[index].image, 0, 0);
                } else {
                  console.log("Cannot set GIF to a frame number that is higher than total number of frames or below zero.");
                }
              }
            };
            _main2.default.Image.prototype.numFrames = function() {
              if (this.gifProperties) {
                return this.gifProperties.numFrames;
              }
            };
            _main2.default.Image.prototype.play = function() {
              if (this.gifProperties) {
                this.gifProperties.playing = true;
              }
            };
            _main2.default.Image.prototype.pause = function() {
              if (this.gifProperties) {
                this.gifProperties.playing = false;
              }
            };
            _main2.default.Image.prototype.delay = function(d, index) {
              if (this.gifProperties) {
                var props = this.gifProperties;
                if (index < props.numFrames && index >= 0) {
                  props.frames[index].delay = d;
                } else {
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = void 0;
                  try {
                    for (var _iterator = props.frames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var frame = _step.value;
                      frame.delay = d;
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }
                }
              }
            };
            var _default2 = _main2.default.Image;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "./filters": 311,
            "core-js/modules/es.array.filter": 171,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        315: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.filter");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var _filters = _interopRequireDefault2(_dereq_2("./filters"));
            _dereq_2("../color/p5.Color");
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.pixels = [];
            _main2.default.prototype.blend = function() {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              _main2.default._validateParameters("blend", args);
              if (this._renderer) {
                var _this$_renderer;
                (_this$_renderer = this._renderer).blend.apply(_this$_renderer, args);
              } else {
                _main2.default.Renderer2D.prototype.blend.apply(this, args);
              }
            };
            _main2.default.prototype.copy = function() {
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }
              _main2.default._validateParameters("copy", args);
              var srcImage, sx, sy, sw, sh, dx, dy, dw, dh;
              if (args.length === 9) {
                srcImage = args[0];
                sx = args[1];
                sy = args[2];
                sw = args[3];
                sh = args[4];
                dx = args[5];
                dy = args[6];
                dw = args[7];
                dh = args[8];
              } else if (args.length === 8) {
                srcImage = this;
                sx = args[0];
                sy = args[1];
                sw = args[2];
                sh = args[3];
                dx = args[4];
                dy = args[5];
                dw = args[6];
                dh = args[7];
              } else {
                throw new Error("Signature not supported");
              }
              _main2.default.prototype._copyHelper(this, srcImage, sx, sy, sw, sh, dx, dy, dw, dh);
            };
            _main2.default.prototype._copyHelper = function(dstImage, srcImage, sx, sy, sw, sh, dx, dy, dw, dh) {
              srcImage.loadPixels();
              var s = srcImage.canvas.width / srcImage.width;
              var sxMod = 0;
              var syMod = 0;
              if (srcImage._renderer && srcImage._renderer.isP3D) {
                sxMod = srcImage.width / 2;
                syMod = srcImage.height / 2;
              }
              if (dstImage._renderer && dstImage._renderer.isP3D) {
                _main2.default.RendererGL.prototype.image.call(dstImage._renderer, srcImage, sx + sxMod, sy + syMod, sw, sh, dx, dy, dw, dh);
              } else {
                dstImage.drawingContext.drawImage(srcImage.canvas, s * (sx + sxMod), s * (sy + syMod), s * sw, s * sh, dx, dy, dw, dh);
              }
            };
            _main2.default.prototype.filter = function(operation, value) {
              _main2.default._validateParameters("filter", arguments);
              if (this.canvas !== void 0) {
                _filters.default.apply(this.canvas, _filters.default[operation], value);
              } else {
                _filters.default.apply(this.elt, _filters.default[operation], value);
              }
            };
            _main2.default.prototype.get = function(x, y, w, h) {
              var _this$_renderer2;
              _main2.default._validateParameters("get", arguments);
              return (_this$_renderer2 = this._renderer).get.apply(_this$_renderer2, arguments);
            };
            _main2.default.prototype.loadPixels = function() {
              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
              }
              _main2.default._validateParameters("loadPixels", args);
              this._renderer.loadPixels();
            };
            _main2.default.prototype.set = function(x, y, imgOrCol) {
              this._renderer.set(x, y, imgOrCol);
            };
            _main2.default.prototype.updatePixels = function(x, y, w, h) {
              _main2.default._validateParameters("updatePixels", arguments);
              if (this.pixels.length === 0) {
                return;
              }
              this._renderer.updatePixels(x, y, w, h);
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../color/p5.Color": 276,
            "../core/main": 290,
            "./filters": 311,
            "core-js/modules/es.array.filter": 171
          }
        ],
        316: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.last-index-of");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.array.splice");
            _dereq_2("core-js/modules/es.function.name");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.promise");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.includes");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.replace");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.typed-array.uint8-array");
            _dereq_2("core-js/modules/es.typed-array.copy-within");
            _dereq_2("core-js/modules/es.typed-array.every");
            _dereq_2("core-js/modules/es.typed-array.fill");
            _dereq_2("core-js/modules/es.typed-array.filter");
            _dereq_2("core-js/modules/es.typed-array.find");
            _dereq_2("core-js/modules/es.typed-array.find-index");
            _dereq_2("core-js/modules/es.typed-array.for-each");
            _dereq_2("core-js/modules/es.typed-array.includes");
            _dereq_2("core-js/modules/es.typed-array.index-of");
            _dereq_2("core-js/modules/es.typed-array.iterator");
            _dereq_2("core-js/modules/es.typed-array.join");
            _dereq_2("core-js/modules/es.typed-array.last-index-of");
            _dereq_2("core-js/modules/es.typed-array.map");
            _dereq_2("core-js/modules/es.typed-array.reduce");
            _dereq_2("core-js/modules/es.typed-array.reduce-right");
            _dereq_2("core-js/modules/es.typed-array.reverse");
            _dereq_2("core-js/modules/es.typed-array.set");
            _dereq_2("core-js/modules/es.typed-array.slice");
            _dereq_2("core-js/modules/es.typed-array.some");
            _dereq_2("core-js/modules/es.typed-array.sort");
            _dereq_2("core-js/modules/es.typed-array.subarray");
            _dereq_2("core-js/modules/es.typed-array.to-locale-string");
            _dereq_2("core-js/modules/es.typed-array.to-string");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            _dereq_2("core-js/modules/web.url");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.last-index-of");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.array.splice");
            _dereq_2("core-js/modules/es.function.name");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.promise");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.includes");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.replace");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.typed-array.uint8-array");
            _dereq_2("core-js/modules/es.typed-array.copy-within");
            _dereq_2("core-js/modules/es.typed-array.every");
            _dereq_2("core-js/modules/es.typed-array.fill");
            _dereq_2("core-js/modules/es.typed-array.filter");
            _dereq_2("core-js/modules/es.typed-array.find");
            _dereq_2("core-js/modules/es.typed-array.find-index");
            _dereq_2("core-js/modules/es.typed-array.for-each");
            _dereq_2("core-js/modules/es.typed-array.includes");
            _dereq_2("core-js/modules/es.typed-array.index-of");
            _dereq_2("core-js/modules/es.typed-array.iterator");
            _dereq_2("core-js/modules/es.typed-array.join");
            _dereq_2("core-js/modules/es.typed-array.last-index-of");
            _dereq_2("core-js/modules/es.typed-array.map");
            _dereq_2("core-js/modules/es.typed-array.reduce");
            _dereq_2("core-js/modules/es.typed-array.reduce-right");
            _dereq_2("core-js/modules/es.typed-array.reverse");
            _dereq_2("core-js/modules/es.typed-array.set");
            _dereq_2("core-js/modules/es.typed-array.slice");
            _dereq_2("core-js/modules/es.typed-array.some");
            _dereq_2("core-js/modules/es.typed-array.sort");
            _dereq_2("core-js/modules/es.typed-array.subarray");
            _dereq_2("core-js/modules/es.typed-array.to-locale-string");
            _dereq_2("core-js/modules/es.typed-array.to-string");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            _dereq_2("core-js/modules/web.url");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            _dereq_2("whatwg-fetch");
            _dereq_2("es6-promise/auto");
            var _fetchJsonp = _interopRequireDefault2(_dereq_2("fetch-jsonp"));
            var _fileSaver = _interopRequireDefault2(_dereq_2("file-saver"));
            _dereq_2("../core/friendly_errors/validate_params");
            _dereq_2("../core/friendly_errors/file_errors");
            _dereq_2("../core/friendly_errors/fes_core");
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _main2.default.prototype.loadJSON = function() {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              _main2.default._validateParameters("loadJSON", args);
              var path = args[0];
              var callback;
              var errorCallback;
              var options;
              var ret = {};
              var t = "json";
              for (var i2 = 1; i2 < args.length; i2++) {
                var arg = args[i2];
                if (typeof arg === "string") {
                  if (arg === "jsonp" || arg === "json") {
                    t = arg;
                  }
                } else if (typeof arg === "function") {
                  if (!callback) {
                    callback = arg;
                  } else {
                    errorCallback = arg;
                  }
                } else if (_typeof3(arg) === "object" && (arg.hasOwnProperty("jsonpCallback") || arg.hasOwnProperty("jsonpCallbackFunction"))) {
                  t = "jsonp";
                  options = arg;
                }
              }
              var self2 = this;
              this.httpDo(path, "GET", options, t, function(resp) {
                for (var k2 in resp) {
                  ret[k2] = resp[k2];
                }
                if (typeof callback !== "undefined") {
                  callback(resp);
                }
                self2._decrementPreload();
              }, function(err) {
                _main2.default._friendlyFileLoadError(5, path);
                if (errorCallback) {
                  errorCallback(err);
                } else {
                  throw err;
                }
              });
              return ret;
            };
            _main2.default.prototype.loadStrings = function() {
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }
              _main2.default._validateParameters("loadStrings", args);
              var ret = [];
              var callback, errorCallback;
              for (var i2 = 1; i2 < args.length; i2++) {
                var arg = args[i2];
                if (typeof arg === "function") {
                  if (typeof callback === "undefined") {
                    callback = arg;
                  } else if (typeof errorCallback === "undefined") {
                    errorCallback = arg;
                  }
                }
              }
              var self2 = this;
              _main2.default.prototype.httpDo.call(this, args[0], "GET", "text", function(data) {
                var lines = data.replace(/\r\n/g, "\r").replace(/\n/g, "\r").split(/\r/);
                var QUANTUM = 32768;
                for (var _i = 0, len = lines.length; _i < len; _i += QUANTUM) {
                  Array.prototype.push.apply(ret, lines.slice(_i, Math.min(_i + QUANTUM, len)));
                }
                if (typeof callback !== "undefined") {
                  callback(ret);
                }
                self2._decrementPreload();
              }, function(err) {
                _main2.default._friendlyFileLoadError(3, arguments[0]);
                if (errorCallback) {
                  errorCallback(err);
                } else {
                  throw err;
                }
              });
              return ret;
            };
            _main2.default.prototype.loadTable = function(path) {
              var callback;
              var errorCallback;
              var options = [];
              var header = false;
              var ext = path.substring(path.lastIndexOf(".") + 1, path.length);
              var sep;
              if (ext === "csv") {
                sep = ",";
              } else if (ext === "ssv") {
                sep = ";";
              } else if (ext === "tsv") {
                sep = "	";
              }
              for (var i2 = 1; i2 < arguments.length; i2++) {
                if (typeof arguments[i2] === "function") {
                  if (typeof callback === "undefined") {
                    callback = arguments[i2];
                  } else if (typeof errorCallback === "undefined") {
                    errorCallback = arguments[i2];
                  }
                } else if (typeof arguments[i2] === "string") {
                  options.push(arguments[i2]);
                  if (arguments[i2] === "header") {
                    header = true;
                  }
                  if (arguments[i2] === "csv") {
                    sep = ",";
                  } else if (arguments[i2] === "ssv") {
                    sep = ";";
                  } else if (arguments[i2] === "tsv") {
                    sep = "	";
                  }
                }
              }
              var t = new _main2.default.Table();
              var self2 = this;
              this.httpDo(path, "GET", "table", function(resp) {
                var state = {};
                var PRE_TOKEN = 0, MID_TOKEN = 1, POST_TOKEN = 2, POST_RECORD = 4;
                var QUOTE = '"', CR = "\r", LF = "\n";
                var records = [];
                var offset = 0;
                var currentRecord = null;
                var currentChar;
                var tokenBegin = function tokenBegin2() {
                  state.currentState = PRE_TOKEN;
                  state.token = "";
                };
                var tokenEnd = function tokenEnd2() {
                  currentRecord.push(state.token);
                  tokenBegin();
                };
                var recordBegin = function recordBegin2() {
                  state.escaped = false;
                  currentRecord = [];
                  tokenBegin();
                };
                var recordEnd = function recordEnd2() {
                  state.currentState = POST_RECORD;
                  records.push(currentRecord);
                  currentRecord = null;
                };
                for (; ; ) {
                  currentChar = resp[offset++];
                  if (currentChar == null) {
                    if (state.escaped) {
                      throw new Error("Unclosed quote in file.");
                    }
                    if (currentRecord) {
                      tokenEnd();
                      recordEnd();
                      break;
                    }
                  }
                  if (currentRecord === null) {
                    recordBegin();
                  }
                  if (state.currentState === PRE_TOKEN) {
                    if (currentChar === QUOTE) {
                      state.escaped = true;
                      state.currentState = MID_TOKEN;
                      continue;
                    }
                    state.currentState = MID_TOKEN;
                  }
                  if (state.currentState === MID_TOKEN && state.escaped) {
                    if (currentChar === QUOTE) {
                      if (resp[offset] === QUOTE) {
                        state.token += QUOTE;
                        offset++;
                      } else {
                        state.escaped = false;
                        state.currentState = POST_TOKEN;
                      }
                    } else if (currentChar === CR) {
                      continue;
                    } else {
                      state.token += currentChar;
                    }
                    continue;
                  }
                  if (currentChar === CR) {
                    if (resp[offset] === LF) {
                      offset++;
                    }
                    tokenEnd();
                    recordEnd();
                  } else if (currentChar === LF) {
                    tokenEnd();
                    recordEnd();
                  } else if (currentChar === sep) {
                    tokenEnd();
                  } else if (state.currentState === MID_TOKEN) {
                    state.token += currentChar;
                  }
                }
                if (header) {
                  t.columns = records.shift();
                } else {
                  for (var _i2 = 0; _i2 < records[0].length; _i2++) {
                    t.columns[_i2] = "null";
                  }
                }
                var row;
                for (var _i32 = 0; _i32 < records.length; _i32++) {
                  if (records[_i32].length === 1) {
                    if (records[_i32][0] === "undefined" || records[_i32][0] === "") {
                      continue;
                    }
                  }
                  row = new _main2.default.TableRow();
                  row.arr = records[_i32];
                  row.obj = makeObject(records[_i32], t.columns);
                  t.addRow(row);
                }
                if (typeof callback === "function") {
                  callback(t);
                }
                self2._decrementPreload();
              }, function(err) {
                _main2.default._friendlyFileLoadError(2, path);
                if (errorCallback) {
                  errorCallback(err);
                } else {
                  console.error(err);
                }
              });
              return t;
            };
            function makeObject(row, headers) {
              var ret = {};
              headers = headers || [];
              if (typeof headers === "undefined") {
                for (var j = 0; j < row.length; j++) {
                  headers[j.toString()] = j;
                }
              }
              for (var i2 = 0; i2 < headers.length; i2++) {
                var key2 = headers[i2];
                var val = row[i2];
                ret[key2] = val;
              }
              return ret;
            }
            _main2.default.prototype.loadXML = function() {
              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
              }
              var ret = new _main2.default.XML();
              var callback, errorCallback;
              for (var i2 = 1; i2 < args.length; i2++) {
                var arg = args[i2];
                if (typeof arg === "function") {
                  if (typeof callback === "undefined") {
                    callback = arg;
                  } else if (typeof errorCallback === "undefined") {
                    errorCallback = arg;
                  }
                }
              }
              var self2 = this;
              this.httpDo(args[0], "GET", "xml", function(xml) {
                for (var key2 in xml) {
                  ret[key2] = xml[key2];
                }
                if (typeof callback !== "undefined") {
                  callback(ret);
                }
                self2._decrementPreload();
              }, function(err) {
                _main2.default._friendlyFileLoadError(1, arguments[0]);
                if (errorCallback) {
                  errorCallback(err);
                } else {
                  throw err;
                }
              });
              return ret;
            };
            _main2.default.prototype.loadBytes = function(file, callback, errorCallback) {
              var ret = {};
              var self2 = this;
              this.httpDo(file, "GET", "arrayBuffer", function(arrayBuffer) {
                ret.bytes = new Uint8Array(arrayBuffer);
                if (typeof callback === "function") {
                  callback(ret);
                }
                self2._decrementPreload();
              }, function(err) {
                _main2.default._friendlyFileLoadError(6, file);
                if (errorCallback) {
                  errorCallback(err);
                } else {
                  throw err;
                }
              });
              return ret;
            };
            _main2.default.prototype.httpGet = function() {
              _main2.default._validateParameters("httpGet", arguments);
              var args = Array.prototype.slice.call(arguments);
              args.splice(1, 0, "GET");
              return _main2.default.prototype.httpDo.apply(this, args);
            };
            _main2.default.prototype.httpPost = function() {
              _main2.default._validateParameters("httpPost", arguments);
              var args = Array.prototype.slice.call(arguments);
              args.splice(1, 0, "POST");
              return _main2.default.prototype.httpDo.apply(this, args);
            };
            _main2.default.prototype.httpDo = function() {
              var type;
              var callback;
              var errorCallback;
              var request;
              var promise;
              var jsonpOptions = {};
              var cbCount = 0;
              var contentType = "text/plain";
              for (var i2 = arguments.length - 1; i2 > 0; i2--) {
                if (typeof (i2 < 0 || arguments.length <= i2 ? void 0 : arguments[i2]) === "function") {
                  cbCount++;
                } else {
                  break;
                }
              }
              var argsCount = arguments.length - cbCount;
              var path = arguments.length <= 0 ? void 0 : arguments[0];
              if (argsCount === 2 && typeof path === "string" && _typeof3(arguments.length <= 1 ? void 0 : arguments[1]) === "object") {
                request = new Request(path, arguments.length <= 1 ? void 0 : arguments[1]);
                callback = arguments.length <= 2 ? void 0 : arguments[2];
                errorCallback = arguments.length <= 3 ? void 0 : arguments[3];
              } else {
                var method = "GET";
                var data;
                for (var j = 1; j < arguments.length; j++) {
                  var a = j < 0 || arguments.length <= j ? void 0 : arguments[j];
                  if (typeof a === "string") {
                    if (a === "GET" || a === "POST" || a === "PUT" || a === "DELETE") {
                      method = a;
                    } else if (a === "json" || a === "jsonp" || a === "binary" || a === "arrayBuffer" || a === "xml" || a === "text" || a === "table") {
                      type = a;
                    } else {
                      data = a;
                    }
                  } else if (typeof a === "number") {
                    data = a.toString();
                  } else if (_typeof3(a) === "object") {
                    if (a.hasOwnProperty("jsonpCallback") || a.hasOwnProperty("jsonpCallbackFunction")) {
                      for (var attr in a) {
                        jsonpOptions[attr] = a[attr];
                      }
                    } else if (a instanceof _main2.default.XML) {
                      data = a.serialize();
                      contentType = "application/xml";
                    } else {
                      data = JSON.stringify(a);
                      contentType = "application/json";
                    }
                  } else if (typeof a === "function") {
                    if (!callback) {
                      callback = a;
                    } else {
                      errorCallback = a;
                    }
                  }
                }
                var headers = method === "GET" ? new Headers() : new Headers({
                  "Content-Type": contentType
                });
                request = new Request(path, {
                  method,
                  mode: "cors",
                  body: data,
                  headers
                });
              }
              if (!type) {
                if (path.includes("json")) {
                  type = "json";
                } else if (path.includes("xml")) {
                  type = "xml";
                } else {
                  type = "text";
                }
              }
              if (type === "jsonp") {
                promise = (0, _fetchJsonp.default)(path, jsonpOptions);
              } else {
                promise = fetch(request);
              }
              promise = promise.then(function(res) {
                if (!res.ok) {
                  var err = new Error(res.body);
                  err.status = res.status;
                  err.ok = false;
                  throw err;
                } else {
                  var fileSize = 0;
                  if (type !== "jsonp") {
                    fileSize = res.headers.get("content-length");
                  }
                  if (fileSize && fileSize > 64e6) {
                    _main2.default._friendlyFileLoadError(7, path);
                  }
                  switch (type) {
                    case "json":
                    case "jsonp":
                      return res.json();
                    case "binary":
                      return res.blob();
                    case "arrayBuffer":
                      return res.arrayBuffer();
                    case "xml":
                      return res.text().then(function(text) {
                        var parser = new DOMParser();
                        var xml = parser.parseFromString(text, "text/xml");
                        return new _main2.default.XML(xml.documentElement);
                      });
                    default:
                      return res.text();
                  }
                }
              });
              promise.then(callback || function() {
              });
              promise.catch(errorCallback || console.error);
              return promise;
            };
            window.URL = window.URL || window.webkitURL;
            _main2.default.prototype._pWriters = [];
            _main2.default.prototype.createWriter = function(name, extension) {
              var newPW;
              for (var i2 in _main2.default.prototype._pWriters) {
                if (_main2.default.prototype._pWriters[i2].name === name) {
                  newPW = new _main2.default.PrintWriter(name + this.millis(), extension);
                  _main2.default.prototype._pWriters.push(newPW);
                  return newPW;
                }
              }
              newPW = new _main2.default.PrintWriter(name, extension);
              _main2.default.prototype._pWriters.push(newPW);
              return newPW;
            };
            _main2.default.PrintWriter = function(filename, extension) {
              var self2 = this;
              this.name = filename;
              this.content = "";
              this.write = function(data) {
                this.content += data;
              };
              this.print = function(data) {
                this.content += "".concat(data, "\n");
              };
              this.clear = function() {
                this.content = "";
              };
              this.close = function() {
                var arr = [];
                arr.push(this.content);
                _main2.default.prototype.writeFile(arr, filename, extension);
                for (var i2 in _main2.default.prototype._pWriters) {
                  if (_main2.default.prototype._pWriters[i2].name === this.name) {
                    _main2.default.prototype._pWriters.splice(i2, 1);
                  }
                }
                self2.clear();
                self2 = {};
              };
            };
            _main2.default.prototype.save = function(object, _filename, _options) {
              var args = arguments;
              var cnv = this._curElement ? this._curElement.elt : this.elt;
              if (args.length === 0) {
                _main2.default.prototype.saveCanvas(cnv);
                return;
              } else if (args[0] instanceof _main2.default.Renderer || args[0] instanceof _main2.default.Graphics) {
                _main2.default.prototype.saveCanvas(args[0].elt, args[1], args[2]);
                return;
              } else if (args.length === 1 && typeof args[0] === "string") {
                _main2.default.prototype.saveCanvas(cnv, args[0]);
              } else {
                var extension = _checkFileExtension(args[1], args[2])[1];
                switch (extension) {
                  case "json":
                    _main2.default.prototype.saveJSON(args[0], args[1], args[2]);
                    return;
                  case "txt":
                    _main2.default.prototype.saveStrings(args[0], args[1], args[2]);
                    return;
                  default:
                    if (args[0] instanceof Array) {
                      _main2.default.prototype.saveStrings(args[0], args[1], args[2]);
                    } else if (args[0] instanceof _main2.default.Table) {
                      _main2.default.prototype.saveTable(args[0], args[1], args[2]);
                    } else if (args[0] instanceof _main2.default.Image) {
                      _main2.default.prototype.saveCanvas(args[0].canvas, args[1]);
                    } else if (args[0] instanceof _main2.default.SoundFile) {
                      _main2.default.prototype.saveSound(args[0], args[1], args[2], args[3]);
                    }
                }
              }
            };
            _main2.default.prototype.saveJSON = function(json, filename, opt) {
              _main2.default._validateParameters("saveJSON", arguments);
              var stringify;
              if (opt) {
                stringify = JSON.stringify(json);
              } else {
                stringify = JSON.stringify(json, void 0, 2);
              }
              this.saveStrings(stringify.split("\n"), filename, "json");
            };
            _main2.default.prototype.saveJSONObject = _main2.default.prototype.saveJSON;
            _main2.default.prototype.saveJSONArray = _main2.default.prototype.saveJSON;
            _main2.default.prototype.saveStrings = function(list, filename, extension, isCRLF) {
              _main2.default._validateParameters("saveStrings", arguments);
              var ext = extension || "txt";
              var pWriter = this.createWriter(filename, ext);
              for (var i2 = 0; i2 < list.length; i2++) {
                isCRLF ? pWriter.write(list[i2] + "\r\n") : pWriter.write(list[i2] + "\n");
              }
              pWriter.close();
              pWriter.clear();
            };
            function escapeHelper(content) {
              return content.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
            }
            _main2.default.prototype.saveTable = function(table, filename, options) {
              _main2.default._validateParameters("saveTable", arguments);
              var ext;
              if (options === void 0) {
                ext = filename.substring(filename.lastIndexOf(".") + 1, filename.length);
              } else {
                ext = options;
              }
              var pWriter = this.createWriter(filename, ext);
              var header = table.columns;
              var sep = ",";
              if (ext === "tsv") {
                sep = "	";
              }
              if (ext !== "html") {
                if (header[0] !== "0") {
                  for (var h = 0; h < header.length; h++) {
                    if (h < header.length - 1) {
                      pWriter.write(header[h] + sep);
                    } else {
                      pWriter.write(header[h]);
                    }
                  }
                  pWriter.write("\n");
                }
                for (var i2 = 0; i2 < table.rows.length; i2++) {
                  var j = void 0;
                  for (j = 0; j < table.rows[i2].arr.length; j++) {
                    if (j < table.rows[i2].arr.length - 1) {
                      if (ext === "csv" && String(table.rows[i2].arr[j]).includes(",")) {
                        pWriter.write('"' + table.rows[i2].arr[j] + '"' + sep);
                      } else {
                        pWriter.write(table.rows[i2].arr[j] + sep);
                      }
                    } else {
                      if (ext === "csv" && String(table.rows[i2].arr[j]).includes(",")) {
                        pWriter.write('"' + table.rows[i2].arr[j] + '"');
                      } else {
                        pWriter.write(table.rows[i2].arr[j]);
                      }
                    }
                  }
                  pWriter.write("\n");
                }
              } else {
                pWriter.print("<html>");
                pWriter.print("<head>");
                var str = '  <meta http-equiv="content-type" content';
                str += '="text/html;charset=utf-8" />';
                pWriter.print(str);
                pWriter.print("</head>");
                pWriter.print("<body>");
                pWriter.print("  <table>");
                if (header[0] !== "0") {
                  pWriter.print("    <tr>");
                  for (var k2 = 0; k2 < header.length; k2++) {
                    var e2 = escapeHelper(header[k2]);
                    pWriter.print("      <td>".concat(e2));
                    pWriter.print("      </td>");
                  }
                  pWriter.print("    </tr>");
                }
                for (var row = 0; row < table.rows.length; row++) {
                  pWriter.print("    <tr>");
                  for (var col = 0; col < table.columns.length; col++) {
                    var entry = table.rows[row].getString(col);
                    var htmlEntry = escapeHelper(entry);
                    pWriter.print("      <td>".concat(htmlEntry));
                    pWriter.print("      </td>");
                  }
                  pWriter.print("    </tr>");
                }
                pWriter.print("  </table>");
                pWriter.print("</body>");
                pWriter.print("</html>");
              }
              pWriter.close();
              pWriter.clear();
            };
            _main2.default.prototype.writeFile = function(dataToDownload, filename, extension) {
              var type = "application/octet-stream";
              if (_main2.default.prototype._isSafari()) {
                type = "text/plain";
              }
              var blob = new Blob(dataToDownload, {
                type
              });
              _main2.default.prototype.downloadFile(blob, filename, extension);
            };
            _main2.default.prototype.downloadFile = function(data, fName, extension) {
              var fx = _checkFileExtension(fName, extension);
              var filename = fx[0];
              if (data instanceof Blob) {
                _fileSaver.default.saveAs(data, filename);
                return;
              }
              var a = document.createElement("a");
              a.href = data;
              a.download = filename;
              a.onclick = function(e2) {
                destroyClickedElement(e2);
                e2.stopPropagation();
              };
              a.style.display = "none";
              document.body.appendChild(a);
              if (_main2.default.prototype._isSafari()) {
                var aText = "Hello, Safari user! To download this file...\n";
                aText += "1. Go to File --> Save As.\n";
                aText += '2. Choose "Page Source" as the Format.\n';
                aText += '3. Name it with this extension: ."'.concat(fx[1], '"');
                alert(aText);
              }
              a.click();
            };
            function _checkFileExtension(filename, extension) {
              if (!extension || extension === true || extension === "true") {
                extension = "";
              }
              if (!filename) {
                filename = "untitled";
              }
              var ext = "";
              if (filename && filename.includes(".")) {
                ext = filename.split(".").pop();
              }
              if (extension) {
                if (ext !== extension) {
                  ext = extension;
                  filename = "".concat(filename, ".").concat(ext);
                }
              }
              return [
                filename,
                ext
              ];
            }
            _main2.default.prototype._checkFileExtension = _checkFileExtension;
            _main2.default.prototype._isSafari = function() {
              var x = Object.prototype.toString.call(window.HTMLElement);
              return x.indexOf("Constructor") > 0;
            };
            function destroyClickedElement(event) {
              document.body.removeChild(event.target);
            }
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/friendly_errors/fes_core": 281,
            "../core/friendly_errors/file_errors": 282,
            "../core/friendly_errors/validate_params": 285,
            "../core/main": 290,
            "core-js/modules/es.array.concat": 167,
            "core-js/modules/es.array.includes": 174,
            "core-js/modules/es.array.index-of": 175,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.last-index-of": 178,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.array.splice": 182,
            "core-js/modules/es.function.name": 183,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.promise": 196,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.string.includes": 203,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.string.replace": 207,
            "core-js/modules/es.string.split": 209,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.typed-array.copy-within": 215,
            "core-js/modules/es.typed-array.every": 216,
            "core-js/modules/es.typed-array.fill": 217,
            "core-js/modules/es.typed-array.filter": 218,
            "core-js/modules/es.typed-array.find": 220,
            "core-js/modules/es.typed-array.find-index": 219,
            "core-js/modules/es.typed-array.for-each": 223,
            "core-js/modules/es.typed-array.includes": 224,
            "core-js/modules/es.typed-array.index-of": 225,
            "core-js/modules/es.typed-array.iterator": 228,
            "core-js/modules/es.typed-array.join": 229,
            "core-js/modules/es.typed-array.last-index-of": 230,
            "core-js/modules/es.typed-array.map": 231,
            "core-js/modules/es.typed-array.reduce": 233,
            "core-js/modules/es.typed-array.reduce-right": 232,
            "core-js/modules/es.typed-array.reverse": 234,
            "core-js/modules/es.typed-array.set": 235,
            "core-js/modules/es.typed-array.slice": 236,
            "core-js/modules/es.typed-array.some": 237,
            "core-js/modules/es.typed-array.sort": 238,
            "core-js/modules/es.typed-array.subarray": 239,
            "core-js/modules/es.typed-array.to-locale-string": 240,
            "core-js/modules/es.typed-array.to-string": 241,
            "core-js/modules/es.typed-array.uint8-array": 244,
            "core-js/modules/web.dom-collections.iterator": 248,
            "core-js/modules/web.url": 250,
            "es6-promise/auto": 251,
            "fetch-jsonp": 253,
            "file-saver": 254,
            "whatwg-fetch": 267
          }
        ],
        317: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.join");
            _dereq_2("core-js/modules/es.array.splice");
            _dereq_2("core-js/modules/es.regexp.constructor");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.match");
            _dereq_2("core-js/modules/es.string.replace");
            _dereq_2("core-js/modules/es.string.trim");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.join");
            _dereq_2("core-js/modules/es.array.splice");
            _dereq_2("core-js/modules/es.regexp.constructor");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.match");
            _dereq_2("core-js/modules/es.string.replace");
            _dereq_2("core-js/modules/es.string.trim");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.Table = function(rows) {
              this.columns = [];
              this.rows = [];
            };
            _main2.default.Table.prototype.addRow = function(row) {
              var r = row || new _main2.default.TableRow();
              if (typeof r.arr === "undefined" || typeof r.obj === "undefined") {
                throw new Error("invalid TableRow: ".concat(r));
              }
              r.table = this;
              this.rows.push(r);
              return r;
            };
            _main2.default.Table.prototype.removeRow = function(id) {
              this.rows[id].table = null;
              var chunk = this.rows.splice(id + 1, this.rows.length);
              this.rows.pop();
              this.rows = this.rows.concat(chunk);
            };
            _main2.default.Table.prototype.getRow = function(r) {
              return this.rows[r];
            };
            _main2.default.Table.prototype.getRows = function() {
              return this.rows;
            };
            _main2.default.Table.prototype.findRow = function(value, column) {
              if (typeof column === "string") {
                for (var i2 = 0; i2 < this.rows.length; i2++) {
                  if (this.rows[i2].obj[column] === value) {
                    return this.rows[i2];
                  }
                }
              } else {
                for (var j = 0; j < this.rows.length; j++) {
                  if (this.rows[j].arr[column] === value) {
                    return this.rows[j];
                  }
                }
              }
              return null;
            };
            _main2.default.Table.prototype.findRows = function(value, column) {
              var ret = [];
              if (typeof column === "string") {
                for (var i2 = 0; i2 < this.rows.length; i2++) {
                  if (this.rows[i2].obj[column] === value) {
                    ret.push(this.rows[i2]);
                  }
                }
              } else {
                for (var j = 0; j < this.rows.length; j++) {
                  if (this.rows[j].arr[column] === value) {
                    ret.push(this.rows[j]);
                  }
                }
              }
              return ret;
            };
            _main2.default.Table.prototype.matchRow = function(regexp, column) {
              if (typeof column === "number") {
                for (var j = 0; j < this.rows.length; j++) {
                  if (this.rows[j].arr[column].match(regexp)) {
                    return this.rows[j];
                  }
                }
              } else {
                for (var i2 = 0; i2 < this.rows.length; i2++) {
                  if (this.rows[i2].obj[column].match(regexp)) {
                    return this.rows[i2];
                  }
                }
              }
              return null;
            };
            _main2.default.Table.prototype.matchRows = function(regexp, column) {
              var ret = [];
              if (typeof column === "number") {
                for (var j = 0; j < this.rows.length; j++) {
                  if (this.rows[j].arr[column].match(regexp)) {
                    ret.push(this.rows[j]);
                  }
                }
              } else {
                for (var i2 = 0; i2 < this.rows.length; i2++) {
                  if (this.rows[i2].obj[column].match(regexp)) {
                    ret.push(this.rows[i2]);
                  }
                }
              }
              return ret;
            };
            _main2.default.Table.prototype.getColumn = function(value) {
              var ret = [];
              if (typeof value === "string") {
                for (var i2 = 0; i2 < this.rows.length; i2++) {
                  ret.push(this.rows[i2].obj[value]);
                }
              } else {
                for (var j = 0; j < this.rows.length; j++) {
                  ret.push(this.rows[j].arr[value]);
                }
              }
              return ret;
            };
            _main2.default.Table.prototype.clearRows = function() {
              delete this.rows;
              this.rows = [];
            };
            _main2.default.Table.prototype.addColumn = function(title) {
              var t = title || null;
              this.columns.push(t);
            };
            _main2.default.Table.prototype.getColumnCount = function() {
              return this.columns.length;
            };
            _main2.default.Table.prototype.getRowCount = function() {
              return this.rows.length;
            };
            _main2.default.Table.prototype.removeTokens = function(chars, column) {
              var escape = function escape2(s2) {
                return s2.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
              };
              var charArray = [];
              for (var i2 = 0; i2 < chars.length; i2++) {
                charArray.push(escape(chars.charAt(i2)));
              }
              var regex = new RegExp(charArray.join("|"), "g");
              if (typeof column === "undefined") {
                for (var c = 0; c < this.columns.length; c++) {
                  for (var d = 0; d < this.rows.length; d++) {
                    var s = this.rows[d].arr[c];
                    s = s.replace(regex, "");
                    this.rows[d].arr[c] = s;
                    this.rows[d].obj[this.columns[c]] = s;
                  }
                }
              } else if (typeof column === "string") {
                for (var j = 0; j < this.rows.length; j++) {
                  var val = this.rows[j].obj[column];
                  val = val.replace(regex, "");
                  this.rows[j].obj[column] = val;
                  var pos = this.columns.indexOf(column);
                  this.rows[j].arr[pos] = val;
                }
              } else {
                for (var k2 = 0; k2 < this.rows.length; k2++) {
                  var str = this.rows[k2].arr[column];
                  str = str.replace(regex, "");
                  this.rows[k2].arr[column] = str;
                  this.rows[k2].obj[this.columns[column]] = str;
                }
              }
            };
            _main2.default.Table.prototype.trim = function(column) {
              var regex = new RegExp(" ", "g");
              if (typeof column === "undefined") {
                for (var c = 0; c < this.columns.length; c++) {
                  for (var d = 0; d < this.rows.length; d++) {
                    var s = this.rows[d].arr[c];
                    s = s.replace(regex, "");
                    this.rows[d].arr[c] = s;
                    this.rows[d].obj[this.columns[c]] = s;
                  }
                }
              } else if (typeof column === "string") {
                for (var j = 0; j < this.rows.length; j++) {
                  var val = this.rows[j].obj[column];
                  val = val.replace(regex, "");
                  this.rows[j].obj[column] = val;
                  var pos = this.columns.indexOf(column);
                  this.rows[j].arr[pos] = val;
                }
              } else {
                for (var k2 = 0; k2 < this.rows.length; k2++) {
                  var str = this.rows[k2].arr[column];
                  str = str.replace(regex, "");
                  this.rows[k2].arr[column] = str;
                  this.rows[k2].obj[this.columns[column]] = str;
                }
              }
            };
            _main2.default.Table.prototype.removeColumn = function(c) {
              var cString;
              var cNumber;
              if (typeof c === "string") {
                cString = c;
                cNumber = this.columns.indexOf(c);
              } else {
                cNumber = c;
                cString = this.columns[c];
              }
              var chunk = this.columns.splice(cNumber + 1, this.columns.length);
              this.columns.pop();
              this.columns = this.columns.concat(chunk);
              for (var i2 = 0; i2 < this.rows.length; i2++) {
                var tempR = this.rows[i2].arr;
                var chip = tempR.splice(cNumber + 1, tempR.length);
                tempR.pop();
                this.rows[i2].arr = tempR.concat(chip);
                delete this.rows[i2].obj[cString];
              }
            };
            _main2.default.Table.prototype.set = function(row, column, value) {
              this.rows[row].set(column, value);
            };
            _main2.default.Table.prototype.setNum = function(row, column, value) {
              this.rows[row].setNum(column, value);
            };
            _main2.default.Table.prototype.setString = function(row, column, value) {
              this.rows[row].setString(column, value);
            };
            _main2.default.Table.prototype.get = function(row, column) {
              return this.rows[row].get(column);
            };
            _main2.default.Table.prototype.getNum = function(row, column) {
              return this.rows[row].getNum(column);
            };
            _main2.default.Table.prototype.getString = function(row, column) {
              return this.rows[row].getString(column);
            };
            _main2.default.Table.prototype.getObject = function(headerColumn) {
              var tableObject = {};
              var obj, cPos, index;
              for (var i2 = 0; i2 < this.rows.length; i2++) {
                obj = this.rows[i2].obj;
                if (typeof headerColumn === "string") {
                  cPos = this.columns.indexOf(headerColumn);
                  if (cPos >= 0) {
                    index = obj[headerColumn];
                    tableObject[index] = obj;
                  } else {
                    throw new Error('This table has no column named "'.concat(headerColumn, '"'));
                  }
                } else {
                  tableObject[i2] = this.rows[i2].obj;
                }
              }
              return tableObject;
            };
            _main2.default.Table.prototype.getArray = function() {
              var tableArray = [];
              for (var i2 = 0; i2 < this.rows.length; i2++) {
                tableArray.push(this.rows[i2].arr);
              }
              return tableArray;
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "core-js/modules/es.array.concat": 167,
            "core-js/modules/es.array.index-of": 175,
            "core-js/modules/es.array.join": 177,
            "core-js/modules/es.array.splice": 182,
            "core-js/modules/es.regexp.constructor": 198,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.string.match": 205,
            "core-js/modules/es.string.replace": 207,
            "core-js/modules/es.string.trim": 211
          }
        ],
        318: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.split");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.TableRow = function(str, separator) {
              var arr = [];
              var obj = {};
              if (str) {
                separator = separator || ",";
                arr = str.split(separator);
              }
              for (var i2 = 0; i2 < arr.length; i2++) {
                var key2 = i2;
                var val = arr[i2];
                obj[key2] = val;
              }
              this.arr = arr;
              this.obj = obj;
              this.table = null;
            };
            _main2.default.TableRow.prototype.set = function(column, value) {
              if (typeof column === "string") {
                var cPos = this.table.columns.indexOf(column);
                if (cPos >= 0) {
                  this.obj[column] = value;
                  this.arr[cPos] = value;
                } else {
                  throw new Error('This table has no column named "'.concat(column, '"'));
                }
              } else {
                if (column < this.table.columns.length) {
                  this.arr[column] = value;
                  var cTitle = this.table.columns[column];
                  this.obj[cTitle] = value;
                } else {
                  throw new Error("Column #".concat(column, " is out of the range of this table"));
                }
              }
            };
            _main2.default.TableRow.prototype.setNum = function(column, value) {
              var floatVal = parseFloat(value);
              this.set(column, floatVal);
            };
            _main2.default.TableRow.prototype.setString = function(column, value) {
              var stringVal = value.toString();
              this.set(column, stringVal);
            };
            _main2.default.TableRow.prototype.get = function(column) {
              if (typeof column === "string") {
                return this.obj[column];
              } else {
                return this.arr[column];
              }
            };
            _main2.default.TableRow.prototype.getNum = function(column) {
              var ret;
              if (typeof column === "string") {
                ret = parseFloat(this.obj[column]);
              } else {
                ret = parseFloat(this.arr[column]);
              }
              if (ret.toString() === "NaN") {
                throw "Error: ".concat(this.obj[column], " is NaN (Not a Number)");
              }
              return ret;
            };
            _main2.default.TableRow.prototype.getString = function(column) {
              if (typeof column === "string") {
                return this.obj[column].toString();
              } else {
                return this.arr[column].toString();
              }
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "core-js/modules/es.array.index-of": 175,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.string.split": 209
          }
        ],
        319: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.number.constructor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.replace");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.number.constructor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.replace");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.XML = function(DOM) {
              if (!DOM) {
                var xmlDoc = document.implementation.createDocument(null, "doc");
                this.DOM = xmlDoc.createElement("root");
              } else {
                this.DOM = DOM;
              }
            };
            _main2.default.XML.prototype.getParent = function() {
              return new _main2.default.XML(this.DOM.parentElement);
            };
            _main2.default.XML.prototype.getName = function() {
              return this.DOM.tagName;
            };
            _main2.default.XML.prototype.setName = function(name) {
              var content = this.DOM.innerHTML;
              var attributes = this.DOM.attributes;
              var xmlDoc = document.implementation.createDocument(null, "default");
              var newDOM = xmlDoc.createElement(name);
              newDOM.innerHTML = content;
              for (var i2 = 0; i2 < attributes.length; i2++) {
                newDOM.setAttribute(attributes[i2].nodeName, attributes.nodeValue);
              }
              this.DOM = newDOM;
            };
            _main2.default.XML.prototype.hasChildren = function() {
              return this.DOM.children.length > 0;
            };
            _main2.default.XML.prototype.listChildren = function() {
              var arr = [];
              for (var i2 = 0; i2 < this.DOM.childNodes.length; i2++) {
                arr.push(this.DOM.childNodes[i2].nodeName);
              }
              return arr;
            };
            _main2.default.XML.prototype.getChildren = function(param) {
              if (param) {
                return elementsToP5XML(this.DOM.getElementsByTagName(param));
              } else {
                return elementsToP5XML(this.DOM.children);
              }
            };
            function elementsToP5XML(elements) {
              var arr = [];
              for (var i2 = 0; i2 < elements.length; i2++) {
                arr.push(new _main2.default.XML(elements[i2]));
              }
              return arr;
            }
            _main2.default.XML.prototype.getChild = function(param) {
              if (typeof param === "string") {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = void 0;
                try {
                  for (var _iterator = this.DOM.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var child = _step.value;
                    if (child.tagName === param)
                      return new _main2.default.XML(child);
                  }
                } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                      _iterator.return();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                }
              } else {
                return new _main2.default.XML(this.DOM.children[param]);
              }
            };
            _main2.default.XML.prototype.addChild = function(node) {
              if (node instanceof _main2.default.XML) {
                this.DOM.appendChild(node.DOM);
              } else {
              }
            };
            _main2.default.XML.prototype.removeChild = function(param) {
              var ind = -1;
              if (typeof param === "string") {
                for (var i2 = 0; i2 < this.DOM.children.length; i2++) {
                  if (this.DOM.children[i2].tagName === param) {
                    ind = i2;
                    break;
                  }
                }
              } else {
                ind = param;
              }
              if (ind !== -1) {
                this.DOM.removeChild(this.DOM.children[ind]);
              }
            };
            _main2.default.XML.prototype.getAttributeCount = function() {
              return this.DOM.attributes.length;
            };
            _main2.default.XML.prototype.listAttributes = function() {
              var arr = [];
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = void 0;
              try {
                for (var _iterator2 = this.DOM.attributes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var attribute = _step2.value;
                  arr.push(attribute.nodeName);
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }
              return arr;
            };
            _main2.default.XML.prototype.hasAttribute = function(name) {
              var obj = {};
              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = void 0;
              try {
                for (var _iterator3 = this.DOM.attributes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  var attribute = _step3.value;
                  obj[attribute.nodeName] = attribute.nodeValue;
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                    _iterator3.return();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }
              return obj[name] ? true : false;
            };
            _main2.default.XML.prototype.getNum = function(name, defaultValue) {
              var obj = {};
              var _iteratorNormalCompletion4 = true;
              var _didIteratorError4 = false;
              var _iteratorError4 = void 0;
              try {
                for (var _iterator4 = this.DOM.attributes[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                  var attribute = _step4.value;
                  obj[attribute.nodeName] = attribute.nodeValue;
                }
              } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
                    _iterator4.return();
                  }
                } finally {
                  if (_didIteratorError4) {
                    throw _iteratorError4;
                  }
                }
              }
              return Number(obj[name]) || defaultValue || 0;
            };
            _main2.default.XML.prototype.getString = function(name, defaultValue) {
              var obj = {};
              var _iteratorNormalCompletion5 = true;
              var _didIteratorError5 = false;
              var _iteratorError5 = void 0;
              try {
                for (var _iterator5 = this.DOM.attributes[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                  var attribute = _step5.value;
                  obj[attribute.nodeName] = attribute.nodeValue;
                }
              } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
                    _iterator5.return();
                  }
                } finally {
                  if (_didIteratorError5) {
                    throw _iteratorError5;
                  }
                }
              }
              return obj[name] ? String(obj[name]) : defaultValue || null;
            };
            _main2.default.XML.prototype.setAttribute = function(name, value) {
              this.DOM.setAttribute(name, value);
            };
            _main2.default.XML.prototype.getContent = function(defaultValue) {
              var str;
              str = this.DOM.textContent;
              str = str.replace(/\s\s+/g, ",");
              return str || defaultValue || null;
            };
            _main2.default.XML.prototype.setContent = function(content) {
              if (!this.DOM.children.length) {
                this.DOM.textContent = content;
              }
            };
            _main2.default.XML.prototype.serialize = function() {
              var xmlSerializer = new XMLSerializer();
              return xmlSerializer.serializeToString(this.DOM);
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.number.constructor": 187,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.string.replace": 207,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        320: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.math.hypot");
            _dereq_2("core-js/modules/es.number.constructor");
            _dereq_2("core-js/modules/es.string.includes");
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.math.hypot");
            _dereq_2("core-js/modules/es.number.constructor");
            _dereq_2("core-js/modules/es.string.includes");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.abs = Math.abs;
            _main2.default.prototype.ceil = Math.ceil;
            _main2.default.prototype.constrain = function(n, low, high) {
              _main2.default._validateParameters("constrain", arguments);
              return Math.max(Math.min(n, high), low);
            };
            _main2.default.prototype.dist = function() {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              _main2.default._validateParameters("dist", args);
              if (args.length === 4) {
                return hypot(args[2] - args[0], args[3] - args[1]);
              } else if (args.length === 6) {
                return hypot(args[3] - args[0], args[4] - args[1], args[5] - args[2]);
              }
            };
            _main2.default.prototype.exp = Math.exp;
            _main2.default.prototype.floor = Math.floor;
            _main2.default.prototype.lerp = function(start, stop, amt) {
              _main2.default._validateParameters("lerp", arguments);
              return amt * (stop - start) + start;
            };
            _main2.default.prototype.log = Math.log;
            _main2.default.prototype.mag = function(x, y) {
              _main2.default._validateParameters("mag", arguments);
              return hypot(x, y);
            };
            _main2.default.prototype.map = function(n, start1, stop1, start2, stop2, withinBounds) {
              _main2.default._validateParameters("map", arguments);
              var newval = (n - start1) / (stop1 - start1) * (stop2 - start2) + start2;
              if (!withinBounds) {
                return newval;
              }
              if (start2 < stop2) {
                return this.constrain(newval, start2, stop2);
              } else {
                return this.constrain(newval, stop2, start2);
              }
            };
            _main2.default.prototype.max = function() {
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }
              if (args[0] instanceof Array) {
                return Math.max.apply(null, args[0]);
              } else {
                return Math.max.apply(null, args);
              }
            };
            _main2.default.prototype.min = function() {
              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
              }
              if (args[0] instanceof Array) {
                return Math.min.apply(null, args[0]);
              } else {
                return Math.min.apply(null, args);
              }
            };
            _main2.default.prototype.norm = function(n, start, stop) {
              _main2.default._validateParameters("norm", arguments);
              return this.map(n, start, stop, 0, 1);
            };
            _main2.default.prototype.pow = Math.pow;
            _main2.default.prototype.round = function(n, decimals) {
              if (!decimals) {
                return Math.round(n);
              }
              var multiplier = Math.pow(10, decimals);
              return Math.round(n * multiplier) / multiplier;
            };
            _main2.default.prototype.sq = function(n) {
              return n * n;
            };
            _main2.default.prototype.sqrt = Math.sqrt;
            function hypot(x, y, z) {
              if (typeof Math.hypot === "function") {
                return Math.hypot.apply(null, arguments);
              }
              var length = arguments.length;
              var args = [];
              var max = 0;
              for (var i2 = 0; i2 < length; i2++) {
                var n = arguments[i2];
                n = +n;
                if (n === Infinity || n === -Infinity) {
                  return Infinity;
                }
                n = Math.abs(n);
                if (n > max) {
                  max = n;
                }
                args[i2] = n;
              }
              if (max === 0) {
                max = 1;
              }
              var sum = 0;
              var compensation = 0;
              for (var j = 0; j < length; j++) {
                var m = args[j] / max;
                var summand = m * m - compensation;
                var preliminary = sum + summand;
                compensation = preliminary - sum - summand;
                sum = preliminary;
              }
              return Math.sqrt(sum) * max;
            }
            _main2.default.prototype.fract = function(toConvert) {
              _main2.default._validateParameters("fract", arguments);
              var sign = 0;
              var num = Number(toConvert);
              if (isNaN(num) || Math.abs(num) === Infinity) {
                return num;
              } else if (num < 0) {
                num = -num;
                sign = 1;
              }
              if (String(num).includes(".") && !String(num).includes("e")) {
                var toFract = String(num);
                toFract = Number("0" + toFract.slice(toFract.indexOf(".")));
                return Math.abs(sign - toFract);
              } else if (num < 1) {
                return Math.abs(sign - num);
              } else {
                return 0;
              }
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "core-js/modules/es.array.includes": 174,
            "core-js/modules/es.array.index-of": 175,
            "core-js/modules/es.array.map": 179,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.math.hypot": 185,
            "core-js/modules/es.number.constructor": 187,
            "core-js/modules/es.string.includes": 203
          }
        ],
        321: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.reflect.construct");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.reflect.construct");
            _dereq_2("core-js/modules/es.regexp.to-string");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            function isNativeReflectConstruct() {
              if (typeof Reflect === "undefined" || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if (typeof Proxy === "function")
                return true;
              try {
                Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                }));
                return true;
              } catch (e2) {
                return false;
              }
            }
            function _construct(Parent, args, Class) {
              if (isNativeReflectConstruct()) {
                _construct = Reflect.construct;
              } else {
                _construct = function _construct2(Parent2, args2, Class2) {
                  var a = [
                    null
                  ];
                  a.push.apply(a, args2);
                  var Constructor = Function.bind.apply(Parent2, a);
                  var instance = new Constructor();
                  if (Class2)
                    _setPrototypeOf(instance, Class2.prototype);
                  return instance;
                };
              }
              return _construct.apply(null, arguments);
            }
            function _setPrototypeOf(o, p) {
              _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return _setPrototypeOf(o, p);
            }
            _main2.default.prototype.createVector = function(x, y, z) {
              if (this instanceof _main2.default) {
                return _construct(_main2.default.Vector, [
                  this._fromRadians.bind(this),
                  this._toRadians.bind(this)
                ].concat(Array.prototype.slice.call(arguments)));
              } else {
                return new _main2.default.Vector(x, y, z);
              }
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "core-js/modules/es.array.concat": 167,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.reflect.construct": 197,
            "core-js/modules/es.regexp.to-string": 200
          }
        ],
        322: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            var PERLIN_YWRAPB = 4;
            var PERLIN_YWRAP = 1 << PERLIN_YWRAPB;
            var PERLIN_ZWRAPB = 8;
            var PERLIN_ZWRAP = 1 << PERLIN_ZWRAPB;
            var PERLIN_SIZE = 4095;
            var perlin_octaves = 4;
            var perlin_amp_falloff = 0.5;
            var scaled_cosine = function scaled_cosine2(i2) {
              return 0.5 * (1 - Math.cos(i2 * Math.PI));
            };
            var perlin;
            _main2.default.prototype.noise = function(x) {
              var y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
              var z = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
              if (perlin == null) {
                perlin = new Array(PERLIN_SIZE + 1);
                for (var i2 = 0; i2 < PERLIN_SIZE + 1; i2++) {
                  perlin[i2] = Math.random();
                }
              }
              if (x < 0) {
                x = -x;
              }
              if (y < 0) {
                y = -y;
              }
              if (z < 0) {
                z = -z;
              }
              var xi = Math.floor(x), yi = Math.floor(y), zi = Math.floor(z);
              var xf = x - xi;
              var yf = y - yi;
              var zf = z - zi;
              var rxf, ryf;
              var r = 0;
              var ampl = 0.5;
              var n1, n2, n3;
              for (var o = 0; o < perlin_octaves; o++) {
                var of = xi + (yi << PERLIN_YWRAPB) + (zi << PERLIN_ZWRAPB);
                rxf = scaled_cosine(xf);
                ryf = scaled_cosine(yf);
                n1 = perlin[of & PERLIN_SIZE];
                n1 += rxf * (perlin[of + 1 & PERLIN_SIZE] - n1);
                n2 = perlin[of + PERLIN_YWRAP & PERLIN_SIZE];
                n2 += rxf * (perlin[of + PERLIN_YWRAP + 1 & PERLIN_SIZE] - n2);
                n1 += ryf * (n2 - n1);
                of += PERLIN_ZWRAP;
                n2 = perlin[of & PERLIN_SIZE];
                n2 += rxf * (perlin[of + 1 & PERLIN_SIZE] - n2);
                n3 = perlin[of + PERLIN_YWRAP & PERLIN_SIZE];
                n3 += rxf * (perlin[of + PERLIN_YWRAP + 1 & PERLIN_SIZE] - n3);
                n2 += ryf * (n3 - n2);
                n1 += scaled_cosine(zf) * (n2 - n1);
                r += n1 * ampl;
                ampl *= perlin_amp_falloff;
                xi <<= 1;
                xf *= 2;
                yi <<= 1;
                yf *= 2;
                zi <<= 1;
                zf *= 2;
                if (xf >= 1) {
                  xi++;
                  xf--;
                }
                if (yf >= 1) {
                  yi++;
                  yf--;
                }
                if (zf >= 1) {
                  zi++;
                  zf--;
                }
              }
              return r;
            };
            _main2.default.prototype.noiseDetail = function(lod, falloff) {
              if (lod > 0) {
                perlin_octaves = lod;
              }
              if (falloff > 0) {
                perlin_amp_falloff = falloff;
              }
            };
            _main2.default.prototype.noiseSeed = function(seed) {
              var lcg = function() {
                var m = 4294967296;
                var a = 1664525;
                var c = 1013904223;
                var seed2, z;
                return {
                  setSeed: function setSeed(val) {
                    z = seed2 = (val == null ? Math.random() * m : val) >>> 0;
                  },
                  getSeed: function getSeed() {
                    return seed2;
                  },
                  rand: function rand() {
                    z = (a * z + c) % m;
                    return z / m;
                  }
                };
              }();
              lcg.setSeed(seed);
              perlin = new Array(PERLIN_SIZE + 1);
              for (var i2 = 0; i2 < PERLIN_SIZE + 1; i2++) {
                perlin[i2] = lcg.rand();
              }
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/main": 290
          }
        ],
        323: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.every");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.array.some");
            _dereq_2("core-js/modules/es.math.sign");
            _dereq_2("core-js/modules/es.number.constructor");
            _dereq_2("core-js/modules/es.number.is-finite");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.sub");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.every");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.array.some");
            _dereq_2("core-js/modules/es.math.sign");
            _dereq_2("core-js/modules/es.number.constructor");
            _dereq_2("core-js/modules/es.number.is-finite");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.sub");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../core/constants"));
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.Vector = function Vector() {
              var x, y, z;
              if ({}.toString.call(arguments[0]) === "[object Function]") {
                this.isPInst = true;
                this._fromRadians = arguments[0];
                this._toRadians = arguments[1];
                x = arguments[2] || 0;
                y = arguments[3] || 0;
                z = arguments[4] || 0;
              } else {
                x = arguments[0] || 0;
                y = arguments[1] || 0;
                z = arguments[2] || 0;
              }
              this.x = x;
              this.y = y;
              this.z = z;
            };
            _main2.default.Vector.prototype.toString = function p5VectorToString() {
              return "p5.Vector Object : [".concat(this.x, ", ").concat(this.y, ", ").concat(this.z, "]");
            };
            _main2.default.Vector.prototype.set = function set(x, y, z) {
              if (x instanceof _main2.default.Vector) {
                this.x = x.x || 0;
                this.y = x.y || 0;
                this.z = x.z || 0;
                return this;
              }
              if (x instanceof Array) {
                this.x = x[0] || 0;
                this.y = x[1] || 0;
                this.z = x[2] || 0;
                return this;
              }
              this.x = x || 0;
              this.y = y || 0;
              this.z = z || 0;
              return this;
            };
            _main2.default.Vector.prototype.copy = function copy() {
              if (this.isPInst) {
                return new _main2.default.Vector(this._fromRadians, this._toRadians, this.x, this.y, this.z);
              } else {
                return new _main2.default.Vector(this.x, this.y, this.z);
              }
            };
            _main2.default.Vector.prototype.add = function add(x, y, z) {
              if (x instanceof _main2.default.Vector) {
                this.x += x.x || 0;
                this.y += x.y || 0;
                this.z += x.z || 0;
                return this;
              }
              if (x instanceof Array) {
                this.x += x[0] || 0;
                this.y += x[1] || 0;
                this.z += x[2] || 0;
                return this;
              }
              this.x += x || 0;
              this.y += y || 0;
              this.z += z || 0;
              return this;
            };
            var calculateRemainder2D = function calculateRemainder2D2(xComponent, yComponent) {
              if (xComponent !== 0) {
                this.x = this.x % xComponent;
              }
              if (yComponent !== 0) {
                this.y = this.y % yComponent;
              }
              return this;
            };
            var calculateRemainder3D = function calculateRemainder3D2(xComponent, yComponent, zComponent) {
              if (xComponent !== 0) {
                this.x = this.x % xComponent;
              }
              if (yComponent !== 0) {
                this.y = this.y % yComponent;
              }
              if (zComponent !== 0) {
                this.z = this.z % zComponent;
              }
              return this;
            };
            _main2.default.Vector.prototype.rem = function rem(x, y, z) {
              if (x instanceof _main2.default.Vector) {
                if (Number.isFinite(x.x) && Number.isFinite(x.y) && Number.isFinite(x.z)) {
                  var xComponent = parseFloat(x.x);
                  var yComponent = parseFloat(x.y);
                  var zComponent = parseFloat(x.z);
                  return calculateRemainder3D.call(this, xComponent, yComponent, zComponent);
                }
              } else if (x instanceof Array) {
                if (x.every(function(element2) {
                  return Number.isFinite(element2);
                })) {
                  if (x.length === 2) {
                    return calculateRemainder2D.call(this, x[0], x[1]);
                  }
                  if (x.length === 3) {
                    return calculateRemainder3D.call(this, x[0], x[1], x[2]);
                  }
                }
              } else if (arguments.length === 1) {
                if (Number.isFinite(arguments[0]) && arguments[0] !== 0) {
                  this.x = this.x % arguments[0];
                  this.y = this.y % arguments[0];
                  this.z = this.z % arguments[0];
                  return this;
                }
              } else if (arguments.length === 2) {
                var vectorComponents = Array.prototype.slice.call(arguments);
                if (vectorComponents.every(function(element2) {
                  return Number.isFinite(element2);
                })) {
                  if (vectorComponents.length === 2) {
                    return calculateRemainder2D.call(this, vectorComponents[0], vectorComponents[1]);
                  }
                }
              } else if (arguments.length === 3) {
                var _vectorComponents = Array.prototype.slice.call(arguments);
                if (_vectorComponents.every(function(element2) {
                  return Number.isFinite(element2);
                })) {
                  if (_vectorComponents.length === 3) {
                    return calculateRemainder3D.call(this, _vectorComponents[0], _vectorComponents[1], _vectorComponents[2]);
                  }
                }
              }
            };
            _main2.default.Vector.prototype.sub = function sub(x, y, z) {
              if (x instanceof _main2.default.Vector) {
                this.x -= x.x || 0;
                this.y -= x.y || 0;
                this.z -= x.z || 0;
                return this;
              }
              if (x instanceof Array) {
                this.x -= x[0] || 0;
                this.y -= x[1] || 0;
                this.z -= x[2] || 0;
                return this;
              }
              this.x -= x || 0;
              this.y -= y || 0;
              this.z -= z || 0;
              return this;
            };
            _main2.default.Vector.prototype.mult = function mult(x, y, z) {
              if (x instanceof _main2.default.Vector) {
                if (Number.isFinite(x.x) && Number.isFinite(x.y) && Number.isFinite(x.z) && typeof x.x === "number" && typeof x.y === "number" && typeof x.z === "number") {
                  this.x *= x.x;
                  this.y *= x.y;
                  this.z *= x.z;
                } else {
                  console.warn("p5.Vector.prototype.mult:", "x contains components that are either undefined or not finite numbers");
                }
                return this;
              }
              if (x instanceof Array) {
                if (x.every(function(element2) {
                  return Number.isFinite(element2);
                }) && x.every(function(element2) {
                  return typeof element2 === "number";
                })) {
                  if (x.length === 1) {
                    this.x *= x[0];
                    this.y *= x[0];
                    this.z *= x[0];
                  } else if (x.length === 2) {
                    this.x *= x[0];
                    this.y *= x[1];
                  } else if (x.length === 3) {
                    this.x *= x[0];
                    this.y *= x[1];
                    this.z *= x[2];
                  }
                } else {
                  console.warn("p5.Vector.prototype.mult:", "x contains elements that are either undefined or not finite numbers");
                }
                return this;
              }
              var vectorComponents = Array.prototype.slice.call(arguments);
              if (vectorComponents.every(function(element2) {
                return Number.isFinite(element2);
              }) && vectorComponents.every(function(element2) {
                return typeof element2 === "number";
              })) {
                if (arguments.length === 1) {
                  this.x *= x;
                  this.y *= x;
                  this.z *= x;
                }
                if (arguments.length === 2) {
                  this.x *= x;
                  this.y *= y;
                }
                if (arguments.length === 3) {
                  this.x *= x;
                  this.y *= y;
                  this.z *= z;
                }
              } else {
                console.warn("p5.Vector.prototype.mult:", "x, y, or z arguments are either undefined or not a finite number");
              }
              return this;
            };
            _main2.default.Vector.prototype.div = function div(x, y, z) {
              if (x instanceof _main2.default.Vector) {
                if (Number.isFinite(x.x) && Number.isFinite(x.y) && Number.isFinite(x.z) && typeof x.x === "number" && typeof x.y === "number" && typeof x.z === "number") {
                  var isLikely2D = x.z === 0 && this.z === 0;
                  if (x.x === 0 || x.y === 0 || !isLikely2D && x.z === 0) {
                    console.warn("p5.Vector.prototype.div:", "divide by 0");
                    return this;
                  }
                  this.x /= x.x;
                  this.y /= x.y;
                  if (!isLikely2D) {
                    this.z /= x.z;
                  }
                } else {
                  console.warn("p5.Vector.prototype.div:", "x contains components that are either undefined or not finite numbers");
                }
                return this;
              }
              if (x instanceof Array) {
                if (x.every(function(element2) {
                  return Number.isFinite(element2);
                }) && x.every(function(element2) {
                  return typeof element2 === "number";
                })) {
                  if (x.some(function(element2) {
                    return element2 === 0;
                  })) {
                    console.warn("p5.Vector.prototype.div:", "divide by 0");
                    return this;
                  }
                  if (x.length === 1) {
                    this.x /= x[0];
                    this.y /= x[0];
                    this.z /= x[0];
                  } else if (x.length === 2) {
                    this.x /= x[0];
                    this.y /= x[1];
                  } else if (x.length === 3) {
                    this.x /= x[0];
                    this.y /= x[1];
                    this.z /= x[2];
                  }
                } else {
                  console.warn("p5.Vector.prototype.div:", "x contains components that are either undefined or not finite numbers");
                }
                return this;
              }
              var vectorComponents = Array.prototype.slice.call(arguments);
              if (vectorComponents.every(function(element2) {
                return Number.isFinite(element2);
              }) && vectorComponents.every(function(element2) {
                return typeof element2 === "number";
              })) {
                if (vectorComponents.some(function(element2) {
                  return element2 === 0;
                })) {
                  console.warn("p5.Vector.prototype.div:", "divide by 0");
                  return this;
                }
                if (arguments.length === 1) {
                  this.x /= x;
                  this.y /= x;
                  this.z /= x;
                }
                if (arguments.length === 2) {
                  this.x /= x;
                  this.y /= y;
                }
                if (arguments.length === 3) {
                  this.x /= x;
                  this.y /= y;
                  this.z /= z;
                }
              } else {
                console.warn("p5.Vector.prototype.div:", "x, y, or z arguments are either undefined or not a finite number");
              }
              return this;
            };
            _main2.default.Vector.prototype.mag = function mag() {
              return Math.sqrt(this.magSq());
            };
            _main2.default.Vector.prototype.magSq = function magSq() {
              var x = this.x;
              var y = this.y;
              var z = this.z;
              return x * x + y * y + z * z;
            };
            _main2.default.Vector.prototype.dot = function dot(x, y, z) {
              if (x instanceof _main2.default.Vector) {
                return this.dot(x.x, x.y, x.z);
              }
              return this.x * (x || 0) + this.y * (y || 0) + this.z * (z || 0);
            };
            _main2.default.Vector.prototype.cross = function cross(v) {
              var x = this.y * v.z - this.z * v.y;
              var y = this.z * v.x - this.x * v.z;
              var z = this.x * v.y - this.y * v.x;
              if (this.isPInst) {
                return new _main2.default.Vector(this._fromRadians, this._toRadians, x, y, z);
              } else {
                return new _main2.default.Vector(x, y, z);
              }
            };
            _main2.default.Vector.prototype.dist = function dist(v) {
              return v.copy().sub(this).mag();
            };
            _main2.default.Vector.prototype.normalize = function normalize() {
              var len = this.mag();
              if (len !== 0)
                this.mult(1 / len);
              return this;
            };
            _main2.default.Vector.prototype.limit = function limit(max) {
              var mSq = this.magSq();
              if (mSq > max * max) {
                this.div(Math.sqrt(mSq)).mult(max);
              }
              return this;
            };
            _main2.default.Vector.prototype.setMag = function setMag(n) {
              return this.normalize().mult(n);
            };
            _main2.default.Vector.prototype.heading = function heading() {
              var h = Math.atan2(this.y, this.x);
              if (this.isPInst)
                return this._fromRadians(h);
              return h;
            };
            _main2.default.Vector.prototype.setHeading = function setHeading(a) {
              if (this.isPInst)
                a = this._toRadians(a);
              var m = this.mag();
              this.x = m * Math.cos(a);
              this.y = m * Math.sin(a);
              return this;
            };
            _main2.default.Vector.prototype.rotate = function rotate(a) {
              var newHeading = this.heading() + a;
              if (this.isPInst)
                newHeading = this._toRadians(newHeading);
              var mag = this.mag();
              this.x = Math.cos(newHeading) * mag;
              this.y = Math.sin(newHeading) * mag;
              return this;
            };
            _main2.default.Vector.prototype.angleBetween = function angleBetween(v) {
              var dotmagmag = this.dot(v) / (this.mag() * v.mag());
              var angle;
              angle = Math.acos(Math.min(1, Math.max(-1, dotmagmag)));
              angle = angle * Math.sign(this.cross(v).z || 1);
              if (this.isPInst) {
                angle = this._fromRadians(angle);
              }
              return angle;
            };
            _main2.default.Vector.prototype.lerp = function lerp(x, y, z, amt) {
              if (x instanceof _main2.default.Vector) {
                return this.lerp(x.x, x.y, x.z, y);
              }
              this.x += (x - this.x) * amt || 0;
              this.y += (y - this.y) * amt || 0;
              this.z += (z - this.z) * amt || 0;
              return this;
            };
            _main2.default.Vector.prototype.reflect = function reflect(surfaceNormal) {
              surfaceNormal.normalize();
              return this.sub(surfaceNormal.mult(2 * this.dot(surfaceNormal)));
            };
            _main2.default.Vector.prototype.array = function array() {
              return [
                this.x || 0,
                this.y || 0,
                this.z || 0
              ];
            };
            _main2.default.Vector.prototype.equals = function equals(x, y, z) {
              var a, b, c;
              if (x instanceof _main2.default.Vector) {
                a = x.x || 0;
                b = x.y || 0;
                c = x.z || 0;
              } else if (x instanceof Array) {
                a = x[0] || 0;
                b = x[1] || 0;
                c = x[2] || 0;
              } else {
                a = x || 0;
                b = y || 0;
                c = z || 0;
              }
              return this.x === a && this.y === b && this.z === c;
            };
            _main2.default.Vector.fromAngle = function fromAngle(angle, length) {
              if (typeof length === "undefined") {
                length = 1;
              }
              return new _main2.default.Vector(length * Math.cos(angle), length * Math.sin(angle), 0);
            };
            _main2.default.Vector.fromAngles = function(theta, phi, length) {
              if (typeof length === "undefined") {
                length = 1;
              }
              var cosPhi = Math.cos(phi);
              var sinPhi = Math.sin(phi);
              var cosTheta = Math.cos(theta);
              var sinTheta = Math.sin(theta);
              return new _main2.default.Vector(length * sinTheta * sinPhi, -length * cosTheta, length * sinTheta * cosPhi);
            };
            _main2.default.Vector.random2D = function random2D() {
              return this.fromAngle(Math.random() * constants2.TWO_PI);
            };
            _main2.default.Vector.random3D = function random3D() {
              var angle = Math.random() * constants2.TWO_PI;
              var vz = Math.random() * 2 - 1;
              var vzBase = Math.sqrt(1 - vz * vz);
              var vx = vzBase * Math.cos(angle);
              var vy = vzBase * Math.sin(angle);
              return new _main2.default.Vector(vx, vy, vz);
            };
            _main2.default.Vector.copy = function copy(v) {
              return v.copy(v);
            };
            _main2.default.Vector.add = function add(v1, v2, target) {
              if (!target) {
                target = v1.copy();
                if (arguments.length === 3) {
                  _main2.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.add");
                }
              } else {
                target.set(v1);
              }
              target.add(v2);
              return target;
            };
            _main2.default.Vector.rem = function rem(v1, v2) {
              if (v1 instanceof _main2.default.Vector && v2 instanceof _main2.default.Vector) {
                var target = v1.copy();
                target.rem(v2);
                return target;
              }
            };
            _main2.default.Vector.sub = function sub(v1, v2, target) {
              if (!target) {
                target = v1.copy();
                if (arguments.length === 3) {
                  _main2.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.sub");
                }
              } else {
                target.set(v1);
              }
              target.sub(v2);
              return target;
            };
            _main2.default.Vector.mult = function mult(v, n, target) {
              if (!target) {
                target = v.copy();
                if (arguments.length === 3) {
                  _main2.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.mult");
                }
              } else {
                target.set(v);
              }
              target.mult(n);
              return target;
            };
            _main2.default.Vector.rotate = function rotate(v, a, target) {
              if (arguments.length === 2) {
                target = v.copy();
              } else {
                if (!(target instanceof _main2.default.Vector)) {
                  _main2.default._friendlyError("The target parameter should be of type p5.Vector", "p5.Vector.rotate");
                }
                target.set(v);
              }
              target.rotate(a);
              return target;
            };
            _main2.default.Vector.div = function div(v, n, target) {
              if (!target) {
                target = v.copy();
                if (arguments.length === 3) {
                  _main2.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.div");
                }
              } else {
                target.set(v);
              }
              target.div(n);
              return target;
            };
            _main2.default.Vector.dot = function dot(v1, v2) {
              return v1.dot(v2);
            };
            _main2.default.Vector.cross = function cross(v1, v2) {
              return v1.cross(v2);
            };
            _main2.default.Vector.dist = function dist(v1, v2) {
              return v1.dist(v2);
            };
            _main2.default.Vector.lerp = function lerp(v1, v2, amt, target) {
              if (!target) {
                target = v1.copy();
                if (arguments.length === 4) {
                  _main2.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.lerp");
                }
              } else {
                target.set(v1);
              }
              target.lerp(v2, amt);
              return target;
            };
            _main2.default.Vector.mag = function mag(vecT) {
              return vecT.mag();
            };
            _main2.default.Vector.magSq = function magSq(vecT) {
              return vecT.magSq();
            };
            _main2.default.Vector.normalize = function normalize(v, target) {
              if (arguments.length < 2) {
                target = v.copy();
              } else {
                if (!(target instanceof _main2.default.Vector)) {
                  _main2.default._friendlyError("The target parameter should be of type p5.Vector", "p5.Vector.normalize");
                }
                target.set(v);
              }
              return target.normalize();
            };
            _main2.default.Vector.limit = function limit(v, max, target) {
              if (arguments.length < 3) {
                target = v.copy();
              } else {
                if (!(target instanceof _main2.default.Vector)) {
                  _main2.default._friendlyError("The target parameter should be of type p5.Vector", "p5.Vector.limit");
                }
                target.set(v);
              }
              return target.limit(max);
            };
            _main2.default.Vector.setMag = function setMag(v, len, target) {
              if (arguments.length < 3) {
                target = v.copy();
              } else {
                if (!(target instanceof _main2.default.Vector)) {
                  _main2.default._friendlyError("The target parameter should be of type p5.Vector", "p5.Vector.setMag");
                }
                target.set(v);
              }
              return target.setMag(len);
            };
            _main2.default.Vector.heading = function heading(v) {
              return v.heading();
            };
            _main2.default.Vector.angleBetween = function angleBetween(v1, v2) {
              return v1.angleBetween(v2);
            };
            _main2.default.Vector.reflect = function reflect(incidentVector, surfaceNormal, target) {
              if (arguments.length < 3) {
                target = incidentVector.copy();
              } else {
                if (!(target instanceof _main2.default.Vector)) {
                  _main2.default._friendlyError("The target parameter should be of type p5.Vector", "p5.Vector.reflect");
                }
                target.set(incidentVector);
              }
              return target.reflect(surfaceNormal);
            };
            _main2.default.Vector.array = function array(v) {
              return v.array();
            };
            _main2.default.Vector.equals = function equals(v1, v2) {
              var v;
              if (v1 instanceof _main2.default.Vector) {
                v = v1;
              } else if (v1 instanceof Array) {
                v = new _main2.default.Vector().set(v1);
              } else {
                _main2.default._friendlyError("The v1 parameter should be of type Array or p5.Vector", "p5.Vector.equals");
              }
              return v.equals(v2);
            };
            var _default2 = _main2.default.Vector;
            exports2.default = _default2;
          },
          {
            "../core/constants": 278,
            "../core/main": 290,
            "core-js/modules/es.array.concat": 167,
            "core-js/modules/es.array.every": 169,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.array.some": 181,
            "core-js/modules/es.math.sign": 186,
            "core-js/modules/es.number.constructor": 187,
            "core-js/modules/es.number.is-finite": 188,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.string.sub": 210,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        324: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            var randomStateProp = "_lcg_random_state";
            var m = 4294967296;
            var a = 1664525;
            var c = 1013904223;
            var y2 = 0;
            _main2.default.prototype._lcg = function(stateProperty) {
              this[stateProperty] = (a * this[stateProperty] + c) % m;
              return this[stateProperty] / m;
            };
            _main2.default.prototype._lcgSetSeed = function(stateProperty, val) {
              this[stateProperty] = (val == null ? Math.random() * m : val) >>> 0;
            };
            _main2.default.prototype.randomSeed = function(seed) {
              this._lcgSetSeed(randomStateProp, seed);
              this._gaussian_previous = false;
            };
            _main2.default.prototype.random = function(min, max) {
              _main2.default._validateParameters("random", arguments);
              var rand;
              if (this[randomStateProp] != null) {
                rand = this._lcg(randomStateProp);
              } else {
                rand = Math.random();
              }
              if (typeof min === "undefined") {
                return rand;
              } else if (typeof max === "undefined") {
                if (min instanceof Array) {
                  return min[Math.floor(rand * min.length)];
                } else {
                  return rand * min;
                }
              } else {
                if (min > max) {
                  var tmp = min;
                  min = max;
                  max = tmp;
                }
                return rand * (max - min) + min;
              }
            };
            _main2.default.prototype.randomGaussian = function(mean) {
              var sd = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
              var y1, x1, x2, w;
              if (this._gaussian_previous) {
                y1 = y2;
                this._gaussian_previous = false;
              } else {
                do {
                  x1 = this.random(2) - 1;
                  x2 = this.random(2) - 1;
                  w = x1 * x1 + x2 * x2;
                } while (w >= 1);
                w = Math.sqrt(-2 * Math.log(w) / w);
                y1 = x1 * w;
                y2 = x2 * w;
                this._gaussian_previous = true;
              }
              var m2 = mean || 0;
              return y1 * sd + m2;
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/main": 290
          }
        ],
        325: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../core/constants"));
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype._angleMode = constants2.RADIANS;
            _main2.default.prototype.acos = function(ratio) {
              return this._fromRadians(Math.acos(ratio));
            };
            _main2.default.prototype.asin = function(ratio) {
              return this._fromRadians(Math.asin(ratio));
            };
            _main2.default.prototype.atan = function(ratio) {
              return this._fromRadians(Math.atan(ratio));
            };
            _main2.default.prototype.atan2 = function(y, x) {
              return this._fromRadians(Math.atan2(y, x));
            };
            _main2.default.prototype.cos = function(angle) {
              return Math.cos(this._toRadians(angle));
            };
            _main2.default.prototype.sin = function(angle) {
              return Math.sin(this._toRadians(angle));
            };
            _main2.default.prototype.tan = function(angle) {
              return Math.tan(this._toRadians(angle));
            };
            _main2.default.prototype.degrees = function(angle) {
              return angle * constants2.RAD_TO_DEG;
            };
            _main2.default.prototype.radians = function(angle) {
              return angle * constants2.DEG_TO_RAD;
            };
            _main2.default.prototype.angleMode = function(mode) {
              _main2.default._validateParameters("angleMode", arguments);
              if (typeof mode === "undefined") {
                return this._angleMode;
              } else if (mode === constants2.DEGREES || mode === constants2.RADIANS) {
                this._angleMode = mode;
              }
            };
            _main2.default.prototype._toRadians = function(angle) {
              if (this._angleMode === constants2.DEGREES) {
                return angle * constants2.DEG_TO_RAD;
              }
              return angle;
            };
            _main2.default.prototype._toDegrees = function(angle) {
              if (this._angleMode === constants2.RADIANS) {
                return angle * constants2.RAD_TO_DEG;
              }
              return angle;
            };
            _main2.default.prototype._fromRadians = function(angle) {
              if (this._angleMode === constants2.DEGREES) {
                return angle * constants2.RAD_TO_DEG;
              }
              return angle;
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/constants": 278,
            "../core/main": 290,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        326: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.textAlign = function(horizAlign, vertAlign) {
              var _this$_renderer;
              _main2.default._validateParameters("textAlign", arguments);
              return (_this$_renderer = this._renderer).textAlign.apply(_this$_renderer, arguments);
            };
            _main2.default.prototype.textLeading = function(theLeading) {
              var _this$_renderer2;
              _main2.default._validateParameters("textLeading", arguments);
              return (_this$_renderer2 = this._renderer).textLeading.apply(_this$_renderer2, arguments);
            };
            _main2.default.prototype.textSize = function(theSize) {
              var _this$_renderer3;
              _main2.default._validateParameters("textSize", arguments);
              return (_this$_renderer3 = this._renderer).textSize.apply(_this$_renderer3, arguments);
            };
            _main2.default.prototype.textStyle = function(theStyle) {
              var _this$_renderer4;
              _main2.default._validateParameters("textStyle", arguments);
              return (_this$_renderer4 = this._renderer).textStyle.apply(_this$_renderer4, arguments);
            };
            _main2.default.prototype.textWidth = function() {
              var _this$_renderer5;
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              args[0] += "";
              _main2.default._validateParameters("textWidth", args);
              if (args[0].length === 0) {
                return 0;
              }
              return (_this$_renderer5 = this._renderer).textWidth.apply(_this$_renderer5, args);
            };
            _main2.default.prototype.textAscent = function() {
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }
              _main2.default._validateParameters("textAscent", args);
              return this._renderer.textAscent();
            };
            _main2.default.prototype.textDescent = function() {
              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
              }
              _main2.default._validateParameters("textDescent", args);
              return this._renderer.textDescent();
            };
            _main2.default.prototype._updateTextMetrics = function() {
              return this._renderer._updateTextMetrics();
            };
            _main2.default.prototype.textWrap = function(wrapStyle) {
              if (wrapStyle !== "WORD" && wrapStyle !== "CHAR") {
                throw "Error: textWrap accepts only WORD or CHAR";
              }
              return this._renderer.textWrap(wrapStyle);
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/main": 290
          }
        ],
        327: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.last-index-of");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.array.last-index-of");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.string.split");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../core/constants"));
            var opentype = _interopRequireWildcard2(_dereq_2("opentype.js"));
            _dereq_2("../core/friendly_errors/validate_params");
            _dereq_2("../core/friendly_errors/file_errors");
            _dereq_2("../core/friendly_errors/fes_core");
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.loadFont = function(path, onSuccess, onError) {
              _main2.default._validateParameters("loadFont", arguments);
              var p5Font = new _main2.default.Font(this);
              var self2 = this;
              opentype.load(path, function(err, font) {
                if (err) {
                  _main2.default._friendlyFileLoadError(4, path);
                  if (typeof onError !== "undefined") {
                    return onError(err);
                  }
                  console.error(err, path);
                  return;
                }
                p5Font.font = font;
                if (typeof onSuccess !== "undefined") {
                  onSuccess(p5Font);
                }
                self2._decrementPreload();
                var validFontTypes = [
                  "ttf",
                  "otf",
                  "woff",
                  "woff2"
                ];
                var fileNoPath = path.split("\\").pop().split("/").pop();
                var lastDotIdx = fileNoPath.lastIndexOf(".");
                var fontFamily;
                var newStyle;
                var fileExt = lastDotIdx < 1 ? null : fileNoPath.slice(lastDotIdx + 1);
                if (validFontTypes.includes(fileExt)) {
                  fontFamily = fileNoPath.slice(0, lastDotIdx !== -1 ? lastDotIdx : 0);
                  newStyle = document.createElement("style");
                  newStyle.appendChild(document.createTextNode("\n@font-face {\nfont-family: ".concat(fontFamily, ";\nsrc: url(").concat(path, ");\n}\n")));
                  document.head.appendChild(newStyle);
                }
              });
              return p5Font;
            };
            _main2.default.prototype.text = function(str, x, y, maxWidth, maxHeight) {
              var _this$_renderer;
              _main2.default._validateParameters("text", arguments);
              return !(this._renderer._doFill || this._renderer._doStroke) ? this : (_this$_renderer = this._renderer).text.apply(_this$_renderer, arguments);
            };
            _main2.default.prototype.textFont = function(theFont, theSize) {
              _main2.default._validateParameters("textFont", arguments);
              if (arguments.length) {
                if (!theFont) {
                  throw new Error("null font passed to textFont");
                }
                this._renderer._setProperty("_textFont", theFont);
                if (theSize) {
                  this._renderer._setProperty("_textSize", theSize);
                  if (!this._renderer._leadingSet) {
                    this._renderer._setProperty("_textLeading", theSize * constants2._DEFAULT_LEADMULT);
                  }
                }
                return this._renderer._applyTextProperties();
              }
              return this._renderer._textFont;
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/constants": 278,
            "../core/friendly_errors/fes_core": 281,
            "../core/friendly_errors/file_errors": 282,
            "../core/friendly_errors/validate_params": 285,
            "../core/main": 290,
            "core-js/modules/es.array.concat": 167,
            "core-js/modules/es.array.includes": 174,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.last-index-of": 178,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.string.split": 209,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248,
            "opentype.js": 263
          }
        ],
        328: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.fill");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.join");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.array.splice");
            _dereq_2("core-js/modules/es.function.name");
            _dereq_2("core-js/modules/es.number.to-fixed");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.fill");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.join");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.array.splice");
            _dereq_2("core-js/modules/es.function.name");
            _dereq_2("core-js/modules/es.number.to-fixed");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../core/constants"));
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _main2.default.Font = function(p) {
              this.parent = p;
              this.cache = {};
              this.font = void 0;
            };
            _main2.default.Font.prototype.textBounds = function(str) {
              var x = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
              var y = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
              var fontSize = arguments.length > 3 ? arguments[3] : void 0;
              var opts = arguments.length > 4 ? arguments[4] : void 0;
              var p = opts && opts.renderer && opts.renderer._pInst || this.parent;
              var ctx = p._renderer.drawingContext;
              var alignment = ctx.textAlign || constants2.LEFT;
              var baseline = ctx.textBaseline || constants2.BASELINE;
              var cacheResults = false;
              var result;
              var key2;
              fontSize = fontSize || p._renderer._textSize;
              if (cacheResults) {
                key2 = cacheKey("textBounds", str, x, y, fontSize, alignment, baseline);
                result = this.cache[key2];
              }
              if (!result) {
                var minX = [];
                var minY;
                var maxX = [];
                var maxY;
                var pos;
                var xCoords = [];
                xCoords[0] = [];
                var yCoords = [];
                var scale = this._scale(fontSize);
                var lineHeight = p._renderer.textLeading();
                var lineCount = 0;
                this.font.forEachGlyph(str, x, y, fontSize, opts, function(glyph, gX, gY, gFontSize) {
                  var gm = glyph.getMetrics();
                  if (glyph.index === 0 || glyph.index === 10) {
                    lineCount += 1;
                    xCoords[lineCount] = [];
                  } else {
                    xCoords[lineCount].push(gX + gm.xMin * scale);
                    xCoords[lineCount].push(gX + gm.xMax * scale);
                    yCoords.push(gY + lineCount * lineHeight + -gm.yMin * scale);
                    yCoords.push(gY + lineCount * lineHeight + -gm.yMax * scale);
                  }
                });
                if (xCoords[lineCount].length > 0) {
                  minX[lineCount] = Math.min.apply(null, xCoords[lineCount]);
                  maxX[lineCount] = Math.max.apply(null, xCoords[lineCount]);
                }
                var finalMaxX = 0;
                for (var i2 = 0; i2 <= lineCount; i2++) {
                  minX[i2] = Math.min.apply(null, xCoords[i2]);
                  maxX[i2] = Math.max.apply(null, xCoords[i2]);
                  var lineLength = maxX[i2] - minX[i2];
                  if (lineLength > finalMaxX) {
                    finalMaxX = lineLength;
                  }
                }
                var finalMinX = Math.min.apply(null, minX);
                minY = Math.min.apply(null, yCoords);
                maxY = Math.max.apply(null, yCoords);
                result = {
                  x: finalMinX,
                  y: minY,
                  h: maxY - minY,
                  w: finalMaxX,
                  advance: finalMinX - x
                };
                pos = this._handleAlignment(p._renderer, str, result.x, result.y, result.w + result.advance);
                result.x = pos.x;
                result.y = pos.y;
                if (cacheResults) {
                  this.cache[key2] = result;
                }
              }
              return result;
            };
            _main2.default.Font.prototype.textToPoints = function(txt, x, y, fontSize, options) {
              var xoff = 0;
              var result = [];
              var glyphs = this._getGlyphs(txt);
              function isSpace(i3) {
                return glyphs[i3].name && glyphs[i3].name === "space" || txt.length === glyphs.length && txt[i3] === " ";
              }
              fontSize = fontSize || this.parent._renderer._textSize;
              for (var i2 = 0; i2 < glyphs.length; i2++) {
                if (!isSpace(i2)) {
                  var gpath = glyphs[i2].getPath(x, y, fontSize), paths = splitPaths(gpath.commands);
                  for (var j = 0; j < paths.length; j++) {
                    var pts = pathToPoints(paths[j], options);
                    for (var k2 = 0; k2 < pts.length; k2++) {
                      pts[k2].x += xoff;
                      result.push(pts[k2]);
                    }
                  }
                }
                xoff += glyphs[i2].advanceWidth * this._scale(fontSize);
              }
              return result;
            };
            _main2.default.Font.prototype._getGlyphs = function(str) {
              return this.font.stringToGlyphs(str);
            };
            _main2.default.Font.prototype._getPath = function(line, x, y, options) {
              var p = options && options.renderer && options.renderer._pInst || this.parent, renderer = p._renderer, pos = this._handleAlignment(renderer, line, x, y);
              return this.font.getPath(line, pos.x, pos.y, renderer._textSize, options);
            };
            _main2.default.Font.prototype._getPathData = function(line, x, y, options) {
              var decimals = 3;
              if (typeof line === "string" && arguments.length > 2) {
                line = this._getPath(line, x, y, options);
              } else if (_typeof3(x) === "object") {
                options = x;
              }
              if (options && typeof options.decimals === "number") {
                decimals = options.decimals;
              }
              return line.toPathData(decimals);
            };
            _main2.default.Font.prototype._getSVG = function(line, x, y, options) {
              var decimals = 3;
              if (typeof line === "string" && arguments.length > 2) {
                line = this._getPath(line, x, y, options);
              } else if (_typeof3(x) === "object") {
                options = x;
              }
              if (options) {
                if (typeof options.decimals === "number") {
                  decimals = options.decimals;
                }
                if (typeof options.strokeWidth === "number") {
                  line.strokeWidth = options.strokeWidth;
                }
                if (typeof options.fill !== "undefined") {
                  line.fill = options.fill;
                }
                if (typeof options.stroke !== "undefined") {
                  line.stroke = options.stroke;
                }
              }
              return line.toSVG(decimals);
            };
            _main2.default.Font.prototype._renderPath = function(line, x, y, options) {
              var pdata;
              var pg = options && options.renderer || this.parent._renderer;
              var ctx = pg.drawingContext;
              if (_typeof3(line) === "object" && line.commands) {
                pdata = line.commands;
              } else {
                pdata = this._getPath(line, x, y, options).commands;
              }
              ctx.beginPath();
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = void 0;
              try {
                for (var _iterator = pdata[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var cmd = _step.value;
                  if (cmd.type === "M") {
                    ctx.moveTo(cmd.x, cmd.y);
                  } else if (cmd.type === "L") {
                    ctx.lineTo(cmd.x, cmd.y);
                  } else if (cmd.type === "C") {
                    ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
                  } else if (cmd.type === "Q") {
                    ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);
                  } else if (cmd.type === "Z") {
                    ctx.closePath();
                  }
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }
              if (pg._doStroke && pg._strokeSet) {
                ctx.stroke();
              }
              if (pg._doFill) {
                if (!pg._fillSet) {
                  pg._setFill(constants2._DEFAULT_TEXT_FILL);
                }
                ctx.fill();
              }
              return this;
            };
            _main2.default.Font.prototype._textWidth = function(str, fontSize) {
              return this.font.getAdvanceWidth(str, fontSize);
            };
            _main2.default.Font.prototype._textAscent = function(fontSize) {
              return this.font.ascender * this._scale(fontSize);
            };
            _main2.default.Font.prototype._textDescent = function(fontSize) {
              return -this.font.descender * this._scale(fontSize);
            };
            _main2.default.Font.prototype._scale = function(fontSize) {
              return 1 / this.font.unitsPerEm * (fontSize || this.parent._renderer._textSize);
            };
            _main2.default.Font.prototype._handleAlignment = function(renderer, line, x, y, textWidth) {
              var fontSize = renderer._textSize;
              if (typeof textWidth === "undefined") {
                textWidth = this._textWidth(line, fontSize);
              }
              switch (renderer._textAlign) {
                case constants2.CENTER:
                  x -= textWidth / 2;
                  break;
                case constants2.RIGHT:
                  x -= textWidth;
                  break;
              }
              switch (renderer._textBaseline) {
                case constants2.TOP:
                  y += this._textAscent(fontSize);
                  break;
                case constants2.CENTER:
                  y += this._textAscent(fontSize) / 2;
                  break;
                case constants2.BOTTOM:
                  y -= this._textDescent(fontSize);
                  break;
              }
              return {
                x,
                y
              };
            };
            function pathToPoints(cmds, options) {
              var opts = parseOpts(options, {
                sampleFactor: 0.1,
                simplifyThreshold: 0
              });
              var len = pointAtLength(cmds, 0, 1), t = len / (len * opts.sampleFactor), pts = [];
              for (var i2 = 0; i2 < len; i2 += t) {
                pts.push(pointAtLength(cmds, i2));
              }
              if (opts.simplifyThreshold) {
                simplify(pts, opts.simplifyThreshold);
              }
              return pts;
            }
            function simplify(pts) {
              var angle = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
              var num = 0;
              for (var i2 = pts.length - 1; pts.length > 3 && i2 >= 0; --i2) {
                if (collinear(at(pts, i2 - 1), at(pts, i2), at(pts, i2 + 1), angle)) {
                  pts.splice(i2 % pts.length, 1);
                  num++;
                }
              }
              return num;
            }
            function splitPaths(cmds) {
              var paths = [];
              var current;
              for (var i2 = 0; i2 < cmds.length; i2++) {
                if (cmds[i2].type === "M") {
                  if (current) {
                    paths.push(current);
                  }
                  current = [];
                }
                current.push(cmdToArr(cmds[i2]));
              }
              paths.push(current);
              return paths;
            }
            function cmdToArr(cmd) {
              var arr = [
                cmd.type
              ];
              if (cmd.type === "M" || cmd.type === "L") {
                arr.push(cmd.x, cmd.y);
              } else if (cmd.type === "C") {
                arr.push(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
              } else if (cmd.type === "Q") {
                arr.push(cmd.x1, cmd.y1, cmd.x, cmd.y);
              }
              return arr;
            }
            function parseOpts(options, defaults) {
              if (_typeof3(options) !== "object") {
                options = defaults;
              } else {
                for (var key2 in defaults) {
                  if (typeof options[key2] === "undefined") {
                    options[key2] = defaults[key2];
                  }
                }
              }
              return options;
            }
            function at(v, i2) {
              var s = v.length;
              return v[i2 < 0 ? i2 % s + s : i2 % s];
            }
            function collinear(a, b, c, thresholdAngle) {
              if (!thresholdAngle) {
                return areaTriangle(a, b, c) === 0;
              }
              if (typeof collinear.tmpPoint1 === "undefined") {
                collinear.tmpPoint1 = [];
                collinear.tmpPoint2 = [];
              }
              var ab = collinear.tmpPoint1, bc = collinear.tmpPoint2;
              ab.x = b.x - a.x;
              ab.y = b.y - a.y;
              bc.x = c.x - b.x;
              bc.y = c.y - b.y;
              var dot = ab.x * bc.x + ab.y * bc.y, magA = Math.sqrt(ab.x * ab.x + ab.y * ab.y), magB = Math.sqrt(bc.x * bc.x + bc.y * bc.y), angle = Math.acos(dot / (magA * magB));
              return angle < thresholdAngle;
            }
            function areaTriangle(a, b, c) {
              return (b[0] - a[0]) * (c[1] - a[1]) - (c[0] - a[0]) * (b[1] - a[1]);
            }
            function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {
              var t1 = 1 - t;
              var t13 = Math.pow(t1, 3);
              var t12 = Math.pow(t1, 2);
              var t2 = t * t;
              var t3 = t2 * t;
              var x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x;
              var y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y;
              var mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x);
              var my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y);
              var nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x);
              var ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y);
              var ax = t1 * p1x + t * c1x;
              var ay = t1 * p1y + t * c1y;
              var cx = t1 * c2x + t * p2x;
              var cy = t1 * c2y + t * p2y;
              var alpha = 90 - Math.atan2(mx - nx, my - ny) * 180 / Math.PI;
              if (mx > nx || my < ny) {
                alpha += 180;
              }
              return {
                x,
                y,
                m: {
                  x: mx,
                  y: my
                },
                n: {
                  x: nx,
                  y: ny
                },
                start: {
                  x: ax,
                  y: ay
                },
                end: {
                  x: cx,
                  y: cy
                },
                alpha
              };
            }
            function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {
              return length == null ? bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) : findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, getTatLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));
            }
            function pointAtLength(path, length, istotal) {
              path = path2curve(path);
              var x;
              var y;
              var p;
              var l;
              var sp = "";
              var subpaths = {};
              var point;
              var len = 0;
              for (var i2 = 0, ii = path.length; i2 < ii; i2++) {
                p = path[i2];
                if (p[0] === "M") {
                  x = +p[1];
                  y = +p[2];
                } else {
                  l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);
                  if (len + l > length) {
                    if (!istotal) {
                      point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);
                      return {
                        x: point.x,
                        y: point.y,
                        alpha: point.alpha
                      };
                    }
                  }
                  len += l;
                  x = +p[5];
                  y = +p[6];
                }
                sp += p.shift() + p;
              }
              subpaths.end = sp;
              point = istotal ? len : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);
              if (point.alpha) {
                point = {
                  x: point.x,
                  y: point.y,
                  alpha: point.alpha
                };
              }
              return point;
            }
            function pathToAbsolute(pathArray) {
              var res = [], x = 0, y = 0, mx = 0, my = 0, start = 0;
              if (!pathArray) {
                return res;
              }
              if (pathArray[0][0] === "M") {
                x = +pathArray[0][1];
                y = +pathArray[0][2];
                mx = x;
                my = y;
                start++;
                res[0] = [
                  "M",
                  x,
                  y
                ];
              }
              var dots;
              var crz = pathArray.length === 3 && pathArray[0][0] === "M" && pathArray[1][0].toUpperCase() === "R" && pathArray[2][0].toUpperCase() === "Z";
              for (var r, pa, i2 = start, ii = pathArray.length; i2 < ii; i2++) {
                res.push(r = []);
                pa = pathArray[i2];
                if (pa[0] !== String.prototype.toUpperCase.call(pa[0])) {
                  r[0] = String.prototype.toUpperCase.call(pa[0]);
                  switch (r[0]) {
                    case "A":
                      r[1] = pa[1];
                      r[2] = pa[2];
                      r[3] = pa[3];
                      r[4] = pa[4];
                      r[5] = pa[5];
                      r[6] = +(pa[6] + x);
                      r[7] = +(pa[7] + y);
                      break;
                    case "V":
                      r[1] = +pa[1] + y;
                      break;
                    case "H":
                      r[1] = +pa[1] + x;
                      break;
                    case "R":
                      dots = [
                        x,
                        y
                      ].concat(pa.slice(1));
                      for (var j = 2, jj = dots.length; j < jj; j++) {
                        dots[j] = +dots[j] + x;
                        dots[++j] = +dots[j] + y;
                      }
                      res.pop();
                      res = res.concat(catmullRom2bezier(dots, crz));
                      break;
                    case "M":
                      mx = +pa[1] + x;
                      my = +pa[2] + y;
                      break;
                    default:
                      for (var _j = 1, _jj = pa.length; _j < _jj; _j++) {
                        r[_j] = +pa[_j] + (_j % 2 ? x : y);
                      }
                  }
                } else if (pa[0] === "R") {
                  dots = [
                    x,
                    y
                  ].concat(pa.slice(1));
                  res.pop();
                  res = res.concat(catmullRom2bezier(dots, crz));
                  r = [
                    "R"
                  ].concat(pa.slice(-2));
                } else {
                  for (var k2 = 0, kk = pa.length; k2 < kk; k2++) {
                    r[k2] = pa[k2];
                  }
                }
                switch (r[0]) {
                  case "Z":
                    x = mx;
                    y = my;
                    break;
                  case "H":
                    x = r[1];
                    break;
                  case "V":
                    y = r[1];
                    break;
                  case "M":
                    mx = r[r.length - 2];
                    my = r[r.length - 1];
                    break;
                  default:
                    x = r[r.length - 2];
                    y = r[r.length - 1];
                }
              }
              return res;
            }
            function path2curve(path, path2) {
              var p = pathToAbsolute(path), p2 = path2 && pathToAbsolute(path2);
              var attrs = {
                x: 0,
                y: 0,
                bx: 0,
                by: 0,
                X: 0,
                Y: 0,
                qx: null,
                qy: null
              };
              var attrs2 = {
                x: 0,
                y: 0,
                bx: 0,
                by: 0,
                X: 0,
                Y: 0,
                qx: null,
                qy: null
              };
              var pcoms1 = [];
              var pcoms2 = [];
              var ii;
              var processPath = function processPath2(path3, d, pcom2) {
                var nx;
                var ny;
                var tq = {
                  T: 1,
                  Q: 1
                };
                if (!path3) {
                  return [
                    "C",
                    d.x,
                    d.y,
                    d.x,
                    d.y,
                    d.x,
                    d.y
                  ];
                }
                if (!(path3[0] in tq)) {
                  d.qx = d.qy = null;
                }
                switch (path3[0]) {
                  case "M":
                    d.X = path3[1];
                    d.Y = path3[2];
                    break;
                  case "A":
                    path3 = [
                      "C"
                    ].concat(a2c.apply(0, [
                      d.x,
                      d.y
                    ].concat(path3.slice(1))));
                    break;
                  case "S":
                    if (pcom2 === "C" || pcom2 === "S") {
                      nx = d.x * 2 - d.bx;
                      ny = d.y * 2 - d.by;
                    } else {
                      nx = d.x;
                      ny = d.y;
                    }
                    path3 = [
                      "C",
                      nx,
                      ny
                    ].concat(path3.slice(1));
                    break;
                  case "T":
                    if (pcom2 === "Q" || pcom2 === "T") {
                      d.qx = d.x * 2 - d.qx;
                      d.qy = d.y * 2 - d.qy;
                    } else {
                      d.qx = d.x;
                      d.qy = d.y;
                    }
                    path3 = [
                      "C"
                    ].concat(q2c(d.x, d.y, d.qx, d.qy, path3[1], path3[2]));
                    break;
                  case "Q":
                    d.qx = path3[1];
                    d.qy = path3[2];
                    path3 = [
                      "C"
                    ].concat(q2c(d.x, d.y, path3[1], path3[2], path3[3], path3[4]));
                    break;
                  case "L":
                    path3 = [
                      "C"
                    ].concat(l2c(d.x, d.y, path3[1], path3[2]));
                    break;
                  case "H":
                    path3 = [
                      "C"
                    ].concat(l2c(d.x, d.y, path3[1], d.y));
                    break;
                  case "V":
                    path3 = [
                      "C"
                    ].concat(l2c(d.x, d.y, d.x, path3[1]));
                    break;
                  case "Z":
                    path3 = [
                      "C"
                    ].concat(l2c(d.x, d.y, d.X, d.Y));
                    break;
                }
                return path3;
              }, fixArc = function fixArc2(pp, i3) {
                if (pp[i3].length > 7) {
                  pp[i3].shift();
                  var pi = pp[i3];
                  while (pi.length) {
                    pcoms1[i3] = "A";
                    if (p2) {
                      pcoms2[i3] = "A";
                    }
                    pp.splice(i3++, 0, [
                      "C"
                    ].concat(pi.splice(0, 6)));
                  }
                  pp.splice(i3, 1);
                  ii = Math.max(p.length, p2 && p2.length || 0);
                }
              }, fixM = function fixM2(path1, path22, a1, a2, i3) {
                if (path1 && path22 && path1[i3][0] === "M" && path22[i3][0] !== "M") {
                  path22.splice(i3, 0, [
                    "M",
                    a2.x,
                    a2.y
                  ]);
                  a1.bx = 0;
                  a1.by = 0;
                  a1.x = path1[i3][1];
                  a1.y = path1[i3][2];
                  ii = Math.max(p.length, p2 && p2.length || 0);
                }
              };
              var pfirst = "";
              var pcom = "";
              ii = Math.max(p.length, p2 && p2.length || 0);
              for (var i2 = 0; i2 < ii; i2++) {
                if (p[i2]) {
                  pfirst = p[i2][0];
                }
                if (pfirst !== "C") {
                  pcoms1[i2] = pfirst;
                  if (i2) {
                    pcom = pcoms1[i2 - 1];
                  }
                }
                p[i2] = processPath(p[i2], attrs, pcom);
                if (pcoms1[i2] !== "A" && pfirst === "C") {
                  pcoms1[i2] = "C";
                }
                fixArc(p, i2);
                if (p2) {
                  if (p2[i2]) {
                    pfirst = p2[i2][0];
                  }
                  if (pfirst !== "C") {
                    pcoms2[i2] = pfirst;
                    if (i2) {
                      pcom = pcoms2[i2 - 1];
                    }
                  }
                  p2[i2] = processPath(p2[i2], attrs2, pcom);
                  if (pcoms2[i2] !== "A" && pfirst === "C") {
                    pcoms2[i2] = "C";
                  }
                  fixArc(p2, i2);
                }
                fixM(p, p2, attrs, attrs2, i2);
                fixM(p2, p, attrs2, attrs, i2);
                var seg = p[i2], seg2 = p2 && p2[i2], seglen = seg.length, seg2len = p2 && seg2.length;
                attrs.x = seg[seglen - 2];
                attrs.y = seg[seglen - 1];
                attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;
                attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;
                attrs2.bx = p2 && (parseFloat(seg2[seg2len - 4]) || attrs2.x);
                attrs2.by = p2 && (parseFloat(seg2[seg2len - 3]) || attrs2.y);
                attrs2.x = p2 && seg2[seg2len - 2];
                attrs2.y = p2 && seg2[seg2len - 1];
              }
              return p2 ? [
                p,
                p2
              ] : p;
            }
            function a2c(x1, y1, rx, ry, angle, lac, sweep_flag, x2, y2, recursive) {
              var PI = Math.PI;
              var _120 = PI * 120 / 180;
              var f1;
              var f2;
              var cx;
              var cy;
              var rad = PI / 180 * (+angle || 0);
              var res = [];
              var xy;
              var rotate = function rotate2(x3, y3, rad2) {
                var X = x3 * Math.cos(rad2) - y3 * Math.sin(rad2), Y = x3 * Math.sin(rad2) + y3 * Math.cos(rad2);
                return {
                  x: X,
                  y: Y
                };
              };
              if (!recursive) {
                xy = rotate(x1, y1, -rad);
                x1 = xy.x;
                y1 = xy.y;
                xy = rotate(x2, y2, -rad);
                x2 = xy.x;
                y2 = xy.y;
                var x = (x1 - x2) / 2;
                var y = (y1 - y2) / 2;
                var h = x * x / (rx * rx) + y * y / (ry * ry);
                if (h > 1) {
                  h = Math.sqrt(h);
                  rx = h * rx;
                  ry = h * ry;
                }
                var rx2 = rx * rx, ry2 = ry * ry;
                var k2 = (lac === sweep_flag ? -1 : 1) * Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)));
                cx = k2 * rx * y / ry + (x1 + x2) / 2;
                cy = k2 * -ry * x / rx + (y1 + y2) / 2;
                f1 = Math.asin(((y1 - cy) / ry).toFixed(9));
                f2 = Math.asin(((y2 - cy) / ry).toFixed(9));
                f1 = x1 < cx ? PI - f1 : f1;
                f2 = x2 < cx ? PI - f2 : f2;
                if (f1 < 0) {
                  f1 = PI * 2 + f1;
                }
                if (f2 < 0) {
                  f2 = PI * 2 + f2;
                }
                if (sweep_flag && f1 > f2) {
                  f1 = f1 - PI * 2;
                }
                if (!sweep_flag && f2 > f1) {
                  f2 = f2 - PI * 2;
                }
              } else {
                f1 = recursive[0];
                f2 = recursive[1];
                cx = recursive[2];
                cy = recursive[3];
              }
              var df = f2 - f1;
              if (Math.abs(df) > _120) {
                var f2old = f2, x2old = x2, y2old = y2;
                f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
                x2 = cx + rx * Math.cos(f2);
                y2 = cy + ry * Math.sin(f2);
                res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [
                  f2,
                  f2old,
                  cx,
                  cy
                ]);
              }
              df = f2 - f1;
              var c1 = Math.cos(f1), s1 = Math.sin(f1), c2 = Math.cos(f2), s2 = Math.sin(f2), t = Math.tan(df / 4), hx = 4 / 3 * rx * t, hy = 4 / 3 * ry * t, m1 = [
                x1,
                y1
              ], m2 = [
                x1 + hx * s1,
                y1 - hy * c1
              ], m3 = [
                x2 + hx * s2,
                y2 - hy * c2
              ], m4 = [
                x2,
                y2
              ];
              m2[0] = 2 * m1[0] - m2[0];
              m2[1] = 2 * m1[1] - m2[1];
              if (recursive) {
                return [
                  m2,
                  m3,
                  m4
                ].concat(res);
              } else {
                res = [
                  m2,
                  m3,
                  m4
                ].concat(res).join().split(",");
                var newres = [];
                for (var i2 = 0, ii = res.length; i2 < ii; i2++) {
                  newres[i2] = i2 % 2 ? rotate(res[i2 - 1], res[i2], rad).y : rotate(res[i2], res[i2 + 1], rad).x;
                }
                return newres;
              }
            }
            function catmullRom2bezier(crp, z) {
              var d = [];
              for (var i2 = 0, iLen = crp.length; iLen - 2 * !z > i2; i2 += 2) {
                var p = [
                  {
                    x: +crp[i2 - 2],
                    y: +crp[i2 - 1]
                  },
                  {
                    x: +crp[i2],
                    y: +crp[i2 + 1]
                  },
                  {
                    x: +crp[i2 + 2],
                    y: +crp[i2 + 3]
                  },
                  {
                    x: +crp[i2 + 4],
                    y: +crp[i2 + 5]
                  }
                ];
                if (z) {
                  if (!i2) {
                    p[0] = {
                      x: +crp[iLen - 2],
                      y: +crp[iLen - 1]
                    };
                  } else if (iLen - 4 === i2) {
                    p[3] = {
                      x: +crp[0],
                      y: +crp[1]
                    };
                  } else if (iLen - 2 === i2) {
                    p[2] = {
                      x: +crp[0],
                      y: +crp[1]
                    };
                    p[3] = {
                      x: +crp[2],
                      y: +crp[3]
                    };
                  }
                } else {
                  if (iLen - 4 === i2) {
                    p[3] = p[2];
                  } else if (!i2) {
                    p[0] = {
                      x: +crp[i2],
                      y: +crp[i2 + 1]
                    };
                  }
                }
                d.push([
                  "C",
                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,
                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,
                  (p[1].x + 6 * p[2].x - p[3].x) / 6,
                  (p[1].y + 6 * p[2].y - p[3].y) / 6,
                  p[2].x,
                  p[2].y
                ]);
              }
              return d;
            }
            function l2c(x1, y1, x2, y2) {
              return [
                x1,
                y1,
                x2,
                y2,
                x2,
                y2
              ];
            }
            function q2c(x1, y1, ax, ay, x2, y2) {
              var _13 = 1 / 3, _23 = 2 / 3;
              return [
                _13 * x1 + _23 * ax,
                _13 * y1 + _23 * ay,
                _13 * x2 + _23 * ax,
                _13 * y2 + _23 * ay,
                x2,
                y2
              ];
            }
            function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {
              if (z == null) {
                z = 1;
              }
              z = z > 1 ? 1 : z < 0 ? 0 : z;
              var z2 = z / 2;
              var n = 12;
              var Tvalues = [
                -0.1252,
                0.1252,
                -0.3678,
                0.3678,
                -0.5873,
                0.5873,
                -0.7699,
                0.7699,
                -0.9041,
                0.9041,
                -0.9816,
                0.9816
              ];
              var sum = 0;
              var Cvalues = [
                0.2491,
                0.2491,
                0.2335,
                0.2335,
                0.2032,
                0.2032,
                0.1601,
                0.1601,
                0.1069,
                0.1069,
                0.0472,
                0.0472
              ];
              for (var i2 = 0; i2 < n; i2++) {
                var ct = z2 * Tvalues[i2] + z2, xbase = base3(ct, x1, x2, x3, x4), ybase = base3(ct, y1, y2, y3, y4), comb = xbase * xbase + ybase * ybase;
                sum += Cvalues[i2] * Math.sqrt(comb);
              }
              return z2 * sum;
            }
            function getTatLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {
              if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {
                return;
              }
              var t = 1;
              var step = t / 2;
              var t2 = t - step;
              var l;
              var e2 = 0.01;
              l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);
              while (Math.abs(l - ll) > e2) {
                step /= 2;
                t2 += (l < ll ? 1 : -1) * step;
                l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);
              }
              return t2;
            }
            function base3(t, p1, p2, p3, p4) {
              var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4, t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;
              return t * t2 - 3 * p1 + 3 * p2;
            }
            function cacheKey() {
              var hash = "";
              for (var i2 = arguments.length - 1; i2 >= 0; --i2) {
                hash += "？".concat(i2 < 0 || arguments.length <= i2 ? void 0 : arguments[i2]);
              }
              return hash;
            }
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/constants": 278,
            "../core/main": 290,
            "core-js/modules/es.array.concat": 167,
            "core-js/modules/es.array.fill": 170,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.join": 177,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.array.splice": 182,
            "core-js/modules/es.function.name": 183,
            "core-js/modules/es.number.to-fixed": 189,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.string.split": 209,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        329: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.array.splice");
            _dereq_2("core-js/modules/es.array-buffer.constructor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.array.splice");
            _dereq_2("core-js/modules/es.array-buffer.constructor");
            _dereq_2("core-js/modules/es.object.to-string");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.append = function(array, value) {
              array.push(value);
              return array;
            };
            _main2.default.prototype.arrayCopy = function(src, srcPosition, dst, dstPosition, length) {
              var start;
              var end;
              if (typeof length !== "undefined") {
                end = Math.min(length, src.length);
                start = dstPosition;
                src = src.slice(srcPosition, end + srcPosition);
              } else {
                if (typeof dst !== "undefined") {
                  end = dst;
                  end = Math.min(end, src.length);
                } else {
                  end = src.length;
                }
                start = 0;
                dst = srcPosition;
                src = src.slice(0, end);
              }
              Array.prototype.splice.apply(dst, [
                start,
                end
              ].concat(src));
            };
            _main2.default.prototype.concat = function(list0, list1) {
              return list0.concat(list1);
            };
            _main2.default.prototype.reverse = function(list) {
              return list.reverse();
            };
            _main2.default.prototype.shorten = function(list) {
              list.pop();
              return list;
            };
            _main2.default.prototype.shuffle = function(arr, bool) {
              var isView = ArrayBuffer && ArrayBuffer.isView && ArrayBuffer.isView(arr);
              arr = bool || isView ? arr : arr.slice();
              var rnd, tmp, idx = arr.length;
              while (idx > 1) {
                rnd = this.random(0, 1) * idx | 0;
                tmp = arr[--idx];
                arr[idx] = arr[rnd];
                arr[rnd] = tmp;
              }
              return arr;
            };
            _main2.default.prototype.sort = function(list, count) {
              var arr = count ? list.slice(0, Math.min(count, list.length)) : list;
              var rest = count ? list.slice(Math.min(count, list.length)) : [];
              if (typeof arr[0] === "string") {
                arr = arr.sort();
              } else {
                arr = arr.sort(function(a, b) {
                  return a - b;
                });
              }
              return arr.concat(rest);
            };
            _main2.default.prototype.splice = function(list, value, index) {
              Array.prototype.splice.apply(list, [
                index,
                0
              ].concat(value));
              return list;
            };
            _main2.default.prototype.subset = function(list, start, count) {
              if (typeof count !== "undefined") {
                return list.slice(start, start + count);
              } else {
                return list.slice(start, list.length);
              }
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "core-js/modules/es.array-buffer.constructor": 166,
            "core-js/modules/es.array.concat": 167,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.array.splice": 182,
            "core-js/modules/es.object.to-string": 195
          }
        ],
        330: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.number.constructor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.repeat");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.number.constructor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.repeat");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.float = function(str) {
              if (str instanceof Array) {
                return str.map(parseFloat);
              }
              return parseFloat(str);
            };
            _main2.default.prototype.int = function(n) {
              var radix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;
              if (n === Infinity || n === "Infinity") {
                return Infinity;
              } else if (n === -Infinity || n === "-Infinity") {
                return -Infinity;
              } else if (typeof n === "string") {
                return parseInt(n, radix);
              } else if (typeof n === "number") {
                return n | 0;
              } else if (typeof n === "boolean") {
                return n ? 1 : 0;
              } else if (n instanceof Array) {
                return n.map(function(n2) {
                  return _main2.default.prototype.int(n2, radix);
                });
              }
            };
            _main2.default.prototype.str = function(n) {
              if (n instanceof Array) {
                return n.map(_main2.default.prototype.str);
              } else {
                return String(n);
              }
            };
            _main2.default.prototype.boolean = function(n) {
              if (typeof n === "number") {
                return n !== 0;
              } else if (typeof n === "string") {
                return n.toLowerCase() === "true";
              } else if (typeof n === "boolean") {
                return n;
              } else if (n instanceof Array) {
                return n.map(_main2.default.prototype.boolean);
              }
            };
            _main2.default.prototype.byte = function(n) {
              var nn = _main2.default.prototype.int(n, 10);
              if (typeof nn === "number") {
                return (nn + 128) % 256 - 128;
              } else if (nn instanceof Array) {
                return nn.map(_main2.default.prototype.byte);
              }
            };
            _main2.default.prototype.char = function(n) {
              if (typeof n === "number" && !isNaN(n)) {
                return String.fromCharCode(n);
              } else if (n instanceof Array) {
                return n.map(_main2.default.prototype.char);
              } else if (typeof n === "string") {
                return _main2.default.prototype.char(parseInt(n, 10));
              }
            };
            _main2.default.prototype.unchar = function(n) {
              if (typeof n === "string" && n.length === 1) {
                return n.charCodeAt(0);
              } else if (n instanceof Array) {
                return n.map(_main2.default.prototype.unchar);
              }
            };
            _main2.default.prototype.hex = function(n, digits) {
              digits = digits === void 0 || digits === null ? digits = 8 : digits;
              if (n instanceof Array) {
                return n.map(function(n2) {
                  return _main2.default.prototype.hex(n2, digits);
                });
              } else if (n === Infinity || n === -Infinity) {
                var c = n === Infinity ? "F" : "0";
                return c.repeat(digits);
              } else if (typeof n === "number") {
                if (n < 0) {
                  n = 4294967295 + n + 1;
                }
                var hex = Number(n).toString(16).toUpperCase();
                while (hex.length < digits) {
                  hex = "0".concat(hex);
                }
                if (hex.length >= digits) {
                  hex = hex.substring(hex.length - digits, hex.length);
                }
                return hex;
              }
            };
            _main2.default.prototype.unhex = function(n) {
              if (n instanceof Array) {
                return n.map(_main2.default.prototype.unhex);
              } else {
                return parseInt("0x".concat(n), 16);
              }
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "core-js/modules/es.array.map": 179,
            "core-js/modules/es.number.constructor": 187,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.string.repeat": 206
          }
        ],
        331: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.join");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.constructor");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.match");
            _dereq_2("core-js/modules/es.string.replace");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.string.trim");
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.join");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.constructor");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.match");
            _dereq_2("core-js/modules/es.string.replace");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.string.trim");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            _dereq_2("../core/friendly_errors/validate_params");
            _dereq_2("../core/friendly_errors/file_errors");
            _dereq_2("../core/friendly_errors/fes_core");
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.join = function(list, separator) {
              _main2.default._validateParameters("join", arguments);
              return list.join(separator);
            };
            _main2.default.prototype.match = function(str, reg) {
              _main2.default._validateParameters("match", arguments);
              return str.match(reg);
            };
            _main2.default.prototype.matchAll = function(str, reg) {
              _main2.default._validateParameters("matchAll", arguments);
              var re = new RegExp(reg, "g");
              var match = re.exec(str);
              var matches = [];
              while (match !== null) {
                matches.push(match);
                match = re.exec(str);
              }
              return matches;
            };
            _main2.default.prototype.nf = function(nums, left, right) {
              _main2.default._validateParameters("nf", arguments);
              if (nums instanceof Array) {
                return nums.map(function(x) {
                  return doNf(x, left, right);
                });
              } else {
                var typeOfFirst = Object.prototype.toString.call(nums);
                if (typeOfFirst === "[object Arguments]") {
                  if (nums.length === 3) {
                    return this.nf(nums[0], nums[1], nums[2]);
                  } else if (nums.length === 2) {
                    return this.nf(nums[0], nums[1]);
                  } else {
                    return this.nf(nums[0]);
                  }
                } else {
                  return doNf(nums, left, right);
                }
              }
            };
            function doNf(num, left, right) {
              var neg = num < 0;
              var n = neg ? num.toString().substring(1) : num.toString();
              var decimalInd = n.indexOf(".");
              var intPart = decimalInd !== -1 ? n.substring(0, decimalInd) : n;
              var decPart = decimalInd !== -1 ? n.substring(decimalInd + 1) : "";
              var str = neg ? "-" : "";
              if (typeof right !== "undefined") {
                var decimal = "";
                if (decimalInd !== -1 || right - decPart.length > 0) {
                  decimal = ".";
                }
                if (decPart.length > right) {
                  decPart = decPart.substring(0, right);
                }
                for (var i2 = 0; i2 < left - intPart.length; i2++) {
                  str += "0";
                }
                str += intPart;
                str += decimal;
                str += decPart;
                for (var j = 0; j < right - decPart.length; j++) {
                  str += "0";
                }
                return str;
              } else {
                for (var k2 = 0; k2 < Math.max(left - intPart.length, 0); k2++) {
                  str += "0";
                }
                str += n;
                return str;
              }
            }
            _main2.default.prototype.nfc = function(num, right) {
              _main2.default._validateParameters("nfc", arguments);
              if (num instanceof Array) {
                return num.map(function(x) {
                  return doNfc(x, right);
                });
              } else {
                return doNfc(num, right);
              }
            };
            function doNfc(num, right) {
              num = num.toString();
              var dec = num.indexOf(".");
              var rem = dec !== -1 ? num.substring(dec) : "";
              var n = dec !== -1 ? num.substring(0, dec) : num;
              n = n.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
              if (right === 0) {
                rem = "";
              } else if (typeof right !== "undefined") {
                if (right > rem.length) {
                  rem += dec === -1 ? "." : "";
                  var len = right - rem.length + 1;
                  for (var i2 = 0; i2 < len; i2++) {
                    rem += "0";
                  }
                } else {
                  rem = rem.substring(0, right + 1);
                }
              }
              return n + rem;
            }
            _main2.default.prototype.nfp = function() {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              _main2.default._validateParameters("nfp", args);
              var nfRes = _main2.default.prototype.nf.apply(this, args);
              if (nfRes instanceof Array) {
                return nfRes.map(addNfp);
              } else {
                return addNfp(nfRes);
              }
            };
            function addNfp(num) {
              return parseFloat(num) > 0 ? "+".concat(num.toString()) : num.toString();
            }
            _main2.default.prototype.nfs = function() {
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }
              _main2.default._validateParameters("nfs", args);
              var nfRes = _main2.default.prototype.nf.apply(this, args);
              if (nfRes instanceof Array) {
                return nfRes.map(addNfs);
              } else {
                return addNfs(nfRes);
              }
            };
            function addNfs(num) {
              return parseFloat(num) >= 0 ? " ".concat(num.toString()) : num.toString();
            }
            _main2.default.prototype.split = function(str, delim) {
              _main2.default._validateParameters("split", arguments);
              return str.split(delim);
            };
            _main2.default.prototype.splitTokens = function(value, delims) {
              _main2.default._validateParameters("splitTokens", arguments);
              var d;
              if (typeof delims !== "undefined") {
                var str = delims;
                var sqc = /\]/g.exec(str);
                var sqo = /\[/g.exec(str);
                if (sqo && sqc) {
                  str = str.slice(0, sqc.index) + str.slice(sqc.index + 1);
                  sqo = /\[/g.exec(str);
                  str = str.slice(0, sqo.index) + str.slice(sqo.index + 1);
                  d = new RegExp("[\\[".concat(str, "\\]]"), "g");
                } else if (sqc) {
                  str = str.slice(0, sqc.index) + str.slice(sqc.index + 1);
                  d = new RegExp("[".concat(str, "\\]]"), "g");
                } else if (sqo) {
                  str = str.slice(0, sqo.index) + str.slice(sqo.index + 1);
                  d = new RegExp("[".concat(str, "\\[]"), "g");
                } else {
                  d = new RegExp("[".concat(str, "]"), "g");
                }
              } else {
                d = /\s/g;
              }
              return value.split(d).filter(function(n) {
                return n;
              });
            };
            _main2.default.prototype.trim = function(str) {
              _main2.default._validateParameters("trim", arguments);
              if (str instanceof Array) {
                return str.map(this.trim);
              } else {
                return str.trim();
              }
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/friendly_errors/fes_core": 281,
            "../core/friendly_errors/file_errors": 282,
            "../core/friendly_errors/validate_params": 285,
            "../core/main": 290,
            "core-js/modules/es.array.filter": 171,
            "core-js/modules/es.array.index-of": 175,
            "core-js/modules/es.array.join": 177,
            "core-js/modules/es.array.map": 179,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.constructor": 198,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.string.match": 205,
            "core-js/modules/es.string.replace": 207,
            "core-js/modules/es.string.split": 209,
            "core-js/modules/es.string.trim": 211
          }
        ],
        332: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.day = function() {
              return new Date().getDate();
            };
            _main2.default.prototype.hour = function() {
              return new Date().getHours();
            };
            _main2.default.prototype.minute = function() {
              return new Date().getMinutes();
            };
            _main2.default.prototype.millis = function() {
              if (this._millisStart === -1) {
                return 0;
              } else {
                return window.performance.now() - this._millisStart;
              }
            };
            _main2.default.prototype.month = function() {
              return new Date().getMonth() + 1;
            };
            _main2.default.prototype.second = function() {
              return new Date().getSeconds();
            };
            _main2.default.prototype.year = function() {
              return new Date().getFullYear();
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/main": 290
          }
        ],
        333: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.math.hypot");
            _dereq_2("core-js/modules/es.number.to-fixed");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.math.hypot");
            _dereq_2("core-js/modules/es.number.to-fixed");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            _dereq_2("./p5.Geometry");
            var constants2 = _interopRequireWildcard2(_dereq_2("../core/constants"));
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.plane = function(width2, height2, detailX, detailY) {
              this._assert3d("plane");
              _main2.default._validateParameters("plane", arguments);
              if (typeof width2 === "undefined") {
                width2 = 50;
              }
              if (typeof height2 === "undefined") {
                height2 = width2;
              }
              if (typeof detailX === "undefined") {
                detailX = 1;
              }
              if (typeof detailY === "undefined") {
                detailY = 1;
              }
              var gId = "plane|".concat(detailX, "|").concat(detailY);
              if (!this._renderer.geometryInHash(gId)) {
                var _plane = function _plane2() {
                  var u, v, p;
                  for (var i2 = 0; i2 <= this.detailY; i2++) {
                    v = i2 / this.detailY;
                    for (var j = 0; j <= this.detailX; j++) {
                      u = j / this.detailX;
                      p = new _main2.default.Vector(u - 0.5, v - 0.5, 0);
                      this.vertices.push(p);
                      this.uvs.push(u, v);
                    }
                  }
                };
                var planeGeom = new _main2.default.Geometry(detailX, detailY, _plane);
                planeGeom.computeFaces().computeNormals();
                if (detailX <= 1 && detailY <= 1) {
                  planeGeom._makeTriangleEdges()._edgesToVertices();
                } else if (this._renderer._doStroke) {
                  console.log("Cannot draw stroke on plane objects with more than 1 detailX or 1 detailY");
                }
                this._renderer.createBuffers(gId, planeGeom);
              }
              this._renderer.drawBuffersScaled(gId, width2, height2, 1);
              return this;
            };
            _main2.default.prototype.box = function(width2, height2, depth, detailX, detailY) {
              this._assert3d("box");
              _main2.default._validateParameters("box", arguments);
              if (typeof width2 === "undefined") {
                width2 = 50;
              }
              if (typeof height2 === "undefined") {
                height2 = width2;
              }
              if (typeof depth === "undefined") {
                depth = height2;
              }
              var perPixelLighting = this._renderer.attributes && this._renderer.attributes.perPixelLighting;
              if (typeof detailX === "undefined") {
                detailX = perPixelLighting ? 1 : 4;
              }
              if (typeof detailY === "undefined") {
                detailY = perPixelLighting ? 1 : 4;
              }
              var gId = "box|".concat(detailX, "|").concat(detailY);
              if (!this._renderer.geometryInHash(gId)) {
                var _box = function _box2() {
                  var cubeIndices = [
                    [
                      0,
                      4,
                      2,
                      6
                    ],
                    // -1, 0, 0],// -x
                    [
                      1,
                      3,
                      5,
                      7
                    ],
                    // +1, 0, 0],// +x
                    [
                      0,
                      1,
                      4,
                      5
                    ],
                    // 0, -1, 0],// -y
                    [
                      2,
                      6,
                      3,
                      7
                    ],
                    // 0, +1, 0],// +y
                    [
                      0,
                      2,
                      1,
                      3
                    ],
                    // 0, 0, -1],// -z
                    [
                      4,
                      5,
                      6,
                      7
                    ]
                    // 0, 0, +1] // +z
                  ];
                  this.strokeIndices = [
                    [
                      0,
                      1
                    ],
                    [
                      1,
                      3
                    ],
                    [
                      3,
                      2
                    ],
                    [
                      6,
                      7
                    ],
                    [
                      8,
                      9
                    ],
                    [
                      9,
                      11
                    ],
                    [
                      14,
                      15
                    ],
                    [
                      16,
                      17
                    ],
                    [
                      17,
                      19
                    ],
                    [
                      18,
                      19
                    ],
                    [
                      20,
                      21
                    ],
                    [
                      22,
                      23
                    ]
                  ];
                  for (var i2 = 0; i2 < cubeIndices.length; i2++) {
                    var cubeIndex = cubeIndices[i2];
                    var v = i2 * 4;
                    for (var j = 0; j < 4; j++) {
                      var d = cubeIndex[j];
                      var octant = new _main2.default.Vector(((d & 1) * 2 - 1) / 2, ((d & 2) - 1) / 2, ((d & 4) / 2 - 1) / 2);
                      this.vertices.push(octant);
                      this.uvs.push(j & 1, (j & 2) / 2);
                    }
                    this.faces.push([
                      v,
                      v + 1,
                      v + 2
                    ]);
                    this.faces.push([
                      v + 2,
                      v + 1,
                      v + 3
                    ]);
                  }
                };
                var boxGeom = new _main2.default.Geometry(detailX, detailY, _box);
                boxGeom.computeNormals();
                if (detailX <= 4 && detailY <= 4) {
                  boxGeom._makeTriangleEdges()._edgesToVertices();
                } else if (this._renderer._doStroke) {
                  console.log("Cannot draw stroke on box objects with more than 4 detailX or 4 detailY");
                }
                this._renderer.createBuffers(gId, boxGeom);
              }
              this._renderer.drawBuffersScaled(gId, width2, height2, depth);
              return this;
            };
            _main2.default.prototype.sphere = function(radius, detailX, detailY) {
              this._assert3d("sphere");
              _main2.default._validateParameters("sphere", arguments);
              if (typeof radius === "undefined") {
                radius = 50;
              }
              if (typeof detailX === "undefined") {
                detailX = 24;
              }
              if (typeof detailY === "undefined") {
                detailY = 16;
              }
              this.ellipsoid(radius, radius, radius, detailX, detailY);
              return this;
            };
            var _truncatedCone = function _truncatedCone2(bottomRadius, topRadius, height2, detailX, detailY, bottomCap, topCap) {
              bottomRadius = bottomRadius <= 0 ? 1 : bottomRadius;
              topRadius = topRadius < 0 ? 0 : topRadius;
              height2 = height2 <= 0 ? bottomRadius : height2;
              detailX = detailX < 3 ? 3 : detailX;
              detailY = detailY < 1 ? 1 : detailY;
              bottomCap = bottomCap === void 0 ? true : bottomCap;
              topCap = topCap === void 0 ? topRadius !== 0 : topCap;
              var start = bottomCap ? -2 : 0;
              var end = detailY + (topCap ? 2 : 0);
              var slant = Math.atan2(bottomRadius - topRadius, height2);
              var sinSlant = Math.sin(slant);
              var cosSlant = Math.cos(slant);
              var yy, ii, jj;
              for (yy = start; yy <= end; ++yy) {
                var v = yy / detailY;
                var y = height2 * v;
                var ringRadius = void 0;
                if (yy < 0) {
                  y = 0;
                  v = 0;
                  ringRadius = bottomRadius;
                } else if (yy > detailY) {
                  y = height2;
                  v = 1;
                  ringRadius = topRadius;
                } else {
                  ringRadius = bottomRadius + (topRadius - bottomRadius) * v;
                }
                if (yy === -2 || yy === detailY + 2) {
                  ringRadius = 0;
                }
                y -= height2 / 2;
                for (ii = 0; ii < detailX; ++ii) {
                  var u = ii / (detailX - 1);
                  var ur = 2 * Math.PI * u;
                  var sur = Math.sin(ur);
                  var cur = Math.cos(ur);
                  this.vertices.push(new _main2.default.Vector(sur * ringRadius, y, cur * ringRadius));
                  var vertexNormal = void 0;
                  if (yy < 0) {
                    vertexNormal = new _main2.default.Vector(0, -1, 0);
                  } else if (yy > detailY && topRadius) {
                    vertexNormal = new _main2.default.Vector(0, 1, 0);
                  } else {
                    vertexNormal = new _main2.default.Vector(sur * cosSlant, sinSlant, cur * cosSlant);
                  }
                  this.vertexNormals.push(vertexNormal);
                  this.uvs.push(u, v);
                }
              }
              var startIndex = 0;
              if (bottomCap) {
                for (jj = 0; jj < detailX; ++jj) {
                  var nextjj = (jj + 1) % detailX;
                  this.faces.push([
                    startIndex + jj,
                    startIndex + detailX + nextjj,
                    startIndex + detailX + jj
                  ]);
                }
                startIndex += detailX * 2;
              }
              for (yy = 0; yy < detailY; ++yy) {
                for (ii = 0; ii < detailX; ++ii) {
                  var nextii = (ii + 1) % detailX;
                  this.faces.push([
                    startIndex + ii,
                    startIndex + nextii,
                    startIndex + detailX + nextii
                  ]);
                  this.faces.push([
                    startIndex + ii,
                    startIndex + detailX + nextii,
                    startIndex + detailX + ii
                  ]);
                }
                startIndex += detailX;
              }
              if (topCap) {
                startIndex += detailX;
                for (ii = 0; ii < detailX; ++ii) {
                  this.faces.push([
                    startIndex + ii,
                    startIndex + (ii + 1) % detailX,
                    startIndex + detailX
                  ]);
                }
              }
            };
            _main2.default.prototype.cylinder = function(radius, height2, detailX, detailY, bottomCap, topCap) {
              this._assert3d("cylinder");
              _main2.default._validateParameters("cylinder", arguments);
              if (typeof radius === "undefined") {
                radius = 50;
              }
              if (typeof height2 === "undefined") {
                height2 = radius;
              }
              if (typeof detailX === "undefined") {
                detailX = 24;
              }
              if (typeof detailY === "undefined") {
                detailY = 1;
              }
              if (typeof topCap === "undefined") {
                topCap = true;
              }
              if (typeof bottomCap === "undefined") {
                bottomCap = true;
              }
              var gId = "cylinder|".concat(detailX, "|").concat(detailY, "|").concat(bottomCap, "|").concat(topCap);
              if (!this._renderer.geometryInHash(gId)) {
                var cylinderGeom = new _main2.default.Geometry(detailX, detailY);
                _truncatedCone.call(cylinderGeom, 1, 1, 1, detailX, detailY, bottomCap, topCap);
                if (detailX <= 24 && detailY <= 16) {
                  cylinderGeom._makeTriangleEdges()._edgesToVertices();
                } else if (this._renderer._doStroke) {
                  console.log("Cannot draw stroke on cylinder objects with more than 24 detailX or 16 detailY");
                }
                this._renderer.createBuffers(gId, cylinderGeom);
              }
              this._renderer.drawBuffersScaled(gId, radius, height2, radius);
              return this;
            };
            _main2.default.prototype.cone = function(radius, height2, detailX, detailY, cap) {
              this._assert3d("cone");
              _main2.default._validateParameters("cone", arguments);
              if (typeof radius === "undefined") {
                radius = 50;
              }
              if (typeof height2 === "undefined") {
                height2 = radius;
              }
              if (typeof detailX === "undefined") {
                detailX = 24;
              }
              if (typeof detailY === "undefined") {
                detailY = 1;
              }
              if (typeof cap === "undefined") {
                cap = true;
              }
              var gId = "cone|".concat(detailX, "|").concat(detailY, "|").concat(cap);
              if (!this._renderer.geometryInHash(gId)) {
                var coneGeom = new _main2.default.Geometry(detailX, detailY);
                _truncatedCone.call(coneGeom, 1, 0, 1, detailX, detailY, cap, false);
                if (detailX <= 24 && detailY <= 16) {
                  coneGeom._makeTriangleEdges()._edgesToVertices();
                } else if (this._renderer._doStroke) {
                  console.log("Cannot draw stroke on cone objects with more than 24 detailX or 16 detailY");
                }
                this._renderer.createBuffers(gId, coneGeom);
              }
              this._renderer.drawBuffersScaled(gId, radius, height2, radius);
              return this;
            };
            _main2.default.prototype.ellipsoid = function(radiusX, radiusY, radiusZ, detailX, detailY) {
              this._assert3d("ellipsoid");
              _main2.default._validateParameters("ellipsoid", arguments);
              if (typeof radiusX === "undefined") {
                radiusX = 50;
              }
              if (typeof radiusY === "undefined") {
                radiusY = radiusX;
              }
              if (typeof radiusZ === "undefined") {
                radiusZ = radiusX;
              }
              if (typeof detailX === "undefined") {
                detailX = 24;
              }
              if (typeof detailY === "undefined") {
                detailY = 16;
              }
              var gId = "ellipsoid|".concat(detailX, "|").concat(detailY);
              if (!this._renderer.geometryInHash(gId)) {
                var _ellipsoid = function _ellipsoid2() {
                  for (var i2 = 0; i2 <= this.detailY; i2++) {
                    var v = i2 / this.detailY;
                    var phi = Math.PI * v - Math.PI / 2;
                    var cosPhi = Math.cos(phi);
                    var sinPhi = Math.sin(phi);
                    for (var j = 0; j <= this.detailX; j++) {
                      var u = j / this.detailX;
                      var theta = 2 * Math.PI * u;
                      var cosTheta = Math.cos(theta);
                      var sinTheta = Math.sin(theta);
                      var p = new _main2.default.Vector(cosPhi * sinTheta, sinPhi, cosPhi * cosTheta);
                      this.vertices.push(p);
                      this.vertexNormals.push(p);
                      this.uvs.push(u, v);
                    }
                  }
                };
                var ellipsoidGeom = new _main2.default.Geometry(detailX, detailY, _ellipsoid);
                ellipsoidGeom.computeFaces();
                if (detailX <= 24 && detailY <= 24) {
                  ellipsoidGeom._makeTriangleEdges()._edgesToVertices();
                } else if (this._renderer._doStroke) {
                  console.log("Cannot draw stroke on ellipsoids with more than 24 detailX or 24 detailY");
                }
                this._renderer.createBuffers(gId, ellipsoidGeom);
              }
              this._renderer.drawBuffersScaled(gId, radiusX, radiusY, radiusZ);
              return this;
            };
            _main2.default.prototype.torus = function(radius, tubeRadius, detailX, detailY) {
              this._assert3d("torus");
              _main2.default._validateParameters("torus", arguments);
              if (typeof radius === "undefined") {
                radius = 50;
              } else if (!radius) {
                return;
              }
              if (typeof tubeRadius === "undefined") {
                tubeRadius = 10;
              } else if (!tubeRadius) {
                return;
              }
              if (typeof detailX === "undefined") {
                detailX = 24;
              }
              if (typeof detailY === "undefined") {
                detailY = 16;
              }
              var tubeRatio = (tubeRadius / radius).toPrecision(4);
              var gId = "torus|".concat(tubeRatio, "|").concat(detailX, "|").concat(detailY);
              if (!this._renderer.geometryInHash(gId)) {
                var _torus = function _torus2() {
                  for (var i2 = 0; i2 <= this.detailY; i2++) {
                    var v = i2 / this.detailY;
                    var phi = 2 * Math.PI * v;
                    var cosPhi = Math.cos(phi);
                    var sinPhi = Math.sin(phi);
                    var r = 1 + tubeRatio * cosPhi;
                    for (var j = 0; j <= this.detailX; j++) {
                      var u = j / this.detailX;
                      var theta = 2 * Math.PI * u;
                      var cosTheta = Math.cos(theta);
                      var sinTheta = Math.sin(theta);
                      var p = new _main2.default.Vector(r * cosTheta, r * sinTheta, tubeRatio * sinPhi);
                      var n = new _main2.default.Vector(cosPhi * cosTheta, cosPhi * sinTheta, sinPhi);
                      this.vertices.push(p);
                      this.vertexNormals.push(n);
                      this.uvs.push(u, v);
                    }
                  }
                };
                var torusGeom = new _main2.default.Geometry(detailX, detailY, _torus);
                torusGeom.computeFaces();
                if (detailX <= 24 && detailY <= 16) {
                  torusGeom._makeTriangleEdges()._edgesToVertices();
                } else if (this._renderer._doStroke) {
                  console.log("Cannot draw strokes on torus object with more than 24 detailX or 16 detailY");
                }
                this._renderer.createBuffers(gId, torusGeom);
              }
              this._renderer.drawBuffersScaled(gId, radius, radius, radius);
              return this;
            };
            _main2.default.RendererGL.prototype.point = function(x, y, z) {
              if (typeof z === "undefined") {
                z = 0;
              }
              var _vertex = [];
              _vertex.push(new _main2.default.Vector(x, y, z));
              this._drawPoints(_vertex, this.immediateMode.buffers.point);
              return this;
            };
            _main2.default.RendererGL.prototype.triangle = function(args) {
              var x1 = args[0], y1 = args[1];
              var x2 = args[2], y2 = args[3];
              var x3 = args[4], y3 = args[5];
              var gId = "tri";
              if (!this.geometryInHash(gId)) {
                var _triangle = function _triangle2() {
                  var vertices = [];
                  vertices.push(new _main2.default.Vector(0, 0, 0));
                  vertices.push(new _main2.default.Vector(1, 0, 0));
                  vertices.push(new _main2.default.Vector(0, 1, 0));
                  this.strokeIndices = [
                    [
                      0,
                      1
                    ],
                    [
                      1,
                      2
                    ],
                    [
                      2,
                      0
                    ]
                  ];
                  this.vertices = vertices;
                  this.faces = [
                    [
                      0,
                      1,
                      2
                    ]
                  ];
                  this.uvs = [
                    0,
                    0,
                    1,
                    0,
                    1,
                    1
                  ];
                };
                var triGeom = new _main2.default.Geometry(1, 1, _triangle);
                triGeom._makeTriangleEdges()._edgesToVertices();
                triGeom.computeNormals();
                this.createBuffers(gId, triGeom);
              }
              var uMVMatrix = this.uMVMatrix.copy();
              try {
                var mult = new _main2.default.Matrix([
                  x2 - x1,
                  y2 - y1,
                  0,
                  0,
                  // the resulting unit X-axis
                  x3 - x1,
                  y3 - y1,
                  0,
                  0,
                  // the resulting unit Y-axis
                  0,
                  0,
                  1,
                  0,
                  // the resulting unit Z-axis (unchanged)
                  x1,
                  y1,
                  0,
                  1
                  // the resulting origin
                ]).mult(this.uMVMatrix);
                this.uMVMatrix = mult;
                this.drawBuffers(gId);
              } finally {
                this.uMVMatrix = uMVMatrix;
              }
              return this;
            };
            _main2.default.RendererGL.prototype.ellipse = function(args) {
              this.arc(args[0], args[1], args[2], args[3], 0, constants2.TWO_PI, constants2.OPEN, args[4]);
            };
            _main2.default.RendererGL.prototype.arc = function(args) {
              var x = arguments[0];
              var y = arguments[1];
              var width2 = arguments[2];
              var height2 = arguments[3];
              var start = arguments[4];
              var stop = arguments[5];
              var mode = arguments[6];
              var detail = arguments[7] || 25;
              var shape;
              var gId;
              if (Math.abs(stop - start) >= constants2.TWO_PI) {
                shape = "ellipse";
                gId = "".concat(shape, "|").concat(detail, "|");
              } else {
                shape = "arc";
                gId = "".concat(shape, "|").concat(start, "|").concat(stop, "|").concat(mode, "|").concat(detail, "|");
              }
              if (!this.geometryInHash(gId)) {
                var _arc = function _arc2() {
                  this.strokeIndices = [];
                  if (start.toFixed(10) !== stop.toFixed(10)) {
                    if (mode === constants2.PIE || typeof mode === "undefined") {
                      this.vertices.push(new _main2.default.Vector(0.5, 0.5, 0));
                      this.uvs.push([
                        0.5,
                        0.5
                      ]);
                    }
                    for (var i2 = 0; i2 <= detail; i2++) {
                      var u = i2 / detail;
                      var theta = (stop - start) * u + start;
                      var _x = 0.5 + Math.cos(theta) / 2;
                      var _y = 0.5 + Math.sin(theta) / 2;
                      this.vertices.push(new _main2.default.Vector(_x, _y, 0));
                      this.uvs.push([
                        _x,
                        _y
                      ]);
                      if (i2 < detail - 1) {
                        this.faces.push([
                          0,
                          i2 + 1,
                          i2 + 2
                        ]);
                        this.strokeIndices.push([
                          i2 + 1,
                          i2 + 2
                        ]);
                      }
                    }
                    switch (mode) {
                      case constants2.PIE:
                        this.faces.push([
                          0,
                          this.vertices.length - 2,
                          this.vertices.length - 1
                        ]);
                        this.strokeIndices.push([
                          0,
                          1
                        ]);
                        this.strokeIndices.push([
                          this.vertices.length - 2,
                          this.vertices.length - 1
                        ]);
                        this.strokeIndices.push([
                          0,
                          this.vertices.length - 1
                        ]);
                        break;
                      case constants2.CHORD:
                        this.strokeIndices.push([
                          0,
                          1
                        ]);
                        this.strokeIndices.push([
                          0,
                          this.vertices.length - 1
                        ]);
                        break;
                      case constants2.OPEN:
                        this.strokeIndices.push([
                          0,
                          1
                        ]);
                        break;
                      default:
                        this.faces.push([
                          0,
                          this.vertices.length - 2,
                          this.vertices.length - 1
                        ]);
                        this.strokeIndices.push([
                          this.vertices.length - 2,
                          this.vertices.length - 1
                        ]);
                    }
                  }
                };
                var arcGeom = new _main2.default.Geometry(detail, 1, _arc);
                arcGeom.computeNormals();
                if (detail <= 50) {
                  arcGeom._makeTriangleEdges()._edgesToVertices(arcGeom);
                } else if (this._doStroke) {
                  console.log("Cannot apply a stroke to an ".concat(shape, " with more than 50 detail"));
                }
                this.createBuffers(gId, arcGeom);
              }
              var uMVMatrix = this.uMVMatrix.copy();
              try {
                this.uMVMatrix.translate([
                  x,
                  y,
                  0
                ]);
                this.uMVMatrix.scale(width2, height2, 1);
                this.drawBuffers(gId);
              } finally {
                this.uMVMatrix = uMVMatrix;
              }
              return this;
            };
            _main2.default.RendererGL.prototype.rect = function(args) {
              var x = args[0];
              var y = args[1];
              var width2 = args[2];
              var height2 = args[3];
              if (typeof args[4] === "undefined") {
                var perPixelLighting = this._pInst._glAttributes.perPixelLighting;
                var detailX = args[4] || (perPixelLighting ? 1 : 24);
                var detailY = args[5] || (perPixelLighting ? 1 : 16);
                var gId = "rect|".concat(detailX, "|").concat(detailY);
                if (!this.geometryInHash(gId)) {
                  var _rect = function _rect2() {
                    for (var i2 = 0; i2 <= this.detailY; i2++) {
                      var v2 = i2 / this.detailY;
                      for (var j = 0; j <= this.detailX; j++) {
                        var u2 = j / this.detailX;
                        var p = new _main2.default.Vector(u2, v2, 0);
                        this.vertices.push(p);
                        this.uvs.push(u2, v2);
                      }
                    }
                    if (detailX > 0 && detailY > 0) {
                      this.strokeIndices = [
                        [
                          0,
                          detailX
                        ],
                        [
                          detailX,
                          (detailX + 1) * (detailY + 1) - 1
                        ],
                        [
                          (detailX + 1) * (detailY + 1) - 1,
                          (detailX + 1) * detailY
                        ],
                        [
                          (detailX + 1) * detailY,
                          0
                        ]
                      ];
                    }
                  };
                  var rectGeom = new _main2.default.Geometry(detailX, detailY, _rect);
                  rectGeom.computeFaces().computeNormals()._makeTriangleEdges()._edgesToVertices();
                  this.createBuffers(gId, rectGeom);
                }
                var uMVMatrix = this.uMVMatrix.copy();
                try {
                  this.uMVMatrix.translate([
                    x,
                    y,
                    0
                  ]);
                  this.uMVMatrix.scale(width2, height2, 1);
                  this.drawBuffers(gId);
                } finally {
                  this.uMVMatrix = uMVMatrix;
                }
              } else {
                var tl = args[4];
                var tr = typeof args[5] === "undefined" ? tl : args[5];
                var br = typeof args[6] === "undefined" ? tr : args[6];
                var bl = typeof args[7] === "undefined" ? br : args[7];
                var a = x;
                var b = y;
                var c = width2;
                var d = height2;
                c += a;
                d += b;
                if (a > c) {
                  var temp = a;
                  a = c;
                  c = temp;
                }
                if (b > d) {
                  var _temp = b;
                  b = d;
                  d = _temp;
                }
                var maxRounding = Math.min((c - a) / 2, (d - b) / 2);
                if (tl > maxRounding)
                  tl = maxRounding;
                if (tr > maxRounding)
                  tr = maxRounding;
                if (br > maxRounding)
                  br = maxRounding;
                if (bl > maxRounding)
                  bl = maxRounding;
                var x1 = a;
                var y1 = b;
                var x2 = c;
                var y2 = d;
                this.beginShape();
                if (tr !== 0) {
                  this.vertex(x2 - tr, y1);
                  this.quadraticVertex(x2, y1, x2, y1 + tr);
                } else {
                  this.vertex(x2, y1);
                }
                if (br !== 0) {
                  this.vertex(x2, y2 - br);
                  this.quadraticVertex(x2, y2, x2 - br, y2);
                } else {
                  this.vertex(x2, y2);
                }
                if (bl !== 0) {
                  this.vertex(x1 + bl, y2);
                  this.quadraticVertex(x1, y2, x1, y2 - bl);
                } else {
                  this.vertex(x1, y2);
                }
                if (tl !== 0) {
                  this.vertex(x1, y1 + tl);
                  this.quadraticVertex(x1, y1, x1 + tl, y1);
                } else {
                  this.vertex(x1, y1);
                }
                this.immediateMode.geometry.uvs.length = 0;
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = void 0;
                try {
                  for (var _iterator = this.immediateMode.geometry.vertices[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var vert = _step.value;
                    var u = (vert.x - x1) / width2;
                    var v = (vert.y - y1) / height2;
                    this.immediateMode.geometry.uvs.push(u, v);
                  }
                } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                      _iterator.return();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                }
                this.endShape(constants2.CLOSE);
              }
              return this;
            };
            _main2.default.RendererGL.prototype.quad = function(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, detailX, detailY) {
              if (typeof detailX === "undefined") {
                detailX = 2;
              }
              if (typeof detailY === "undefined") {
                detailY = 2;
              }
              var gId = "quad|".concat(x1, "|").concat(y1, "|").concat(z1, "|").concat(x2, "|").concat(y2, "|").concat(z2, "|").concat(x3, "|").concat(y3, "|").concat(z3, "|").concat(x4, "|").concat(y4, "|").concat(z4, "|").concat(detailX, "|").concat(detailY);
              if (!this.geometryInHash(gId)) {
                var quadGeom = new _main2.default.Geometry(detailX, detailY, function() {
                  var xRes = 1 / (this.detailX - 1);
                  var yRes = 1 / (this.detailY - 1);
                  for (var y5 = 0; y5 < this.detailY; y5++) {
                    for (var x5 = 0; x5 < this.detailX; x5++) {
                      var pctx = x5 * xRes;
                      var pcty = y5 * yRes;
                      var linePt0x = (1 - pcty) * x1 + pcty * x4;
                      var linePt0y = (1 - pcty) * y1 + pcty * y4;
                      var linePt0z = (1 - pcty) * z1 + pcty * z4;
                      var linePt1x = (1 - pcty) * x2 + pcty * x3;
                      var linePt1y = (1 - pcty) * y2 + pcty * y3;
                      var linePt1z = (1 - pcty) * z2 + pcty * z3;
                      var ptx = (1 - pctx) * linePt0x + pctx * linePt1x;
                      var pty = (1 - pctx) * linePt0y + pctx * linePt1y;
                      var ptz = (1 - pctx) * linePt0z + pctx * linePt1z;
                      this.vertices.push(new _main2.default.Vector(ptx, pty, ptz));
                      this.uvs.push([
                        pctx,
                        pcty
                      ]);
                    }
                  }
                });
                quadGeom.faces = [];
                for (var y = 0; y < detailY - 1; y++) {
                  for (var x = 0; x < detailX - 1; x++) {
                    var pt0 = x + y * detailX;
                    var pt1 = x + 1 + y * detailX;
                    var pt2 = x + 1 + (y + 1) * detailX;
                    var pt3 = x + (y + 1) * detailX;
                    quadGeom.faces.push([
                      pt0,
                      pt1,
                      pt2
                    ]);
                    quadGeom.faces.push([
                      pt0,
                      pt2,
                      pt3
                    ]);
                  }
                }
                quadGeom.computeNormals()._makeTriangleEdges()._edgesToVertices();
                this.createBuffers(gId, quadGeom);
              }
              this.drawBuffers(gId);
              return this;
            };
            _main2.default.RendererGL.prototype.bezier = function(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {
              if (arguments.length === 8) {
                y4 = y3;
                x4 = x3;
                y3 = z2;
                x3 = y2;
                y2 = x2;
                x2 = z1;
                z1 = z2 = z3 = z4 = 0;
              }
              var bezierDetail = this._pInst._bezierDetail || 20;
              this.beginShape();
              for (var i2 = 0; i2 <= bezierDetail; i2++) {
                var c1 = Math.pow(1 - i2 / bezierDetail, 3);
                var c2 = 3 * (i2 / bezierDetail) * Math.pow(1 - i2 / bezierDetail, 2);
                var c3 = 3 * Math.pow(i2 / bezierDetail, 2) * (1 - i2 / bezierDetail);
                var c4 = Math.pow(i2 / bezierDetail, 3);
                this.vertex(x1 * c1 + x2 * c2 + x3 * c3 + x4 * c4, y1 * c1 + y2 * c2 + y3 * c3 + y4 * c4, z1 * c1 + z2 * c2 + z3 * c3 + z4 * c4);
              }
              this.endShape();
              return this;
            };
            _main2.default.RendererGL.prototype.curve = function(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {
              if (arguments.length === 8) {
                x4 = x3;
                y4 = y3;
                x3 = y2;
                y3 = x2;
                x2 = z1;
                y2 = x2;
                z1 = z2 = z3 = z4 = 0;
              }
              var curveDetail = this._pInst._curveDetail;
              this.beginShape();
              for (var i2 = 0; i2 <= curveDetail; i2++) {
                var c1 = Math.pow(i2 / curveDetail, 3) * 0.5;
                var c2 = Math.pow(i2 / curveDetail, 2) * 0.5;
                var c3 = i2 / curveDetail * 0.5;
                var c4 = 0.5;
                var vx = c1 * (-x1 + 3 * x2 - 3 * x3 + x4) + c2 * (2 * x1 - 5 * x2 + 4 * x3 - x4) + c3 * (-x1 + x3) + c4 * (2 * x2);
                var vy = c1 * (-y1 + 3 * y2 - 3 * y3 + y4) + c2 * (2 * y1 - 5 * y2 + 4 * y3 - y4) + c3 * (-y1 + y3) + c4 * (2 * y2);
                var vz = c1 * (-z1 + 3 * z2 - 3 * z3 + z4) + c2 * (2 * z1 - 5 * z2 + 4 * z3 - z4) + c3 * (-z1 + z3) + c4 * (2 * z2);
                this.vertex(vx, vy, vz);
              }
              this.endShape();
              return this;
            };
            _main2.default.RendererGL.prototype.line = function() {
              if (arguments.length === 6) {
                this.beginShape(constants2.LINES);
                this.vertex(arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 2 ? void 0 : arguments[2]);
                this.vertex(arguments.length <= 3 ? void 0 : arguments[3], arguments.length <= 4 ? void 0 : arguments[4], arguments.length <= 5 ? void 0 : arguments[5]);
                this.endShape();
              } else if (arguments.length === 4) {
                this.beginShape(constants2.LINES);
                this.vertex(arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 1 ? void 0 : arguments[1], 0);
                this.vertex(arguments.length <= 2 ? void 0 : arguments[2], arguments.length <= 3 ? void 0 : arguments[3], 0);
                this.endShape();
              }
              return this;
            };
            _main2.default.RendererGL.prototype.bezierVertex = function() {
              if (this.immediateMode._bezierVertex.length === 0) {
                throw Error("vertex() must be used once before calling bezierVertex()");
              } else {
                var w_x = [];
                var w_y = [];
                var w_z = [];
                var t, _x, _y, _z, i2, k2, m;
                var argLength = arguments.length;
                t = 0;
                if (this._lookUpTableBezier.length === 0 || this._lutBezierDetail !== this._pInst._curveDetail) {
                  this._lookUpTableBezier = [];
                  this._lutBezierDetail = this._pInst._curveDetail;
                  var step = 1 / this._lutBezierDetail;
                  var start = 0;
                  var end = 1;
                  var j = 0;
                  while (start < 1) {
                    t = parseFloat(start.toFixed(6));
                    this._lookUpTableBezier[j] = this._bezierCoefficients(t);
                    if (end.toFixed(6) === step.toFixed(6)) {
                      t = parseFloat(end.toFixed(6)) + parseFloat(start.toFixed(6));
                      ++j;
                      this._lookUpTableBezier[j] = this._bezierCoefficients(t);
                      break;
                    }
                    start += step;
                    end -= step;
                    ++j;
                  }
                }
                var LUTLength = this._lookUpTableBezier.length;
                var fillColors = [];
                for (m = 0; m < 4; m++) {
                  fillColors.push([]);
                }
                fillColors[0] = this.immediateMode.geometry.vertexColors.slice(-4);
                fillColors[3] = this.curFillColor.slice();
                var strokeColors = [];
                for (m = 0; m < 4; m++) {
                  strokeColors.push([]);
                }
                strokeColors[0] = this.immediateMode.geometry.vertexStrokeColors.slice(-4);
                strokeColors[3] = this.curStrokeColor.slice();
                if (argLength === 6) {
                  this.isBezier = true;
                  w_x = [
                    this.immediateMode._bezierVertex[0],
                    arguments.length <= 0 ? void 0 : arguments[0],
                    arguments.length <= 2 ? void 0 : arguments[2],
                    arguments.length <= 4 ? void 0 : arguments[4]
                  ];
                  w_y = [
                    this.immediateMode._bezierVertex[1],
                    arguments.length <= 1 ? void 0 : arguments[1],
                    arguments.length <= 3 ? void 0 : arguments[3],
                    arguments.length <= 5 ? void 0 : arguments[5]
                  ];
                  var d0 = Math.hypot(w_x[0] - w_x[1], w_y[0] - w_y[1]);
                  var d1 = Math.hypot(w_x[1] - w_x[2], w_y[1] - w_y[2]);
                  var d2 = Math.hypot(w_x[2] - w_x[3], w_y[2] - w_y[3]);
                  var totalLength = d0 + d1 + d2;
                  d0 /= totalLength;
                  d2 /= totalLength;
                  for (k2 = 0; k2 < 4; k2++) {
                    fillColors[1].push(fillColors[0][k2] * (1 - d0) + fillColors[3][k2] * d0);
                    fillColors[2].push(fillColors[0][k2] * d2 + fillColors[3][k2] * (1 - d2));
                    strokeColors[1].push(strokeColors[0][k2] * (1 - d0) + strokeColors[3][k2] * d0);
                    strokeColors[2].push(strokeColors[0][k2] * d2 + strokeColors[3][k2] * (1 - d2));
                  }
                  for (i2 = 0; i2 < LUTLength; i2++) {
                    this.curFillColor = [
                      0,
                      0,
                      0,
                      0
                    ];
                    this.curStrokeColor = [
                      0,
                      0,
                      0,
                      0
                    ];
                    _x = _y = 0;
                    for (m = 0; m < 4; m++) {
                      for (k2 = 0; k2 < 4; k2++) {
                        this.curFillColor[k2] += this._lookUpTableBezier[i2][m] * fillColors[m][k2];
                        this.curStrokeColor[k2] += this._lookUpTableBezier[i2][m] * strokeColors[m][k2];
                      }
                      _x += w_x[m] * this._lookUpTableBezier[i2][m];
                      _y += w_y[m] * this._lookUpTableBezier[i2][m];
                    }
                    this.vertex(_x, _y);
                  }
                  this.curFillColor = fillColors[3];
                  this.curStrokeColor = strokeColors[3];
                  this.immediateMode._bezierVertex[0] = arguments.length <= 4 ? void 0 : arguments[4];
                  this.immediateMode._bezierVertex[1] = arguments.length <= 5 ? void 0 : arguments[5];
                } else if (argLength === 9) {
                  this.isBezier = true;
                  w_x = [
                    this.immediateMode._bezierVertex[0],
                    arguments.length <= 0 ? void 0 : arguments[0],
                    arguments.length <= 3 ? void 0 : arguments[3],
                    arguments.length <= 6 ? void 0 : arguments[6]
                  ];
                  w_y = [
                    this.immediateMode._bezierVertex[1],
                    arguments.length <= 1 ? void 0 : arguments[1],
                    arguments.length <= 4 ? void 0 : arguments[4],
                    arguments.length <= 7 ? void 0 : arguments[7]
                  ];
                  w_z = [
                    this.immediateMode._bezierVertex[2],
                    arguments.length <= 2 ? void 0 : arguments[2],
                    arguments.length <= 5 ? void 0 : arguments[5],
                    arguments.length <= 8 ? void 0 : arguments[8]
                  ];
                  var _d = Math.hypot(w_x[0] - w_x[1], w_y[0] - w_y[1], w_z[0] - w_z[1]);
                  var _d2 = Math.hypot(w_x[1] - w_x[2], w_y[1] - w_y[2], w_z[1] - w_z[2]);
                  var _d3 = Math.hypot(w_x[2] - w_x[3], w_y[2] - w_y[3], w_z[2] - w_z[3]);
                  var _totalLength = _d + _d2 + _d3;
                  _d /= _totalLength;
                  _d3 /= _totalLength;
                  for (k2 = 0; k2 < 4; k2++) {
                    fillColors[1].push(fillColors[0][k2] * (1 - _d) + fillColors[3][k2] * _d);
                    fillColors[2].push(fillColors[0][k2] * _d3 + fillColors[3][k2] * (1 - _d3));
                    strokeColors[1].push(strokeColors[0][k2] * (1 - _d) + strokeColors[3][k2] * _d);
                    strokeColors[2].push(strokeColors[0][k2] * _d3 + strokeColors[3][k2] * (1 - _d3));
                  }
                  for (i2 = 0; i2 < LUTLength; i2++) {
                    this.curFillColor = [
                      0,
                      0,
                      0,
                      0
                    ];
                    this.curStrokeColor = [
                      0,
                      0,
                      0,
                      0
                    ];
                    _x = _y = _z = 0;
                    for (m = 0; m < 4; m++) {
                      for (k2 = 0; k2 < 4; k2++) {
                        this.curFillColor[k2] += this._lookUpTableBezier[i2][m] * fillColors[m][k2];
                        this.curStrokeColor[k2] += this._lookUpTableBezier[i2][m] * strokeColors[m][k2];
                      }
                      _x += w_x[m] * this._lookUpTableBezier[i2][m];
                      _y += w_y[m] * this._lookUpTableBezier[i2][m];
                      _z += w_z[m] * this._lookUpTableBezier[i2][m];
                    }
                    this.vertex(_x, _y, _z);
                  }
                  this.curFillColor = fillColors[3];
                  this.curStrokeColor = strokeColors[3];
                  this.immediateMode._bezierVertex[0] = arguments.length <= 6 ? void 0 : arguments[6];
                  this.immediateMode._bezierVertex[1] = arguments.length <= 7 ? void 0 : arguments[7];
                  this.immediateMode._bezierVertex[2] = arguments.length <= 8 ? void 0 : arguments[8];
                }
              }
            };
            _main2.default.RendererGL.prototype.quadraticVertex = function() {
              if (this.immediateMode._quadraticVertex.length === 0) {
                throw Error("vertex() must be used once before calling quadraticVertex()");
              } else {
                var w_x = [];
                var w_y = [];
                var w_z = [];
                var t, _x, _y, _z, i2, k2, m;
                var argLength = arguments.length;
                t = 0;
                if (this._lookUpTableQuadratic.length === 0 || this._lutQuadraticDetail !== this._pInst._curveDetail) {
                  this._lookUpTableQuadratic = [];
                  this._lutQuadraticDetail = this._pInst._curveDetail;
                  var step = 1 / this._lutQuadraticDetail;
                  var start = 0;
                  var end = 1;
                  var j = 0;
                  while (start < 1) {
                    t = parseFloat(start.toFixed(6));
                    this._lookUpTableQuadratic[j] = this._quadraticCoefficients(t);
                    if (end.toFixed(6) === step.toFixed(6)) {
                      t = parseFloat(end.toFixed(6)) + parseFloat(start.toFixed(6));
                      ++j;
                      this._lookUpTableQuadratic[j] = this._quadraticCoefficients(t);
                      break;
                    }
                    start += step;
                    end -= step;
                    ++j;
                  }
                }
                var LUTLength = this._lookUpTableQuadratic.length;
                var fillColors = [];
                for (m = 0; m < 3; m++) {
                  fillColors.push([]);
                }
                fillColors[0] = this.immediateMode.geometry.vertexColors.slice(-4);
                fillColors[2] = this.curFillColor.slice();
                var strokeColors = [];
                for (m = 0; m < 3; m++) {
                  strokeColors.push([]);
                }
                strokeColors[0] = this.immediateMode.geometry.vertexStrokeColors.slice(-4);
                strokeColors[2] = this.curStrokeColor.slice();
                if (argLength === 4) {
                  this.isQuadratic = true;
                  w_x = [
                    this.immediateMode._quadraticVertex[0],
                    arguments.length <= 0 ? void 0 : arguments[0],
                    arguments.length <= 2 ? void 0 : arguments[2]
                  ];
                  w_y = [
                    this.immediateMode._quadraticVertex[1],
                    arguments.length <= 1 ? void 0 : arguments[1],
                    arguments.length <= 3 ? void 0 : arguments[3]
                  ];
                  var d0 = Math.hypot(w_x[0] - w_x[1], w_y[0] - w_y[1]);
                  var d1 = Math.hypot(w_x[1] - w_x[2], w_y[1] - w_y[2]);
                  var totalLength = d0 + d1;
                  d0 /= totalLength;
                  for (k2 = 0; k2 < 4; k2++) {
                    fillColors[1].push(fillColors[0][k2] * (1 - d0) + fillColors[2][k2] * d0);
                    strokeColors[1].push(strokeColors[0][k2] * (1 - d0) + strokeColors[2][k2] * d0);
                  }
                  for (i2 = 0; i2 < LUTLength; i2++) {
                    this.curFillColor = [
                      0,
                      0,
                      0,
                      0
                    ];
                    this.curStrokeColor = [
                      0,
                      0,
                      0,
                      0
                    ];
                    _x = _y = 0;
                    for (m = 0; m < 3; m++) {
                      for (k2 = 0; k2 < 4; k2++) {
                        this.curFillColor[k2] += this._lookUpTableQuadratic[i2][m] * fillColors[m][k2];
                        this.curStrokeColor[k2] += this._lookUpTableQuadratic[i2][m] * strokeColors[m][k2];
                      }
                      _x += w_x[m] * this._lookUpTableQuadratic[i2][m];
                      _y += w_y[m] * this._lookUpTableQuadratic[i2][m];
                    }
                    this.vertex(_x, _y);
                  }
                  this.curFillColor = fillColors[2];
                  this.curStrokeColor = strokeColors[2];
                  this.immediateMode._quadraticVertex[0] = arguments.length <= 2 ? void 0 : arguments[2];
                  this.immediateMode._quadraticVertex[1] = arguments.length <= 3 ? void 0 : arguments[3];
                } else if (argLength === 6) {
                  this.isQuadratic = true;
                  w_x = [
                    this.immediateMode._quadraticVertex[0],
                    arguments.length <= 0 ? void 0 : arguments[0],
                    arguments.length <= 3 ? void 0 : arguments[3]
                  ];
                  w_y = [
                    this.immediateMode._quadraticVertex[1],
                    arguments.length <= 1 ? void 0 : arguments[1],
                    arguments.length <= 4 ? void 0 : arguments[4]
                  ];
                  w_z = [
                    this.immediateMode._quadraticVertex[2],
                    arguments.length <= 2 ? void 0 : arguments[2],
                    arguments.length <= 5 ? void 0 : arguments[5]
                  ];
                  var _d4 = Math.hypot(w_x[0] - w_x[1], w_y[0] - w_y[1], w_z[0] - w_z[1]);
                  var _d5 = Math.hypot(w_x[1] - w_x[2], w_y[1] - w_y[2], w_z[1] - w_z[2]);
                  var _totalLength2 = _d4 + _d5;
                  _d4 /= _totalLength2;
                  for (k2 = 0; k2 < 4; k2++) {
                    fillColors[1].push(fillColors[0][k2] * (1 - _d4) + fillColors[2][k2] * _d4);
                    strokeColors[1].push(strokeColors[0][k2] * (1 - _d4) + strokeColors[2][k2] * _d4);
                  }
                  for (i2 = 0; i2 < LUTLength; i2++) {
                    this.curFillColor = [
                      0,
                      0,
                      0,
                      0
                    ];
                    this.curStrokeColor = [
                      0,
                      0,
                      0,
                      0
                    ];
                    _x = _y = _z = 0;
                    for (m = 0; m < 3; m++) {
                      for (k2 = 0; k2 < 4; k2++) {
                        this.curFillColor[k2] += this._lookUpTableQuadratic[i2][m] * fillColors[m][k2];
                        this.curStrokeColor[k2] += this._lookUpTableQuadratic[i2][m] * strokeColors[m][k2];
                      }
                      _x += w_x[m] * this._lookUpTableQuadratic[i2][m];
                      _y += w_y[m] * this._lookUpTableQuadratic[i2][m];
                      _z += w_z[m] * this._lookUpTableQuadratic[i2][m];
                    }
                    this.vertex(_x, _y, _z);
                  }
                  this.curFillColor = fillColors[2];
                  this.curStrokeColor = strokeColors[2];
                  this.immediateMode._quadraticVertex[0] = arguments.length <= 3 ? void 0 : arguments[3];
                  this.immediateMode._quadraticVertex[1] = arguments.length <= 4 ? void 0 : arguments[4];
                  this.immediateMode._quadraticVertex[2] = arguments.length <= 5 ? void 0 : arguments[5];
                }
              }
            };
            _main2.default.RendererGL.prototype.curveVertex = function() {
              var w_x = [];
              var w_y = [];
              var w_z = [];
              var t, _x, _y, _z, i2;
              t = 0;
              var argLength = arguments.length;
              if (this._lookUpTableBezier.length === 0 || this._lutBezierDetail !== this._pInst._curveDetail) {
                this._lookUpTableBezier = [];
                this._lutBezierDetail = this._pInst._curveDetail;
                var step = 1 / this._lutBezierDetail;
                var start = 0;
                var end = 1;
                var j = 0;
                while (start < 1) {
                  t = parseFloat(start.toFixed(6));
                  this._lookUpTableBezier[j] = this._bezierCoefficients(t);
                  if (end.toFixed(6) === step.toFixed(6)) {
                    t = parseFloat(end.toFixed(6)) + parseFloat(start.toFixed(6));
                    ++j;
                    this._lookUpTableBezier[j] = this._bezierCoefficients(t);
                    break;
                  }
                  start += step;
                  end -= step;
                  ++j;
                }
              }
              var LUTLength = this._lookUpTableBezier.length;
              if (argLength === 2) {
                this.immediateMode._curveVertex.push(arguments.length <= 0 ? void 0 : arguments[0]);
                this.immediateMode._curveVertex.push(arguments.length <= 1 ? void 0 : arguments[1]);
                if (this.immediateMode._curveVertex.length === 8) {
                  this.isCurve = true;
                  w_x = this._bezierToCatmull([
                    this.immediateMode._curveVertex[0],
                    this.immediateMode._curveVertex[2],
                    this.immediateMode._curveVertex[4],
                    this.immediateMode._curveVertex[6]
                  ]);
                  w_y = this._bezierToCatmull([
                    this.immediateMode._curveVertex[1],
                    this.immediateMode._curveVertex[3],
                    this.immediateMode._curveVertex[5],
                    this.immediateMode._curveVertex[7]
                  ]);
                  for (i2 = 0; i2 < LUTLength; i2++) {
                    _x = w_x[0] * this._lookUpTableBezier[i2][0] + w_x[1] * this._lookUpTableBezier[i2][1] + w_x[2] * this._lookUpTableBezier[i2][2] + w_x[3] * this._lookUpTableBezier[i2][3];
                    _y = w_y[0] * this._lookUpTableBezier[i2][0] + w_y[1] * this._lookUpTableBezier[i2][1] + w_y[2] * this._lookUpTableBezier[i2][2] + w_y[3] * this._lookUpTableBezier[i2][3];
                    this.vertex(_x, _y);
                  }
                  for (i2 = 0; i2 < argLength; i2++) {
                    this.immediateMode._curveVertex.shift();
                  }
                }
              } else if (argLength === 3) {
                this.immediateMode._curveVertex.push(arguments.length <= 0 ? void 0 : arguments[0]);
                this.immediateMode._curveVertex.push(arguments.length <= 1 ? void 0 : arguments[1]);
                this.immediateMode._curveVertex.push(arguments.length <= 2 ? void 0 : arguments[2]);
                if (this.immediateMode._curveVertex.length === 12) {
                  this.isCurve = true;
                  w_x = this._bezierToCatmull([
                    this.immediateMode._curveVertex[0],
                    this.immediateMode._curveVertex[3],
                    this.immediateMode._curveVertex[6],
                    this.immediateMode._curveVertex[9]
                  ]);
                  w_y = this._bezierToCatmull([
                    this.immediateMode._curveVertex[1],
                    this.immediateMode._curveVertex[4],
                    this.immediateMode._curveVertex[7],
                    this.immediateMode._curveVertex[10]
                  ]);
                  w_z = this._bezierToCatmull([
                    this.immediateMode._curveVertex[2],
                    this.immediateMode._curveVertex[5],
                    this.immediateMode._curveVertex[8],
                    this.immediateMode._curveVertex[11]
                  ]);
                  for (i2 = 0; i2 < LUTLength; i2++) {
                    _x = w_x[0] * this._lookUpTableBezier[i2][0] + w_x[1] * this._lookUpTableBezier[i2][1] + w_x[2] * this._lookUpTableBezier[i2][2] + w_x[3] * this._lookUpTableBezier[i2][3];
                    _y = w_y[0] * this._lookUpTableBezier[i2][0] + w_y[1] * this._lookUpTableBezier[i2][1] + w_y[2] * this._lookUpTableBezier[i2][2] + w_y[3] * this._lookUpTableBezier[i2][3];
                    _z = w_z[0] * this._lookUpTableBezier[i2][0] + w_z[1] * this._lookUpTableBezier[i2][1] + w_z[2] * this._lookUpTableBezier[i2][2] + w_z[3] * this._lookUpTableBezier[i2][3];
                    this.vertex(_x, _y, _z);
                  }
                  for (i2 = 0; i2 < argLength; i2++) {
                    this.immediateMode._curveVertex.shift();
                  }
                }
              }
            };
            _main2.default.RendererGL.prototype.image = function(img, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) {
              if (this._isErasing) {
                this.blendMode(this._cachedBlendMode);
              }
              this._pInst.push();
              this._pInst.noLights();
              this._pInst.noStroke();
              this._pInst.texture(img);
              this._pInst.textureMode(constants2.NORMAL);
              var u0 = 0;
              if (sx <= img.width) {
                u0 = sx / img.width;
              }
              var u1 = 1;
              if (sx + sWidth <= img.width) {
                u1 = (sx + sWidth) / img.width;
              }
              var v0 = 0;
              if (sy <= img.height) {
                v0 = sy / img.height;
              }
              var v1 = 1;
              if (sy + sHeight <= img.height) {
                v1 = (sy + sHeight) / img.height;
              }
              this.beginShape();
              this.vertex(dx, dy, 0, u0, v0);
              this.vertex(dx + dWidth, dy, 0, u1, v0);
              this.vertex(dx + dWidth, dy + dHeight, 0, u1, v1);
              this.vertex(dx, dy + dHeight, 0, u0, v1);
              this.endShape(constants2.CLOSE);
              this._pInst.pop();
              if (this._isErasing) {
                this.blendMode(constants2.REMOVE);
              }
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/constants": 278,
            "../core/main": 290,
            "./p5.Geometry": 339,
            "core-js/modules/es.array.concat": 167,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.math.hypot": 185,
            "core-js/modules/es.number.to-fixed": 189,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        334: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.splice");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _dereq_2("core-js/modules/es.array.splice");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.to-string");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../core/constants"));
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.orbitControl = function(sensitivityX, sensitivityY, sensitivityZ) {
              this._assert3d("orbitControl");
              _main2.default._validateParameters("orbitControl", arguments);
              var mouseInCanvas = this.mouseX < this.width && this.mouseX > 0 && this.mouseY < this.height && this.mouseY > 0;
              if (!mouseInCanvas)
                return;
              var cam = this._renderer._curCamera;
              if (typeof sensitivityX === "undefined") {
                sensitivityX = 1;
              }
              if (typeof sensitivityY === "undefined") {
                sensitivityY = sensitivityX;
              }
              if (typeof sensitivityZ === "undefined") {
                sensitivityZ = 0.5;
              }
              if (this.contextMenuDisabled !== true) {
                this.canvas.oncontextmenu = function() {
                  return false;
                };
                this._setProperty("contextMenuDisabled", true);
              }
              if (this.wheelDefaultDisabled !== true) {
                this.canvas.onwheel = function() {
                  return false;
                };
                this._setProperty("wheelDefaultDisabled", true);
              }
              var scaleFactor = this.height < this.width ? this.height : this.width;
              if (this._mouseWheelDeltaY !== this._pmouseWheelDeltaY) {
                if (this._mouseWheelDeltaY > 0) {
                  this._renderer._curCamera._orbit(0, 0, sensitivityZ * scaleFactor);
                } else {
                  this._renderer._curCamera._orbit(0, 0, -sensitivityZ * scaleFactor);
                }
              }
              if (this.mouseIsPressed) {
                if (this.mouseButton === this.LEFT) {
                  var deltaTheta = -sensitivityX * (this.mouseX - this.pmouseX) / scaleFactor;
                  var deltaPhi = sensitivityY * (this.mouseY - this.pmouseY) / scaleFactor;
                  this._renderer._curCamera._orbit(deltaTheta, deltaPhi, 0);
                } else if (this.mouseButton === this.RIGHT) {
                  var local = cam._getLocalAxes();
                  var xmag = Math.sqrt(local.x[0] * local.x[0] + local.x[2] * local.x[2]);
                  if (xmag !== 0) {
                    local.x[0] /= xmag;
                    local.x[2] /= xmag;
                  }
                  var ymag = Math.sqrt(local.y[0] * local.y[0] + local.y[2] * local.y[2]);
                  if (ymag !== 0) {
                    local.y[0] /= ymag;
                    local.y[2] /= ymag;
                  }
                  var dx = -1 * sensitivityX * (this.mouseX - this.pmouseX);
                  var dz = -1 * sensitivityY * (this.mouseY - this.pmouseY);
                  cam.setPosition(cam.eyeX + dx * local.x[0] + dz * local.z[0], cam.eyeY, cam.eyeZ + dx * local.x[2] + dz * local.z[2]);
                }
              }
              return this;
            };
            _main2.default.prototype.debugMode = function() {
              this._assert3d("debugMode");
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              _main2.default._validateParameters("debugMode", args);
              for (var i2 = this._registeredMethods.post.length - 1; i2 >= 0; i2--) {
                if (this._registeredMethods.post[i2].toString() === this._grid().toString() || this._registeredMethods.post[i2].toString() === this._axesIcon().toString()) {
                  this._registeredMethods.post.splice(i2, 1);
                }
              }
              if (args[0] === constants2.GRID) {
                this.registerMethod("post", this._grid.call(this, args[1], args[2], args[3], args[4], args[5]));
              } else if (args[0] === constants2.AXES) {
                this.registerMethod("post", this._axesIcon.call(this, args[1], args[2], args[3], args[4]));
              } else {
                this.registerMethod("post", this._grid.call(this, args[0], args[1], args[2], args[3], args[4]));
                this.registerMethod("post", this._axesIcon.call(this, args[5], args[6], args[7], args[8]));
              }
            };
            _main2.default.prototype.noDebugMode = function() {
              this._assert3d("noDebugMode");
              for (var i2 = this._registeredMethods.post.length - 1; i2 >= 0; i2--) {
                if (this._registeredMethods.post[i2].toString() === this._grid().toString() || this._registeredMethods.post[i2].toString() === this._axesIcon().toString()) {
                  this._registeredMethods.post.splice(i2, 1);
                }
              }
            };
            _main2.default.prototype._grid = function(size, numDivs, xOff, yOff, zOff) {
              if (typeof size === "undefined") {
                size = this.width / 2;
              }
              if (typeof numDivs === "undefined") {
                numDivs = Math.round(size / 30) < 4 ? 4 : Math.round(size / 30);
              }
              if (typeof xOff === "undefined") {
                xOff = 0;
              }
              if (typeof yOff === "undefined") {
                yOff = 0;
              }
              if (typeof zOff === "undefined") {
                zOff = 0;
              }
              var spacing = size / numDivs;
              var halfSize = size / 2;
              return function() {
                this.push();
                this.stroke(this._renderer.curStrokeColor[0] * 255, this._renderer.curStrokeColor[1] * 255, this._renderer.curStrokeColor[2] * 255);
                this._renderer.uMVMatrix.set(this._renderer._curCamera.cameraMatrix.mat4[0], this._renderer._curCamera.cameraMatrix.mat4[1], this._renderer._curCamera.cameraMatrix.mat4[2], this._renderer._curCamera.cameraMatrix.mat4[3], this._renderer._curCamera.cameraMatrix.mat4[4], this._renderer._curCamera.cameraMatrix.mat4[5], this._renderer._curCamera.cameraMatrix.mat4[6], this._renderer._curCamera.cameraMatrix.mat4[7], this._renderer._curCamera.cameraMatrix.mat4[8], this._renderer._curCamera.cameraMatrix.mat4[9], this._renderer._curCamera.cameraMatrix.mat4[10], this._renderer._curCamera.cameraMatrix.mat4[11], this._renderer._curCamera.cameraMatrix.mat4[12], this._renderer._curCamera.cameraMatrix.mat4[13], this._renderer._curCamera.cameraMatrix.mat4[14], this._renderer._curCamera.cameraMatrix.mat4[15]);
                for (var q = 0; q <= numDivs; q++) {
                  this.beginShape(this.LINES);
                  this.vertex(-halfSize + xOff, yOff, q * spacing - halfSize + zOff);
                  this.vertex(+halfSize + xOff, yOff, q * spacing - halfSize + zOff);
                  this.endShape();
                }
                for (var i2 = 0; i2 <= numDivs; i2++) {
                  this.beginShape(this.LINES);
                  this.vertex(i2 * spacing - halfSize + xOff, yOff, -halfSize + zOff);
                  this.vertex(i2 * spacing - halfSize + xOff, yOff, +halfSize + zOff);
                  this.endShape();
                }
                this.pop();
              };
            };
            _main2.default.prototype._axesIcon = function(size, xOff, yOff, zOff) {
              if (typeof size === "undefined") {
                size = this.width / 20 > 40 ? this.width / 20 : 40;
              }
              if (typeof xOff === "undefined") {
                xOff = -this.width / 4;
              }
              if (typeof yOff === "undefined") {
                yOff = xOff;
              }
              if (typeof zOff === "undefined") {
                zOff = xOff;
              }
              return function() {
                this.push();
                this._renderer.uMVMatrix.set(this._renderer._curCamera.cameraMatrix.mat4[0], this._renderer._curCamera.cameraMatrix.mat4[1], this._renderer._curCamera.cameraMatrix.mat4[2], this._renderer._curCamera.cameraMatrix.mat4[3], this._renderer._curCamera.cameraMatrix.mat4[4], this._renderer._curCamera.cameraMatrix.mat4[5], this._renderer._curCamera.cameraMatrix.mat4[6], this._renderer._curCamera.cameraMatrix.mat4[7], this._renderer._curCamera.cameraMatrix.mat4[8], this._renderer._curCamera.cameraMatrix.mat4[9], this._renderer._curCamera.cameraMatrix.mat4[10], this._renderer._curCamera.cameraMatrix.mat4[11], this._renderer._curCamera.cameraMatrix.mat4[12], this._renderer._curCamera.cameraMatrix.mat4[13], this._renderer._curCamera.cameraMatrix.mat4[14], this._renderer._curCamera.cameraMatrix.mat4[15]);
                this.strokeWeight(2);
                this.stroke(255, 0, 0);
                this.beginShape(this.LINES);
                this.vertex(xOff, yOff, zOff);
                this.vertex(xOff + size, yOff, zOff);
                this.endShape();
                this.stroke(0, 255, 0);
                this.beginShape(this.LINES);
                this.vertex(xOff, yOff, zOff);
                this.vertex(xOff, yOff + size, zOff);
                this.endShape();
                this.stroke(0, 0, 255);
                this.beginShape(this.LINES);
                this.vertex(xOff, yOff, zOff);
                this.vertex(xOff, yOff, zOff + size);
                this.endShape();
                this.pop();
              };
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/constants": 278,
            "../core/main": 290,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.splice": 182,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        335: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../core/constants"));
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.ambientLight = function(v1, v2, v3, a) {
              this._assert3d("ambientLight");
              _main2.default._validateParameters("ambientLight", arguments);
              var color = this.color.apply(this, arguments);
              this._renderer.ambientLightColors.push(color._array[0], color._array[1], color._array[2]);
              this._renderer._enableLighting = true;
              return this;
            };
            _main2.default.prototype.specularColor = function(v1, v2, v3) {
              this._assert3d("specularColor");
              _main2.default._validateParameters("specularColor", arguments);
              var color = this.color.apply(this, arguments);
              this._renderer.specularColors = [
                color._array[0],
                color._array[1],
                color._array[2]
              ];
              return this;
            };
            _main2.default.prototype.directionalLight = function(v1, v2, v3, x, y, z) {
              this._assert3d("directionalLight");
              _main2.default._validateParameters("directionalLight", arguments);
              var color;
              if (v1 instanceof _main2.default.Color) {
                color = v1;
              } else {
                color = this.color(v1, v2, v3);
              }
              var _x, _y, _z;
              var v = arguments[arguments.length - 1];
              if (typeof v === "number") {
                _x = arguments[arguments.length - 3];
                _y = arguments[arguments.length - 2];
                _z = arguments[arguments.length - 1];
              } else {
                _x = v.x;
                _y = v.y;
                _z = v.z;
              }
              var l = Math.sqrt(_x * _x + _y * _y + _z * _z);
              this._renderer.directionalLightDirections.push(_x / l, _y / l, _z / l);
              this._renderer.directionalLightDiffuseColors.push(color._array[0], color._array[1], color._array[2]);
              Array.prototype.push.apply(this._renderer.directionalLightSpecularColors, this._renderer.specularColors);
              this._renderer._enableLighting = true;
              return this;
            };
            _main2.default.prototype.pointLight = function(v1, v2, v3, x, y, z) {
              this._assert3d("pointLight");
              _main2.default._validateParameters("pointLight", arguments);
              var color;
              if (v1 instanceof _main2.default.Color) {
                color = v1;
              } else {
                color = this.color(v1, v2, v3);
              }
              var _x, _y, _z;
              var v = arguments[arguments.length - 1];
              if (typeof v === "number") {
                _x = arguments[arguments.length - 3];
                _y = arguments[arguments.length - 2];
                _z = arguments[arguments.length - 1];
              } else {
                _x = v.x;
                _y = v.y;
                _z = v.z;
              }
              this._renderer.pointLightPositions.push(_x, _y, _z);
              this._renderer.pointLightDiffuseColors.push(color._array[0], color._array[1], color._array[2]);
              Array.prototype.push.apply(this._renderer.pointLightSpecularColors, this._renderer.specularColors);
              this._renderer._enableLighting = true;
              return this;
            };
            _main2.default.prototype.lights = function() {
              this._assert3d("lights");
              if (this._colorMode === constants2.RGB) {
                this.ambientLight(128, 128, 128);
                this.directionalLight(128, 128, 128, 0, 0, -1);
              } else {
                var maxBright = this._colorMaxes[this._colorMode][2];
                this.ambientLight(0, 0, maxBright);
                this.directionalLight(0, 0, maxBright, 0, 0, -1);
              }
              return this;
            };
            _main2.default.prototype.lightFalloff = function(constantAttenuation, linearAttenuation, quadraticAttenuation) {
              this._assert3d("lightFalloff");
              _main2.default._validateParameters("lightFalloff", arguments);
              if (constantAttenuation < 0) {
                constantAttenuation = 0;
                console.warn("Value of constant argument in lightFalloff() should be never be negative. Set to 0.");
              }
              if (linearAttenuation < 0) {
                linearAttenuation = 0;
                console.warn("Value of linear argument in lightFalloff() should be never be negative. Set to 0.");
              }
              if (quadraticAttenuation < 0) {
                quadraticAttenuation = 0;
                console.warn("Value of quadratic argument in lightFalloff() should be never be negative. Set to 0.");
              }
              if (constantAttenuation === 0 && linearAttenuation === 0 && quadraticAttenuation === 0) {
                constantAttenuation = 1;
                console.warn("Either one of the three arguments in lightFalloff() should be greater than zero. Set constant argument to 1.");
              }
              this._renderer.constantAttenuation = constantAttenuation;
              this._renderer.linearAttenuation = linearAttenuation;
              this._renderer.quadraticAttenuation = quadraticAttenuation;
              return this;
            };
            _main2.default.prototype.spotLight = function(v1, v2, v3, x, y, z, nx, ny, nz, angle, concentration) {
              this._assert3d("spotLight");
              _main2.default._validateParameters("spotLight", arguments);
              var color, position, direction;
              var length = arguments.length;
              switch (length) {
                case 11:
                case 10:
                  color = this.color(v1, v2, v3);
                  position = new _main2.default.Vector(x, y, z);
                  direction = new _main2.default.Vector(nx, ny, nz);
                  break;
                case 9:
                  if (v1 instanceof _main2.default.Color) {
                    color = v1;
                    position = new _main2.default.Vector(v2, v3, x);
                    direction = new _main2.default.Vector(y, z, nx);
                    angle = ny;
                    concentration = nz;
                  } else if (x instanceof _main2.default.Vector) {
                    color = this.color(v1, v2, v3);
                    position = x;
                    direction = new _main2.default.Vector(y, z, nx);
                    angle = ny;
                    concentration = nz;
                  } else if (nx instanceof _main2.default.Vector) {
                    color = this.color(v1, v2, v3);
                    position = new _main2.default.Vector(x, y, z);
                    direction = nx;
                    angle = ny;
                    concentration = nz;
                  } else {
                    color = this.color(v1, v2, v3);
                    position = new _main2.default.Vector(x, y, z);
                    direction = new _main2.default.Vector(nx, ny, nz);
                  }
                  break;
                case 8:
                  if (v1 instanceof _main2.default.Color) {
                    color = v1;
                    position = new _main2.default.Vector(v2, v3, x);
                    direction = new _main2.default.Vector(y, z, nx);
                    angle = ny;
                  } else if (x instanceof _main2.default.Vector) {
                    color = this.color(v1, v2, v3);
                    position = x;
                    direction = new _main2.default.Vector(y, z, nx);
                    angle = ny;
                  } else {
                    color = this.color(v1, v2, v3);
                    position = new _main2.default.Vector(x, y, z);
                    direction = nx;
                    angle = ny;
                  }
                  break;
                case 7:
                  if (v1 instanceof _main2.default.Color && v2 instanceof _main2.default.Vector) {
                    color = v1;
                    position = v2;
                    direction = new _main2.default.Vector(v3, x, y);
                    angle = z;
                    concentration = nx;
                  } else if (v1 instanceof _main2.default.Color && y instanceof _main2.default.Vector) {
                    color = v1;
                    position = new _main2.default.Vector(v2, v3, x);
                    direction = y;
                    angle = z;
                    concentration = nx;
                  } else if (x instanceof _main2.default.Vector && y instanceof _main2.default.Vector) {
                    color = this.color(v1, v2, v3);
                    position = x;
                    direction = y;
                    angle = z;
                    concentration = nx;
                  } else if (v1 instanceof _main2.default.Color) {
                    color = v1;
                    position = new _main2.default.Vector(v2, v3, x);
                    direction = new _main2.default.Vector(y, z, nx);
                  } else if (x instanceof _main2.default.Vector) {
                    color = this.color(v1, v2, v3);
                    position = x;
                    direction = new _main2.default.Vector(y, z, nx);
                  } else {
                    color = this.color(v1, v2, v3);
                    position = new _main2.default.Vector(x, y, z);
                    direction = nx;
                  }
                  break;
                case 6:
                  if (x instanceof _main2.default.Vector && y instanceof _main2.default.Vector) {
                    color = this.color(v1, v2, v3);
                    position = x;
                    direction = y;
                    angle = z;
                  } else if (v1 instanceof _main2.default.Color && y instanceof _main2.default.Vector) {
                    color = v1;
                    position = new _main2.default.Vector(v2, v3, x);
                    direction = y;
                    angle = z;
                  } else if (v1 instanceof _main2.default.Color && v2 instanceof _main2.default.Vector) {
                    color = v1;
                    position = v2;
                    direction = new _main2.default.Vector(v3, x, y);
                    angle = z;
                  }
                  break;
                case 5:
                  if (v1 instanceof _main2.default.Color && v2 instanceof _main2.default.Vector && v3 instanceof _main2.default.Vector) {
                    color = v1;
                    position = v2;
                    direction = v3;
                    angle = x;
                    concentration = y;
                  } else if (x instanceof _main2.default.Vector && y instanceof _main2.default.Vector) {
                    color = this.color(v1, v2, v3);
                    position = x;
                    direction = y;
                  } else if (v1 instanceof _main2.default.Color && y instanceof _main2.default.Vector) {
                    color = v1;
                    position = new _main2.default.Vector(v2, v3, x);
                    direction = y;
                  } else if (v1 instanceof _main2.default.Color && v2 instanceof _main2.default.Vector) {
                    color = v1;
                    position = v2;
                    direction = new _main2.default.Vector(v3, x, y);
                  }
                  break;
                case 4:
                  color = v1;
                  position = v2;
                  direction = v3;
                  angle = x;
                  break;
                case 3:
                  color = v1;
                  position = v2;
                  direction = v3;
                  break;
                default:
                  console.warn("Sorry, input for spotlight() is not in prescribed format. Too ".concat(length < 3 ? "few" : "many", " arguments were provided"));
                  return this;
              }
              this._renderer.spotLightDiffuseColors.push(color._array[0], color._array[1], color._array[2]);
              Array.prototype.push.apply(this._renderer.spotLightSpecularColors, this._renderer.specularColors);
              this._renderer.spotLightPositions.push(position.x, position.y, position.z);
              direction.normalize();
              this._renderer.spotLightDirections.push(direction.x, direction.y, direction.z);
              if (angle === void 0) {
                angle = Math.PI / 3;
              }
              if (concentration !== void 0 && concentration < 1) {
                concentration = 1;
                console.warn("Value of concentration needs to be greater than 1. Setting it to 1");
              } else if (concentration === void 0) {
                concentration = 100;
              }
              angle = this._renderer._pInst._toRadians(angle);
              this._renderer.spotLightAngle.push(Math.cos(angle));
              this._renderer.spotLightConc.push(concentration);
              this._renderer._enableLighting = true;
              return this;
            };
            _main2.default.prototype.noLights = function() {
              this._assert3d("noLights");
              _main2.default._validateParameters("noLights", arguments);
              this._renderer._enableLighting = false;
              this._renderer.ambientLightColors.length = 0;
              this._renderer.specularColors = [
                1,
                1,
                1
              ];
              this._renderer.directionalLightDirections.length = 0;
              this._renderer.directionalLightDiffuseColors.length = 0;
              this._renderer.directionalLightSpecularColors.length = 0;
              this._renderer.pointLightPositions.length = 0;
              this._renderer.pointLightDiffuseColors.length = 0;
              this._renderer.pointLightSpecularColors.length = 0;
              this._renderer.spotLightPositions.length = 0;
              this._renderer.spotLightDirections.length = 0;
              this._renderer.spotLightDiffuseColors.length = 0;
              this._renderer.spotLightSpecularColors.length = 0;
              this._renderer.spotLightAngle.length = 0;
              this._renderer.spotLightConc.length = 0;
              this._renderer.constantAttenuation = 1;
              this._renderer.linearAttenuation = 0;
              this._renderer.quadraticAttenuation = 0;
              this._renderer._useShininess = 1;
              return this;
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/constants": 278,
            "../core/main": 290,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        336: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.array.splice");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.string.match");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.string.trim");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.array.splice");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.string.match");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.string.trim");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            _dereq_2("./p5.Geometry");
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.loadModel = function(path) {
              _main2.default._validateParameters("loadModel", arguments);
              var normalize;
              var successCallback;
              var failureCallback;
              var fileType = path.slice(-4);
              if (typeof arguments[1] === "boolean") {
                normalize = arguments[1];
                successCallback = arguments[2];
                failureCallback = arguments[3];
                if (typeof arguments[4] !== "undefined") {
                  fileType = arguments[4];
                }
              } else {
                normalize = false;
                successCallback = arguments[1];
                failureCallback = arguments[2];
                if (typeof arguments[3] !== "undefined") {
                  fileType = arguments[3];
                }
              }
              var model = new _main2.default.Geometry();
              model.gid = "".concat(path, "|").concat(normalize);
              var self2 = this;
              if (fileType.match(/\.stl$/i)) {
                this.httpDo(path, "GET", "arrayBuffer", function(arrayBuffer) {
                  parseSTL(model, arrayBuffer);
                  if (normalize) {
                    model.normalize();
                  }
                  self2._decrementPreload();
                  if (typeof successCallback === "function") {
                    successCallback(model);
                  }
                }, failureCallback);
              } else if (fileType.match(/\.obj$/i)) {
                this.loadStrings(path, function(strings) {
                  parseObj(model, strings);
                  if (normalize) {
                    model.normalize();
                  }
                  self2._decrementPreload();
                  if (typeof successCallback === "function") {
                    successCallback(model);
                  }
                }, failureCallback);
              } else {
                _main2.default._friendlyFileLoadError(3, path);
                if (failureCallback) {
                  failureCallback();
                } else {
                  console.error("Sorry, the file type is invalid. Only OBJ and STL files are supported.");
                }
              }
              return model;
            };
            function parseObj(model, lines) {
              var loadedVerts = {
                v: [],
                vt: [],
                vn: []
              };
              var indexedVerts = {};
              for (var line = 0; line < lines.length; ++line) {
                var tokens = lines[line].trim().split(/\b\s+/);
                if (tokens.length > 0) {
                  if (tokens[0] === "v" || tokens[0] === "vn") {
                    var vertex = new _main2.default.Vector(parseFloat(tokens[1]), parseFloat(tokens[2]), parseFloat(tokens[3]));
                    loadedVerts[tokens[0]].push(vertex);
                  } else if (tokens[0] === "vt") {
                    var texVertex = [
                      parseFloat(tokens[1]),
                      1 - parseFloat(tokens[2])
                    ];
                    loadedVerts[tokens[0]].push(texVertex);
                  } else if (tokens[0] === "f") {
                    for (var tri = 3; tri < tokens.length; ++tri) {
                      var face = [];
                      var vertexTokens = [
                        1,
                        tri - 1,
                        tri
                      ];
                      for (var tokenInd = 0; tokenInd < vertexTokens.length; ++tokenInd) {
                        var vertString = tokens[vertexTokens[tokenInd]];
                        var vertIndex = 0;
                        if (indexedVerts[vertString] !== void 0) {
                          vertIndex = indexedVerts[vertString];
                        } else {
                          var vertParts = vertString.split("/");
                          for (var i2 = 0; i2 < vertParts.length; i2++) {
                            vertParts[i2] = parseInt(vertParts[i2]) - 1;
                          }
                          vertIndex = indexedVerts[vertString] = model.vertices.length;
                          model.vertices.push(loadedVerts.v[vertParts[0]].copy());
                          if (loadedVerts.vt[vertParts[1]]) {
                            model.uvs.push(loadedVerts.vt[vertParts[1]].slice());
                          } else {
                            model.uvs.push([
                              0,
                              0
                            ]);
                          }
                          if (loadedVerts.vn[vertParts[2]]) {
                            model.vertexNormals.push(loadedVerts.vn[vertParts[2]].copy());
                          }
                        }
                        face.push(vertIndex);
                      }
                      if (face[0] !== face[1] && face[0] !== face[2] && face[1] !== face[2]) {
                        model.faces.push(face);
                      }
                    }
                  }
                }
              }
              if (model.vertexNormals.length === 0) {
                model.computeNormals();
              }
              return model;
            }
            function parseSTL(model, buffer) {
              if (isBinary(buffer)) {
                parseBinarySTL(model, buffer);
              } else {
                var reader = new DataView(buffer);
                if (!("TextDecoder" in window)) {
                  console.warn("Sorry, ASCII STL loading only works in browsers that support TextDecoder (https://caniuse.com/#feat=textencoder)");
                  return model;
                }
                var decoder = new TextDecoder("utf-8");
                var lines = decoder.decode(reader);
                var lineArray = lines.split("\n");
                parseASCIISTL(model, lineArray);
              }
              return model;
            }
            function isBinary(data) {
              var reader = new DataView(data);
              var solid = [
                115,
                111,
                108,
                105,
                100
              ];
              for (var off = 0; off < 5; off++) {
                if (matchDataViewAt(solid, reader, off))
                  return false;
              }
              return true;
            }
            function matchDataViewAt(query, reader, offset) {
              for (var i2 = 0, il = query.length; i2 < il; i2++) {
                if (query[i2] !== reader.getUint8(offset + i2, false))
                  return false;
              }
              return true;
            }
            function parseBinarySTL(model, buffer) {
              var reader = new DataView(buffer);
              var faces = reader.getUint32(80, true);
              var r, g, b, hasColors = false, colors;
              var defaultR, defaultG, defaultB;
              for (var index = 0; index < 80 - 10; index++) {
                if (reader.getUint32(index, false) === 1129270351 && reader.getUint8(index + 4) === 82 && reader.getUint8(index + 5) === 61) {
                  hasColors = true;
                  colors = [];
                  defaultR = reader.getUint8(index + 6) / 255;
                  defaultG = reader.getUint8(index + 7) / 255;
                  defaultB = reader.getUint8(index + 8) / 255;
                }
              }
              var dataOffset = 84;
              var faceLength = 12 * 4 + 2;
              for (var face = 0; face < faces; face++) {
                var start = dataOffset + face * faceLength;
                var normalX = reader.getFloat32(start, true);
                var normalY = reader.getFloat32(start + 4, true);
                var normalZ = reader.getFloat32(start + 8, true);
                if (hasColors) {
                  var packedColor = reader.getUint16(start + 48, true);
                  if ((packedColor & 32768) === 0) {
                    r = (packedColor & 31) / 31;
                    g = (packedColor >> 5 & 31) / 31;
                    b = (packedColor >> 10 & 31) / 31;
                  } else {
                    r = defaultR;
                    g = defaultG;
                    b = defaultB;
                  }
                }
                var newNormal = new _main2.default.Vector(normalX, normalY, normalZ);
                for (var i2 = 1; i2 <= 3; i2++) {
                  var vertexstart = start + i2 * 12;
                  var newVertex = new _main2.default.Vector(reader.getFloat32(vertexstart, true), reader.getFloat32(vertexstart + 4, true), reader.getFloat32(vertexstart + 8, true));
                  model.vertices.push(newVertex);
                  model.vertexNormals.push(newNormal);
                  if (hasColors) {
                    colors.push(r, g, b);
                  }
                }
                model.faces.push([
                  3 * face,
                  3 * face + 1,
                  3 * face + 2
                ]);
                model.uvs.push([
                  0,
                  0
                ], [
                  0,
                  0
                ], [
                  0,
                  0
                ]);
              }
              if (hasColors) {
              }
              return model;
            }
            function parseASCIISTL(model, lines) {
              var state = "";
              var curVertexIndex = [];
              var newNormal, newVertex;
              for (var iterator = 0; iterator < lines.length; ++iterator) {
                var line = lines[iterator].trim();
                var parts = line.split(" ");
                for (var partsiterator = 0; partsiterator < parts.length; ++partsiterator) {
                  if (parts[partsiterator] === "") {
                    parts.splice(partsiterator, 1);
                  }
                }
                if (parts.length === 0) {
                  continue;
                }
                switch (state) {
                  case "":
                    if (parts[0] !== "solid") {
                      console.error(line);
                      console.error('Invalid state "'.concat(parts[0], '", should be "solid"'));
                      return;
                    } else {
                      state = "solid";
                    }
                    break;
                  case "solid":
                    if (parts[0] !== "facet" || parts[1] !== "normal") {
                      console.error(line);
                      console.error('Invalid state "'.concat(parts[0], '", should be "facet normal"'));
                      return;
                    } else {
                      newNormal = new _main2.default.Vector(parseFloat(parts[2]), parseFloat(parts[3]), parseFloat(parts[4]));
                      model.vertexNormals.push(newNormal, newNormal, newNormal);
                      state = "facet normal";
                    }
                    break;
                  case "facet normal":
                    if (parts[0] !== "outer" || parts[1] !== "loop") {
                      console.error(line);
                      console.error('Invalid state "'.concat(parts[0], '", should be "outer loop"'));
                      return;
                    } else {
                      state = "vertex";
                    }
                    break;
                  case "vertex":
                    if (parts[0] === "vertex") {
                      newVertex = new _main2.default.Vector(parseFloat(parts[1]), parseFloat(parts[2]), parseFloat(parts[3]));
                      model.vertices.push(newVertex);
                      model.uvs.push([
                        0,
                        0
                      ]);
                      curVertexIndex.push(model.vertices.indexOf(newVertex));
                    } else if (parts[0] === "endloop") {
                      model.faces.push(curVertexIndex);
                      curVertexIndex = [];
                      state = "endloop";
                    } else {
                      console.error(line);
                      console.error('Invalid state "'.concat(parts[0], '", should be "vertex" or "endloop"'));
                      return;
                    }
                    break;
                  case "endloop":
                    if (parts[0] !== "endfacet") {
                      console.error(line);
                      console.error('Invalid state "'.concat(parts[0], '", should be "endfacet"'));
                      return;
                    } else {
                      state = "endfacet";
                    }
                    break;
                  case "endfacet":
                    if (parts[0] === "endsolid") {
                    } else if (parts[0] === "facet" && parts[1] === "normal") {
                      newNormal = new _main2.default.Vector(parseFloat(parts[2]), parseFloat(parts[3]), parseFloat(parts[4]));
                      model.vertexNormals.push(newNormal, newNormal, newNormal);
                      state = "facet normal";
                    } else {
                      console.error(line);
                      console.error('Invalid state "'.concat(parts[0], '", should be "endsolid" or "facet normal"'));
                      return;
                    }
                    break;
                  default:
                    console.error('Invalid state "'.concat(state, '"'));
                    break;
                }
              }
              return model;
            }
            _main2.default.prototype.model = function(model) {
              this._assert3d("model");
              _main2.default._validateParameters("model", arguments);
              if (model.vertices.length > 0) {
                if (!this._renderer.geometryInHash(model.gid)) {
                  model._makeTriangleEdges()._edgesToVertices();
                  this._renderer.createBuffers(model.gid, model);
                }
                this._renderer.drawBuffers(model.gid);
              }
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "./p5.Geometry": 339,
            "core-js/modules/es.array.concat": 167,
            "core-js/modules/es.array.index-of": 175,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.array.splice": 182,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.string.match": 205,
            "core-js/modules/es.string.split": 209,
            "core-js/modules/es.string.trim": 211
          }
        ],
        337: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.join");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _dereq_2("core-js/modules/es.array.join");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../core/constants"));
            _dereq_2("./p5.Texture");
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.loadShader = function(vertFilename, fragFilename, callback, errorCallback) {
              _main2.default._validateParameters("loadShader", arguments);
              if (!errorCallback) {
                errorCallback = console.error;
              }
              var loadedShader = new _main2.default.Shader();
              var self2 = this;
              var loadedFrag = false;
              var loadedVert = false;
              var onLoad = function onLoad2() {
                self2._decrementPreload();
                if (callback) {
                  callback(loadedShader);
                }
              };
              this.loadStrings(vertFilename, function(result) {
                loadedShader._vertSrc = result.join("\n");
                loadedVert = true;
                if (loadedFrag) {
                  onLoad();
                }
              }, errorCallback);
              this.loadStrings(fragFilename, function(result) {
                loadedShader._fragSrc = result.join("\n");
                loadedFrag = true;
                if (loadedVert) {
                  onLoad();
                }
              }, errorCallback);
              return loadedShader;
            };
            _main2.default.prototype.createShader = function(vertSrc, fragSrc) {
              this._assert3d("createShader");
              _main2.default._validateParameters("createShader", arguments);
              return new _main2.default.Shader(this._renderer, vertSrc, fragSrc);
            };
            _main2.default.prototype.shader = function(s) {
              this._assert3d("shader");
              _main2.default._validateParameters("shader", arguments);
              if (s._renderer === void 0) {
                s._renderer = this._renderer;
              }
              s.init();
              if (s.isStrokeShader()) {
                this._renderer.userStrokeShader = s;
              } else {
                this._renderer.userFillShader = s;
                this._renderer._useNormalMaterial = false;
              }
              return this;
            };
            _main2.default.prototype.resetShader = function() {
              this._renderer.userFillShader = this._renderer.userStrokeShader = null;
              return this;
            };
            _main2.default.prototype.texture = function(tex) {
              this._assert3d("texture");
              _main2.default._validateParameters("texture", arguments);
              if (tex.gifProperties) {
                tex._animateGif(this);
              }
              this._renderer.drawMode = constants2.TEXTURE;
              this._renderer._useSpecularMaterial = false;
              this._renderer._useEmissiveMaterial = false;
              this._renderer._useNormalMaterial = false;
              this._renderer._tex = tex;
              this._renderer._setProperty("_doFill", true);
              return this;
            };
            _main2.default.prototype.textureMode = function(mode) {
              if (mode !== constants2.IMAGE && mode !== constants2.NORMAL) {
                console.warn("You tried to set ".concat(mode, " textureMode only supports IMAGE & NORMAL "));
              } else {
                this._renderer.textureMode = mode;
              }
            };
            _main2.default.prototype.textureWrap = function(wrapX) {
              var wrapY = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : wrapX;
              this._renderer.textureWrapX = wrapX;
              this._renderer.textureWrapY = wrapY;
              var textures = this._renderer.textures;
              for (var i2 = 0; i2 < textures.length; i2++) {
                textures[i2].setWrapMode(wrapX, wrapY);
              }
            };
            _main2.default.prototype.normalMaterial = function() {
              this._assert3d("normalMaterial");
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              _main2.default._validateParameters("normalMaterial", args);
              this._renderer.drawMode = constants2.FILL;
              this._renderer._useSpecularMaterial = false;
              this._renderer._useEmissiveMaterial = false;
              this._renderer._useNormalMaterial = true;
              this._renderer.curFillColor = [
                1,
                1,
                1,
                1
              ];
              this._renderer._setProperty("_doFill", true);
              this.noStroke();
              return this;
            };
            _main2.default.prototype.ambientMaterial = function(v1, v2, v3) {
              this._assert3d("ambientMaterial");
              _main2.default._validateParameters("ambientMaterial", arguments);
              var color = _main2.default.prototype.color.apply(this, arguments);
              this._renderer.curAmbientColor = color._array;
              this._renderer._useNormalMaterial = false;
              this._renderer._enableLighting = true;
              this._renderer._tex = null;
              this._renderer._setProperty("_doFill", true);
              return this;
            };
            _main2.default.prototype.emissiveMaterial = function(v1, v2, v3, a) {
              this._assert3d("emissiveMaterial");
              _main2.default._validateParameters("emissiveMaterial", arguments);
              var color = _main2.default.prototype.color.apply(this, arguments);
              this._renderer.curEmissiveColor = color._array;
              this._renderer._useEmissiveMaterial = true;
              this._renderer._useNormalMaterial = false;
              this._renderer._enableLighting = true;
              this._renderer._tex = null;
              return this;
            };
            _main2.default.prototype.specularMaterial = function(v1, v2, v3, alpha) {
              this._assert3d("specularMaterial");
              _main2.default._validateParameters("specularMaterial", arguments);
              var color = _main2.default.prototype.color.apply(this, arguments);
              this._renderer.curSpecularColor = color._array;
              this._renderer._useSpecularMaterial = true;
              this._renderer._useNormalMaterial = false;
              this._renderer._enableLighting = true;
              this._renderer._tex = null;
              return this;
            };
            _main2.default.prototype.shininess = function(shine) {
              this._assert3d("shininess");
              _main2.default._validateParameters("shininess", arguments);
              if (shine < 1) {
                shine = 1;
              }
              this._renderer._useShininess = shine;
              return this;
            };
            _main2.default.RendererGL.prototype._applyColorBlend = function(colors) {
              var gl = this.GL;
              var isTexture = this.drawMode === constants2.TEXTURE;
              var doBlend = this.userFillShader || this.userStrokeShader || this.userPointShader || isTexture || this.curBlendMode !== constants2.BLEND || colors[colors.length - 1] < 1 || this._isErasing;
              if (doBlend !== this._isBlending) {
                if (doBlend || this.curBlendMode !== constants2.BLEND && this.curBlendMode !== constants2.ADD) {
                  gl.enable(gl.BLEND);
                } else {
                  gl.disable(gl.BLEND);
                }
                gl.depthMask(true);
                this._isBlending = doBlend;
              }
              this._applyBlendMode();
              return colors;
            };
            _main2.default.RendererGL.prototype._applyBlendMode = function() {
              if (this._cachedBlendMode === this.curBlendMode) {
                return;
              }
              var gl = this.GL;
              switch (this.curBlendMode) {
                case constants2.BLEND:
                  gl.blendEquation(gl.FUNC_ADD);
                  gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                  break;
                case constants2.ADD:
                  gl.blendEquation(gl.FUNC_ADD);
                  gl.blendFunc(gl.ONE, gl.ONE);
                  break;
                case constants2.REMOVE:
                  gl.blendEquation(gl.FUNC_ADD);
                  gl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_ALPHA);
                  break;
                case constants2.MULTIPLY:
                  gl.blendEquation(gl.FUNC_ADD);
                  gl.blendFunc(gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA);
                  break;
                case constants2.SCREEN:
                  gl.blendEquation(gl.FUNC_ADD);
                  gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_COLOR);
                  break;
                case constants2.EXCLUSION:
                  gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
                  gl.blendFuncSeparate(gl.ONE_MINUS_DST_COLOR, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE);
                  break;
                case constants2.REPLACE:
                  gl.blendEquation(gl.FUNC_ADD);
                  gl.blendFunc(gl.ONE, gl.ZERO);
                  break;
                case constants2.SUBTRACT:
                  gl.blendEquationSeparate(gl.FUNC_REVERSE_SUBTRACT, gl.FUNC_ADD);
                  gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                  break;
                case constants2.DARKEST:
                  if (this.blendExt) {
                    gl.blendEquationSeparate(this.blendExt.MIN_EXT, gl.FUNC_ADD);
                    gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ONE, gl.ONE);
                  } else {
                    console.warn("blendMode(DARKEST) does not work in your browser in WEBGL mode.");
                  }
                  break;
                case constants2.LIGHTEST:
                  if (this.blendExt) {
                    gl.blendEquationSeparate(this.blendExt.MAX_EXT, gl.FUNC_ADD);
                    gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ONE, gl.ONE);
                  } else {
                    console.warn("blendMode(LIGHTEST) does not work in your browser in WEBGL mode.");
                  }
                  break;
                default:
                  console.error("Oops! Somehow RendererGL set curBlendMode to an unsupported mode.");
                  break;
              }
              if (!this._isErasing) {
                this._cachedBlendMode = this.curBlendMode;
              }
            };
            var _default2 = _main2.default;
            exports2.default = _default2;
          },
          {
            "../core/constants": 278,
            "../core/main": 290,
            "./p5.Texture": 346,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.join": 177,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        338: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.prototype.camera = function() {
              var _this$_renderer$_curC;
              this._assert3d("camera");
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              _main2.default._validateParameters("camera", args);
              (_this$_renderer$_curC = this._renderer._curCamera).camera.apply(_this$_renderer$_curC, args);
              return this;
            };
            _main2.default.prototype.perspective = function() {
              var _this$_renderer$_curC2;
              this._assert3d("perspective");
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }
              _main2.default._validateParameters("perspective", args);
              (_this$_renderer$_curC2 = this._renderer._curCamera).perspective.apply(_this$_renderer$_curC2, args);
              return this;
            };
            _main2.default.prototype.ortho = function() {
              var _this$_renderer$_curC3;
              this._assert3d("ortho");
              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
              }
              _main2.default._validateParameters("ortho", args);
              (_this$_renderer$_curC3 = this._renderer._curCamera).ortho.apply(_this$_renderer$_curC3, args);
              return this;
            };
            _main2.default.prototype.frustum = function() {
              var _this$_renderer$_curC4;
              this._assert3d("frustum");
              for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                args[_key4] = arguments[_key4];
              }
              _main2.default._validateParameters("frustum", args);
              (_this$_renderer$_curC4 = this._renderer._curCamera).frustum.apply(_this$_renderer$_curC4, args);
              return this;
            };
            _main2.default.prototype.createCamera = function() {
              this._assert3d("createCamera");
              var _cam = new _main2.default.Camera(this._renderer);
              _cam._computeCameraDefaultSettings();
              _cam._setDefaultCamera();
              this._renderer._curCamera = _cam;
              return _cam;
            };
            _main2.default.Camera = function(renderer) {
              this._renderer = renderer;
              this.cameraType = "default";
              this.cameraMatrix = new _main2.default.Matrix();
              this.projMatrix = new _main2.default.Matrix();
            };
            _main2.default.Camera.prototype.perspective = function(fovy, aspect, near, far) {
              this.cameraType = arguments.length > 0 ? "custom" : "default";
              if (typeof fovy === "undefined") {
                fovy = this.defaultCameraFOV;
                this.cameraFOV = fovy;
              } else {
                this.cameraFOV = this._renderer._pInst._toRadians(fovy);
              }
              if (typeof aspect === "undefined") {
                aspect = this.defaultAspectRatio;
              }
              if (typeof near === "undefined") {
                near = this.defaultCameraNear;
              }
              if (typeof far === "undefined") {
                far = this.defaultCameraFar;
              }
              if (near <= 1e-4) {
                near = 0.01;
                console.log("Avoid perspective near plane values close to or below 0. Setting value to 0.01.");
              }
              if (far < near) {
                console.log("Perspective far plane value is less than near plane value. Nothing will be shown.");
              }
              this.aspectRatio = aspect;
              this.cameraNear = near;
              this.cameraFar = far;
              this.projMatrix = _main2.default.Matrix.identity();
              var f = 1 / Math.tan(this.cameraFOV / 2);
              var nf = 1 / (this.cameraNear - this.cameraFar);
              this.projMatrix.set(f / aspect, 0, 0, 0, 0, -f, 0, 0, 0, 0, (far + near) * nf, -1, 0, 0, 2 * far * near * nf, 0);
              if (this._isActive()) {
                this._renderer.uPMatrix.set(this.projMatrix.mat4[0], this.projMatrix.mat4[1], this.projMatrix.mat4[2], this.projMatrix.mat4[3], this.projMatrix.mat4[4], this.projMatrix.mat4[5], this.projMatrix.mat4[6], this.projMatrix.mat4[7], this.projMatrix.mat4[8], this.projMatrix.mat4[9], this.projMatrix.mat4[10], this.projMatrix.mat4[11], this.projMatrix.mat4[12], this.projMatrix.mat4[13], this.projMatrix.mat4[14], this.projMatrix.mat4[15]);
              }
            };
            _main2.default.Camera.prototype.ortho = function(left, right, bottom, top, near, far) {
              if (left === void 0)
                left = -this._renderer.width / 2;
              if (right === void 0)
                right = +this._renderer.width / 2;
              if (bottom === void 0)
                bottom = -this._renderer.height / 2;
              if (top === void 0)
                top = +this._renderer.height / 2;
              if (near === void 0)
                near = 0;
              if (far === void 0)
                far = Math.max(this._renderer.width, this._renderer.height);
              var w = right - left;
              var h = top - bottom;
              var d = far - near;
              var x = 2 / w;
              var y = 2 / h;
              var z = -2 / d;
              var tx = -(right + left) / w;
              var ty = -(top + bottom) / h;
              var tz = -(far + near) / d;
              this.projMatrix = _main2.default.Matrix.identity();
              this.projMatrix.set(x, 0, 0, 0, 0, -y, 0, 0, 0, 0, z, 0, tx, ty, tz, 1);
              if (this._isActive()) {
                this._renderer.uPMatrix.set(this.projMatrix.mat4[0], this.projMatrix.mat4[1], this.projMatrix.mat4[2], this.projMatrix.mat4[3], this.projMatrix.mat4[4], this.projMatrix.mat4[5], this.projMatrix.mat4[6], this.projMatrix.mat4[7], this.projMatrix.mat4[8], this.projMatrix.mat4[9], this.projMatrix.mat4[10], this.projMatrix.mat4[11], this.projMatrix.mat4[12], this.projMatrix.mat4[13], this.projMatrix.mat4[14], this.projMatrix.mat4[15]);
              }
              this.cameraType = "custom";
            };
            _main2.default.Camera.prototype.frustum = function(left, right, bottom, top, near, far) {
              if (left === void 0)
                left = -this._renderer.width / 2;
              if (right === void 0)
                right = +this._renderer.width / 2;
              if (bottom === void 0)
                bottom = -this._renderer.height / 2;
              if (top === void 0)
                top = +this._renderer.height / 2;
              if (near === void 0)
                near = 0;
              if (far === void 0)
                far = Math.max(this._renderer.width, this._renderer.height);
              var w = right - left;
              var h = top - bottom;
              var d = far - near;
              var x = +(2 * near) / w;
              var y = +(2 * near) / h;
              var z = -(2 * far * near) / d;
              var tx = (right + left) / w;
              var ty = (top + bottom) / h;
              var tz = -(far + near) / d;
              this.projMatrix = _main2.default.Matrix.identity();
              this.projMatrix.set(x, 0, 0, 0, 0, y, 0, 0, tx, ty, tz, -1, 0, 0, z, 0);
              if (this._isActive()) {
                this._renderer.uPMatrix.set(this.projMatrix.mat4[0], this.projMatrix.mat4[1], this.projMatrix.mat4[2], this.projMatrix.mat4[3], this.projMatrix.mat4[4], this.projMatrix.mat4[5], this.projMatrix.mat4[6], this.projMatrix.mat4[7], this.projMatrix.mat4[8], this.projMatrix.mat4[9], this.projMatrix.mat4[10], this.projMatrix.mat4[11], this.projMatrix.mat4[12], this.projMatrix.mat4[13], this.projMatrix.mat4[14], this.projMatrix.mat4[15]);
              }
              this.cameraType = "custom";
            };
            _main2.default.Camera.prototype._rotateView = function(a, x, y, z) {
              var centerX = this.centerX;
              var centerY = this.centerY;
              var centerZ = this.centerZ;
              centerX -= this.eyeX;
              centerY -= this.eyeY;
              centerZ -= this.eyeZ;
              var rotation = _main2.default.Matrix.identity(this._renderer._pInst);
              rotation.rotate(this._renderer._pInst._toRadians(a), x, y, z);
              var rotatedCenter = [
                centerX * rotation.mat4[0] + centerY * rotation.mat4[4] + centerZ * rotation.mat4[8],
                centerX * rotation.mat4[1] + centerY * rotation.mat4[5] + centerZ * rotation.mat4[9],
                centerX * rotation.mat4[2] + centerY * rotation.mat4[6] + centerZ * rotation.mat4[10]
              ];
              rotatedCenter[0] += this.eyeX;
              rotatedCenter[1] += this.eyeY;
              rotatedCenter[2] += this.eyeZ;
              this.camera(this.eyeX, this.eyeY, this.eyeZ, rotatedCenter[0], rotatedCenter[1], rotatedCenter[2], this.upX, this.upY, this.upZ);
            };
            _main2.default.Camera.prototype.pan = function(amount) {
              var local = this._getLocalAxes();
              this._rotateView(amount, local.y[0], local.y[1], local.y[2]);
            };
            _main2.default.Camera.prototype.tilt = function(amount) {
              var local = this._getLocalAxes();
              this._rotateView(amount, local.x[0], local.x[1], local.x[2]);
            };
            _main2.default.Camera.prototype.lookAt = function(x, y, z) {
              this.camera(this.eyeX, this.eyeY, this.eyeZ, x, y, z, this.upX, this.upY, this.upZ);
            };
            _main2.default.Camera.prototype.camera = function(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ) {
              if (typeof eyeX === "undefined") {
                eyeX = this.defaultEyeX;
                eyeY = this.defaultEyeY;
                eyeZ = this.defaultEyeZ;
                centerX = eyeX;
                centerY = eyeY;
                centerZ = 0;
                upX = 0;
                upY = 1;
                upZ = 0;
              }
              this.eyeX = eyeX;
              this.eyeY = eyeY;
              this.eyeZ = eyeZ;
              if (typeof centerX !== "undefined") {
                this.centerX = centerX;
                this.centerY = centerY;
                this.centerZ = centerZ;
              }
              if (typeof upX !== "undefined") {
                this.upX = upX;
                this.upY = upY;
                this.upZ = upZ;
              }
              var local = this._getLocalAxes();
              this.cameraMatrix.set(local.x[0], local.y[0], local.z[0], 0, local.x[1], local.y[1], local.z[1], 0, local.x[2], local.y[2], local.z[2], 0, 0, 0, 0, 1);
              var tx = -eyeX;
              var ty = -eyeY;
              var tz = -eyeZ;
              this.cameraMatrix.translate([
                tx,
                ty,
                tz
              ]);
              if (this._isActive()) {
                this._renderer.uMVMatrix.set(this.cameraMatrix.mat4[0], this.cameraMatrix.mat4[1], this.cameraMatrix.mat4[2], this.cameraMatrix.mat4[3], this.cameraMatrix.mat4[4], this.cameraMatrix.mat4[5], this.cameraMatrix.mat4[6], this.cameraMatrix.mat4[7], this.cameraMatrix.mat4[8], this.cameraMatrix.mat4[9], this.cameraMatrix.mat4[10], this.cameraMatrix.mat4[11], this.cameraMatrix.mat4[12], this.cameraMatrix.mat4[13], this.cameraMatrix.mat4[14], this.cameraMatrix.mat4[15]);
              }
              return this;
            };
            _main2.default.Camera.prototype.move = function(x, y, z) {
              var local = this._getLocalAxes();
              var dx = [
                local.x[0] * x,
                local.x[1] * x,
                local.x[2] * x
              ];
              var dy = [
                local.y[0] * y,
                local.y[1] * y,
                local.y[2] * y
              ];
              var dz = [
                local.z[0] * z,
                local.z[1] * z,
                local.z[2] * z
              ];
              this.camera(this.eyeX + dx[0] + dy[0] + dz[0], this.eyeY + dx[1] + dy[1] + dz[1], this.eyeZ + dx[2] + dy[2] + dz[2], this.centerX + dx[0] + dy[0] + dz[0], this.centerY + dx[1] + dy[1] + dz[1], this.centerZ + dx[2] + dy[2] + dz[2], this.upX, this.upY, this.upZ);
            };
            _main2.default.Camera.prototype.setPosition = function(x, y, z) {
              var diffX = x - this.eyeX;
              var diffY = y - this.eyeY;
              var diffZ = z - this.eyeZ;
              this.camera(x, y, z, this.centerX + diffX, this.centerY + diffY, this.centerZ + diffZ, this.upX, this.upY, this.upZ);
            };
            _main2.default.Camera.prototype._computeCameraDefaultSettings = function() {
              this.defaultCameraFOV = 60 / 180 * Math.PI;
              this.defaultAspectRatio = this._renderer.width / this._renderer.height;
              this.defaultEyeX = 0;
              this.defaultEyeY = 0;
              this.defaultEyeZ = this._renderer.height / 2 / Math.tan(this.defaultCameraFOV / 2);
              this.defaultCenterX = 0;
              this.defaultCenterY = 0;
              this.defaultCenterZ = 0;
              this.defaultCameraNear = this.defaultEyeZ * 0.1;
              this.defaultCameraFar = this.defaultEyeZ * 10;
            };
            _main2.default.Camera.prototype._setDefaultCamera = function() {
              this.cameraFOV = this.defaultCameraFOV;
              this.aspectRatio = this.defaultAspectRatio;
              this.eyeX = this.defaultEyeX;
              this.eyeY = this.defaultEyeY;
              this.eyeZ = this.defaultEyeZ;
              this.centerX = this.defaultCenterX;
              this.centerY = this.defaultCenterY;
              this.centerZ = this.defaultCenterZ;
              this.upX = 0;
              this.upY = 1;
              this.upZ = 0;
              this.cameraNear = this.defaultCameraNear;
              this.cameraFar = this.defaultCameraFar;
              this.perspective();
              this.camera();
              this.cameraType = "default";
            };
            _main2.default.Camera.prototype._resize = function() {
              if (this.cameraType === "default") {
                this._computeCameraDefaultSettings();
                this._setDefaultCamera();
              } else {
                this.perspective(this.cameraFOV, this._renderer.width / this._renderer.height);
              }
            };
            _main2.default.Camera.prototype.copy = function() {
              var _cam = new _main2.default.Camera(this._renderer);
              _cam.cameraFOV = this.cameraFOV;
              _cam.aspectRatio = this.aspectRatio;
              _cam.eyeX = this.eyeX;
              _cam.eyeY = this.eyeY;
              _cam.eyeZ = this.eyeZ;
              _cam.centerX = this.centerX;
              _cam.centerY = this.centerY;
              _cam.centerZ = this.centerZ;
              _cam.cameraNear = this.cameraNear;
              _cam.cameraFar = this.cameraFar;
              _cam.cameraType = this.cameraType;
              _cam.cameraMatrix = this.cameraMatrix.copy();
              _cam.projMatrix = this.projMatrix.copy();
              return _cam;
            };
            _main2.default.Camera.prototype._getLocalAxes = function() {
              var z0 = this.eyeX - this.centerX;
              var z1 = this.eyeY - this.centerY;
              var z2 = this.eyeZ - this.centerZ;
              var eyeDist = Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
              if (eyeDist !== 0) {
                z0 /= eyeDist;
                z1 /= eyeDist;
                z2 /= eyeDist;
              }
              var y0 = this.upX;
              var y1 = this.upY;
              var y2 = this.upZ;
              var x0 = y1 * z2 - y2 * z1;
              var x1 = -y0 * z2 + y2 * z0;
              var x2 = y0 * z1 - y1 * z0;
              y0 = z1 * x2 - z2 * x1;
              y1 = -z0 * x2 + z2 * x0;
              y2 = z0 * x1 - z1 * x0;
              var xmag = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
              if (xmag !== 0) {
                x0 /= xmag;
                x1 /= xmag;
                x2 /= xmag;
              }
              var ymag = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
              if (ymag !== 0) {
                y0 /= ymag;
                y1 /= ymag;
                y2 /= ymag;
              }
              return {
                x: [
                  x0,
                  x1,
                  x2
                ],
                y: [
                  y0,
                  y1,
                  y2
                ],
                z: [
                  z0,
                  z1,
                  z2
                ]
              };
            };
            _main2.default.Camera.prototype._orbit = function(dTheta, dPhi, dRadius) {
              var diffX = this.eyeX - this.centerX;
              var diffY = this.eyeY - this.centerY;
              var diffZ = this.eyeZ - this.centerZ;
              var camRadius = Math.sqrt(diffX * diffX + diffY * diffY + diffZ * diffZ);
              var camTheta = Math.atan2(diffX, diffZ);
              var camPhi = Math.acos(Math.max(-1, Math.min(1, diffY / camRadius)));
              var newUpY = this.upY > 0 ? 1 : -1;
              camTheta += newUpY * dTheta;
              camPhi += newUpY * dPhi;
              if (camPhi <= 0 || camPhi >= Math.PI) {
                newUpY *= -1;
              }
              camRadius += dRadius;
              if (camRadius < 0) {
                camRadius = 0.1;
              }
              var _x = Math.sin(camPhi) * camRadius * Math.sin(camTheta);
              var _y = Math.cos(camPhi) * camRadius;
              var _z = Math.sin(camPhi) * camRadius * Math.cos(camTheta);
              this.camera(_x + this.centerX, _y + this.centerY, _z + this.centerZ, this.centerX, this.centerY, this.centerZ, 0, newUpY, 0);
            };
            _main2.default.Camera.prototype._isActive = function() {
              return this === this._renderer._curCamera;
            };
            _main2.default.prototype.setCamera = function(cam) {
              this._renderer._curCamera = cam;
              this._renderer.uPMatrix.set(cam.projMatrix.mat4[0], cam.projMatrix.mat4[1], cam.projMatrix.mat4[2], cam.projMatrix.mat4[3], cam.projMatrix.mat4[4], cam.projMatrix.mat4[5], cam.projMatrix.mat4[6], cam.projMatrix.mat4[7], cam.projMatrix.mat4[8], cam.projMatrix.mat4[9], cam.projMatrix.mat4[10], cam.projMatrix.mat4[11], cam.projMatrix.mat4[12], cam.projMatrix.mat4[13], cam.projMatrix.mat4[14], cam.projMatrix.mat4[15]);
            };
            var _default2 = _main2.default.Camera;
            exports2.default = _default2;
          },
          {
            "../core/main": 290
          }
        ],
        339: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.string.sub");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.string.sub");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.Geometry = function(detailX, detailY, callback) {
              this.vertices = [];
              this.lineVertices = [];
              this.lineTangentsIn = [];
              this.lineTangentsOut = [];
              this.lineSides = [];
              this.vertexNormals = [];
              this.faces = [];
              this.uvs = [];
              this.edges = [];
              this.vertexColors = [];
              this.vertexStrokeColors = [];
              this.lineVertexColors = [];
              this.detailX = detailX !== void 0 ? detailX : 1;
              this.detailY = detailY !== void 0 ? detailY : 1;
              this.dirtyFlags = {};
              if (callback instanceof Function) {
                callback.call(this);
              }
              return this;
            };
            _main2.default.Geometry.prototype.reset = function() {
              this.lineVertices.length = 0;
              this.lineTangentsIn.length = 0;
              this.lineTangentsOut.length = 0;
              this.lineSides.length = 0;
              this.vertices.length = 0;
              this.edges.length = 0;
              this.vertexColors.length = 0;
              this.vertexStrokeColors.length = 0;
              this.lineVertexColors.length = 0;
              this.vertexNormals.length = 0;
              this.uvs.length = 0;
              this.dirtyFlags = {};
            };
            _main2.default.Geometry.prototype.computeFaces = function() {
              this.faces.length = 0;
              var sliceCount = this.detailX + 1;
              var a, b, c, d;
              for (var i2 = 0; i2 < this.detailY; i2++) {
                for (var j = 0; j < this.detailX; j++) {
                  a = i2 * sliceCount + j;
                  b = i2 * sliceCount + j + 1;
                  c = (i2 + 1) * sliceCount + j + 1;
                  d = (i2 + 1) * sliceCount + j;
                  this.faces.push([
                    a,
                    b,
                    d
                  ]);
                  this.faces.push([
                    d,
                    b,
                    c
                  ]);
                }
              }
              return this;
            };
            _main2.default.Geometry.prototype._getFaceNormal = function(faceId) {
              var face = this.faces[faceId];
              var vA = this.vertices[face[0]];
              var vB = this.vertices[face[1]];
              var vC = this.vertices[face[2]];
              var ab = _main2.default.Vector.sub(vB, vA);
              var ac = _main2.default.Vector.sub(vC, vA);
              var n = _main2.default.Vector.cross(ab, ac);
              var ln = _main2.default.Vector.mag(n);
              var sinAlpha = ln / (_main2.default.Vector.mag(ab) * _main2.default.Vector.mag(ac));
              if (sinAlpha === 0 || isNaN(sinAlpha)) {
                console.warn("p5.Geometry.prototype._getFaceNormal:", "face has colinear sides or a repeated vertex");
                return n;
              }
              if (sinAlpha > 1)
                sinAlpha = 1;
              return n.mult(Math.asin(sinAlpha) / ln);
            };
            _main2.default.Geometry.prototype.computeNormals = function() {
              var vertexNormals = this.vertexNormals;
              var vertices = this.vertices;
              var faces = this.faces;
              var iv;
              vertexNormals.length = 0;
              for (iv = 0; iv < vertices.length; ++iv) {
                vertexNormals.push(new _main2.default.Vector());
              }
              for (var f = 0; f < faces.length; ++f) {
                var face = faces[f];
                var faceNormal = this._getFaceNormal(f);
                for (var fv = 0; fv < 3; ++fv) {
                  var vertexIndex = face[fv];
                  vertexNormals[vertexIndex].add(faceNormal);
                }
              }
              for (iv = 0; iv < vertices.length; ++iv) {
                vertexNormals[iv].normalize();
              }
              return this;
            };
            _main2.default.Geometry.prototype.averageNormals = function() {
              for (var i2 = 0; i2 <= this.detailY; i2++) {
                var offset = this.detailX + 1;
                var temp = _main2.default.Vector.add(this.vertexNormals[i2 * offset], this.vertexNormals[i2 * offset + this.detailX]);
                temp = _main2.default.Vector.div(temp, 2);
                this.vertexNormals[i2 * offset] = temp;
                this.vertexNormals[i2 * offset + this.detailX] = temp;
              }
              return this;
            };
            _main2.default.Geometry.prototype.averagePoleNormals = function() {
              var sum = new _main2.default.Vector(0, 0, 0);
              for (var i2 = 0; i2 < this.detailX; i2++) {
                sum.add(this.vertexNormals[i2]);
              }
              sum = _main2.default.Vector.div(sum, this.detailX);
              for (var _i = 0; _i < this.detailX; _i++) {
                this.vertexNormals[_i] = sum;
              }
              sum = new _main2.default.Vector(0, 0, 0);
              for (var _i2 = this.vertices.length - 1; _i2 > this.vertices.length - 1 - this.detailX; _i2--) {
                sum.add(this.vertexNormals[_i2]);
              }
              sum = _main2.default.Vector.div(sum, this.detailX);
              for (var _i32 = this.vertices.length - 1; _i32 > this.vertices.length - 1 - this.detailX; _i32--) {
                this.vertexNormals[_i32] = sum;
              }
              return this;
            };
            _main2.default.Geometry.prototype._makeTriangleEdges = function() {
              this.edges.length = 0;
              if (Array.isArray(this.strokeIndices)) {
                for (var i2 = 0, max = this.strokeIndices.length; i2 < max; i2++) {
                  this.edges.push(this.strokeIndices[i2]);
                }
              } else {
                for (var j = 0; j < this.faces.length; j++) {
                  this.edges.push([
                    this.faces[j][0],
                    this.faces[j][1]
                  ]);
                  this.edges.push([
                    this.faces[j][1],
                    this.faces[j][2]
                  ]);
                  this.edges.push([
                    this.faces[j][2],
                    this.faces[j][0]
                  ]);
                }
              }
              return this;
            };
            _main2.default.Geometry.prototype._edgesToVertices = function() {
              this.lineVertices.length = 0;
              this.lineTangentsIn.length = 0;
              this.lineTangentsOut.length = 0;
              this.lineSides.length = 0;
              var closed = this.edges.length > 1 && this.edges[0][0] === this.edges[this.edges.length - 1][1];
              var addedStartingCap = false;
              var lastValidDir;
              for (var i2 = 0; i2 < this.edges.length; i2++) {
                var prevEdge = this.edges[i2 - 1];
                var currEdge = this.edges[i2];
                var begin = this.vertices[currEdge[0]];
                var end = this.vertices[currEdge[1]];
                var fromColor = this.vertexStrokeColors.length > 0 ? this.vertexStrokeColors.slice(currEdge[0] * 4, (currEdge[0] + 1) * 4) : [
                  0,
                  0,
                  0,
                  0
                ];
                var toColor = this.vertexStrokeColors.length > 0 ? this.vertexStrokeColors.slice(currEdge[1] * 4, (currEdge[1] + 1) * 4) : [
                  0,
                  0,
                  0,
                  0
                ];
                var dir = end.copy().sub(begin).normalize();
                var dirOK = dir.magSq() > 0;
                if (dirOK) {
                  this._addSegment(begin, end, fromColor, toColor, dir);
                }
                if (i2 > 0 && prevEdge[1] === currEdge[0]) {
                  if (lastValidDir && dirOK && dir.dot(lastValidDir) < 1 - 1e-8) {
                    this._addJoin(begin, lastValidDir, dir, fromColor);
                  }
                  if (dirOK && !addedStartingCap && !closed) {
                    this._addCap(begin, dir.copy().mult(-1), fromColor);
                    addedStartingCap = true;
                  }
                } else {
                  addedStartingCap = false;
                  if (dirOK && (!closed || i2 > 0)) {
                    this._addCap(begin, dir.copy().mult(-1), fromColor);
                    addedStartingCap = true;
                  }
                  if (lastValidDir && (!closed || i2 < this.edges.length - 1)) {
                    this._addCap(this.vertices[prevEdge[1]], lastValidDir, fromColor);
                    lastValidDir = void 0;
                  }
                }
                if (i2 === this.edges.length - 1) {
                  if (closed) {
                    this._addJoin(end, dir, this.vertices[this.edges[0][1]].copy().sub(end).normalize(), toColor);
                  } else {
                    this._addCap(end, dir, toColor);
                  }
                }
                if (dirOK) {
                  lastValidDir = dir;
                }
              }
              return this;
            };
            _main2.default.Geometry.prototype._addSegment = function(begin, end, fromColor, toColor, dir) {
              var a = begin.array();
              var b = end.array();
              var dirArr = dir.array();
              this.lineSides.push(1, -1, 1, 1, -1, -1);
              for (var _i42 = 0, _arr = [
                this.lineTangentsIn,
                this.lineTangentsOut
              ]; _i42 < _arr.length; _i42++) {
                var tangents = _arr[_i42];
                tangents.push(dirArr, dirArr, dirArr, dirArr, dirArr, dirArr);
              }
              this.lineVertices.push(a, a, b, b, a, b);
              this.lineVertexColors.push(fromColor, fromColor, toColor, toColor, fromColor, toColor);
              return this;
            };
            _main2.default.Geometry.prototype._addCap = function(point, tangent, color) {
              var ptArray = point.array();
              var tanInArray = tangent.array();
              var tanOutArray = [
                0,
                0,
                0
              ];
              for (var i2 = 0; i2 < 6; i2++) {
                this.lineVertices.push(ptArray);
                this.lineTangentsIn.push(tanInArray);
                this.lineTangentsOut.push(tanOutArray);
                this.lineVertexColors.push(color);
              }
              this.lineSides.push(-1, -2, 2, 2, 1, -1);
              return this;
            };
            _main2.default.Geometry.prototype._addJoin = function(point, fromTangent, toTangent, color) {
              var ptArray = point.array();
              var tanInArray = fromTangent.array();
              var tanOutArray = toTangent.array();
              for (var i2 = 0; i2 < 12; i2++) {
                this.lineVertices.push(ptArray);
                this.lineTangentsIn.push(tanInArray);
                this.lineTangentsOut.push(tanOutArray);
                this.lineVertexColors.push(color);
              }
              for (var _i52 = 0, _arr2 = [
                -1,
                1
              ]; _i52 < _arr2.length; _i52++) {
                var side = _arr2[_i52];
                this.lineSides.push(side, 2 * side, 3 * side, side, 3 * side, 0);
              }
              return this;
            };
            _main2.default.Geometry.prototype.normalize = function() {
              if (this.vertices.length > 0) {
                var maxPosition = this.vertices[0].copy();
                var minPosition = this.vertices[0].copy();
                for (var i2 = 0; i2 < this.vertices.length; i2++) {
                  maxPosition.x = Math.max(maxPosition.x, this.vertices[i2].x);
                  minPosition.x = Math.min(minPosition.x, this.vertices[i2].x);
                  maxPosition.y = Math.max(maxPosition.y, this.vertices[i2].y);
                  minPosition.y = Math.min(minPosition.y, this.vertices[i2].y);
                  maxPosition.z = Math.max(maxPosition.z, this.vertices[i2].z);
                  minPosition.z = Math.min(minPosition.z, this.vertices[i2].z);
                }
                var center = _main2.default.Vector.lerp(maxPosition, minPosition, 0.5);
                var dist = _main2.default.Vector.sub(maxPosition, minPosition);
                var longestDist = Math.max(Math.max(dist.x, dist.y), dist.z);
                var scale = 200 / longestDist;
                for (var _i6 = 0; _i6 < this.vertices.length; _i6++) {
                  this.vertices[_i6].sub(center);
                  this.vertices[_i6].mult(scale);
                }
              }
              return this;
            };
            var _default2 = _main2.default.Geometry;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.string.sub": 210
          }
        ],
        340: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.typed-array.float32-array");
            _dereq_2("core-js/modules/es.typed-array.copy-within");
            _dereq_2("core-js/modules/es.typed-array.every");
            _dereq_2("core-js/modules/es.typed-array.fill");
            _dereq_2("core-js/modules/es.typed-array.filter");
            _dereq_2("core-js/modules/es.typed-array.find");
            _dereq_2("core-js/modules/es.typed-array.find-index");
            _dereq_2("core-js/modules/es.typed-array.for-each");
            _dereq_2("core-js/modules/es.typed-array.includes");
            _dereq_2("core-js/modules/es.typed-array.index-of");
            _dereq_2("core-js/modules/es.typed-array.iterator");
            _dereq_2("core-js/modules/es.typed-array.join");
            _dereq_2("core-js/modules/es.typed-array.last-index-of");
            _dereq_2("core-js/modules/es.typed-array.map");
            _dereq_2("core-js/modules/es.typed-array.reduce");
            _dereq_2("core-js/modules/es.typed-array.reduce-right");
            _dereq_2("core-js/modules/es.typed-array.reverse");
            _dereq_2("core-js/modules/es.typed-array.set");
            _dereq_2("core-js/modules/es.typed-array.slice");
            _dereq_2("core-js/modules/es.typed-array.some");
            _dereq_2("core-js/modules/es.typed-array.sort");
            _dereq_2("core-js/modules/es.typed-array.subarray");
            _dereq_2("core-js/modules/es.typed-array.to-locale-string");
            _dereq_2("core-js/modules/es.typed-array.to-string");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.typed-array.float32-array");
            _dereq_2("core-js/modules/es.typed-array.copy-within");
            _dereq_2("core-js/modules/es.typed-array.every");
            _dereq_2("core-js/modules/es.typed-array.fill");
            _dereq_2("core-js/modules/es.typed-array.filter");
            _dereq_2("core-js/modules/es.typed-array.find");
            _dereq_2("core-js/modules/es.typed-array.find-index");
            _dereq_2("core-js/modules/es.typed-array.for-each");
            _dereq_2("core-js/modules/es.typed-array.includes");
            _dereq_2("core-js/modules/es.typed-array.index-of");
            _dereq_2("core-js/modules/es.typed-array.iterator");
            _dereq_2("core-js/modules/es.typed-array.join");
            _dereq_2("core-js/modules/es.typed-array.last-index-of");
            _dereq_2("core-js/modules/es.typed-array.map");
            _dereq_2("core-js/modules/es.typed-array.reduce");
            _dereq_2("core-js/modules/es.typed-array.reduce-right");
            _dereq_2("core-js/modules/es.typed-array.reverse");
            _dereq_2("core-js/modules/es.typed-array.set");
            _dereq_2("core-js/modules/es.typed-array.slice");
            _dereq_2("core-js/modules/es.typed-array.some");
            _dereq_2("core-js/modules/es.typed-array.sort");
            _dereq_2("core-js/modules/es.typed-array.subarray");
            _dereq_2("core-js/modules/es.typed-array.to-locale-string");
            _dereq_2("core-js/modules/es.typed-array.to-string");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            var GLMAT_ARRAY_TYPE = Array;
            var isMatrixArray = function isMatrixArray2(x) {
              return x instanceof Array;
            };
            if (typeof Float32Array !== "undefined") {
              GLMAT_ARRAY_TYPE = Float32Array;
              isMatrixArray = function isMatrixArray2(x) {
                return x instanceof Array || x instanceof Float32Array;
              };
            }
            _main2.default.Matrix = function() {
              var args = new Array(arguments.length);
              for (var i2 = 0; i2 < args.length; ++i2) {
                args[i2] = arguments[i2];
              }
              if (args.length && args[args.length - 1] instanceof _main2.default) {
                this.p5 = args[args.length - 1];
              }
              if (args[0] === "mat3") {
                this.mat3 = Array.isArray(args[1]) ? args[1] : new GLMAT_ARRAY_TYPE([
                  1,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  1
                ]);
              } else {
                this.mat4 = Array.isArray(args[0]) ? args[0] : new GLMAT_ARRAY_TYPE([
                  1,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  1
                ]);
              }
              return this;
            };
            _main2.default.Matrix.prototype.set = function(inMatrix) {
              if (inMatrix instanceof _main2.default.Matrix) {
                this.mat4 = inMatrix.mat4;
                return this;
              } else if (isMatrixArray(inMatrix)) {
                this.mat4 = inMatrix;
                return this;
              } else if (arguments.length === 16) {
                this.mat4[0] = arguments[0];
                this.mat4[1] = arguments[1];
                this.mat4[2] = arguments[2];
                this.mat4[3] = arguments[3];
                this.mat4[4] = arguments[4];
                this.mat4[5] = arguments[5];
                this.mat4[6] = arguments[6];
                this.mat4[7] = arguments[7];
                this.mat4[8] = arguments[8];
                this.mat4[9] = arguments[9];
                this.mat4[10] = arguments[10];
                this.mat4[11] = arguments[11];
                this.mat4[12] = arguments[12];
                this.mat4[13] = arguments[13];
                this.mat4[14] = arguments[14];
                this.mat4[15] = arguments[15];
              }
              return this;
            };
            _main2.default.Matrix.prototype.get = function() {
              return new _main2.default.Matrix(this.mat4, this.p5);
            };
            _main2.default.Matrix.prototype.copy = function() {
              var copied = new _main2.default.Matrix(this.p5);
              copied.mat4[0] = this.mat4[0];
              copied.mat4[1] = this.mat4[1];
              copied.mat4[2] = this.mat4[2];
              copied.mat4[3] = this.mat4[3];
              copied.mat4[4] = this.mat4[4];
              copied.mat4[5] = this.mat4[5];
              copied.mat4[6] = this.mat4[6];
              copied.mat4[7] = this.mat4[7];
              copied.mat4[8] = this.mat4[8];
              copied.mat4[9] = this.mat4[9];
              copied.mat4[10] = this.mat4[10];
              copied.mat4[11] = this.mat4[11];
              copied.mat4[12] = this.mat4[12];
              copied.mat4[13] = this.mat4[13];
              copied.mat4[14] = this.mat4[14];
              copied.mat4[15] = this.mat4[15];
              return copied;
            };
            _main2.default.Matrix.identity = function(pInst) {
              return new _main2.default.Matrix(pInst);
            };
            _main2.default.Matrix.prototype.transpose = function(a) {
              var a01, a02, a03, a12, a13, a23;
              if (a instanceof _main2.default.Matrix) {
                a01 = a.mat4[1];
                a02 = a.mat4[2];
                a03 = a.mat4[3];
                a12 = a.mat4[6];
                a13 = a.mat4[7];
                a23 = a.mat4[11];
                this.mat4[0] = a.mat4[0];
                this.mat4[1] = a.mat4[4];
                this.mat4[2] = a.mat4[8];
                this.mat4[3] = a.mat4[12];
                this.mat4[4] = a01;
                this.mat4[5] = a.mat4[5];
                this.mat4[6] = a.mat4[9];
                this.mat4[7] = a.mat4[13];
                this.mat4[8] = a02;
                this.mat4[9] = a12;
                this.mat4[10] = a.mat4[10];
                this.mat4[11] = a.mat4[14];
                this.mat4[12] = a03;
                this.mat4[13] = a13;
                this.mat4[14] = a23;
                this.mat4[15] = a.mat4[15];
              } else if (isMatrixArray(a)) {
                a01 = a[1];
                a02 = a[2];
                a03 = a[3];
                a12 = a[6];
                a13 = a[7];
                a23 = a[11];
                this.mat4[0] = a[0];
                this.mat4[1] = a[4];
                this.mat4[2] = a[8];
                this.mat4[3] = a[12];
                this.mat4[4] = a01;
                this.mat4[5] = a[5];
                this.mat4[6] = a[9];
                this.mat4[7] = a[13];
                this.mat4[8] = a02;
                this.mat4[9] = a12;
                this.mat4[10] = a[10];
                this.mat4[11] = a[14];
                this.mat4[12] = a03;
                this.mat4[13] = a13;
                this.mat4[14] = a23;
                this.mat4[15] = a[15];
              }
              return this;
            };
            _main2.default.Matrix.prototype.invert = function(a) {
              var a00, a01, a02, a03, a10, a11, a12, a13;
              var a20, a21, a22, a23, a30, a31, a32, a33;
              if (a instanceof _main2.default.Matrix) {
                a00 = a.mat4[0];
                a01 = a.mat4[1];
                a02 = a.mat4[2];
                a03 = a.mat4[3];
                a10 = a.mat4[4];
                a11 = a.mat4[5];
                a12 = a.mat4[6];
                a13 = a.mat4[7];
                a20 = a.mat4[8];
                a21 = a.mat4[9];
                a22 = a.mat4[10];
                a23 = a.mat4[11];
                a30 = a.mat4[12];
                a31 = a.mat4[13];
                a32 = a.mat4[14];
                a33 = a.mat4[15];
              } else if (isMatrixArray(a)) {
                a00 = a[0];
                a01 = a[1];
                a02 = a[2];
                a03 = a[3];
                a10 = a[4];
                a11 = a[5];
                a12 = a[6];
                a13 = a[7];
                a20 = a[8];
                a21 = a[9];
                a22 = a[10];
                a23 = a[11];
                a30 = a[12];
                a31 = a[13];
                a32 = a[14];
                a33 = a[15];
              }
              var b00 = a00 * a11 - a01 * a10;
              var b01 = a00 * a12 - a02 * a10;
              var b02 = a00 * a13 - a03 * a10;
              var b03 = a01 * a12 - a02 * a11;
              var b04 = a01 * a13 - a03 * a11;
              var b05 = a02 * a13 - a03 * a12;
              var b06 = a20 * a31 - a21 * a30;
              var b07 = a20 * a32 - a22 * a30;
              var b08 = a20 * a33 - a23 * a30;
              var b09 = a21 * a32 - a22 * a31;
              var b10 = a21 * a33 - a23 * a31;
              var b11 = a22 * a33 - a23 * a32;
              var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
              if (!det) {
                return null;
              }
              det = 1 / det;
              this.mat4[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
              this.mat4[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
              this.mat4[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
              this.mat4[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
              this.mat4[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
              this.mat4[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
              this.mat4[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
              this.mat4[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
              this.mat4[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
              this.mat4[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
              this.mat4[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
              this.mat4[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
              this.mat4[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
              this.mat4[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
              this.mat4[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
              this.mat4[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
              return this;
            };
            _main2.default.Matrix.prototype.invert3x3 = function() {
              var a00 = this.mat3[0];
              var a01 = this.mat3[1];
              var a02 = this.mat3[2];
              var a10 = this.mat3[3];
              var a11 = this.mat3[4];
              var a12 = this.mat3[5];
              var a20 = this.mat3[6];
              var a21 = this.mat3[7];
              var a22 = this.mat3[8];
              var b01 = a22 * a11 - a12 * a21;
              var b11 = -a22 * a10 + a12 * a20;
              var b21 = a21 * a10 - a11 * a20;
              var det = a00 * b01 + a01 * b11 + a02 * b21;
              if (!det) {
                return null;
              }
              det = 1 / det;
              this.mat3[0] = b01 * det;
              this.mat3[1] = (-a22 * a01 + a02 * a21) * det;
              this.mat3[2] = (a12 * a01 - a02 * a11) * det;
              this.mat3[3] = b11 * det;
              this.mat3[4] = (a22 * a00 - a02 * a20) * det;
              this.mat3[5] = (-a12 * a00 + a02 * a10) * det;
              this.mat3[6] = b21 * det;
              this.mat3[7] = (-a21 * a00 + a01 * a20) * det;
              this.mat3[8] = (a11 * a00 - a01 * a10) * det;
              return this;
            };
            _main2.default.Matrix.prototype.transpose3x3 = function(mat3) {
              var a01 = mat3[1], a02 = mat3[2], a12 = mat3[5];
              this.mat3[1] = mat3[3];
              this.mat3[2] = mat3[6];
              this.mat3[3] = a01;
              this.mat3[5] = mat3[7];
              this.mat3[6] = a02;
              this.mat3[7] = a12;
              return this;
            };
            _main2.default.Matrix.prototype.inverseTranspose = function(matrix) {
              if (this.mat3 === void 0) {
                console.error("sorry, this function only works with mat3");
              } else {
                this.mat3[0] = matrix.mat4[0];
                this.mat3[1] = matrix.mat4[1];
                this.mat3[2] = matrix.mat4[2];
                this.mat3[3] = matrix.mat4[4];
                this.mat3[4] = matrix.mat4[5];
                this.mat3[5] = matrix.mat4[6];
                this.mat3[6] = matrix.mat4[8];
                this.mat3[7] = matrix.mat4[9];
                this.mat3[8] = matrix.mat4[10];
              }
              var inverse = this.invert3x3();
              if (inverse) {
                inverse.transpose3x3(this.mat3);
              } else {
                for (var i2 = 0; i2 < 9; i2++) {
                  this.mat3[i2] = 0;
                }
              }
              return this;
            };
            _main2.default.Matrix.prototype.determinant = function() {
              var d00 = this.mat4[0] * this.mat4[5] - this.mat4[1] * this.mat4[4], d01 = this.mat4[0] * this.mat4[6] - this.mat4[2] * this.mat4[4], d02 = this.mat4[0] * this.mat4[7] - this.mat4[3] * this.mat4[4], d03 = this.mat4[1] * this.mat4[6] - this.mat4[2] * this.mat4[5], d04 = this.mat4[1] * this.mat4[7] - this.mat4[3] * this.mat4[5], d05 = this.mat4[2] * this.mat4[7] - this.mat4[3] * this.mat4[6], d06 = this.mat4[8] * this.mat4[13] - this.mat4[9] * this.mat4[12], d07 = this.mat4[8] * this.mat4[14] - this.mat4[10] * this.mat4[12], d08 = this.mat4[8] * this.mat4[15] - this.mat4[11] * this.mat4[12], d09 = this.mat4[9] * this.mat4[14] - this.mat4[10] * this.mat4[13], d10 = this.mat4[9] * this.mat4[15] - this.mat4[11] * this.mat4[13], d11 = this.mat4[10] * this.mat4[15] - this.mat4[11] * this.mat4[14];
              return d00 * d11 - d01 * d10 + d02 * d09 + d03 * d08 - d04 * d07 + d05 * d06;
            };
            _main2.default.Matrix.prototype.mult = function(multMatrix) {
              var _src;
              if (multMatrix === this || multMatrix === this.mat4) {
                _src = this.copy().mat4;
              } else if (multMatrix instanceof _main2.default.Matrix) {
                _src = multMatrix.mat4;
              } else if (isMatrixArray(multMatrix)) {
                _src = multMatrix;
              } else if (arguments.length === 16) {
                _src = arguments;
              } else {
                return;
              }
              var b0 = this.mat4[0], b1 = this.mat4[1], b2 = this.mat4[2], b3 = this.mat4[3];
              this.mat4[0] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];
              this.mat4[1] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];
              this.mat4[2] = b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];
              this.mat4[3] = b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];
              b0 = this.mat4[4];
              b1 = this.mat4[5];
              b2 = this.mat4[6];
              b3 = this.mat4[7];
              this.mat4[4] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];
              this.mat4[5] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];
              this.mat4[6] = b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];
              this.mat4[7] = b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];
              b0 = this.mat4[8];
              b1 = this.mat4[9];
              b2 = this.mat4[10];
              b3 = this.mat4[11];
              this.mat4[8] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];
              this.mat4[9] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];
              this.mat4[10] = b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];
              this.mat4[11] = b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];
              b0 = this.mat4[12];
              b1 = this.mat4[13];
              b2 = this.mat4[14];
              b3 = this.mat4[15];
              this.mat4[12] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];
              this.mat4[13] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];
              this.mat4[14] = b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];
              this.mat4[15] = b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];
              return this;
            };
            _main2.default.Matrix.prototype.apply = function(multMatrix) {
              var _src;
              if (multMatrix === this || multMatrix === this.mat4) {
                _src = this.copy().mat4;
              } else if (multMatrix instanceof _main2.default.Matrix) {
                _src = multMatrix.mat4;
              } else if (isMatrixArray(multMatrix)) {
                _src = multMatrix;
              } else if (arguments.length === 16) {
                _src = arguments;
              } else {
                return;
              }
              var mat4 = this.mat4;
              var m0 = mat4[0];
              var m4 = mat4[4];
              var m8 = mat4[8];
              var m12 = mat4[12];
              mat4[0] = _src[0] * m0 + _src[1] * m4 + _src[2] * m8 + _src[3] * m12;
              mat4[4] = _src[4] * m0 + _src[5] * m4 + _src[6] * m8 + _src[7] * m12;
              mat4[8] = _src[8] * m0 + _src[9] * m4 + _src[10] * m8 + _src[11] * m12;
              mat4[12] = _src[12] * m0 + _src[13] * m4 + _src[14] * m8 + _src[15] * m12;
              var m1 = mat4[1];
              var m5 = mat4[5];
              var m9 = mat4[9];
              var m13 = mat4[13];
              mat4[1] = _src[0] * m1 + _src[1] * m5 + _src[2] * m9 + _src[3] * m13;
              mat4[5] = _src[4] * m1 + _src[5] * m5 + _src[6] * m9 + _src[7] * m13;
              mat4[9] = _src[8] * m1 + _src[9] * m5 + _src[10] * m9 + _src[11] * m13;
              mat4[13] = _src[12] * m1 + _src[13] * m5 + _src[14] * m9 + _src[15] * m13;
              var m2 = mat4[2];
              var m6 = mat4[6];
              var m10 = mat4[10];
              var m14 = mat4[14];
              mat4[2] = _src[0] * m2 + _src[1] * m6 + _src[2] * m10 + _src[3] * m14;
              mat4[6] = _src[4] * m2 + _src[5] * m6 + _src[6] * m10 + _src[7] * m14;
              mat4[10] = _src[8] * m2 + _src[9] * m6 + _src[10] * m10 + _src[11] * m14;
              mat4[14] = _src[12] * m2 + _src[13] * m6 + _src[14] * m10 + _src[15] * m14;
              var m3 = mat4[3];
              var m7 = mat4[7];
              var m11 = mat4[11];
              var m15 = mat4[15];
              mat4[3] = _src[0] * m3 + _src[1] * m7 + _src[2] * m11 + _src[3] * m15;
              mat4[7] = _src[4] * m3 + _src[5] * m7 + _src[6] * m11 + _src[7] * m15;
              mat4[11] = _src[8] * m3 + _src[9] * m7 + _src[10] * m11 + _src[11] * m15;
              mat4[15] = _src[12] * m3 + _src[13] * m7 + _src[14] * m11 + _src[15] * m15;
              return this;
            };
            _main2.default.Matrix.prototype.scale = function(x, y, z) {
              if (x instanceof _main2.default.Vector) {
                y = x.y;
                z = x.z;
                x = x.x;
              } else if (x instanceof Array) {
                y = x[1];
                z = x[2];
                x = x[0];
              }
              this.mat4[0] *= x;
              this.mat4[1] *= x;
              this.mat4[2] *= x;
              this.mat4[3] *= x;
              this.mat4[4] *= y;
              this.mat4[5] *= y;
              this.mat4[6] *= y;
              this.mat4[7] *= y;
              this.mat4[8] *= z;
              this.mat4[9] *= z;
              this.mat4[10] *= z;
              this.mat4[11] *= z;
              return this;
            };
            _main2.default.Matrix.prototype.rotate = function(a, x, y, z) {
              if (x instanceof _main2.default.Vector) {
                y = x.y;
                z = x.z;
                x = x.x;
              } else if (x instanceof Array) {
                y = x[1];
                z = x[2];
                x = x[0];
              }
              var len = Math.sqrt(x * x + y * y + z * z);
              x *= 1 / len;
              y *= 1 / len;
              z *= 1 / len;
              var a00 = this.mat4[0];
              var a01 = this.mat4[1];
              var a02 = this.mat4[2];
              var a03 = this.mat4[3];
              var a10 = this.mat4[4];
              var a11 = this.mat4[5];
              var a12 = this.mat4[6];
              var a13 = this.mat4[7];
              var a20 = this.mat4[8];
              var a21 = this.mat4[9];
              var a22 = this.mat4[10];
              var a23 = this.mat4[11];
              var sA = Math.sin(a);
              var cA = Math.cos(a);
              var tA = 1 - cA;
              var b00 = x * x * tA + cA;
              var b01 = y * x * tA + z * sA;
              var b02 = z * x * tA - y * sA;
              var b10 = x * y * tA - z * sA;
              var b11 = y * y * tA + cA;
              var b12 = z * y * tA + x * sA;
              var b20 = x * z * tA + y * sA;
              var b21 = y * z * tA - x * sA;
              var b22 = z * z * tA + cA;
              this.mat4[0] = a00 * b00 + a10 * b01 + a20 * b02;
              this.mat4[1] = a01 * b00 + a11 * b01 + a21 * b02;
              this.mat4[2] = a02 * b00 + a12 * b01 + a22 * b02;
              this.mat4[3] = a03 * b00 + a13 * b01 + a23 * b02;
              this.mat4[4] = a00 * b10 + a10 * b11 + a20 * b12;
              this.mat4[5] = a01 * b10 + a11 * b11 + a21 * b12;
              this.mat4[6] = a02 * b10 + a12 * b11 + a22 * b12;
              this.mat4[7] = a03 * b10 + a13 * b11 + a23 * b12;
              this.mat4[8] = a00 * b20 + a10 * b21 + a20 * b22;
              this.mat4[9] = a01 * b20 + a11 * b21 + a21 * b22;
              this.mat4[10] = a02 * b20 + a12 * b21 + a22 * b22;
              this.mat4[11] = a03 * b20 + a13 * b21 + a23 * b22;
              return this;
            };
            _main2.default.Matrix.prototype.translate = function(v) {
              var x = v[0], y = v[1], z = v[2] || 0;
              this.mat4[12] += this.mat4[0] * x + this.mat4[4] * y + this.mat4[8] * z;
              this.mat4[13] += this.mat4[1] * x + this.mat4[5] * y + this.mat4[9] * z;
              this.mat4[14] += this.mat4[2] * x + this.mat4[6] * y + this.mat4[10] * z;
              this.mat4[15] += this.mat4[3] * x + this.mat4[7] * y + this.mat4[11] * z;
            };
            _main2.default.Matrix.prototype.rotateX = function(a) {
              this.rotate(a, 1, 0, 0);
            };
            _main2.default.Matrix.prototype.rotateY = function(a) {
              this.rotate(a, 0, 1, 0);
            };
            _main2.default.Matrix.prototype.rotateZ = function(a) {
              this.rotate(a, 0, 0, 1);
            };
            _main2.default.Matrix.prototype.perspective = function(fovy, aspect, near, far) {
              var f = 1 / Math.tan(fovy / 2), nf = 1 / (near - far);
              this.mat4[0] = f / aspect;
              this.mat4[1] = 0;
              this.mat4[2] = 0;
              this.mat4[3] = 0;
              this.mat4[4] = 0;
              this.mat4[5] = f;
              this.mat4[6] = 0;
              this.mat4[7] = 0;
              this.mat4[8] = 0;
              this.mat4[9] = 0;
              this.mat4[10] = (far + near) * nf;
              this.mat4[11] = -1;
              this.mat4[12] = 0;
              this.mat4[13] = 0;
              this.mat4[14] = 2 * far * near * nf;
              this.mat4[15] = 0;
              return this;
            };
            _main2.default.Matrix.prototype.ortho = function(left, right, bottom, top, near, far) {
              var lr = 1 / (left - right), bt = 1 / (bottom - top), nf = 1 / (near - far);
              this.mat4[0] = -2 * lr;
              this.mat4[1] = 0;
              this.mat4[2] = 0;
              this.mat4[3] = 0;
              this.mat4[4] = 0;
              this.mat4[5] = -2 * bt;
              this.mat4[6] = 0;
              this.mat4[7] = 0;
              this.mat4[8] = 0;
              this.mat4[9] = 0;
              this.mat4[10] = 2 * nf;
              this.mat4[11] = 0;
              this.mat4[12] = (left + right) * lr;
              this.mat4[13] = (top + bottom) * bt;
              this.mat4[14] = (far + near) * nf;
              this.mat4[15] = 1;
              return this;
            };
            var _default2 = _main2.default.Matrix;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.typed-array.copy-within": 215,
            "core-js/modules/es.typed-array.every": 216,
            "core-js/modules/es.typed-array.fill": 217,
            "core-js/modules/es.typed-array.filter": 218,
            "core-js/modules/es.typed-array.find": 220,
            "core-js/modules/es.typed-array.find-index": 219,
            "core-js/modules/es.typed-array.float32-array": 221,
            "core-js/modules/es.typed-array.for-each": 223,
            "core-js/modules/es.typed-array.includes": 224,
            "core-js/modules/es.typed-array.index-of": 225,
            "core-js/modules/es.typed-array.iterator": 228,
            "core-js/modules/es.typed-array.join": 229,
            "core-js/modules/es.typed-array.last-index-of": 230,
            "core-js/modules/es.typed-array.map": 231,
            "core-js/modules/es.typed-array.reduce": 233,
            "core-js/modules/es.typed-array.reduce-right": 232,
            "core-js/modules/es.typed-array.reverse": 234,
            "core-js/modules/es.typed-array.set": 235,
            "core-js/modules/es.typed-array.slice": 236,
            "core-js/modules/es.typed-array.some": 237,
            "core-js/modules/es.typed-array.sort": 238,
            "core-js/modules/es.typed-array.subarray": 239,
            "core-js/modules/es.typed-array.to-locale-string": 240,
            "core-js/modules/es.typed-array.to-string": 241
          }
        ],
        341: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.array.map");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.RenderBuffer = function(size, src, dst, attr, renderer, map) {
              this.size = size;
              this.src = src;
              this.dst = dst;
              this.attr = attr;
              this._renderer = renderer;
              this.map = map;
            };
            _main2.default.RenderBuffer.prototype._prepareBuffer = function(geometry, shader) {
              var attributes = shader.attributes;
              var gl = this._renderer.GL;
              var model;
              if (geometry.model) {
                model = geometry.model;
              } else {
                model = geometry;
              }
              var attr = attributes[this.attr];
              if (!attr) {
                return;
              }
              var buffer = geometry[this.dst];
              var src = model[this.src];
              if (src.length > 0) {
                var createBuffer = !buffer;
                if (createBuffer) {
                  geometry[this.dst] = buffer = gl.createBuffer();
                }
                gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
                if (createBuffer || model.dirtyFlags[this.src] !== false) {
                  var map = this.map;
                  var values = map ? map(src) : src;
                  this._renderer._bindBuffer(buffer, gl.ARRAY_BUFFER, values);
                  model.dirtyFlags[this.src] = false;
                }
                shader.enableAttrib(attr, this.size);
              } else {
                var loc = attr.location;
                if (loc === -1 || !this._renderer.registerEnabled[loc]) {
                  return;
                }
                gl.disableVertexAttribArray(loc);
                this._renderer.registerEnabled[loc] = false;
              }
            };
            var _default2 = _main2.default.RenderBuffer;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "core-js/modules/es.array.map": 179
          }
        ],
        342: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.fill");
            _dereq_2("core-js/modules/es.array.from");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.fill");
            _dereq_2("core-js/modules/es.array.from");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.map");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../core/constants"));
            _dereq_2("./p5.RenderBuffer");
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            function _toConsumableArray2(arr) {
              return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _nonIterableSpread2();
            }
            function _nonIterableSpread2() {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            }
            function _iterableToArray2(iter) {
              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]")
                return Array.from(iter);
            }
            function _arrayWithoutHoles2(arr) {
              if (Array.isArray(arr)) {
                for (var i2 = 0, arr2 = new Array(arr.length); i2 < arr.length; i2++) {
                  arr2[i2] = arr[i2];
                }
                return arr2;
              }
            }
            _main2.default.RendererGL.prototype.beginShape = function(mode) {
              this.immediateMode.shapeMode = mode !== void 0 ? mode : constants2.TESS;
              this.immediateMode.geometry.reset();
              return this;
            };
            var immediateBufferStrides = {
              vertices: 1,
              vertexNormals: 1,
              vertexColors: 4,
              vertexStrokeColors: 4,
              uvs: 2
            };
            _main2.default.RendererGL.prototype.vertex = function(x, y) {
              if (this.immediateMode.shapeMode === constants2.QUADS) {
                if (this.immediateMode.geometry.vertices.length % 6 === 3) {
                  for (var key2 in immediateBufferStrides) {
                    var stride = immediateBufferStrides[key2];
                    var buffer = this.immediateMode.geometry[key2];
                    buffer.push.apply(buffer, _toConsumableArray2(buffer.slice(buffer.length - 3 * stride, buffer.length - 2 * stride)).concat(_toConsumableArray2(buffer.slice(buffer.length - stride, buffer.length))));
                  }
                }
              }
              var z, u, v;
              z = u = v = 0;
              if (arguments.length === 3) {
                z = arguments[2];
              } else if (arguments.length === 4) {
                u = arguments[2];
                v = arguments[3];
              } else if (arguments.length === 5) {
                z = arguments[2];
                u = arguments[3];
                v = arguments[4];
              }
              var vert = new _main2.default.Vector(x, y, z);
              this.immediateMode.geometry.vertices.push(vert);
              this.immediateMode.geometry.vertexNormals.push(this._currentNormal);
              var vertexColor = this.curFillColor || [
                0.5,
                0.5,
                0.5,
                1
              ];
              this.immediateMode.geometry.vertexColors.push(vertexColor[0], vertexColor[1], vertexColor[2], vertexColor[3]);
              var lineVertexColor = this.curStrokeColor || [
                0.5,
                0.5,
                0.5,
                1
              ];
              this.immediateMode.geometry.vertexStrokeColors.push(lineVertexColor[0], lineVertexColor[1], lineVertexColor[2], lineVertexColor[3]);
              if (this.textureMode === constants2.IMAGE) {
                if (this._tex !== null) {
                  if (this._tex.width > 0 && this._tex.height > 0) {
                    u /= this._tex.width;
                    v /= this._tex.height;
                  }
                } else if (!this.isProcessingVertices && this._tex === null && arguments.length >= 4) {
                  console.warn("You must first call texture() before using vertex() with image based u and v coordinates");
                }
              }
              this.immediateMode.geometry.uvs.push(u, v);
              this.immediateMode._bezierVertex[0] = x;
              this.immediateMode._bezierVertex[1] = y;
              this.immediateMode._bezierVertex[2] = z;
              this.immediateMode._quadraticVertex[0] = x;
              this.immediateMode._quadraticVertex[1] = y;
              this.immediateMode._quadraticVertex[2] = z;
              return this;
            };
            _main2.default.RendererGL.prototype.normal = function(xorv, y, z) {
              if (xorv instanceof _main2.default.Vector) {
                this._currentNormal = xorv;
              } else {
                this._currentNormal = new _main2.default.Vector(xorv, y, z);
              }
              return this;
            };
            _main2.default.RendererGL.prototype.endShape = function(mode, isCurve, isBezier, isQuadratic, isContour, shapeKind) {
              if (this.immediateMode.shapeMode === constants2.POINTS) {
                this._drawPoints(this.immediateMode.geometry.vertices, this.immediateMode.buffers.point);
                return this;
              }
              this.isProcessingVertices = true;
              this._processVertices.apply(this, arguments);
              this.isProcessingVertices = false;
              if (this._doFill) {
                if (this.immediateMode.geometry.vertices.length > 1) {
                  this._drawImmediateFill();
                }
              }
              if (this._doStroke) {
                if (this.immediateMode.geometry.lineVertices.length > 1) {
                  this._drawImmediateStroke();
                }
              }
              this.isBezier = false;
              this.isQuadratic = false;
              this.isCurve = false;
              this.immediateMode._bezierVertex.length = 0;
              this.immediateMode._quadraticVertex.length = 0;
              this.immediateMode._curveVertex.length = 0;
              return this;
            };
            _main2.default.RendererGL.prototype._processVertices = function(mode) {
              if (this.immediateMode.geometry.vertices.length === 0)
                return;
              var calculateStroke = this._doStroke;
              var shouldClose = mode === constants2.CLOSE;
              if (calculateStroke) {
                this.immediateMode.geometry.edges = this._calculateEdges(this.immediateMode.shapeMode, this.immediateMode.geometry.vertices, shouldClose);
                this.immediateMode.geometry._edgesToVertices();
              }
              var convexShape = this.immediateMode.shapeMode === constants2.TESS;
              var shouldTess = this._doFill && (this.isBezier || this.isQuadratic || this.isCurve || convexShape) && this.immediateMode.shapeMode !== constants2.LINES;
              if (shouldTess) {
                this._tesselateShape();
              }
            };
            _main2.default.RendererGL.prototype._calculateEdges = function(shapeMode, verts, shouldClose) {
              var res = [];
              var i2 = 0;
              switch (shapeMode) {
                case constants2.TRIANGLE_STRIP:
                  for (i2 = 0; i2 < verts.length - 2; i2++) {
                    res.push([
                      i2,
                      i2 + 1
                    ]);
                    res.push([
                      i2,
                      i2 + 2
                    ]);
                  }
                  res.push([
                    i2,
                    i2 + 1
                  ]);
                  break;
                case constants2.TRIANGLE_FAN:
                  for (i2 = 1; i2 < verts.length - 1; i2++) {
                    res.push([
                      0,
                      i2
                    ]);
                    res.push([
                      i2,
                      i2 + 1
                    ]);
                  }
                  res.push([
                    0,
                    verts.length - 1
                  ]);
                  break;
                case constants2.TRIANGLES:
                  for (i2 = 0; i2 < verts.length - 2; i2 = i2 + 3) {
                    res.push([
                      i2,
                      i2 + 1
                    ]);
                    res.push([
                      i2 + 1,
                      i2 + 2
                    ]);
                    res.push([
                      i2 + 2,
                      i2
                    ]);
                  }
                  break;
                case constants2.LINES:
                  for (i2 = 0; i2 < verts.length - 1; i2 = i2 + 2) {
                    res.push([
                      i2,
                      i2 + 1
                    ]);
                  }
                  break;
                case constants2.QUADS:
                  for (i2 = 0; i2 < verts.length - 5; i2 += 6) {
                    res.push([
                      i2,
                      i2 + 1
                    ]);
                    res.push([
                      i2 + 1,
                      i2 + 2
                    ]);
                    res.push([
                      i2 + 3,
                      i2 + 5
                    ]);
                    res.push([
                      i2 + 4,
                      i2 + 5
                    ]);
                  }
                  break;
                case constants2.QUAD_STRIP:
                  for (i2 = 0; i2 < verts.length - 2; i2 += 2) {
                    res.push([
                      i2,
                      i2 + 1
                    ]);
                    res.push([
                      i2,
                      i2 + 2
                    ]);
                    res.push([
                      i2 + 1,
                      i2 + 3
                    ]);
                  }
                  res.push([
                    i2,
                    i2 + 1
                  ]);
                  break;
                default:
                  for (i2 = 0; i2 < verts.length - 1; i2++) {
                    res.push([
                      i2,
                      i2 + 1
                    ]);
                  }
                  break;
              }
              if (shouldClose) {
                res.push([
                  verts.length - 1,
                  0
                ]);
              }
              return res;
            };
            _main2.default.RendererGL.prototype._tesselateShape = function() {
              var _this = this;
              this.immediateMode.shapeMode = constants2.TRIANGLES;
              var contours = [
                this._flatten(this.immediateMode.geometry.vertices.map(function(vert, i2) {
                  return [
                    vert.x,
                    vert.y,
                    vert.z,
                    _this.immediateMode.geometry.uvs[i2 * 2],
                    _this.immediateMode.geometry.uvs[i2 * 2 + 1],
                    _this.immediateMode.geometry.vertexColors[i2 * 4],
                    _this.immediateMode.geometry.vertexColors[i2 * 4 + 1],
                    _this.immediateMode.geometry.vertexColors[i2 * 4 + 2],
                    _this.immediateMode.geometry.vertexColors[i2 * 4 + 3],
                    _this.immediateMode.geometry.vertexNormals[i2].x,
                    _this.immediateMode.geometry.vertexNormals[i2].y,
                    _this.immediateMode.geometry.vertexNormals[i2].z
                  ];
                }))
              ];
              var polyTriangles = this._triangulate(contours);
              this.immediateMode.geometry.vertices = [];
              this.immediateMode.geometry.vertexNormals = [];
              this.immediateMode.geometry.uvs = [];
              var colors = [];
              for (var j = 0, polyTriLength = polyTriangles.length; j < polyTriLength; j = j + _main2.default.RendererGL.prototype.tessyVertexSize) {
                colors.push.apply(colors, _toConsumableArray2(polyTriangles.slice(j + 5, j + 9)));
                this.normal.apply(this, _toConsumableArray2(polyTriangles.slice(j + 9, j + 12)));
                this.vertex.apply(this, _toConsumableArray2(polyTriangles.slice(j, j + 5)));
              }
              this.immediateMode.geometry.vertexColors = colors;
            };
            _main2.default.RendererGL.prototype._drawImmediateFill = function() {
              var gl = this.GL;
              this._useVertexColor = this.immediateMode.geometry.vertexColors.length > 0;
              var shader = this._getImmediateFillShader();
              this._setFillUniforms(shader);
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = void 0;
              try {
                for (var _iterator = this.immediateMode.buffers.fill[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var buff = _step.value;
                  buff._prepareBuffer(this.immediateMode.geometry, shader);
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }
              if (this.immediateMode.shapeMode === constants2.LINE_STRIP || this.immediateMode.shapeMode === constants2.LINES) {
                this.immediateMode.shapeMode = constants2.TRIANGLE_FAN;
              }
              if (this.immediateMode.shapeMode === constants2.QUADS) {
                this.immediateMode.shapeMode = constants2.TRIANGLES;
              } else if (this.immediateMode.shapeMode === constants2.QUAD_STRIP) {
                this.immediateMode.shapeMode = constants2.TRIANGLE_STRIP;
              }
              this._applyColorBlend(this.curFillColor);
              gl.drawArrays(this.immediateMode.shapeMode, 0, this.immediateMode.geometry.vertices.length);
              shader.unbindShader();
            };
            _main2.default.RendererGL.prototype._drawImmediateStroke = function() {
              var gl = this.GL;
              var faceCullingEnabled = gl.isEnabled(gl.CULL_FACE);
              gl.disable(gl.CULL_FACE);
              var shader = this._getImmediateStrokeShader();
              this._useLineColor = this.immediateMode.geometry.vertexStrokeColors.length > 0;
              this._setStrokeUniforms(shader);
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = void 0;
              try {
                for (var _iterator2 = this.immediateMode.buffers.stroke[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var buff = _step2.value;
                  buff._prepareBuffer(this.immediateMode.geometry, shader);
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }
              this._applyColorBlend(this.curStrokeColor);
              gl.drawArrays(gl.TRIANGLES, 0, this.immediateMode.geometry.lineVertices.length);
              if (faceCullingEnabled) {
                gl.enable(gl.CULL_FACE);
              }
              shader.unbindShader();
            };
            var _default2 = _main2.default.RendererGL;
            exports2.default = _default2;
          },
          {
            "../core/constants": 278,
            "../core/main": 290,
            "./p5.RenderBuffer": 341,
            "core-js/modules/es.array.concat": 167,
            "core-js/modules/es.array.fill": 170,
            "core-js/modules/es.array.from": 173,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.map": 179,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        343: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.fill");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.some");
            _dereq_2("core-js/modules/es.object.keys");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.typed-array.float32-array");
            _dereq_2("core-js/modules/es.typed-array.uint16-array");
            _dereq_2("core-js/modules/es.typed-array.uint32-array");
            _dereq_2("core-js/modules/es.typed-array.copy-within");
            _dereq_2("core-js/modules/es.typed-array.every");
            _dereq_2("core-js/modules/es.typed-array.fill");
            _dereq_2("core-js/modules/es.typed-array.filter");
            _dereq_2("core-js/modules/es.typed-array.find");
            _dereq_2("core-js/modules/es.typed-array.find-index");
            _dereq_2("core-js/modules/es.typed-array.for-each");
            _dereq_2("core-js/modules/es.typed-array.includes");
            _dereq_2("core-js/modules/es.typed-array.index-of");
            _dereq_2("core-js/modules/es.typed-array.iterator");
            _dereq_2("core-js/modules/es.typed-array.join");
            _dereq_2("core-js/modules/es.typed-array.last-index-of");
            _dereq_2("core-js/modules/es.typed-array.map");
            _dereq_2("core-js/modules/es.typed-array.reduce");
            _dereq_2("core-js/modules/es.typed-array.reduce-right");
            _dereq_2("core-js/modules/es.typed-array.reverse");
            _dereq_2("core-js/modules/es.typed-array.set");
            _dereq_2("core-js/modules/es.typed-array.slice");
            _dereq_2("core-js/modules/es.typed-array.some");
            _dereq_2("core-js/modules/es.typed-array.sort");
            _dereq_2("core-js/modules/es.typed-array.subarray");
            _dereq_2("core-js/modules/es.typed-array.to-locale-string");
            _dereq_2("core-js/modules/es.typed-array.to-string");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.fill");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.some");
            _dereq_2("core-js/modules/es.object.keys");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.typed-array.float32-array");
            _dereq_2("core-js/modules/es.typed-array.uint16-array");
            _dereq_2("core-js/modules/es.typed-array.uint32-array");
            _dereq_2("core-js/modules/es.typed-array.copy-within");
            _dereq_2("core-js/modules/es.typed-array.every");
            _dereq_2("core-js/modules/es.typed-array.fill");
            _dereq_2("core-js/modules/es.typed-array.filter");
            _dereq_2("core-js/modules/es.typed-array.find");
            _dereq_2("core-js/modules/es.typed-array.find-index");
            _dereq_2("core-js/modules/es.typed-array.for-each");
            _dereq_2("core-js/modules/es.typed-array.includes");
            _dereq_2("core-js/modules/es.typed-array.index-of");
            _dereq_2("core-js/modules/es.typed-array.iterator");
            _dereq_2("core-js/modules/es.typed-array.join");
            _dereq_2("core-js/modules/es.typed-array.last-index-of");
            _dereq_2("core-js/modules/es.typed-array.map");
            _dereq_2("core-js/modules/es.typed-array.reduce");
            _dereq_2("core-js/modules/es.typed-array.reduce-right");
            _dereq_2("core-js/modules/es.typed-array.reverse");
            _dereq_2("core-js/modules/es.typed-array.set");
            _dereq_2("core-js/modules/es.typed-array.slice");
            _dereq_2("core-js/modules/es.typed-array.some");
            _dereq_2("core-js/modules/es.typed-array.sort");
            _dereq_2("core-js/modules/es.typed-array.subarray");
            _dereq_2("core-js/modules/es.typed-array.to-locale-string");
            _dereq_2("core-js/modules/es.typed-array.to-string");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            _dereq_2("./p5.RendererGL");
            _dereq_2("./p5.RenderBuffer");
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            var hashCount = 0;
            _main2.default.RendererGL.prototype._initBufferDefaults = function(gId) {
              this._freeBuffers(gId);
              hashCount++;
              if (hashCount > 1e3) {
                var key2 = Object.keys(this.retainedMode.geometry)[0];
                delete this.retainedMode.geometry[key2];
                hashCount--;
              }
              return this.retainedMode.geometry[gId] = {};
            };
            _main2.default.RendererGL.prototype._freeBuffers = function(gId) {
              var buffers = this.retainedMode.geometry[gId];
              if (!buffers) {
                return;
              }
              delete this.retainedMode.geometry[gId];
              hashCount--;
              var gl = this.GL;
              if (buffers.indexBuffer) {
                gl.deleteBuffer(buffers.indexBuffer);
              }
              function freeBuffers(defs) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = void 0;
                try {
                  for (var _iterator = defs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var def = _step.value;
                    if (buffers[def.dst]) {
                      gl.deleteBuffer(buffers[def.dst]);
                      buffers[def.dst] = null;
                    }
                  }
                } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                      _iterator.return();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                }
              }
              freeBuffers(this.retainedMode.buffers.stroke);
              freeBuffers(this.retainedMode.buffers.fill);
            };
            _main2.default.RendererGL.prototype.createBuffers = function(gId, model) {
              var gl = this.GL;
              var buffers = this._initBufferDefaults(gId);
              buffers.model = model;
              var indexBuffer = buffers.indexBuffer;
              if (model.faces.length) {
                if (!indexBuffer)
                  indexBuffer = buffers.indexBuffer = gl.createBuffer();
                var vals = _main2.default.RendererGL.prototype._flatten(model.faces);
                var hasVertexIndicesOverMaxUInt16 = vals.some(function(v) {
                  return v > 65535;
                });
                var type = hasVertexIndicesOverMaxUInt16 ? Uint32Array : Uint16Array;
                this._bindBuffer(indexBuffer, gl.ELEMENT_ARRAY_BUFFER, vals, type);
                buffers.indexBufferType = hasVertexIndicesOverMaxUInt16 ? gl.UNSIGNED_INT : gl.UNSIGNED_SHORT;
                buffers.vertexCount = model.faces.length * 3;
              } else {
                if (indexBuffer) {
                  gl.deleteBuffer(indexBuffer);
                  buffers.indexBuffer = null;
                }
                buffers.vertexCount = model.vertices ? model.vertices.length : 0;
              }
              buffers.lineVertexCount = model.lineVertices ? model.lineVertices.length : 0;
              return buffers;
            };
            _main2.default.RendererGL.prototype.drawBuffers = function(gId) {
              var gl = this.GL;
              var geometry = this.retainedMode.geometry[gId];
              if (this._doStroke && geometry.lineVertexCount > 0) {
                var faceCullingEnabled = gl.isEnabled(gl.CULL_FACE);
                gl.disable(gl.CULL_FACE);
                var strokeShader = this._getRetainedStrokeShader();
                this._useLineColor = geometry.model.vertexStrokeColors.length > 0;
                this._setStrokeUniforms(strokeShader);
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = void 0;
                try {
                  for (var _iterator2 = this.retainedMode.buffers.stroke[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var buff = _step2.value;
                    buff._prepareBuffer(geometry, strokeShader);
                  }
                } catch (err) {
                  _didIteratorError2 = true;
                  _iteratorError2 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                      _iterator2.return();
                    }
                  } finally {
                    if (_didIteratorError2) {
                      throw _iteratorError2;
                    }
                  }
                }
                this._applyColorBlend(this.curStrokeColor);
                this._drawArrays(gl.TRIANGLES, gId);
                if (faceCullingEnabled) {
                  gl.enable(gl.CULL_FACE);
                }
                strokeShader.unbindShader();
              }
              if (this._doFill) {
                this._useVertexColor = geometry.model.vertexColors.length > 0;
                var fillShader = this._getRetainedFillShader();
                this._setFillUniforms(fillShader);
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = void 0;
                try {
                  for (var _iterator3 = this.retainedMode.buffers.fill[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var _buff = _step3.value;
                    _buff._prepareBuffer(geometry, fillShader);
                  }
                } catch (err) {
                  _didIteratorError3 = true;
                  _iteratorError3 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                      _iterator3.return();
                    }
                  } finally {
                    if (_didIteratorError3) {
                      throw _iteratorError3;
                    }
                  }
                }
                if (geometry.indexBuffer) {
                  this._bindBuffer(geometry.indexBuffer, gl.ELEMENT_ARRAY_BUFFER);
                }
                this._applyColorBlend(this.curFillColor);
                this._drawElements(gl.TRIANGLES, gId);
                fillShader.unbindShader();
              }
              return this;
            };
            _main2.default.RendererGL.prototype.drawBuffersScaled = function(gId, scaleX, scaleY, scaleZ) {
              var uMVMatrix = this.uMVMatrix.copy();
              try {
                this.uMVMatrix.scale(scaleX, scaleY, scaleZ);
                this.drawBuffers(gId);
              } finally {
                this.uMVMatrix = uMVMatrix;
              }
            };
            _main2.default.RendererGL.prototype._drawArrays = function(drawMode, gId) {
              this.GL.drawArrays(drawMode, 0, this.retainedMode.geometry[gId].lineVertexCount);
              return this;
            };
            _main2.default.RendererGL.prototype._drawElements = function(drawMode, gId) {
              var buffers = this.retainedMode.geometry[gId];
              var gl = this.GL;
              if (buffers.indexBuffer) {
                if (buffers.indexBufferType === gl.UNSIGNED_INT) {
                  if (!gl.getExtension("OES_element_index_uint")) {
                    throw new Error("Unable to render a 3d model with > 65535 triangles. Your web browser does not support the WebGL Extension OES_element_index_uint.");
                  }
                }
                gl.drawElements(gl.TRIANGLES, buffers.vertexCount, buffers.indexBufferType, 0);
              } else {
                gl.drawArrays(drawMode || gl.TRIANGLES, 0, buffers.vertexCount);
              }
            };
            _main2.default.RendererGL.prototype._drawPoints = function(vertices, vertexBuffer) {
              var gl = this.GL;
              var pointShader = this._getImmediatePointShader();
              this._setPointUniforms(pointShader);
              this._bindBuffer(vertexBuffer, gl.ARRAY_BUFFER, this._vToNArray(vertices), Float32Array, gl.STATIC_DRAW);
              pointShader.enableAttrib(pointShader.attributes.aPosition, 3);
              gl.drawArrays(gl.Points, 0, vertices.length);
              pointShader.unbindShader();
            };
            var _default2 = _main2.default.RendererGL;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "./p5.RenderBuffer": 341,
            "./p5.RendererGL": 344,
            "core-js/modules/es.array.fill": 170,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.some": 181,
            "core-js/modules/es.object.keys": 194,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.typed-array.copy-within": 215,
            "core-js/modules/es.typed-array.every": 216,
            "core-js/modules/es.typed-array.fill": 217,
            "core-js/modules/es.typed-array.filter": 218,
            "core-js/modules/es.typed-array.find": 220,
            "core-js/modules/es.typed-array.find-index": 219,
            "core-js/modules/es.typed-array.float32-array": 221,
            "core-js/modules/es.typed-array.for-each": 223,
            "core-js/modules/es.typed-array.includes": 224,
            "core-js/modules/es.typed-array.index-of": 225,
            "core-js/modules/es.typed-array.iterator": 228,
            "core-js/modules/es.typed-array.join": 229,
            "core-js/modules/es.typed-array.last-index-of": 230,
            "core-js/modules/es.typed-array.map": 231,
            "core-js/modules/es.typed-array.reduce": 233,
            "core-js/modules/es.typed-array.reduce-right": 232,
            "core-js/modules/es.typed-array.reverse": 234,
            "core-js/modules/es.typed-array.set": 235,
            "core-js/modules/es.typed-array.slice": 236,
            "core-js/modules/es.typed-array.some": 237,
            "core-js/modules/es.typed-array.sort": 238,
            "core-js/modules/es.typed-array.subarray": 239,
            "core-js/modules/es.typed-array.to-locale-string": 240,
            "core-js/modules/es.typed-array.to-string": 241,
            "core-js/modules/es.typed-array.uint16-array": 242,
            "core-js/modules/es.typed-array.uint32-array": 243,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        344: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.fill");
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.from");
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.assign");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.includes");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.typed-array.float32-array");
            _dereq_2("core-js/modules/es.typed-array.float64-array");
            _dereq_2("core-js/modules/es.typed-array.int16-array");
            _dereq_2("core-js/modules/es.typed-array.uint8-array");
            _dereq_2("core-js/modules/es.typed-array.uint16-array");
            _dereq_2("core-js/modules/es.typed-array.uint32-array");
            _dereq_2("core-js/modules/es.typed-array.copy-within");
            _dereq_2("core-js/modules/es.typed-array.every");
            _dereq_2("core-js/modules/es.typed-array.fill");
            _dereq_2("core-js/modules/es.typed-array.filter");
            _dereq_2("core-js/modules/es.typed-array.find");
            _dereq_2("core-js/modules/es.typed-array.find-index");
            _dereq_2("core-js/modules/es.typed-array.for-each");
            _dereq_2("core-js/modules/es.typed-array.includes");
            _dereq_2("core-js/modules/es.typed-array.index-of");
            _dereq_2("core-js/modules/es.typed-array.iterator");
            _dereq_2("core-js/modules/es.typed-array.join");
            _dereq_2("core-js/modules/es.typed-array.last-index-of");
            _dereq_2("core-js/modules/es.typed-array.map");
            _dereq_2("core-js/modules/es.typed-array.reduce");
            _dereq_2("core-js/modules/es.typed-array.reduce-right");
            _dereq_2("core-js/modules/es.typed-array.reverse");
            _dereq_2("core-js/modules/es.typed-array.set");
            _dereq_2("core-js/modules/es.typed-array.slice");
            _dereq_2("core-js/modules/es.typed-array.some");
            _dereq_2("core-js/modules/es.typed-array.sort");
            _dereq_2("core-js/modules/es.typed-array.subarray");
            _dereq_2("core-js/modules/es.typed-array.to-locale-string");
            _dereq_2("core-js/modules/es.typed-array.to-string");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.concat");
            _dereq_2("core-js/modules/es.array.fill");
            _dereq_2("core-js/modules/es.array.filter");
            _dereq_2("core-js/modules/es.array.from");
            _dereq_2("core-js/modules/es.array.includes");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.object.assign");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.to-string");
            _dereq_2("core-js/modules/es.string.includes");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.typed-array.float32-array");
            _dereq_2("core-js/modules/es.typed-array.float64-array");
            _dereq_2("core-js/modules/es.typed-array.int16-array");
            _dereq_2("core-js/modules/es.typed-array.uint8-array");
            _dereq_2("core-js/modules/es.typed-array.uint16-array");
            _dereq_2("core-js/modules/es.typed-array.uint32-array");
            _dereq_2("core-js/modules/es.typed-array.copy-within");
            _dereq_2("core-js/modules/es.typed-array.every");
            _dereq_2("core-js/modules/es.typed-array.fill");
            _dereq_2("core-js/modules/es.typed-array.filter");
            _dereq_2("core-js/modules/es.typed-array.find");
            _dereq_2("core-js/modules/es.typed-array.find-index");
            _dereq_2("core-js/modules/es.typed-array.for-each");
            _dereq_2("core-js/modules/es.typed-array.includes");
            _dereq_2("core-js/modules/es.typed-array.index-of");
            _dereq_2("core-js/modules/es.typed-array.iterator");
            _dereq_2("core-js/modules/es.typed-array.join");
            _dereq_2("core-js/modules/es.typed-array.last-index-of");
            _dereq_2("core-js/modules/es.typed-array.map");
            _dereq_2("core-js/modules/es.typed-array.reduce");
            _dereq_2("core-js/modules/es.typed-array.reduce-right");
            _dereq_2("core-js/modules/es.typed-array.reverse");
            _dereq_2("core-js/modules/es.typed-array.set");
            _dereq_2("core-js/modules/es.typed-array.slice");
            _dereq_2("core-js/modules/es.typed-array.some");
            _dereq_2("core-js/modules/es.typed-array.sort");
            _dereq_2("core-js/modules/es.typed-array.subarray");
            _dereq_2("core-js/modules/es.typed-array.to-locale-string");
            _dereq_2("core-js/modules/es.typed-array.to-string");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../core/constants"));
            var _libtess = _interopRequireDefault2(_dereq_2("libtess"));
            _dereq_2("./p5.Shader");
            _dereq_2("./p5.Camera");
            _dereq_2("../core/p5.Renderer");
            _dereq_2("./p5.Matrix");
            var _path = _dereq_2("path");
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            function _toConsumableArray2(arr) {
              return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _nonIterableSpread2();
            }
            function _nonIterableSpread2() {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            }
            function _iterableToArray2(iter) {
              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]")
                return Array.from(iter);
            }
            function _arrayWithoutHoles2(arr) {
              if (Array.isArray(arr)) {
                for (var i2 = 0, arr2 = new Array(arr.length); i2 < arr.length; i2++) {
                  arr2[i2] = arr[i2];
                }
                return arr2;
              }
            }
            var STROKE_CAP_ENUM = {};
            var STROKE_JOIN_ENUM = {};
            var lineDefs = "";
            var defineStrokeCapEnum = function defineStrokeCapEnum2(key2, val) {
              lineDefs += "#define STROKE_CAP_".concat(key2, " ").concat(val, "\n");
              STROKE_CAP_ENUM[constants2[key2]] = val;
            };
            var defineStrokeJoinEnum = function defineStrokeJoinEnum2(key2, val) {
              lineDefs += "#define STROKE_JOIN_".concat(key2, " ").concat(val, "\n");
              STROKE_JOIN_ENUM[constants2[key2]] = val;
            };
            defineStrokeCapEnum("ROUND", 0);
            defineStrokeCapEnum("PROJECT", 1);
            defineStrokeCapEnum("SQUARE", 2);
            defineStrokeJoinEnum("ROUND", 0);
            defineStrokeJoinEnum("MITER", 1);
            defineStrokeJoinEnum("BEVEL", 2);
            var lightingShader = "precision highp float;\nprecision highp int;\n\nuniform mat4 uViewMatrix;\n\nuniform bool uUseLighting;\n\nuniform int uAmbientLightCount;\nuniform vec3 uAmbientColor[5];\n\nuniform int uDirectionalLightCount;\nuniform vec3 uLightingDirection[5];\nuniform vec3 uDirectionalDiffuseColors[5];\nuniform vec3 uDirectionalSpecularColors[5];\n\nuniform int uPointLightCount;\nuniform vec3 uPointLightLocation[5];\nuniform vec3 uPointLightDiffuseColors[5];	\nuniform vec3 uPointLightSpecularColors[5];\n\nuniform int uSpotLightCount;\nuniform float uSpotLightAngle[5];\nuniform float uSpotLightConc[5];\nuniform vec3 uSpotLightDiffuseColors[5];\nuniform vec3 uSpotLightSpecularColors[5];\nuniform vec3 uSpotLightLocation[5];\nuniform vec3 uSpotLightDirection[5];\n\nuniform bool uSpecular;\nuniform float uShininess;\n\nuniform float uConstantAttenuation;\nuniform float uLinearAttenuation;\nuniform float uQuadraticAttenuation;\n\nconst float specularFactor = 2.0;\nconst float diffuseFactor = 0.73;\n\nstruct LightResult {\n  float specular;\n  float diffuse;\n};\n\nfloat _phongSpecular(\n  vec3 lightDirection,\n  vec3 viewDirection,\n  vec3 surfaceNormal,\n  float shininess) {\n\n  vec3 R = reflect(lightDirection, surfaceNormal);\n  return pow(max(0.0, dot(R, viewDirection)), shininess);\n}\n\nfloat _lambertDiffuse(vec3 lightDirection, vec3 surfaceNormal) {\n  return max(0.0, dot(-lightDirection, surfaceNormal));\n}\n\nLightResult _light(vec3 viewDirection, vec3 normal, vec3 lightVector) {\n\n  vec3 lightDir = normalize(lightVector);\n\n  //compute our diffuse & specular terms\n  LightResult lr;\n  if (uSpecular)\n    lr.specular = _phongSpecular(lightDir, viewDirection, normal, uShininess);\n  lr.diffuse = _lambertDiffuse(lightDir, normal);\n  return lr;\n}\n\nvoid totalLight(\n  vec3 modelPosition,\n  vec3 normal,\n  out vec3 totalDiffuse,\n  out vec3 totalSpecular\n) {\n\n  totalSpecular = vec3(0.0);\n\n  if (!uUseLighting) {\n    totalDiffuse = vec3(1.0);\n    return;\n  }\n\n  totalDiffuse = vec3(0.0);\n\n  vec3 viewDirection = normalize(-modelPosition);\n\n  for (int j = 0; j < 5; j++) {\n    if (j < uDirectionalLightCount) {\n      vec3 lightVector = (uViewMatrix * vec4(uLightingDirection[j], 0.0)).xyz;\n      vec3 lightColor = uDirectionalDiffuseColors[j];\n      vec3 specularColor = uDirectionalSpecularColors[j];\n      LightResult result = _light(viewDirection, normal, lightVector);\n      totalDiffuse += result.diffuse * lightColor;\n      totalSpecular += result.specular * lightColor * specularColor;\n    }\n\n    if (j < uPointLightCount) {\n      vec3 lightPosition = (uViewMatrix * vec4(uPointLightLocation[j], 1.0)).xyz;\n      vec3 lightVector = modelPosition - lightPosition;\n    \n      //calculate attenuation\n      float lightDistance = length(lightVector);\n      float lightFalloff = 1.0 / (uConstantAttenuation + lightDistance * uLinearAttenuation + (lightDistance * lightDistance) * uQuadraticAttenuation);\n      vec3 lightColor = lightFalloff * uPointLightDiffuseColors[j];\n      vec3 specularColor = lightFalloff * uPointLightSpecularColors[j];\n\n      LightResult result = _light(viewDirection, normal, lightVector);\n      totalDiffuse += result.diffuse * lightColor;\n      totalSpecular += result.specular * lightColor * specularColor;\n    }\n\n    if(j < uSpotLightCount) {\n      vec3 lightPosition = (uViewMatrix * vec4(uSpotLightLocation[j], 1.0)).xyz;\n      vec3 lightVector = modelPosition - lightPosition;\n    \n      float lightDistance = length(lightVector);\n      float lightFalloff = 1.0 / (uConstantAttenuation + lightDistance * uLinearAttenuation + (lightDistance * lightDistance) * uQuadraticAttenuation);\n\n      vec3 lightDirection = (uViewMatrix * vec4(uSpotLightDirection[j], 0.0)).xyz;\n      float spotDot = dot(normalize(lightVector), normalize(lightDirection));\n      float spotFalloff;\n      if(spotDot < uSpotLightAngle[j]) {\n        spotFalloff = 0.0;\n      }\n      else {\n        spotFalloff = pow(spotDot, uSpotLightConc[j]);\n      }\n      lightFalloff *= spotFalloff;\n\n      vec3 lightColor = uSpotLightDiffuseColors[j];\n      vec3 specularColor = uSpotLightSpecularColors[j];\n     \n      LightResult result = _light(viewDirection, normal, lightVector);\n      \n      totalDiffuse += result.diffuse * lightColor * lightFalloff;\n      totalSpecular += result.specular * lightColor * specularColor * lightFalloff;\n    }\n  }\n\n  totalDiffuse *= diffuseFactor;\n  totalSpecular *= specularFactor;\n}\n";
            var defaultShaders = {
              immediateVert: "attribute vec3 aPosition;\nattribute vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform float uResolution;\nuniform float uPointSize;\n\nvarying vec4 vColor;\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vColor = aVertexColor;\n  gl_PointSize = uPointSize;\n}\n",
              vertexColorVert: "attribute vec3 aPosition;\nattribute vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nvarying vec4 vColor;\n\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vColor = aVertexColor;\n}\n",
              vertexColorFrag: "precision mediump float;\nvarying vec4 vColor;\nvoid main(void) {\n  gl_FragColor = vec4(vColor.rgb, 1.) * vColor.a;\n}\n",
              normalVert: "attribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\nattribute vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\n\nuniform vec4 uMaterialColor;\nuniform bool uUseVertexColor;\n\nvarying vec3 vVertexNormal;\nvarying highp vec2 vVertTexCoord;\nvarying vec4 vColor;\n\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vVertexNormal = normalize(vec3( uNormalMatrix * aNormal ));\n  vVertTexCoord = aTexCoord;\n  vColor = (uUseVertexColor ? aVertexColor : uMaterialColor);\n}\n",
              normalFrag: "precision mediump float;\nvarying vec3 vVertexNormal;\nvoid main(void) {\n  gl_FragColor = vec4(vVertexNormal, 1.0);\n}",
              basicFrag: "precision mediump float;\nvarying vec4 vColor;\nvoid main(void) {\n  gl_FragColor = vec4(vColor.rgb, 1.) * vColor.a;\n}\n",
              lightVert: lightingShader + "// include lighting.glgl\n\nattribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\nattribute vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\n\nuniform bool uUseVertexColor;\nuniform vec4 uMaterialColor;\n\nvarying highp vec2 vVertTexCoord;\nvarying vec3 vDiffuseColor;\nvarying vec3 vSpecularColor;\nvarying vec4 vColor;\n\nvoid main(void) {\n\n  vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * viewModelPosition;\n\n  vec3 vertexNormal = normalize(uNormalMatrix * aNormal);\n  vVertTexCoord = aTexCoord;\n\n  totalLight(viewModelPosition.xyz, vertexNormal, vDiffuseColor, vSpecularColor);\n\n  for (int i = 0; i < 8; i++) {\n    if (i < uAmbientLightCount) {\n      vDiffuseColor += uAmbientColor[i];\n    }\n  }\n  \n  vColor = (uUseVertexColor ? aVertexColor : uMaterialColor);\n}\n",
              lightTextureFrag: "precision highp float;\n\nuniform vec4 uTint;\nuniform sampler2D uSampler;\nuniform bool isTexture;\nuniform bool uEmissive;\n\nvarying highp vec2 vVertTexCoord;\nvarying vec3 vDiffuseColor;\nvarying vec3 vSpecularColor;\nvarying vec4 vColor;\n\nvoid main(void) {\n  if(uEmissive && !isTexture) {\n    gl_FragColor = vColor;\n  }\n  else {\n    vec4 baseColor = isTexture ? texture2D(uSampler, vVertTexCoord) * (uTint / vec4(255, 255, 255, 255)) : vColor;\n    gl_FragColor = vec4(gl_FragColor.rgb * vDiffuseColor + vSpecularColor, 1.) * baseColor.a;\n  }\n}\n",
              phongVert: "precision highp float;\nprecision highp int;\n\nattribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\nattribute vec4 aVertexColor;\n\nuniform vec3 uAmbientColor[5];\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\nuniform int uAmbientLightCount;\n\nuniform bool uUseVertexColor;\nuniform vec4 uMaterialColor;\n\nvarying vec3 vNormal;\nvarying vec2 vTexCoord;\nvarying vec3 vViewPosition;\nvarying vec3 vAmbientColor;\nvarying vec4 vColor;\n\nvoid main(void) {\n\n  vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);\n\n  // Pass varyings to fragment shader\n  vViewPosition = viewModelPosition.xyz;\n  gl_Position = uProjectionMatrix * viewModelPosition;  \n\n  vNormal = uNormalMatrix * aNormal;\n  vTexCoord = aTexCoord;\n\n  // TODO: this should be a uniform\n  vAmbientColor = vec3(0.0);\n  for (int i = 0; i < 5; i++) {\n    if (i < uAmbientLightCount) {\n      vAmbientColor += uAmbientColor[i];\n    }\n  }\n  \n  vColor = (uUseVertexColor ? aVertexColor : uMaterialColor);\n}\n",
              phongFrag: lightingShader + "// include lighting.glsl\nprecision highp float;\nprecision highp int;\n\nuniform vec4 uSpecularMatColor;\nuniform vec4 uAmbientMatColor;\nuniform vec4 uEmissiveMatColor;\n\nuniform vec4 uTint;\nuniform sampler2D uSampler;\nuniform bool isTexture;\n\nvarying vec3 vNormal;\nvarying vec2 vTexCoord;\nvarying vec3 vViewPosition;\nvarying vec3 vAmbientColor;\nvarying vec4 vColor;\n\nvoid main(void) {\n\n  vec3 diffuse;\n  vec3 specular;\n  totalLight(vViewPosition, normalize(vNormal), diffuse, specular);\n\n  // Calculating final color as result of all lights (plus emissive term).\n\n  vec4 baseColor = isTexture ? texture2D(uSampler, vTexCoord) * (uTint / vec4(255, 255, 255, 255)) : vColor;\n  gl_FragColor = vec4(diffuse * baseColor.rgb + \n                    vAmbientColor * uAmbientMatColor.rgb + \n                    specular * uSpecularMatColor.rgb + \n                    uEmissiveMatColor.rgb, 1.) * baseColor.a;\n}\n",
              fontVert: "precision mediump float;\n\nattribute vec3 aPosition;\nattribute vec2 aTexCoord;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nuniform vec4 uGlyphRect;\nuniform float uGlyphOffset;\n\nvarying vec2 vTexCoord;\nvarying float w;\n\nvoid main() {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n\n  // scale by the size of the glyph's rectangle\n  positionVec4.xy *= uGlyphRect.zw - uGlyphRect.xy;\n\n  // Expand glyph bounding boxes by 1px on each side to give a bit of room\n  // for antialiasing\n  vec2 pixelScale = vec2(\n    1. / uModelViewMatrix[0][0],\n    1. / uModelViewMatrix[1][1]\n  );\n  vec2 offset = pixelScale * normalize(aTexCoord - vec2(0.5, 0.5)) * vec2(1., -1.);\n  vec2 textureOffset = offset * (1. / vec2(\n    uGlyphRect.z - uGlyphRect.x,\n    uGlyphRect.w - uGlyphRect.y\n  ));\n\n  // move to the corner of the glyph\n  positionVec4.xy += uGlyphRect.xy;\n\n  // move to the letter's line offset\n  positionVec4.x += uGlyphOffset;\n\n  positionVec4.xy += offset;\n  \n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vTexCoord = aTexCoord + textureOffset;\n  w = gl_Position.w;\n}\n",
              fontFrag: "#extension GL_OES_standard_derivatives : enable\nprecision mediump float;\n\n#if 0\n  // simulate integer math using floats\n	#define int float\n	#define ivec2 vec2\n	#define INT(x) float(x)\n\n	int ifloor(float v) { return floor(v); }\n	ivec2 ifloor(vec2 v) { return floor(v); }\n\n#else\n  // use native integer math\n	precision highp int;\n	#define INT(x) x\n\n	int ifloor(float v) { return int(v); }\n	int ifloor(int v) { return v; }\n	ivec2 ifloor(vec2 v) { return ivec2(v); }\n\n#endif\n\nuniform sampler2D uSamplerStrokes;\nuniform sampler2D uSamplerRowStrokes;\nuniform sampler2D uSamplerRows;\nuniform sampler2D uSamplerColStrokes;\nuniform sampler2D uSamplerCols;\n\nuniform ivec2 uStrokeImageSize;\nuniform ivec2 uCellsImageSize;\nuniform ivec2 uGridImageSize;\n\nuniform ivec2 uGridOffset;\nuniform ivec2 uGridSize;\nuniform vec4 uMaterialColor;\n\nvarying vec2 vTexCoord;\n\n// some helper functions\nint round(float v) { return ifloor(v + 0.5); }\nivec2 round(vec2 v) { return ifloor(v + 0.5); }\nfloat saturate(float v) { return clamp(v, 0.0, 1.0); }\nvec2 saturate(vec2 v) { return clamp(v, 0.0, 1.0); }\n\nint mul(float v1, int v2) {\n  return ifloor(v1 * float(v2));\n}\n\nivec2 mul(vec2 v1, ivec2 v2) {\n  return ifloor(v1 * vec2(v2) + 0.5);\n}\n\n// unpack a 16-bit integer from a float vec2\nint getInt16(vec2 v) {\n  ivec2 iv = round(v * 255.0);\n  return iv.x * INT(128) + iv.y;\n}\n\nvec2 pixelScale;\nvec2 coverage = vec2(0.0);\nvec2 weight = vec2(0.5);\nconst float minDistance = 1.0/8192.0;\nconst float hardness = 1.05; // amount of antialias\n\n// the maximum number of curves in a glyph\nconst int N = INT(250);\n\n// retrieves an indexed pixel from a sampler\nvec4 getTexel(sampler2D sampler, int pos, ivec2 size) {\n  int width = size.x;\n  int y = ifloor(pos / width);\n  int x = pos - y * width;  // pos % width\n\n  return texture2D(sampler, (vec2(x, y) + 0.5) / vec2(size));\n}\n\nvoid calulateCrossings(vec2 p0, vec2 p1, vec2 p2, out vec2 C1, out vec2 C2) {\n\n  // get the coefficients of the quadratic in t\n  vec2 a = p0 - p1 * 2.0 + p2;\n  vec2 b = p0 - p1;\n  vec2 c = p0 - vTexCoord;\n\n  // found out which values of 't' it crosses the axes\n  vec2 surd = sqrt(max(vec2(0.0), b * b - a * c));\n  vec2 t1 = ((b - surd) / a).yx;\n  vec2 t2 = ((b + surd) / a).yx;\n\n  // approximate straight lines to avoid rounding errors\n  if (abs(a.y) < 0.001)\n    t1.x = t2.x = c.y / (2.0 * b.y);\n\n  if (abs(a.x) < 0.001)\n    t1.y = t2.y = c.x / (2.0 * b.x);\n\n  // plug into quadratic formula to find the corrdinates of the crossings\n  C1 = ((a * t1 - b * 2.0) * t1 + c) * pixelScale;\n  C2 = ((a * t2 - b * 2.0) * t2 + c) * pixelScale;\n}\n\nvoid coverageX(vec2 p0, vec2 p1, vec2 p2) {\n\n  vec2 C1, C2;\n  calulateCrossings(p0, p1, p2, C1, C2);\n\n  // determine on which side of the x-axis the points lie\n  bool y0 = p0.y > vTexCoord.y;\n  bool y1 = p1.y > vTexCoord.y;\n  bool y2 = p2.y > vTexCoord.y;\n\n  // could web be under the curve (after t1)?\n  if (y1 ? !y2 : y0) {\n    // add the coverage for t1\n    coverage.x += saturate(C1.x + 0.5);\n    // calculate the anti-aliasing for t1\n    weight.x = min(weight.x, abs(C1.x));\n  }\n\n  // are we outside the curve (after t2)?\n  if (y1 ? !y0 : y2) {\n    // subtract the coverage for t2\n    coverage.x -= saturate(C2.x + 0.5);\n    // calculate the anti-aliasing for t2\n    weight.x = min(weight.x, abs(C2.x));\n  }\n}\n\n// this is essentially the same as coverageX, but with the axes swapped\nvoid coverageY(vec2 p0, vec2 p1, vec2 p2) {\n\n  vec2 C1, C2;\n  calulateCrossings(p0, p1, p2, C1, C2);\n\n  bool x0 = p0.x > vTexCoord.x;\n  bool x1 = p1.x > vTexCoord.x;\n  bool x2 = p2.x > vTexCoord.x;\n\n  if (x1 ? !x2 : x0) {\n    coverage.y -= saturate(C1.y + 0.5);\n    weight.y = min(weight.y, abs(C1.y));\n  }\n\n  if (x1 ? !x0 : x2) {\n    coverage.y += saturate(C2.y + 0.5);\n    weight.y = min(weight.y, abs(C2.y));\n  }\n}\n\nvoid main() {\n\n  // calculate the pixel scale based on screen-coordinates\n  pixelScale = hardness / fwidth(vTexCoord);\n\n  // which grid cell is this pixel in?\n  ivec2 gridCoord = ifloor(vTexCoord * vec2(uGridSize));\n\n  // intersect curves in this row\n  {\n    // the index into the row info bitmap\n    int rowIndex = gridCoord.y + uGridOffset.y;\n    // fetch the info texel\n    vec4 rowInfo = getTexel(uSamplerRows, rowIndex, uGridImageSize);\n    // unpack the rowInfo\n    int rowStrokeIndex = getInt16(rowInfo.xy);\n    int rowStrokeCount = getInt16(rowInfo.zw);\n\n    for (int iRowStroke = INT(0); iRowStroke < N; iRowStroke++) {\n      if (iRowStroke >= rowStrokeCount)\n        break;\n\n      // each stroke is made up of 3 points: the start and control point\n      // and the start of the next curve.\n      // fetch the indices of this pair of strokes:\n      vec4 strokeIndices = getTexel(uSamplerRowStrokes, rowStrokeIndex++, uCellsImageSize);\n\n      // unpack the stroke index\n      int strokePos = getInt16(strokeIndices.xy);\n\n      // fetch the two strokes\n      vec4 stroke0 = getTexel(uSamplerStrokes, strokePos + INT(0), uStrokeImageSize);\n      vec4 stroke1 = getTexel(uSamplerStrokes, strokePos + INT(1), uStrokeImageSize);\n\n      // calculate the coverage\n      coverageX(stroke0.xy, stroke0.zw, stroke1.xy);\n    }\n  }\n\n  // intersect curves in this column\n  {\n    int colIndex = gridCoord.x + uGridOffset.x;\n    vec4 colInfo = getTexel(uSamplerCols, colIndex, uGridImageSize);\n    int colStrokeIndex = getInt16(colInfo.xy);\n    int colStrokeCount = getInt16(colInfo.zw);\n    \n    for (int iColStroke = INT(0); iColStroke < N; iColStroke++) {\n      if (iColStroke >= colStrokeCount)\n        break;\n\n      vec4 strokeIndices = getTexel(uSamplerColStrokes, colStrokeIndex++, uCellsImageSize);\n\n      int strokePos = getInt16(strokeIndices.xy);\n      vec4 stroke0 = getTexel(uSamplerStrokes, strokePos + INT(0), uStrokeImageSize);\n      vec4 stroke1 = getTexel(uSamplerStrokes, strokePos + INT(1), uStrokeImageSize);\n      coverageY(stroke0.xy, stroke0.zw, stroke1.xy);\n    }\n  }\n\n  weight = saturate(1.0 - weight * 2.0);\n  float distance = max(weight.x + weight.y, minDistance); // manhattan approx.\n  float antialias = abs(dot(coverage, weight) / distance);\n  float cover = min(abs(coverage.x), abs(coverage.y));\n  gl_FragColor = vec4(uMaterialColor.rgb, 1.) * uMaterialColor.a;\n  gl_FragColor *= saturate(max(antialias, cover));\n}\n",
              lineVert: lineDefs + `/*
  Part of the Processing project - http://processing.org
  Copyright (c) 2012-15 The Processing Foundation
  Copyright (c) 2004-12 Ben Fry and Casey Reas
  Copyright (c) 2001-04 Massachusetts Institute of Technology
  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation, version 2.1.
  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.
  You should have received a copy of the GNU Lesser General
  Public License along with this library; if not, write to the
  Free Software Foundation, Inc., 59 Temple Place, Suite 330,
  Boston, MA  02111-1307  USA
*/

#define PROCESSING_LINE_SHADER

precision mediump float;
precision mediump int;

uniform mat4 uModelViewMatrix;
uniform mat4 uProjectionMatrix;
uniform float uStrokeWeight;

uniform bool uUseLineColor;
uniform vec4 uMaterialColor;

uniform vec4 uViewport;
uniform int uPerspective;
uniform int uStrokeJoin;

attribute vec4 aPosition;
attribute vec3 aTangentIn;
attribute vec3 aTangentOut;
attribute float aSide;
attribute vec4 aVertexColor;

varying vec4 vColor;
varying vec2 vTangent;
varying vec2 vCenter;
varying vec2 vPosition;
varying float vMaxDist;
varying float vCap;
varying float vJoin;

vec2 lineIntersection(vec2 aPoint, vec2 aDir, vec2 bPoint, vec2 bDir) {
  // Rotate and translate so a starts at the origin and goes out to the right
  bPoint -= aPoint;
  vec2 rotatedBFrom = vec2(
    bPoint.x*aDir.x + bPoint.y*aDir.y,
    bPoint.y*aDir.x - bPoint.x*aDir.y
  );
  vec2 bTo = bPoint + bDir;
  vec2 rotatedBTo = vec2(
    bTo.x*aDir.x + bTo.y*aDir.y,
    bTo.y*aDir.x - bTo.x*aDir.y
  );
  float intersectionDistance =
    rotatedBTo.x + (rotatedBFrom.x - rotatedBTo.x) * rotatedBTo.y /
    (rotatedBTo.y - rotatedBFrom.y);
  return aPoint + aDir * intersectionDistance;
}

void main() {
  // using a scale <1 moves the lines towards the camera
  // in order to prevent popping effects due to half of
  // the line disappearing behind the geometry faces.
  vec3 scale = vec3(0.9995);

  // Caps have one of either the in or out tangent set to 0
  vCap = (aTangentIn == vec3(0.)) != (aTangentOut == (vec3(0.)))
    ? 1. : 0.;

  // Joins have two unique, defined tangents
  vJoin = (
    aTangentIn != vec3(0.) &&
    aTangentOut != vec3(0.) &&
    aTangentIn != aTangentOut
  ) ? 1. : 0.;

  vec4 posp = uModelViewMatrix * aPosition;
  vec4 posqIn = uModelViewMatrix * (aPosition + vec4(aTangentIn, 0));
  vec4 posqOut = uModelViewMatrix * (aPosition + vec4(aTangentOut, 0));

  // Moving vertices slightly toward the camera
  // to avoid depth-fighting with the fill triangles.
  // Discussed here:
  // http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&Number=252848  
  posp.xyz = posp.xyz * scale;
  posqIn.xyz = posqIn.xyz * scale;
  posqOut.xyz = posqOut.xyz * scale;

  vec4 p = uProjectionMatrix * posp;
  vec4 qIn = uProjectionMatrix * posqIn;
  vec4 qOut = uProjectionMatrix * posqOut;
  vCenter = p.xy;

  // formula to convert from clip space (range -1..1) to screen space (range 0..[width or height])
  // screen_p = (p.xy/p.w + <1,1>) * 0.5 * uViewport.zw

  // prevent division by W by transforming the tangent formula (div by 0 causes
  // the line to disappear, see https://github.com/processing/processing/issues/5183)
  // t = screen_q - screen_p
  //
  // tangent is normalized and we don't care which aDirection it points to (+-)
  // t = +- normalize( screen_q - screen_p )
  // t = +- normalize( (q.xy/q.w+<1,1>)*0.5*uViewport.zw - (p.xy/p.w+<1,1>)*0.5*uViewport.zw )
  //
  // extract common factor, <1,1> - <1,1> cancels out
  // t = +- normalize( (q.xy/q.w - p.xy/p.w) * 0.5 * uViewport.zw )
  //
  // convert to common divisor
  // t = +- normalize( ((q.xy*p.w - p.xy*q.w) / (p.w*q.w)) * 0.5 * uViewport.zw )
  //
  // remove the common scalar divisor/factor, not needed due to normalize and +-
  // (keep uViewport - can't remove because it has different components for x and y
  //  and corrects for aspect ratio, see https://github.com/processing/processing/issues/5181)
  // t = +- normalize( (q.xy*p.w - p.xy*q.w) * uViewport.zw )

  vec2 tangentIn = normalize((qIn.xy*p.w - p.xy*qIn.w) * uViewport.zw);
  vec2 tangentOut = normalize((qOut.xy*p.w - p.xy*qOut.w) * uViewport.zw);

  vec2 curPerspScale;
  if(uPerspective == 1) {
    // Perspective ---
    // convert from world to clip by multiplying with projection scaling factor
    // to get the right thickness (see https://github.com/processing/processing/issues/5182)
    // invert Y, projections in Processing invert Y
    curPerspScale = (uProjectionMatrix * vec4(1, -1, 0, 0)).xy;
  } else {
    // No Perspective ---
    // multiply by W (to cancel out division by W later in the pipeline) and
    // convert from screen to clip (derived from clip to screen above)
    curPerspScale = p.w / (0.5 * uViewport.zw);
  }

  vec2 offset;
  if (vJoin == 1.) {
    vTangent = normalize(tangentIn + tangentOut);
    vec2 normalIn = vec2(-tangentIn.y, tangentIn.x);
    vec2 normalOut = vec2(-tangentOut.y, tangentOut.x);
    float side = sign(aSide);
    float sideEnum = abs(aSide);

    // We generate vertices for joins on either side of the centerline, but
    // the "elbow" side is the only one needing a join. By not setting the
    // offset for the other side, all its vertices will end up in the same
    // spot and not render, effectively discarding it.
    if (sign(dot(tangentOut, vec2(-tangentIn.y, tangentIn.x))) != side) {
      // Side enums:
      //   1: the side going into the join
      //   2: the middle of the join
      //   3: the side going out of the join
      if (sideEnum == 2.) {
        // Calculate the position + tangent on either side of the join, and
        // find where the lines intersect to find the elbow of the join
        vec2 c = (posp.xy/posp.w + vec2(1.,1.)) * 0.5 * uViewport.zw;
        vec2 intersection = lineIntersection(
          c + (side * normalIn * uStrokeWeight / 2.) * curPerspScale,
          tangentIn,
          c + (side * normalOut * uStrokeWeight / 2.) * curPerspScale,
          tangentOut
        );
        offset = (intersection - c);

        // When lines are thick and the angle of the join approaches 180, the
        // elbow might be really far from the center. We'll apply a limit to
        // the magnitude to avoid lines going across the whole screen when this
        // happens.
        float mag = length(offset);
        float maxMag = 3. * uStrokeWeight;
        if (mag > maxMag) {
          offset *= maxMag / mag;
        }
      } else if (sideEnum == 1.) {
        offset = side * normalIn * curPerspScale * uStrokeWeight / 2.;
      } else if (sideEnum == 3.) {
        offset = side * normalOut * curPerspScale * uStrokeWeight / 2.;
      }
    }
    if (uStrokeJoin == STROKE_JOIN_BEVEL) {
      vec2 avgNormal = vec2(-vTangent.y, vTangent.x);
      vMaxDist = abs(dot(avgNormal, normalIn * uStrokeWeight / 2.));
    } else {
      vMaxDist = uStrokeWeight / 2.;
    }
  } else {
    vec2 tangent = aTangentIn == vec3(0.) ? tangentOut : tangentIn;
    vTangent = tangent;
    vec2 normal = vec2(-tangent.y, tangent.x);

    float normalOffset = sign(aSide);
    // Caps will have side values of -2 or 2 on the edge of the cap that
    // extends out from the line
    float tangentOffset = abs(aSide) - 1.;
    offset = (normal * normalOffset + tangent * tangentOffset) *
      uStrokeWeight * 0.5 * curPerspScale;
    vMaxDist = uStrokeWeight / 2.;
  }
  vPosition = vCenter + offset / curPerspScale;

  gl_Position.xy = p.xy + offset.xy;
  gl_Position.zw = p.zw;
  
  vColor = (uUseLineColor ? aVertexColor : uMaterialColor);
}
`,
              lineFrag: lineDefs + "precision mediump float;\nprecision mediump int;\n\nuniform vec4 uMaterialColor;\nuniform int uStrokeCap;\nuniform int uStrokeJoin;\nuniform float uStrokeWeight;\n\nvarying vec4 vColor;\nvarying vec2 vTangent;\nvarying vec2 vCenter;\nvarying vec2 vPosition;\nvarying float vMaxDist;\nvarying float vCap;\nvarying float vJoin;\n\nfloat distSquared(vec2 a, vec2 b) {\n  vec2 aToB = b - a;\n  return dot(aToB, aToB);\n}\n\nvoid main() {\n  if (vCap > 0.) {\n    if (\n      uStrokeCap == STROKE_CAP_ROUND &&\n      distSquared(vPosition, vCenter) > uStrokeWeight * uStrokeWeight * 0.25\n    ) {\n      discard;\n    } else if (\n      uStrokeCap == STROKE_CAP_SQUARE &&\n      dot(vPosition - vCenter, vTangent) > 0.\n    ) {\n      discard;\n    }\n    // Use full area for PROJECT\n  } else if (vJoin > 0.) {\n    if (\n      uStrokeJoin == STROKE_JOIN_ROUND &&\n      distSquared(vPosition, vCenter) > uStrokeWeight * uStrokeWeight * 0.25\n    ) {\n      discard;\n    } else if (uStrokeJoin == STROKE_JOIN_BEVEL) {\n      vec2 normal = vec2(-vTangent.y, vTangent.x);\n      if (abs(dot(vPosition - vCenter, normal)) > vMaxDist) {\n        discard;\n      }\n    }\n    // Use full area for MITER\n  }\n  gl_FragColor = vec4(vColor.rgb, 1.) * vColor.a;\n}\n",
              pointVert: "attribute vec3 aPosition;\nuniform float uPointSize;\nvarying float vStrokeWeight;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nvoid main() {\n	vec4 positionVec4 =  vec4(aPosition, 1.0);\n	gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n	gl_PointSize = uPointSize;\n	vStrokeWeight = uPointSize;\n}",
              pointFrag: "precision mediump float;\nprecision mediump int;\nuniform vec4 uMaterialColor;\nvarying float vStrokeWeight;\n\nvoid main(){\n  float mask = 0.0;\n\n  // make a circular mask using the gl_PointCoord (goes from 0 - 1 on a point)\n  // might be able to get a nicer edge on big strokeweights with smoothstep but slightly less performant\n\n  mask = step(0.98, length(gl_PointCoord * 2.0 - 1.0));\n\n  // if strokeWeight is 1 or less lets just draw a square\n  // this prevents weird artifacting from carving circles when our points are really small\n  // if strokeWeight is larger than 1, we just use it as is\n\n  mask = mix(0.0, mask, clamp(floor(vStrokeWeight - 0.5),0.0,1.0));\n\n  // throw away the borders of the mask\n  // otherwise we get weird alpha blending issues\n\n  if(mask > 0.98){\n    discard;\n  }\n\n  gl_FragColor = vec4(uMaterialColor.rgb, 1.) * uMaterialColor.a;\n}\n"
            };
            _main2.default.RendererGL = function(elt, pInst, isMainCanvas, attr) {
              _main2.default.Renderer.call(this, elt, pInst, isMainCanvas);
              this._setAttributeDefaults(pInst);
              this._initContext();
              this.isP3D = true;
              this.GL = this.drawingContext;
              this._pInst._setProperty("drawingContext", this.drawingContext);
              this._isErasing = false;
              this._enableLighting = false;
              this.ambientLightColors = [];
              this.specularColors = [
                1,
                1,
                1
              ];
              this.directionalLightDirections = [];
              this.directionalLightDiffuseColors = [];
              this.directionalLightSpecularColors = [];
              this.pointLightPositions = [];
              this.pointLightDiffuseColors = [];
              this.pointLightSpecularColors = [];
              this.spotLightPositions = [];
              this.spotLightDirections = [];
              this.spotLightDiffuseColors = [];
              this.spotLightSpecularColors = [];
              this.spotLightAngle = [];
              this.spotLightConc = [];
              this.drawMode = constants2.FILL;
              this.curFillColor = this._cachedFillStyle = [
                1,
                1,
                1,
                1
              ];
              this.curAmbientColor = this._cachedFillStyle = [
                1,
                1,
                1,
                1
              ];
              this.curSpecularColor = this._cachedFillStyle = [
                0,
                0,
                0,
                0
              ];
              this.curEmissiveColor = this._cachedFillStyle = [
                0,
                0,
                0,
                0
              ];
              this.curStrokeColor = this._cachedStrokeStyle = [
                0,
                0,
                0,
                1
              ];
              this.curBlendMode = constants2.BLEND;
              this._cachedBlendMode = void 0;
              this.blendExt = this.GL.getExtension("EXT_blend_minmax");
              this._isBlending = false;
              this._useSpecularMaterial = false;
              this._useEmissiveMaterial = false;
              this._useNormalMaterial = false;
              this._useShininess = 1;
              this._useLineColor = false;
              this._useVertexColor = false;
              this.registerEnabled = [];
              this._tint = [
                255,
                255,
                255,
                255
              ];
              this.constantAttenuation = 1;
              this.linearAttenuation = 0;
              this.quadraticAttenuation = 0;
              this.uMVMatrix = new _main2.default.Matrix();
              this.uPMatrix = new _main2.default.Matrix();
              this.uNMatrix = new _main2.default.Matrix("mat3");
              this._currentNormal = new _main2.default.Vector(0, 0, 1);
              this._curCamera = new _main2.default.Camera(this);
              this._curCamera._computeCameraDefaultSettings();
              this._curCamera._setDefaultCamera();
              this._defaultLightShader = void 0;
              this._defaultImmediateModeShader = void 0;
              this._defaultNormalShader = void 0;
              this._defaultColorShader = void 0;
              this._defaultPointShader = void 0;
              this.userFillShader = void 0;
              this.userStrokeShader = void 0;
              this.userPointShader = void 0;
              this.retainedMode = {
                geometry: {},
                buffers: {
                  stroke: [
                    new _main2.default.RenderBuffer(4, "lineVertexColors", "lineColorBuffer", "aVertexColor", this, this._flatten),
                    new _main2.default.RenderBuffer(3, "lineVertices", "lineVerticesBuffer", "aPosition", this, this._flatten),
                    new _main2.default.RenderBuffer(3, "lineTangentsIn", "lineTangentsInBuffer", "aTangentIn", this, this._flatten),
                    new _main2.default.RenderBuffer(3, "lineTangentsOut", "lineTangentsOutBuffer", "aTangentOut", this, this._flatten),
                    new _main2.default.RenderBuffer(1, "lineSides", "lineSidesBuffer", "aSide", this)
                  ],
                  fill: [
                    new _main2.default.RenderBuffer(3, "vertices", "vertexBuffer", "aPosition", this, this._vToNArray),
                    new _main2.default.RenderBuffer(3, "vertexNormals", "normalBuffer", "aNormal", this, this._vToNArray),
                    new _main2.default.RenderBuffer(4, "vertexColors", "colorBuffer", "aVertexColor", this),
                    new _main2.default.RenderBuffer(3, "vertexAmbients", "ambientBuffer", "aAmbientColor", this),
                    //new BufferDef(3, 'vertexSpeculars', 'specularBuffer', 'aSpecularColor'),
                    new _main2.default.RenderBuffer(2, "uvs", "uvBuffer", "aTexCoord", this, this._flatten)
                  ],
                  text: [
                    new _main2.default.RenderBuffer(3, "vertices", "vertexBuffer", "aPosition", this, this._vToNArray),
                    new _main2.default.RenderBuffer(2, "uvs", "uvBuffer", "aTexCoord", this, this._flatten)
                  ]
                }
              };
              this.immediateMode = {
                geometry: new _main2.default.Geometry(),
                shapeMode: constants2.TRIANGLE_FAN,
                _bezierVertex: [],
                _quadraticVertex: [],
                _curveVertex: [],
                buffers: {
                  fill: [
                    new _main2.default.RenderBuffer(3, "vertices", "vertexBuffer", "aPosition", this, this._vToNArray),
                    new _main2.default.RenderBuffer(3, "vertexNormals", "normalBuffer", "aNormal", this, this._vToNArray),
                    new _main2.default.RenderBuffer(4, "vertexColors", "colorBuffer", "aVertexColor", this),
                    new _main2.default.RenderBuffer(3, "vertexAmbients", "ambientBuffer", "aAmbientColor", this),
                    new _main2.default.RenderBuffer(2, "uvs", "uvBuffer", "aTexCoord", this, this._flatten)
                  ],
                  stroke: [
                    new _main2.default.RenderBuffer(4, "lineVertexColors", "lineColorBuffer", "aVertexColor", this, this._flatten),
                    new _main2.default.RenderBuffer(3, "lineVertices", "lineVerticesBuffer", "aPosition", this, this._flatten),
                    new _main2.default.RenderBuffer(3, "lineTangentsIn", "lineTangentsInBuffer", "aTangentIn", this, this._flatten),
                    new _main2.default.RenderBuffer(3, "lineTangentsOut", "lineTangentsOutBuffer", "aTangentOut", this, this._flatten),
                    new _main2.default.RenderBuffer(1, "lineSides", "lineSidesBuffer", "aSide", this)
                  ],
                  point: this.GL.createBuffer()
                }
              };
              this.pointSize = 5;
              this.curStrokeWeight = 1;
              this.curStrokeCap = constants2.ROUND;
              this.curStrokeJoin = constants2.ROUND;
              this.textures = [];
              this.textureMode = constants2.IMAGE;
              this.textureWrapX = constants2.CLAMP;
              this.textureWrapY = constants2.CLAMP;
              this._tex = null;
              this._curveTightness = 6;
              this._lookUpTableBezier = [];
              this._lookUpTableQuadratic = [];
              this._lutBezierDetail = 0;
              this._lutQuadraticDetail = 0;
              this.isProcessingVertices = false;
              this._tessy = this._initTessy();
              this.fontInfos = {};
              this._curShader = void 0;
              return this;
            };
            _main2.default.RendererGL.prototype = Object.create(_main2.default.Renderer.prototype);
            _main2.default.RendererGL.prototype._setAttributeDefaults = function(pInst) {
              var applyAA = navigator.userAgent.toLowerCase().includes("safari");
              var defaults = {
                alpha: true,
                depth: true,
                stencil: true,
                antialias: applyAA,
                premultipliedAlpha: true,
                preserveDrawingBuffer: true,
                perPixelLighting: true
              };
              if (pInst._glAttributes === null) {
                pInst._glAttributes = defaults;
              } else {
                pInst._glAttributes = Object.assign(defaults, pInst._glAttributes);
              }
              return;
            };
            _main2.default.RendererGL.prototype._initContext = function() {
              this.drawingContext = this.canvas.getContext("webgl", this._pInst._glAttributes) || this.canvas.getContext("experimental-webgl", this._pInst._glAttributes);
              if (this.drawingContext === null) {
                throw new Error("Error creating webgl context");
              } else {
                var gl = this.drawingContext;
                gl.enable(gl.DEPTH_TEST);
                gl.depthFunc(gl.LEQUAL);
                gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
                this._viewport = this.drawingContext.getParameter(this.drawingContext.VIEWPORT);
              }
            };
            _main2.default.RendererGL.prototype._resetContext = function(options, callback) {
              var w = this.width;
              var h = this.height;
              var defaultId = this.canvas.id;
              var isPGraphics = this._pInst instanceof _main2.default.Graphics;
              if (isPGraphics) {
                var pg = this._pInst;
                pg.canvas.parentNode.removeChild(pg.canvas);
                pg.canvas = document.createElement("canvas");
                var node = pg._pInst._userNode || document.body;
                node.appendChild(pg.canvas);
                _main2.default.Element.call(pg, pg.canvas, pg._pInst);
                pg.width = w;
                pg.height = h;
              } else {
                var c = this.canvas;
                if (c) {
                  c.parentNode.removeChild(c);
                }
                c = document.createElement("canvas");
                c.id = defaultId;
                if (this._pInst._userNode) {
                  this._pInst._userNode.appendChild(c);
                } else {
                  document.body.appendChild(c);
                }
                this._pInst.canvas = c;
                this.canvas = c;
              }
              var renderer = new _main2.default.RendererGL(this._pInst.canvas, this._pInst, !isPGraphics);
              this._pInst._setProperty("_renderer", renderer);
              renderer.resize(w, h);
              renderer._applyDefaults();
              if (!isPGraphics) {
                this._pInst._elements.push(renderer);
              }
              if (typeof callback === "function") {
                setTimeout(function() {
                  callback.apply(window._renderer, options);
                }, 0);
              }
            };
            _main2.default.prototype.setAttributes = function(key2, value) {
              if (typeof this._glAttributes === "undefined") {
                console.log("You are trying to use setAttributes on a p5.Graphics object that does not use a WEBGL renderer.");
                return;
              }
              var unchanged = true;
              if (typeof value !== "undefined") {
                if (this._glAttributes === null) {
                  this._glAttributes = {};
                }
                if (this._glAttributes[key2] !== value) {
                  this._glAttributes[key2] = value;
                  unchanged = false;
                }
              } else if (key2 instanceof Object) {
                if (this._glAttributes !== key2) {
                  this._glAttributes = key2;
                  unchanged = false;
                }
              }
              if (!this._renderer.isP3D || unchanged) {
                return;
              }
              if (!this._setupDone) {
                for (var x in this._renderer.retainedMode.geometry) {
                  if (this._renderer.retainedMode.geometry.hasOwnProperty(x)) {
                    console.error("Sorry, Could not set the attributes, you need to call setAttributes() before calling the other drawing methods in setup()");
                    return;
                  }
                }
              }
              this.push();
              this._renderer._resetContext();
              this.pop();
              if (this._renderer._curCamera) {
                this._renderer._curCamera._renderer = this._renderer;
              }
            };
            _main2.default.RendererGL.prototype._update = function() {
              this.uMVMatrix.set(this._curCamera.cameraMatrix.mat4[0], this._curCamera.cameraMatrix.mat4[1], this._curCamera.cameraMatrix.mat4[2], this._curCamera.cameraMatrix.mat4[3], this._curCamera.cameraMatrix.mat4[4], this._curCamera.cameraMatrix.mat4[5], this._curCamera.cameraMatrix.mat4[6], this._curCamera.cameraMatrix.mat4[7], this._curCamera.cameraMatrix.mat4[8], this._curCamera.cameraMatrix.mat4[9], this._curCamera.cameraMatrix.mat4[10], this._curCamera.cameraMatrix.mat4[11], this._curCamera.cameraMatrix.mat4[12], this._curCamera.cameraMatrix.mat4[13], this._curCamera.cameraMatrix.mat4[14], this._curCamera.cameraMatrix.mat4[15]);
              this.ambientLightColors.length = 0;
              this.specularColors = [
                1,
                1,
                1
              ];
              this.directionalLightDirections.length = 0;
              this.directionalLightDiffuseColors.length = 0;
              this.directionalLightSpecularColors.length = 0;
              this.pointLightPositions.length = 0;
              this.pointLightDiffuseColors.length = 0;
              this.pointLightSpecularColors.length = 0;
              this.spotLightPositions.length = 0;
              this.spotLightDirections.length = 0;
              this.spotLightDiffuseColors.length = 0;
              this.spotLightSpecularColors.length = 0;
              this.spotLightAngle.length = 0;
              this.spotLightConc.length = 0;
              this._enableLighting = false;
              this._tint = [
                255,
                255,
                255,
                255
              ];
              this.GL.clear(this.GL.DEPTH_BUFFER_BIT);
            };
            _main2.default.RendererGL.prototype.background = function() {
              var _this$_pInst;
              var _col = (_this$_pInst = this._pInst).color.apply(_this$_pInst, arguments);
              var _r = _col.levels[0] / 255;
              var _g = _col.levels[1] / 255;
              var _b = _col.levels[2] / 255;
              var _a = _col.levels[3] / 255;
              this.clear(_r, _g, _b, _a);
            };
            _main2.default.RendererGL.prototype.fill = function(v1, v2, v3, a) {
              var color = _main2.default.prototype.color.apply(this._pInst, arguments);
              this.curFillColor = color._array;
              this.drawMode = constants2.FILL;
              this._useNormalMaterial = false;
              this._tex = null;
            };
            _main2.default.RendererGL.prototype.stroke = function(r, g, b, a) {
              var color = _main2.default.prototype.color.apply(this._pInst, arguments);
              this.curStrokeColor = color._array;
            };
            _main2.default.RendererGL.prototype.strokeCap = function(cap) {
              this.curStrokeCap = cap;
            };
            _main2.default.RendererGL.prototype.strokeJoin = function(join) {
              this.curStrokeJoin = join;
            };
            _main2.default.RendererGL.prototype.filter = function(filterType) {
              console.error("filter() does not work in WEBGL mode");
            };
            _main2.default.RendererGL.prototype.blendMode = function(mode) {
              if (mode === constants2.DARKEST || mode === constants2.LIGHTEST || mode === constants2.ADD || mode === constants2.BLEND || mode === constants2.SUBTRACT || mode === constants2.SCREEN || mode === constants2.EXCLUSION || mode === constants2.REPLACE || mode === constants2.MULTIPLY || mode === constants2.REMOVE)
                this.curBlendMode = mode;
              else if (mode === constants2.BURN || mode === constants2.OVERLAY || mode === constants2.HARD_LIGHT || mode === constants2.SOFT_LIGHT || mode === constants2.DODGE) {
                console.warn("BURN, OVERLAY, HARD_LIGHT, SOFT_LIGHT, and DODGE only work for blendMode in 2D mode.");
              }
            };
            _main2.default.RendererGL.prototype.erase = function(opacityFill, opacityStroke) {
              if (!this._isErasing) {
                this._applyBlendMode(constants2.REMOVE);
                this._isErasing = true;
                this._cachedFillStyle = this.curFillColor.slice();
                this.curFillColor = [
                  1,
                  1,
                  1,
                  opacityFill / 255
                ];
                this._cachedStrokeStyle = this.curStrokeColor.slice();
                this.curStrokeColor = [
                  1,
                  1,
                  1,
                  opacityStroke / 255
                ];
              }
            };
            _main2.default.RendererGL.prototype.noErase = function() {
              if (this._isErasing) {
                this._isErasing = false;
                this.curFillColor = this._cachedFillStyle.slice();
                this.curStrokeColor = this._cachedStrokeStyle.slice();
                this.blendMode(this._cachedBlendMode);
              }
            };
            _main2.default.RendererGL.prototype.strokeWeight = function(w) {
              if (this.curStrokeWeight !== w) {
                this.pointSize = w;
                this.curStrokeWeight = w;
              }
            };
            _main2.default.RendererGL.prototype._getPixel = function(x, y) {
              var imageData, index;
              imageData = new Uint8Array(4);
              this.drawingContext.readPixels(x, y, 1, 1, this.drawingContext.RGBA, this.drawingContext.UNSIGNED_BYTE, imageData);
              index = 0;
              return [
                imageData[index + 0],
                imageData[index + 1],
                imageData[index + 2],
                imageData[index + 3]
              ];
            };
            _main2.default.RendererGL.prototype.loadPixels = function() {
              var pixelsState = this._pixelsState;
              if (this._pInst._glAttributes.preserveDrawingBuffer !== true) {
                console.log("loadPixels only works in WebGL when preserveDrawingBuffer is true.");
                return;
              }
              var pixels = pixelsState.pixels;
              var len = this.GL.drawingBufferWidth * this.GL.drawingBufferHeight * 4;
              if (!(pixels instanceof Uint8Array) || pixels.length !== len) {
                pixels = new Uint8Array(len);
                this._pixelsState._setProperty("pixels", pixels);
              }
              var pd = this._pInst._pixelDensity;
              this.GL.readPixels(0, 0, this.width * pd, this.height * pd, this.GL.RGBA, this.GL.UNSIGNED_BYTE, pixels);
            };
            _main2.default.RendererGL.prototype.geometryInHash = function(gId) {
              return this.retainedMode.geometry[gId] !== void 0;
            };
            _main2.default.RendererGL.prototype.resize = function(w, h) {
              _main2.default.Renderer.prototype.resize.call(this, w, h);
              this.GL.viewport(0, 0, this.GL.drawingBufferWidth, this.GL.drawingBufferHeight);
              this._viewport = this.GL.getParameter(this.GL.VIEWPORT);
              this._curCamera._resize();
              var pixelsState = this._pixelsState;
              if (typeof pixelsState.pixels !== "undefined") {
                pixelsState._setProperty("pixels", new Uint8Array(this.GL.drawingBufferWidth * this.GL.drawingBufferHeight * 4));
              }
            };
            _main2.default.RendererGL.prototype.clear = function() {
              var _r = (arguments.length <= 0 ? void 0 : arguments[0]) || 0;
              var _g = (arguments.length <= 1 ? void 0 : arguments[1]) || 0;
              var _b = (arguments.length <= 2 ? void 0 : arguments[2]) || 0;
              var _a = (arguments.length <= 3 ? void 0 : arguments[3]) || 0;
              this.GL.clearColor(_r * _a, _g * _a, _b * _a, _a);
              this.GL.clearDepth(1);
              this.GL.clear(this.GL.COLOR_BUFFER_BIT | this.GL.DEPTH_BUFFER_BIT);
            };
            _main2.default.RendererGL.prototype.applyMatrix = function(a, b, c, d, e2, f) {
              if (arguments.length === 16) {
                _main2.default.Matrix.prototype.apply.apply(this.uMVMatrix, arguments);
              } else {
                this.uMVMatrix.apply([
                  a,
                  b,
                  0,
                  0,
                  c,
                  d,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  e2,
                  f,
                  0,
                  1
                ]);
              }
            };
            _main2.default.RendererGL.prototype.translate = function(x, y, z) {
              if (x instanceof _main2.default.Vector) {
                z = x.z;
                y = x.y;
                x = x.x;
              }
              this.uMVMatrix.translate([
                x,
                y,
                z
              ]);
              return this;
            };
            _main2.default.RendererGL.prototype.scale = function(x, y, z) {
              this.uMVMatrix.scale(x, y, z);
              return this;
            };
            _main2.default.RendererGL.prototype.rotate = function(rad, axis) {
              if (typeof axis === "undefined") {
                return this.rotateZ(rad);
              }
              _main2.default.Matrix.prototype.rotate.apply(this.uMVMatrix, arguments);
              return this;
            };
            _main2.default.RendererGL.prototype.rotateX = function(rad) {
              this.rotate(rad, 1, 0, 0);
              return this;
            };
            _main2.default.RendererGL.prototype.rotateY = function(rad) {
              this.rotate(rad, 0, 1, 0);
              return this;
            };
            _main2.default.RendererGL.prototype.rotateZ = function(rad) {
              this.rotate(rad, 0, 0, 1);
              return this;
            };
            _main2.default.RendererGL.prototype.push = function() {
              var style = _main2.default.Renderer.prototype.push.apply(this);
              var properties = style.properties;
              properties.uMVMatrix = this.uMVMatrix.copy();
              properties.uPMatrix = this.uPMatrix.copy();
              properties._curCamera = this._curCamera;
              this._curCamera = this._curCamera.copy();
              properties.ambientLightColors = this.ambientLightColors.slice();
              properties.specularColors = this.specularColors.slice();
              properties.directionalLightDirections = this.directionalLightDirections.slice();
              properties.directionalLightDiffuseColors = this.directionalLightDiffuseColors.slice();
              properties.directionalLightSpecularColors = this.directionalLightSpecularColors.slice();
              properties.pointLightPositions = this.pointLightPositions.slice();
              properties.pointLightDiffuseColors = this.pointLightDiffuseColors.slice();
              properties.pointLightSpecularColors = this.pointLightSpecularColors.slice();
              properties.spotLightPositions = this.spotLightPositions.slice();
              properties.spotLightDirections = this.spotLightDirections.slice();
              properties.spotLightDiffuseColors = this.spotLightDiffuseColors.slice();
              properties.spotLightSpecularColors = this.spotLightSpecularColors.slice();
              properties.spotLightAngle = this.spotLightAngle.slice();
              properties.spotLightConc = this.spotLightConc.slice();
              properties.userFillShader = this.userFillShader;
              properties.userStrokeShader = this.userStrokeShader;
              properties.userPointShader = this.userPointShader;
              properties.pointSize = this.pointSize;
              properties.curStrokeWeight = this.curStrokeWeight;
              properties.curStrokeColor = this.curStrokeColor;
              properties.curFillColor = this.curFillColor;
              properties.curAmbientColor = this.curAmbientColor;
              properties.curSpecularColor = this.curSpecularColor;
              properties.curEmissiveColor = this.curEmissiveColor;
              properties._useSpecularMaterial = this._useSpecularMaterial;
              properties._useEmissiveMaterial = this._useEmissiveMaterial;
              properties._useShininess = this._useShininess;
              properties.constantAttenuation = this.constantAttenuation;
              properties.linearAttenuation = this.linearAttenuation;
              properties.quadraticAttenuation = this.quadraticAttenuation;
              properties._enableLighting = this._enableLighting;
              properties._useNormalMaterial = this._useNormalMaterial;
              properties._tex = this._tex;
              properties.drawMode = this.drawMode;
              properties._currentNormal = this._currentNormal;
              properties.curBlendMode = this.curBlendMode;
              return style;
            };
            _main2.default.RendererGL.prototype.resetMatrix = function() {
              this.uMVMatrix.set(this._curCamera.cameraMatrix.mat4[0], this._curCamera.cameraMatrix.mat4[1], this._curCamera.cameraMatrix.mat4[2], this._curCamera.cameraMatrix.mat4[3], this._curCamera.cameraMatrix.mat4[4], this._curCamera.cameraMatrix.mat4[5], this._curCamera.cameraMatrix.mat4[6], this._curCamera.cameraMatrix.mat4[7], this._curCamera.cameraMatrix.mat4[8], this._curCamera.cameraMatrix.mat4[9], this._curCamera.cameraMatrix.mat4[10], this._curCamera.cameraMatrix.mat4[11], this._curCamera.cameraMatrix.mat4[12], this._curCamera.cameraMatrix.mat4[13], this._curCamera.cameraMatrix.mat4[14], this._curCamera.cameraMatrix.mat4[15]);
              return this;
            };
            _main2.default.RendererGL.prototype._getImmediateStrokeShader = function() {
              var stroke = this.userStrokeShader;
              if (!stroke || !stroke.isStrokeShader()) {
                return this._getLineShader();
              }
              return stroke;
            };
            _main2.default.RendererGL.prototype._getRetainedStrokeShader = _main2.default.RendererGL.prototype._getImmediateStrokeShader;
            _main2.default.RendererGL.prototype._getImmediateFillShader = function() {
              var fill = this.userFillShader;
              if (this._useNormalMaterial) {
                if (!fill || !fill.isNormalShader()) {
                  return this._getNormalShader();
                }
              }
              if (this._enableLighting) {
                if (!fill || !fill.isLightShader()) {
                  return this._getLightShader();
                }
              } else if (this._tex) {
                if (!fill || !fill.isTextureShader()) {
                  return this._getLightShader();
                }
              } else if (!fill) {
                return this._getImmediateModeShader();
              }
              return fill;
            };
            _main2.default.RendererGL.prototype._getRetainedFillShader = function() {
              if (this._useNormalMaterial) {
                return this._getNormalShader();
              }
              var fill = this.userFillShader;
              if (this._enableLighting) {
                if (!fill || !fill.isLightShader()) {
                  return this._getLightShader();
                }
              } else if (this._tex) {
                if (!fill || !fill.isTextureShader()) {
                  return this._getLightShader();
                }
              } else if (!fill) {
                return this._getColorShader();
              }
              return fill;
            };
            _main2.default.RendererGL.prototype._getImmediatePointShader = function() {
              var point = this.userPointShader;
              if (!point || !point.isPointShader()) {
                return this._getPointShader();
              }
              return point;
            };
            _main2.default.RendererGL.prototype._getRetainedLineShader = _main2.default.RendererGL.prototype._getImmediateLineShader;
            _main2.default.RendererGL.prototype._getLightShader = function() {
              if (!this._defaultLightShader) {
                if (this._pInst._glAttributes.perPixelLighting) {
                  this._defaultLightShader = new _main2.default.Shader(this, defaultShaders.phongVert, defaultShaders.phongFrag);
                } else {
                  this._defaultLightShader = new _main2.default.Shader(this, defaultShaders.lightVert, defaultShaders.lightTextureFrag);
                }
              }
              return this._defaultLightShader;
            };
            _main2.default.RendererGL.prototype._getImmediateModeShader = function() {
              if (!this._defaultImmediateModeShader) {
                this._defaultImmediateModeShader = new _main2.default.Shader(this, defaultShaders.immediateVert, defaultShaders.vertexColorFrag);
              }
              return this._defaultImmediateModeShader;
            };
            _main2.default.RendererGL.prototype._getNormalShader = function() {
              if (!this._defaultNormalShader) {
                this._defaultNormalShader = new _main2.default.Shader(this, defaultShaders.normalVert, defaultShaders.normalFrag);
              }
              return this._defaultNormalShader;
            };
            _main2.default.RendererGL.prototype._getColorShader = function() {
              if (!this._defaultColorShader) {
                this._defaultColorShader = new _main2.default.Shader(this, defaultShaders.normalVert, defaultShaders.basicFrag);
              }
              return this._defaultColorShader;
            };
            _main2.default.RendererGL.prototype._getPointShader = function() {
              if (!this._defaultPointShader) {
                this._defaultPointShader = new _main2.default.Shader(this, defaultShaders.pointVert, defaultShaders.pointFrag);
              }
              return this._defaultPointShader;
            };
            _main2.default.RendererGL.prototype._getLineShader = function() {
              if (!this._defaultLineShader) {
                this._defaultLineShader = new _main2.default.Shader(this, defaultShaders.lineVert, defaultShaders.lineFrag);
              }
              return this._defaultLineShader;
            };
            _main2.default.RendererGL.prototype._getFontShader = function() {
              if (!this._defaultFontShader) {
                this.GL.getExtension("OES_standard_derivatives");
                this._defaultFontShader = new _main2.default.Shader(this, defaultShaders.fontVert, defaultShaders.fontFrag);
              }
              return this._defaultFontShader;
            };
            _main2.default.RendererGL.prototype._getEmptyTexture = function() {
              if (!this._emptyTexture) {
                var im = new _main2.default.Image(1, 1);
                im.set(0, 0, 255);
                this._emptyTexture = new _main2.default.Texture(this, im);
              }
              return this._emptyTexture;
            };
            _main2.default.RendererGL.prototype.getTexture = function(img) {
              var textures = this.textures;
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = void 0;
              try {
                for (var _iterator = textures[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var texture = _step.value;
                  if (texture.src === img)
                    return texture;
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }
              var tex = new _main2.default.Texture(this, img);
              textures.push(tex);
              return tex;
            };
            _main2.default.RendererGL.prototype._setStrokeUniforms = function(strokeShader) {
              strokeShader.bindShader();
              strokeShader.setUniform("uUseLineColor", this._useLineColor);
              strokeShader.setUniform("uMaterialColor", this.curStrokeColor);
              strokeShader.setUniform("uStrokeWeight", this.curStrokeWeight);
              strokeShader.setUniform("uStrokeCap", STROKE_CAP_ENUM[this.curStrokeCap]);
              strokeShader.setUniform("uStrokeJoin", STROKE_JOIN_ENUM[this.curStrokeJoin]);
            };
            _main2.default.RendererGL.prototype._setFillUniforms = function(fillShader) {
              fillShader.bindShader();
              fillShader.setUniform("uUseVertexColor", this._useVertexColor);
              fillShader.setUniform("uMaterialColor", this.curFillColor);
              fillShader.setUniform("isTexture", !!this._tex);
              if (this._tex) {
                fillShader.setUniform("uSampler", this._tex);
              }
              fillShader.setUniform("uTint", this._tint);
              fillShader.setUniform("uAmbientMatColor", this.curAmbientColor);
              fillShader.setUniform("uSpecularMatColor", this.curSpecularColor);
              fillShader.setUniform("uEmissiveMatColor", this.curEmissiveColor);
              fillShader.setUniform("uSpecular", this._useSpecularMaterial);
              fillShader.setUniform("uEmissive", this._useEmissiveMaterial);
              fillShader.setUniform("uShininess", this._useShininess);
              fillShader.setUniform("uUseLighting", this._enableLighting);
              var pointLightCount = this.pointLightDiffuseColors.length / 3;
              fillShader.setUniform("uPointLightCount", pointLightCount);
              fillShader.setUniform("uPointLightLocation", this.pointLightPositions);
              fillShader.setUniform("uPointLightDiffuseColors", this.pointLightDiffuseColors);
              fillShader.setUniform("uPointLightSpecularColors", this.pointLightSpecularColors);
              var directionalLightCount = this.directionalLightDiffuseColors.length / 3;
              fillShader.setUniform("uDirectionalLightCount", directionalLightCount);
              fillShader.setUniform("uLightingDirection", this.directionalLightDirections);
              fillShader.setUniform("uDirectionalDiffuseColors", this.directionalLightDiffuseColors);
              fillShader.setUniform("uDirectionalSpecularColors", this.directionalLightSpecularColors);
              var ambientLightCount = this.ambientLightColors.length / 3;
              fillShader.setUniform("uAmbientLightCount", ambientLightCount);
              fillShader.setUniform("uAmbientColor", this.ambientLightColors);
              var spotLightCount = this.spotLightDiffuseColors.length / 3;
              fillShader.setUniform("uSpotLightCount", spotLightCount);
              fillShader.setUniform("uSpotLightAngle", this.spotLightAngle);
              fillShader.setUniform("uSpotLightConc", this.spotLightConc);
              fillShader.setUniform("uSpotLightDiffuseColors", this.spotLightDiffuseColors);
              fillShader.setUniform("uSpotLightSpecularColors", this.spotLightSpecularColors);
              fillShader.setUniform("uSpotLightLocation", this.spotLightPositions);
              fillShader.setUniform("uSpotLightDirection", this.spotLightDirections);
              fillShader.setUniform("uConstantAttenuation", this.constantAttenuation);
              fillShader.setUniform("uLinearAttenuation", this.linearAttenuation);
              fillShader.setUniform("uQuadraticAttenuation", this.quadraticAttenuation);
              fillShader.bindTextures();
            };
            _main2.default.RendererGL.prototype._setPointUniforms = function(pointShader) {
              pointShader.bindShader();
              pointShader.setUniform("uMaterialColor", this.curStrokeColor);
              pointShader.setUniform("uPointSize", this.pointSize * this._pInst._pixelDensity);
            };
            _main2.default.RendererGL.prototype._bindBuffer = function(buffer, target, values, type, usage) {
              if (!target)
                target = this.GL.ARRAY_BUFFER;
              this.GL.bindBuffer(target, buffer);
              if (values !== void 0) {
                var data = new (type || Float32Array)(values);
                this.GL.bufferData(target, data, usage || this.GL.STATIC_DRAW);
              }
            };
            _main2.default.RendererGL.prototype._arraysEqual = function(a, b) {
              var aLength = a.length;
              if (aLength !== b.length)
                return false;
              for (var i2 = 0; i2 < aLength; i2++) {
                if (a[i2] !== b[i2])
                  return false;
              }
              return true;
            };
            _main2.default.RendererGL.prototype._isTypedArray = function(arr) {
              var res = false;
              res = arr instanceof Float32Array;
              res = arr instanceof Float64Array;
              res = arr instanceof Int16Array;
              res = arr instanceof Uint16Array;
              res = arr instanceof Uint32Array;
              return res;
            };
            _main2.default.RendererGL.prototype._flatten = function(arr) {
              if (arr.length === 0) {
                return [];
              } else if (arr.length > 2e4) {
                var _toString = Object.prototype.toString;
                var arrayTypeStr = "[object Array]";
                var result = [];
                var nodes = arr.slice();
                var node;
                node = nodes.pop();
                do {
                  if (_toString.call(node) === arrayTypeStr) {
                    nodes.push.apply(nodes, _toConsumableArray2(node));
                  } else {
                    result.push(node);
                  }
                } while (nodes.length && (node = nodes.pop()) !== void 0);
                result.reverse();
                return result;
              } else {
                var _ref;
                return (_ref = []).concat.apply(_ref, _toConsumableArray2(arr));
              }
            };
            _main2.default.RendererGL.prototype._vToNArray = function(arr) {
              var ret = [];
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = void 0;
              try {
                for (var _iterator2 = arr[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var item = _step2.value;
                  ret.push(item.x, item.y, item.z);
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }
              return ret;
            };
            _main2.default.prototype._assert3d = function(name) {
              if (!this._renderer.isP3D)
                throw new Error("".concat(name, "() is only supported in WEBGL mode. If you'd like to use 3D graphics and WebGL, see  https://p5js.org/examples/form-3d-primitives.html for more information."));
            };
            _main2.default.RendererGL.prototype.tessyVertexSize = 12;
            _main2.default.RendererGL.prototype._initTessy = function initTesselator() {
              function vertexCallback(data, polyVertArray) {
                for (var i2 = 0; i2 < data.length; i2++) {
                  polyVertArray[polyVertArray.length] = data[i2];
                }
              }
              function begincallback(type) {
                if (type !== _libtess.default.primitiveType.GL_TRIANGLES) {
                  console.log("expected TRIANGLES but got type: ".concat(type));
                }
              }
              function errorcallback(errno) {
                console.log("error callback");
                console.log("error number: ".concat(errno));
              }
              function combinecallback(coords, data, weight) {
                var result = new Array(_main2.default.RendererGL.prototype.tessyVertexSize).fill(0);
                for (var i2 = 0; i2 < weight.length; i2++) {
                  for (var j = 0; j < result.length; j++) {
                    if (weight[i2] === 0 || !data[i2])
                      continue;
                    result[j] += data[i2][j] * weight[i2];
                  }
                }
                return result;
              }
              function edgeCallback(flag) {
              }
              var tessy = new _libtess.default.GluTesselator();
              tessy.gluTessCallback(_libtess.default.gluEnum.GLU_TESS_VERTEX_DATA, vertexCallback);
              tessy.gluTessCallback(_libtess.default.gluEnum.GLU_TESS_BEGIN, begincallback);
              tessy.gluTessCallback(_libtess.default.gluEnum.GLU_TESS_ERROR, errorcallback);
              tessy.gluTessCallback(_libtess.default.gluEnum.GLU_TESS_COMBINE, combinecallback);
              tessy.gluTessCallback(_libtess.default.gluEnum.GLU_TESS_EDGE_FLAG, edgeCallback);
              return tessy;
            };
            _main2.default.RendererGL.prototype._triangulate = function(contours) {
              var z = contours[0] ? contours[0][2] : void 0;
              var allSameZ = true;
              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = void 0;
              try {
                for (var _iterator3 = contours[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  var _contour = _step3.value;
                  for (var _j = 0; _j < _contour.length; _j += _main2.default.RendererGL.prototype.tessyVertexSize) {
                    if (_contour[_j + 2] !== z) {
                      allSameZ = false;
                      break;
                    }
                  }
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                    _iterator3.return();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }
              if (allSameZ) {
                this._tessy.gluTessNormal(0, 0, 1);
              } else {
                this._tessy.gluTessNormal(0, 0, 0);
              }
              var triangleVerts = [];
              this._tessy.gluTessBeginPolygon(triangleVerts);
              for (var i2 = 0; i2 < contours.length; i2++) {
                this._tessy.gluTessBeginContour();
                var contour = contours[i2];
                for (var j = 0; j < contour.length; j += _main2.default.RendererGL.prototype.tessyVertexSize) {
                  var coords = contour.slice(j, j + _main2.default.RendererGL.prototype.tessyVertexSize);
                  this._tessy.gluTessVertex(coords, coords);
                }
                this._tessy.gluTessEndContour();
              }
              this._tessy.gluTessEndPolygon();
              return triangleVerts;
            };
            _main2.default.RendererGL.prototype._bezierCoefficients = function(t) {
              var t2 = t * t;
              var t3 = t2 * t;
              var mt = 1 - t;
              var mt2 = mt * mt;
              var mt3 = mt2 * mt;
              return [
                mt3,
                3 * mt2 * t,
                3 * mt * t2,
                t3
              ];
            };
            _main2.default.RendererGL.prototype._quadraticCoefficients = function(t) {
              var t2 = t * t;
              var mt = 1 - t;
              var mt2 = mt * mt;
              return [
                mt2,
                2 * mt * t,
                t2
              ];
            };
            _main2.default.RendererGL.prototype._bezierToCatmull = function(w) {
              var p1 = w[1];
              var p2 = w[1] + (w[2] - w[0]) / this._curveTightness;
              var p3 = w[2] - (w[3] - w[1]) / this._curveTightness;
              var p4 = w[2];
              var p = [
                p1,
                p2,
                p3,
                p4
              ];
              return p;
            };
            var _default2 = _main2.default.RendererGL;
            exports2.default = _default2;
          },
          {
            "../core/constants": 278,
            "../core/main": 290,
            "../core/p5.Renderer": 293,
            "./p5.Camera": 338,
            "./p5.Matrix": 340,
            "./p5.Shader": 345,
            "core-js/modules/es.array.concat": 167,
            "core-js/modules/es.array.fill": 170,
            "core-js/modules/es.array.filter": 171,
            "core-js/modules/es.array.from": 173,
            "core-js/modules/es.array.includes": 174,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.object.assign": 190,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.to-string": 200,
            "core-js/modules/es.string.includes": 203,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.typed-array.copy-within": 215,
            "core-js/modules/es.typed-array.every": 216,
            "core-js/modules/es.typed-array.fill": 217,
            "core-js/modules/es.typed-array.filter": 218,
            "core-js/modules/es.typed-array.find": 220,
            "core-js/modules/es.typed-array.find-index": 219,
            "core-js/modules/es.typed-array.float32-array": 221,
            "core-js/modules/es.typed-array.float64-array": 222,
            "core-js/modules/es.typed-array.for-each": 223,
            "core-js/modules/es.typed-array.includes": 224,
            "core-js/modules/es.typed-array.index-of": 225,
            "core-js/modules/es.typed-array.int16-array": 226,
            "core-js/modules/es.typed-array.iterator": 228,
            "core-js/modules/es.typed-array.join": 229,
            "core-js/modules/es.typed-array.last-index-of": 230,
            "core-js/modules/es.typed-array.map": 231,
            "core-js/modules/es.typed-array.reduce": 233,
            "core-js/modules/es.typed-array.reduce-right": 232,
            "core-js/modules/es.typed-array.reverse": 234,
            "core-js/modules/es.typed-array.set": 235,
            "core-js/modules/es.typed-array.slice": 236,
            "core-js/modules/es.typed-array.some": 237,
            "core-js/modules/es.typed-array.sort": 238,
            "core-js/modules/es.typed-array.subarray": 239,
            "core-js/modules/es.typed-array.to-locale-string": 240,
            "core-js/modules/es.typed-array.to-string": 241,
            "core-js/modules/es.typed-array.uint16-array": 242,
            "core-js/modules/es.typed-array.uint32-array": 243,
            "core-js/modules/es.typed-array.uint8-array": 244,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248,
            "libtess": 261,
            "path": 264
          }
        ],
        345: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.function.name");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.index-of");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.array.slice");
            _dereq_2("core-js/modules/es.function.name");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.Shader = function(renderer, vertSrc, fragSrc) {
              this._renderer = renderer;
              this._vertSrc = vertSrc;
              this._fragSrc = fragSrc;
              this._vertShader = -1;
              this._fragShader = -1;
              this._glProgram = 0;
              this._loadedAttributes = false;
              this.attributes = {};
              this._loadedUniforms = false;
              this.uniforms = {};
              this._bound = false;
              this.samplers = [];
            };
            _main2.default.Shader.prototype.init = function() {
              if (this._glProgram === 0) {
                var gl = this._renderer.GL;
                this._vertShader = gl.createShader(gl.VERTEX_SHADER);
                gl.shaderSource(this._vertShader, this._vertSrc);
                gl.compileShader(this._vertShader);
                if (!gl.getShaderParameter(this._vertShader, gl.COMPILE_STATUS)) {
                  console.error("Yikes! An error occurred compiling the vertex shader:".concat(gl.getShaderInfoLog(this._vertShader)));
                  return null;
                }
                this._fragShader = gl.createShader(gl.FRAGMENT_SHADER);
                gl.shaderSource(this._fragShader, this._fragSrc);
                gl.compileShader(this._fragShader);
                if (!gl.getShaderParameter(this._fragShader, gl.COMPILE_STATUS)) {
                  console.error("Darn! An error occurred compiling the fragment shader:".concat(gl.getShaderInfoLog(this._fragShader)));
                  return null;
                }
                this._glProgram = gl.createProgram();
                gl.attachShader(this._glProgram, this._vertShader);
                gl.attachShader(this._glProgram, this._fragShader);
                gl.linkProgram(this._glProgram);
                if (!gl.getProgramParameter(this._glProgram, gl.LINK_STATUS)) {
                  console.error("Snap! Error linking shader program: ".concat(gl.getProgramInfoLog(this._glProgram)));
                }
                this._loadAttributes();
                this._loadUniforms();
              }
              return this;
            };
            _main2.default.Shader.prototype._loadAttributes = function() {
              if (this._loadedAttributes) {
                return;
              }
              this.attributes = {};
              var gl = this._renderer.GL;
              var numAttributes = gl.getProgramParameter(this._glProgram, gl.ACTIVE_ATTRIBUTES);
              for (var i2 = 0; i2 < numAttributes; ++i2) {
                var attributeInfo = gl.getActiveAttrib(this._glProgram, i2);
                var name = attributeInfo.name;
                var location2 = gl.getAttribLocation(this._glProgram, name);
                var attribute = {};
                attribute.name = name;
                attribute.location = location2;
                attribute.index = i2;
                attribute.type = attributeInfo.type;
                attribute.size = attributeInfo.size;
                this.attributes[name] = attribute;
              }
              this._loadedAttributes = true;
            };
            _main2.default.Shader.prototype._loadUniforms = function() {
              if (this._loadedUniforms) {
                return;
              }
              var gl = this._renderer.GL;
              var numUniforms = gl.getProgramParameter(this._glProgram, gl.ACTIVE_UNIFORMS);
              var samplerIndex = 0;
              for (var i2 = 0; i2 < numUniforms; ++i2) {
                var uniformInfo = gl.getActiveUniform(this._glProgram, i2);
                var uniform = {};
                uniform.location = gl.getUniformLocation(this._glProgram, uniformInfo.name);
                uniform.size = uniformInfo.size;
                var uniformName = uniformInfo.name;
                if (uniformInfo.size > 1) {
                  uniformName = uniformName.substring(0, uniformName.indexOf("[0]"));
                }
                uniform.name = uniformName;
                uniform.type = uniformInfo.type;
                uniform._cachedData = void 0;
                if (uniform.type === gl.SAMPLER_2D) {
                  uniform.samplerIndex = samplerIndex;
                  samplerIndex++;
                  this.samplers.push(uniform);
                }
                uniform.isArray = uniformInfo.size > 1 || uniform.type === gl.FLOAT_MAT3 || uniform.type === gl.FLOAT_MAT4 || uniform.type === gl.FLOAT_VEC2 || uniform.type === gl.FLOAT_VEC3 || uniform.type === gl.FLOAT_VEC4 || uniform.type === gl.INT_VEC2 || uniform.type === gl.INT_VEC4 || uniform.type === gl.INT_VEC3;
                this.uniforms[uniformName] = uniform;
              }
              this._loadedUniforms = true;
            };
            _main2.default.Shader.prototype.compile = function() {
            };
            _main2.default.Shader.prototype.bindShader = function() {
              this.init();
              if (!this._bound) {
                this.useProgram();
                this._bound = true;
                this._setMatrixUniforms();
                this.setUniform("uViewport", this._renderer._viewport);
              }
            };
            _main2.default.Shader.prototype.unbindShader = function() {
              if (this._bound) {
                this.unbindTextures();
                this._bound = false;
              }
              return this;
            };
            _main2.default.Shader.prototype.bindTextures = function() {
              var gl = this._renderer.GL;
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = void 0;
              try {
                for (var _iterator = this.samplers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var uniform = _step.value;
                  var tex = uniform.texture;
                  if (tex === void 0) {
                    tex = this._renderer._getEmptyTexture();
                  }
                  gl.activeTexture(gl.TEXTURE0 + uniform.samplerIndex);
                  tex.bindTexture();
                  tex.update();
                  gl.uniform1i(uniform.location, uniform.samplerIndex);
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }
            };
            _main2.default.Shader.prototype.updateTextures = function() {
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = void 0;
              try {
                for (var _iterator2 = this.samplers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var uniform = _step2.value;
                  var tex = uniform.texture;
                  if (tex) {
                    tex.update();
                  }
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }
            };
            _main2.default.Shader.prototype.unbindTextures = function() {
              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = void 0;
              try {
                for (var _iterator3 = this.samplers[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  var uniform = _step3.value;
                  this.setUniform(uniform.name, this._renderer._getEmptyTexture());
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                    _iterator3.return();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }
            };
            _main2.default.Shader.prototype._setMatrixUniforms = function() {
              var viewMatrix = this._renderer._curCamera.cameraMatrix;
              var projectionMatrix = this._renderer.uPMatrix;
              var modelViewMatrix = this._renderer.uMVMatrix;
              var modelViewProjectionMatrix = modelViewMatrix.copy();
              modelViewProjectionMatrix.mult(projectionMatrix);
              if (this.isStrokeShader()) {
                if (this._renderer._curCamera.cameraType === "default") {
                  this.setUniform("uPerspective", 1);
                } else {
                  this.setUniform("uPerspective", 0);
                }
              }
              this.setUniform("uViewMatrix", viewMatrix.mat4);
              this.setUniform("uProjectionMatrix", projectionMatrix.mat4);
              this.setUniform("uModelViewMatrix", modelViewMatrix.mat4);
              this.setUniform("uModelViewProjectionMatrix", modelViewProjectionMatrix.mat4);
              if (this.uniforms.uNormalMatrix) {
                this._renderer.uNMatrix.inverseTranspose(this._renderer.uMVMatrix);
                this.setUniform("uNormalMatrix", this._renderer.uNMatrix.mat3);
              }
            };
            _main2.default.Shader.prototype.useProgram = function() {
              var gl = this._renderer.GL;
              if (this._renderer._curShader !== this) {
                gl.useProgram(this._glProgram);
                this._renderer._curShader = this;
              }
              return this;
            };
            _main2.default.Shader.prototype.setUniform = function(uniformName, data) {
              var uniform = this.uniforms[uniformName];
              if (!uniform) {
                return;
              }
              var gl = this._renderer.GL;
              if (uniform.isArray) {
                if (uniform._cachedData && this._renderer._arraysEqual(uniform._cachedData, data)) {
                  return;
                } else {
                  uniform._cachedData = data.slice(0);
                }
              } else if (uniform._cachedData && uniform._cachedData === data) {
                return;
              } else {
                if (Array.isArray(data)) {
                  uniform._cachedData = data.slice(0);
                } else {
                  uniform._cachedData = data;
                }
              }
              var location2 = uniform.location;
              this.useProgram();
              switch (uniform.type) {
                case gl.BOOL:
                  if (data === true) {
                    gl.uniform1i(location2, 1);
                  } else {
                    gl.uniform1i(location2, 0);
                  }
                  break;
                case gl.INT:
                  if (uniform.size > 1) {
                    data.length && gl.uniform1iv(location2, data);
                  } else {
                    gl.uniform1i(location2, data);
                  }
                  break;
                case gl.FLOAT:
                  if (uniform.size > 1) {
                    data.length && gl.uniform1fv(location2, data);
                  } else {
                    gl.uniform1f(location2, data);
                  }
                  break;
                case gl.FLOAT_MAT3:
                  gl.uniformMatrix3fv(location2, false, data);
                  break;
                case gl.FLOAT_MAT4:
                  gl.uniformMatrix4fv(location2, false, data);
                  break;
                case gl.FLOAT_VEC2:
                  if (uniform.size > 1) {
                    data.length && gl.uniform2fv(location2, data);
                  } else {
                    gl.uniform2f(location2, data[0], data[1]);
                  }
                  break;
                case gl.FLOAT_VEC3:
                  if (uniform.size > 1) {
                    data.length && gl.uniform3fv(location2, data);
                  } else {
                    gl.uniform3f(location2, data[0], data[1], data[2]);
                  }
                  break;
                case gl.FLOAT_VEC4:
                  if (uniform.size > 1) {
                    data.length && gl.uniform4fv(location2, data);
                  } else {
                    gl.uniform4f(location2, data[0], data[1], data[2], data[3]);
                  }
                  break;
                case gl.INT_VEC2:
                  if (uniform.size > 1) {
                    data.length && gl.uniform2iv(location2, data);
                  } else {
                    gl.uniform2i(location2, data[0], data[1]);
                  }
                  break;
                case gl.INT_VEC3:
                  if (uniform.size > 1) {
                    data.length && gl.uniform3iv(location2, data);
                  } else {
                    gl.uniform3i(location2, data[0], data[1], data[2]);
                  }
                  break;
                case gl.INT_VEC4:
                  if (uniform.size > 1) {
                    data.length && gl.uniform4iv(location2, data);
                  } else {
                    gl.uniform4i(location2, data[0], data[1], data[2], data[3]);
                  }
                  break;
                case gl.SAMPLER_2D:
                  gl.activeTexture(gl.TEXTURE0 + uniform.samplerIndex);
                  uniform.texture = data instanceof _main2.default.Texture ? data : this._renderer.getTexture(data);
                  gl.uniform1i(location2, uniform.samplerIndex);
                  if (uniform.texture.src.gifProperties) {
                    uniform.texture.src._animateGif(this._renderer._pInst);
                  }
                  break;
              }
              return this;
            };
            _main2.default.Shader.prototype.isLightShader = function() {
              return this.attributes.aNormal !== void 0 || this.uniforms.uUseLighting !== void 0 || this.uniforms.uAmbientLightCount !== void 0 || this.uniforms.uDirectionalLightCount !== void 0 || this.uniforms.uPointLightCount !== void 0 || this.uniforms.uAmbientColor !== void 0 || this.uniforms.uDirectionalDiffuseColors !== void 0 || this.uniforms.uDirectionalSpecularColors !== void 0 || this.uniforms.uPointLightLocation !== void 0 || this.uniforms.uPointLightDiffuseColors !== void 0 || this.uniforms.uPointLightSpecularColors !== void 0 || this.uniforms.uLightingDirection !== void 0 || this.uniforms.uSpecular !== void 0;
            };
            _main2.default.Shader.prototype.isNormalShader = function() {
              return this.attributes.aNormal !== void 0;
            };
            _main2.default.Shader.prototype.isTextureShader = function() {
              return this.samplers.length > 0;
            };
            _main2.default.Shader.prototype.isColorShader = function() {
              return this.attributes.aVertexColor !== void 0 || this.uniforms.uMaterialColor !== void 0;
            };
            _main2.default.Shader.prototype.isTexLightShader = function() {
              return this.isLightShader() && this.isTextureShader();
            };
            _main2.default.Shader.prototype.isStrokeShader = function() {
              return this.uniforms.uStrokeWeight !== void 0;
            };
            _main2.default.Shader.prototype.enableAttrib = function(attr, size, type, normalized, stride, offset) {
              if (attr) {
                if (typeof IS_MINIFIED === "undefined" && this.attributes[attr.name] !== attr) {
                  console.warn('The attribute "'.concat(attr.name, '"passed to enableAttrib does not belong to this shader.'));
                }
                var loc = attr.location;
                if (loc !== -1) {
                  var gl = this._renderer.GL;
                  if (!this._renderer.registerEnabled[loc]) {
                    gl.enableVertexAttribArray(loc);
                    this._renderer.registerEnabled[loc] = true;
                  }
                  this._renderer.GL.vertexAttribPointer(loc, size, type || gl.FLOAT, normalized || false, stride || 0, offset || 0);
                }
              }
              return this;
            };
            var _default2 = _main2.default.Shader;
            exports2.default = _default2;
          },
          {
            "../core/main": 290,
            "core-js/modules/es.array.index-of": 175,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.array.slice": 180,
            "core-js/modules/es.function.name": 183,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        346: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.typed-array.uint8-array");
            _dereq_2("core-js/modules/es.typed-array.copy-within");
            _dereq_2("core-js/modules/es.typed-array.every");
            _dereq_2("core-js/modules/es.typed-array.fill");
            _dereq_2("core-js/modules/es.typed-array.filter");
            _dereq_2("core-js/modules/es.typed-array.find");
            _dereq_2("core-js/modules/es.typed-array.find-index");
            _dereq_2("core-js/modules/es.typed-array.for-each");
            _dereq_2("core-js/modules/es.typed-array.includes");
            _dereq_2("core-js/modules/es.typed-array.index-of");
            _dereq_2("core-js/modules/es.typed-array.iterator");
            _dereq_2("core-js/modules/es.typed-array.join");
            _dereq_2("core-js/modules/es.typed-array.last-index-of");
            _dereq_2("core-js/modules/es.typed-array.map");
            _dereq_2("core-js/modules/es.typed-array.reduce");
            _dereq_2("core-js/modules/es.typed-array.reduce-right");
            _dereq_2("core-js/modules/es.typed-array.reverse");
            _dereq_2("core-js/modules/es.typed-array.set");
            _dereq_2("core-js/modules/es.typed-array.slice");
            _dereq_2("core-js/modules/es.typed-array.some");
            _dereq_2("core-js/modules/es.typed-array.sort");
            _dereq_2("core-js/modules/es.typed-array.subarray");
            _dereq_2("core-js/modules/es.typed-array.to-locale-string");
            _dereq_2("core-js/modules/es.typed-array.to-string");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.typed-array.uint8-array");
            _dereq_2("core-js/modules/es.typed-array.copy-within");
            _dereq_2("core-js/modules/es.typed-array.every");
            _dereq_2("core-js/modules/es.typed-array.fill");
            _dereq_2("core-js/modules/es.typed-array.filter");
            _dereq_2("core-js/modules/es.typed-array.find");
            _dereq_2("core-js/modules/es.typed-array.find-index");
            _dereq_2("core-js/modules/es.typed-array.for-each");
            _dereq_2("core-js/modules/es.typed-array.includes");
            _dereq_2("core-js/modules/es.typed-array.index-of");
            _dereq_2("core-js/modules/es.typed-array.iterator");
            _dereq_2("core-js/modules/es.typed-array.join");
            _dereq_2("core-js/modules/es.typed-array.last-index-of");
            _dereq_2("core-js/modules/es.typed-array.map");
            _dereq_2("core-js/modules/es.typed-array.reduce");
            _dereq_2("core-js/modules/es.typed-array.reduce-right");
            _dereq_2("core-js/modules/es.typed-array.reverse");
            _dereq_2("core-js/modules/es.typed-array.set");
            _dereq_2("core-js/modules/es.typed-array.slice");
            _dereq_2("core-js/modules/es.typed-array.some");
            _dereq_2("core-js/modules/es.typed-array.sort");
            _dereq_2("core-js/modules/es.typed-array.subarray");
            _dereq_2("core-js/modules/es.typed-array.to-locale-string");
            _dereq_2("core-js/modules/es.typed-array.to-string");
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = void 0;
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../core/constants"));
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.Texture = function(renderer, obj, settings) {
              this._renderer = renderer;
              var gl = this._renderer.GL;
              settings = settings || {};
              if (settings.dataType === gl.FLOAT) {
                var ext = gl.getExtension("OES_texture_float");
                if (!ext) {
                  console.log("Oh no, your device doesn't support floating point textures!");
                }
                var linear = gl.getExtension("OES_texture_float_linear");
                if (!linear) {
                  console.log("Ack! Your device doesn't support linear filtering for floating point textures");
                }
              }
              this.src = obj;
              this.glTex = void 0;
              this.glTarget = gl.TEXTURE_2D;
              this.glFormat = settings.format || gl.RGBA;
              this.mipmaps = false;
              this.glMinFilter = settings.minFilter || gl.LINEAR;
              this.glMagFilter = settings.magFilter || gl.LINEAR;
              this.glWrapS = settings.wrapS || gl.CLAMP_TO_EDGE;
              this.glWrapT = settings.wrapT || gl.CLAMP_TO_EDGE;
              this.glDataType = settings.dataType || gl.UNSIGNED_BYTE;
              this.isSrcMediaElement = typeof _main2.default.MediaElement !== "undefined" && obj instanceof _main2.default.MediaElement;
              this._videoPrevUpdateTime = 0;
              this.isSrcHTMLElement = typeof _main2.default.Element !== "undefined" && obj instanceof _main2.default.Element && !(obj instanceof _main2.default.Graphics) && !(obj instanceof _main2.default.Renderer);
              this.isSrcP5Image = obj instanceof _main2.default.Image;
              this.isSrcP5Graphics = obj instanceof _main2.default.Graphics;
              this.isSrcP5Renderer = obj instanceof _main2.default.Renderer;
              this.isImageData = typeof ImageData !== "undefined" && obj instanceof ImageData;
              var textureData = this._getTextureDataFromSource();
              this.width = textureData.width;
              this.height = textureData.height;
              this.init(textureData);
              return this;
            };
            _main2.default.Texture.prototype._getTextureDataFromSource = function() {
              var textureData;
              if (this.isSrcP5Image) {
                textureData = this.src.canvas;
              } else if (this.isSrcMediaElement || this.isSrcP5Graphics || this.isSrcP5Renderer || this.isSrcHTMLElement) {
                textureData = this.src.elt;
              } else if (this.isImageData) {
                textureData = this.src;
              }
              return textureData;
            };
            _main2.default.Texture.prototype.init = function(data) {
              var gl = this._renderer.GL;
              this.glTex = gl.createTexture();
              this.glWrapS = this._renderer.textureWrapX;
              this.glWrapT = this._renderer.textureWrapY;
              this.setWrapMode(this.glWrapS, this.glWrapT);
              this.bindTexture();
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.glMagFilter);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.glMinFilter);
              if (this.width === 0 || this.height === 0 || this.isSrcMediaElement && !this.src.loadedmetadata) {
                var tmpdata = new Uint8Array([
                  1,
                  1,
                  1,
                  1
                ]);
                gl.texImage2D(this.glTarget, 0, gl.RGBA, 1, 1, 0, this.glFormat, this.glDataType, tmpdata);
              } else {
                gl.texImage2D(this.glTarget, 0, this.glFormat, this.glFormat, this.glDataType, data);
              }
            };
            _main2.default.Texture.prototype.update = function() {
              var data = this.src;
              if (data.width === 0 || data.height === 0) {
                return false;
              }
              var textureData = this._getTextureDataFromSource();
              var updated = false;
              var gl = this._renderer.GL;
              if (textureData.width !== this.width || textureData.height !== this.height) {
                updated = true;
                this.width = textureData.width;
                this.height = textureData.height;
                if (this.isSrcP5Image) {
                  data.setModified(false);
                } else if (this.isSrcMediaElement || this.isSrcHTMLElement) {
                  data.setModified(true);
                }
              } else if (this.isSrcP5Image) {
                if (data.isModified()) {
                  updated = true;
                  data.setModified(false);
                }
              } else if (this.isSrcMediaElement) {
                if (data.isModified()) {
                  updated = true;
                  data.setModified(false);
                } else if (data.loadedmetadata) {
                  if (this._videoPrevUpdateTime !== data.time()) {
                    this._videoPrevUpdateTime = data.time();
                    updated = true;
                  }
                }
              } else if (this.isImageData) {
                if (data._dirty) {
                  data._dirty = false;
                  updated = true;
                }
              } else {
                updated = true;
              }
              if (updated) {
                this.bindTexture();
                gl.texImage2D(this.glTarget, 0, this.glFormat, this.glFormat, this.glDataType, textureData);
              }
              return updated;
            };
            _main2.default.Texture.prototype.bindTexture = function() {
              var gl = this._renderer.GL;
              gl.bindTexture(this.glTarget, this.glTex);
              return this;
            };
            _main2.default.Texture.prototype.unbindTexture = function() {
              var gl = this._renderer.GL;
              gl.bindTexture(this.glTarget, null);
            };
            _main2.default.Texture.prototype.setInterpolation = function(downScale, upScale) {
              var gl = this._renderer.GL;
              if (downScale === constants2.NEAREST) {
                this.glMinFilter = gl.NEAREST;
              } else {
                this.glMinFilter = gl.LINEAR;
              }
              if (upScale === constants2.NEAREST) {
                this.glMagFilter = gl.NEAREST;
              } else {
                this.glMagFilter = gl.LINEAR;
              }
              this.bindTexture();
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.glMinFilter);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.glMagFilter);
              this.unbindTexture();
            };
            _main2.default.Texture.prototype.setWrapMode = function(wrapX, wrapY) {
              var gl = this._renderer.GL;
              var isPowerOfTwo = function isPowerOfTwo2(x) {
                return (x & x - 1) === 0;
              };
              var textureData = this._getTextureDataFromSource();
              var wrapWidth;
              var wrapHeight;
              if (textureData.naturalWidth && textureData.naturalHeight) {
                wrapWidth = textureData.naturalWidth;
                wrapHeight = textureData.naturalHeight;
              } else {
                wrapWidth = this.width;
                wrapHeight = this.height;
              }
              var widthPowerOfTwo = isPowerOfTwo(wrapWidth);
              var heightPowerOfTwo = isPowerOfTwo(wrapHeight);
              if (wrapX === constants2.REPEAT) {
                if (widthPowerOfTwo && heightPowerOfTwo) {
                  this.glWrapS = gl.REPEAT;
                } else {
                  console.warn("You tried to set the wrap mode to REPEAT but the texture size is not a power of two. Setting to CLAMP instead");
                  this.glWrapS = gl.CLAMP_TO_EDGE;
                }
              } else if (wrapX === constants2.MIRROR) {
                if (widthPowerOfTwo && heightPowerOfTwo) {
                  this.glWrapS = gl.MIRRORED_REPEAT;
                } else {
                  console.warn("You tried to set the wrap mode to MIRROR but the texture size is not a power of two. Setting to CLAMP instead");
                  this.glWrapS = gl.CLAMP_TO_EDGE;
                }
              } else {
                this.glWrapS = gl.CLAMP_TO_EDGE;
              }
              if (wrapY === constants2.REPEAT) {
                if (widthPowerOfTwo && heightPowerOfTwo) {
                  this.glWrapT = gl.REPEAT;
                } else {
                  console.warn("You tried to set the wrap mode to REPEAT but the texture size is not a power of two. Setting to CLAMP instead");
                  this.glWrapT = gl.CLAMP_TO_EDGE;
                }
              } else if (wrapY === constants2.MIRROR) {
                if (widthPowerOfTwo && heightPowerOfTwo) {
                  this.glWrapT = gl.MIRRORED_REPEAT;
                } else {
                  console.warn("You tried to set the wrap mode to MIRROR but the texture size is not a power of two. Setting to CLAMP instead");
                  this.glWrapT = gl.CLAMP_TO_EDGE;
                }
              } else {
                this.glWrapT = gl.CLAMP_TO_EDGE;
              }
              this.bindTexture();
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.glWrapS);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.glWrapT);
              this.unbindTexture();
            };
            var _default2 = _main2.default.Texture;
            exports2.default = _default2;
          },
          {
            "../core/constants": 278,
            "../core/main": 290,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.typed-array.copy-within": 215,
            "core-js/modules/es.typed-array.every": 216,
            "core-js/modules/es.typed-array.fill": 217,
            "core-js/modules/es.typed-array.filter": 218,
            "core-js/modules/es.typed-array.find": 220,
            "core-js/modules/es.typed-array.find-index": 219,
            "core-js/modules/es.typed-array.for-each": 223,
            "core-js/modules/es.typed-array.includes": 224,
            "core-js/modules/es.typed-array.index-of": 225,
            "core-js/modules/es.typed-array.iterator": 228,
            "core-js/modules/es.typed-array.join": 229,
            "core-js/modules/es.typed-array.last-index-of": 230,
            "core-js/modules/es.typed-array.map": 231,
            "core-js/modules/es.typed-array.reduce": 233,
            "core-js/modules/es.typed-array.reduce-right": 232,
            "core-js/modules/es.typed-array.reverse": 234,
            "core-js/modules/es.typed-array.set": 235,
            "core-js/modules/es.typed-array.slice": 236,
            "core-js/modules/es.typed-array.some": 237,
            "core-js/modules/es.typed-array.sort": 238,
            "core-js/modules/es.typed-array.subarray": 239,
            "core-js/modules/es.typed-array.to-locale-string": 240,
            "core-js/modules/es.typed-array.to-string": 241,
            "core-js/modules/es.typed-array.uint8-array": 244,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        347: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.get-own-property-descriptor");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.string.sub");
            _dereq_2("core-js/modules/es.weak-map");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            function _typeof22(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof22 = function _typeof23(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof22 = function _typeof23(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof22(obj);
            }
            function _typeof3(obj) {
              if (typeof Symbol === "function" && _typeof22(Symbol.iterator) === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return _typeof22(obj2);
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : _typeof22(obj2);
                };
              }
              return _typeof3(obj);
            }
            _dereq_2("core-js/modules/es.symbol");
            _dereq_2("core-js/modules/es.symbol.description");
            _dereq_2("core-js/modules/es.symbol.iterator");
            _dereq_2("core-js/modules/es.array.iterator");
            _dereq_2("core-js/modules/es.object.to-string");
            _dereq_2("core-js/modules/es.regexp.exec");
            _dereq_2("core-js/modules/es.string.iterator");
            _dereq_2("core-js/modules/es.string.split");
            _dereq_2("core-js/modules/es.string.sub");
            _dereq_2("core-js/modules/web.dom-collections.iterator");
            var _main2 = _interopRequireDefault2(_dereq_2("../core/main"));
            var constants2 = _interopRequireWildcard2(_dereq_2("../core/constants"));
            _dereq_2("./p5.Shader");
            _dereq_2("./p5.RendererGL.Retained");
            function _getRequireWildcardCache2() {
              if (typeof WeakMap !== "function")
                return null;
              var cache = /* @__PURE__ */ new WeakMap();
              _getRequireWildcardCache2 = function _getRequireWildcardCache3() {
                return cache;
              };
              return cache;
            }
            function _interopRequireWildcard2(obj) {
              if (obj && obj.__esModule) {
                return obj;
              }
              if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
                return {
                  default: obj
                };
              }
              var cache = _getRequireWildcardCache2();
              if (cache && cache.has(obj)) {
                return cache.get(obj);
              }
              var newObj = {};
              var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var key2 in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key2)) {
                  var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key2) : null;
                  if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key2, desc);
                  } else {
                    newObj[key2] = obj[key2];
                  }
                }
              }
              newObj.default = obj;
              if (cache) {
                cache.set(obj, newObj);
              }
              return newObj;
            }
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            _main2.default.RendererGL.prototype._applyTextProperties = function() {
            };
            _main2.default.RendererGL.prototype.textWidth = function(s) {
              if (this._isOpenType()) {
                return this._textFont._textWidth(s, this._textSize);
              }
              return 0;
            };
            var charGridWidth = 9;
            var charGridHeight = charGridWidth;
            var strokeImageWidth = 64;
            var strokeImageHeight = 64;
            var gridImageWidth = 64;
            var gridImageHeight = 64;
            var cellImageWidth = 64;
            var cellImageHeight = 64;
            function ImageInfos(width2, height2) {
              this.width = width2;
              this.height = height2;
              this.infos = [];
              this.findImage = function(space) {
                var imageSize = this.width * this.height;
                if (space > imageSize)
                  throw new Error("font is too complex to render in 3D");
                var imageInfo, imageData;
                for (var ii = this.infos.length - 1; ii >= 0; --ii) {
                  var imageInfoTest = this.infos[ii];
                  if (imageInfoTest.index + space < imageSize) {
                    imageInfo = imageInfoTest;
                    imageData = imageInfoTest.imageData;
                    break;
                  }
                }
                if (!imageInfo) {
                  try {
                    imageData = new ImageData(this.width, this.height);
                  } catch (err) {
                    var canvas = document.getElementsByTagName("canvas")[0];
                    var created = !canvas;
                    if (!canvas) {
                      canvas = document.createElement("canvas");
                      canvas.style.display = "none";
                      document.body.appendChild(canvas);
                    }
                    var ctx = canvas.getContext("2d");
                    if (ctx) {
                      imageData = ctx.createImageData(this.width, this.height);
                    }
                    if (created) {
                      document.body.removeChild(canvas);
                    }
                  }
                  imageInfo = {
                    index: 0,
                    imageData
                  };
                  this.infos.push(imageInfo);
                }
                var index = imageInfo.index;
                imageInfo.index += space;
                imageData._dirty = true;
                return {
                  imageData,
                  index
                };
              };
            }
            function setPixel(imageInfo, r, g, b, a) {
              var imageData = imageInfo.imageData;
              var pixels = imageData.data;
              var index = imageInfo.index++ * 4;
              pixels[index++] = r;
              pixels[index++] = g;
              pixels[index++] = b;
              pixels[index++] = a;
            }
            var SQRT3 = Math.sqrt(3);
            var FontInfo = function FontInfo2(font) {
              this.font = font;
              this.strokeImageInfos = new ImageInfos(strokeImageWidth, strokeImageHeight);
              this.colDimImageInfos = new ImageInfos(gridImageWidth, gridImageHeight);
              this.rowDimImageInfos = new ImageInfos(gridImageWidth, gridImageHeight);
              this.colCellImageInfos = new ImageInfos(cellImageWidth, cellImageHeight);
              this.rowCellImageInfos = new ImageInfos(cellImageWidth, cellImageHeight);
              this.glyphInfos = {};
              this.getGlyphInfo = function(glyph) {
                var gi = this.glyphInfos[glyph.index];
                if (gi)
                  return gi;
                var bb = glyph.getBoundingBox();
                var xMin = bb.x1;
                var yMin = bb.y1;
                var gWidth = bb.x2 - xMin;
                var gHeight = bb.y2 - yMin;
                var cmds = glyph.path.commands;
                if (gWidth === 0 || gHeight === 0 || !cmds.length) {
                  return this.glyphInfos[glyph.index] = {};
                }
                var i2;
                var strokes = [];
                var rows = [];
                var cols = [];
                for (i2 = charGridWidth - 1; i2 >= 0; --i2) {
                  cols.push([]);
                }
                for (i2 = charGridHeight - 1; i2 >= 0; --i2) {
                  rows.push([]);
                }
                function push(xs2, ys2, v) {
                  var index = strokes.length;
                  strokes.push(v);
                  function minMax(rg, min, max) {
                    for (var _i = rg.length; _i-- > 0; ) {
                      var _v = rg[_i];
                      if (min > _v)
                        min = _v;
                      if (max < _v)
                        max = _v;
                    }
                    return {
                      min,
                      max
                    };
                  }
                  var cellOffset = 0.5;
                  var mmX = minMax(xs2, 1, 0);
                  var ixMin = Math.max(Math.floor(mmX.min * charGridWidth - cellOffset), 0);
                  var ixMax = Math.min(Math.ceil(mmX.max * charGridWidth + cellOffset), charGridWidth);
                  for (var iCol = ixMin; iCol < ixMax; ++iCol) {
                    cols[iCol].push(index);
                  }
                  var mmY = minMax(ys2, 1, 0);
                  var iyMin = Math.max(Math.floor(mmY.min * charGridHeight - cellOffset), 0);
                  var iyMax = Math.min(Math.ceil(mmY.max * charGridHeight + cellOffset), charGridHeight);
                  for (var iRow = iyMin; iRow < iyMax; ++iRow) {
                    rows[iRow].push(index);
                  }
                }
                function clamp(v, min, max) {
                  if (v < min)
                    return min;
                  if (v > max)
                    return max;
                  return v;
                }
                function byte(v) {
                  return clamp(255 * v, 0, 255);
                }
                function Cubic(p0, c0, c1, p1) {
                  this.p0 = p0;
                  this.c0 = c0;
                  this.c1 = c1;
                  this.p1 = p1;
                  this.toQuadratic = function() {
                    return {
                      x: this.p0.x,
                      y: this.p0.y,
                      x1: this.p1.x,
                      y1: this.p1.y,
                      cx: ((this.c0.x + this.c1.x) * 3 - (this.p0.x + this.p1.x)) / 4,
                      cy: ((this.c0.y + this.c1.y) * 3 - (this.p0.y + this.p1.y)) / 4
                    };
                  };
                  this.quadError = function() {
                    return _main2.default.Vector.sub(_main2.default.Vector.sub(this.p1, this.p0), _main2.default.Vector.mult(_main2.default.Vector.sub(this.c1, this.c0), 3)).mag() / 2;
                  };
                  this.split = function(t) {
                    var m1 = _main2.default.Vector.lerp(this.p0, this.c0, t);
                    var m2 = _main2.default.Vector.lerp(this.c0, this.c1, t);
                    var mm1 = _main2.default.Vector.lerp(m1, m2, t);
                    this.c1 = _main2.default.Vector.lerp(this.c1, this.p1, t);
                    this.c0 = _main2.default.Vector.lerp(m2, this.c1, t);
                    var pt = _main2.default.Vector.lerp(mm1, this.c0, t);
                    var part1 = new Cubic(this.p0, m1, mm1, pt);
                    this.p0 = pt;
                    return part1;
                  };
                  this.splitInflections = function() {
                    var a = _main2.default.Vector.sub(this.c0, this.p0);
                    var b = _main2.default.Vector.sub(_main2.default.Vector.sub(this.c1, this.c0), a);
                    var c = _main2.default.Vector.sub(_main2.default.Vector.sub(_main2.default.Vector.sub(this.p1, this.c1), a), _main2.default.Vector.mult(b, 2));
                    var cubics = [];
                    var A = b.x * c.y - b.y * c.x;
                    if (A !== 0) {
                      var B = a.x * c.y - a.y * c.x;
                      var C = a.x * b.y - a.y * b.x;
                      var disc = B * B - 4 * A * C;
                      if (disc >= 0) {
                        if (A < 0) {
                          A = -A;
                          B = -B;
                          C = -C;
                        }
                        var Q = Math.sqrt(disc);
                        var t0 = (-B - Q) / (2 * A);
                        var t1 = (-B + Q) / (2 * A);
                        if (t0 > 0 && t0 < 1) {
                          cubics.push(this.split(t0));
                          t1 = 1 - (1 - t1) / (1 - t0);
                        }
                        if (t1 > 0 && t1 < 1) {
                          cubics.push(this.split(t1));
                        }
                      }
                    }
                    cubics.push(this);
                    return cubics;
                  };
                }
                function cubicToQuadratics(x02, y02, cx0, cy0, cx12, cy12, x12, y12) {
                  var cubics = new Cubic(new _main2.default.Vector(x02, y02), new _main2.default.Vector(cx0, cy0), new _main2.default.Vector(cx12, cy12), new _main2.default.Vector(x12, y12)).splitInflections();
                  var qs2 = [];
                  var precision = 30 / SQRT3;
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = void 0;
                  try {
                    for (var _iterator = cubics[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var cubic = _step.value;
                      var tail = [];
                      var t3 = void 0;
                      for (; ; ) {
                        t3 = precision / cubic.quadError();
                        if (t3 >= 0.5 * 0.5 * 0.5) {
                          break;
                        }
                        var t = Math.pow(t3, 1 / 3);
                        var start = cubic.split(t);
                        var middle = cubic.split(1 - t / (1 - t));
                        qs2.push(start);
                        tail.push(cubic);
                        cubic = middle;
                      }
                      if (t3 < 1) {
                        qs2.push(cubic.split(0.5));
                      }
                      qs2.push(cubic);
                      Array.prototype.push.apply(qs2, tail.reverse());
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }
                  return qs2;
                }
                function pushLine(x02, y02, x12, y12) {
                  var mx = (x02 + x12) / 2;
                  var my = (y02 + y12) / 2;
                  push([
                    x02,
                    x12
                  ], [
                    y02,
                    y12
                  ], {
                    x: x02,
                    y: y02,
                    cx: mx,
                    cy: my
                  });
                }
                function samePoint(x02, y02, x12, y12) {
                  return Math.abs(x12 - x02) < 1e-5 && Math.abs(y12 - y02) < 1e-5;
                }
                var x0, y0, xs, ys;
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = void 0;
                try {
                  for (var _iterator2 = cmds[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var cmd = _step2.value;
                    var x1 = (cmd.x - xMin) / gWidth;
                    var y1 = (cmd.y - yMin) / gHeight;
                    if (samePoint(x0, y0, x1, y1))
                      continue;
                    switch (cmd.type) {
                      case "M": {
                        xs = x1;
                        ys = y1;
                        break;
                      }
                      case "L": {
                        pushLine(x0, y0, x1, y1);
                        break;
                      }
                      case "Q": {
                        var cx = (cmd.x1 - xMin) / gWidth;
                        var cy = (cmd.y1 - yMin) / gHeight;
                        push([
                          x0,
                          x1,
                          cx
                        ], [
                          y0,
                          y1,
                          cy
                        ], {
                          x: x0,
                          y: y0,
                          cx,
                          cy
                        });
                        break;
                      }
                      case "Z": {
                        if (!samePoint(x0, y0, xs, ys)) {
                          pushLine(x0, y0, xs, ys);
                          strokes.push({
                            x: xs,
                            y: ys
                          });
                        } else {
                          strokes.push({
                            x: x0,
                            y: y0
                          });
                        }
                        break;
                      }
                      case "C": {
                        var cx1 = (cmd.x1 - xMin) / gWidth;
                        var cy1 = (cmd.y1 - yMin) / gHeight;
                        var cx2 = (cmd.x2 - xMin) / gWidth;
                        var cy2 = (cmd.y2 - yMin) / gHeight;
                        var qs = cubicToQuadratics(x0, y0, cx1, cy1, cx2, cy2, x1, y1);
                        for (var iq = 0; iq < qs.length; iq++) {
                          var q = qs[iq].toQuadratic();
                          push([
                            q.x,
                            q.x1,
                            q.cx
                          ], [
                            q.y,
                            q.y1,
                            q.cy
                          ], q);
                        }
                        break;
                      }
                      default:
                        throw new Error("unknown command type: ".concat(cmd.type));
                    }
                    x0 = x1;
                    y0 = y1;
                  }
                } catch (err) {
                  _didIteratorError2 = true;
                  _iteratorError2 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                      _iterator2.return();
                    }
                  } finally {
                    if (_didIteratorError2) {
                      throw _iteratorError2;
                    }
                  }
                }
                var strokeCount = strokes.length;
                var strokeImageInfo = this.strokeImageInfos.findImage(strokeCount);
                var strokeOffset = strokeImageInfo.index;
                for (var il = 0; il < strokeCount; ++il) {
                  var s = strokes[il];
                  setPixel(strokeImageInfo, byte(s.x), byte(s.y), byte(s.cx), byte(s.cy));
                }
                function layout(dim, dimImageInfos, cellImageInfos) {
                  var dimLength = dim.length;
                  var dimImageInfo = dimImageInfos.findImage(dimLength);
                  var dimOffset = dimImageInfo.index;
                  var totalStrokes = 0;
                  for (var id = 0; id < dimLength; ++id) {
                    totalStrokes += dim[id].length;
                  }
                  var cellImageInfo = cellImageInfos.findImage(totalStrokes);
                  for (var _i2 = 0; _i2 < dimLength; ++_i2) {
                    var strokeIndices = dim[_i2];
                    var _strokeCount = strokeIndices.length;
                    var cellLineIndex = cellImageInfo.index;
                    setPixel(dimImageInfo, cellLineIndex >> 7, cellLineIndex & 127, _strokeCount >> 7, _strokeCount & 127);
                    for (var iil = 0; iil < _strokeCount; ++iil) {
                      var strokeIndex = strokeIndices[iil] + strokeOffset;
                      setPixel(cellImageInfo, strokeIndex >> 7, strokeIndex & 127, 0, 0);
                    }
                  }
                  return {
                    cellImageInfo,
                    dimOffset,
                    dimImageInfo
                  };
                }
                gi = this.glyphInfos[glyph.index] = {
                  glyph,
                  uGlyphRect: [
                    bb.x1,
                    -bb.y1,
                    bb.x2,
                    -bb.y2
                  ],
                  strokeImageInfo,
                  strokes,
                  colInfo: layout(cols, this.colDimImageInfos, this.colCellImageInfos),
                  rowInfo: layout(rows, this.rowDimImageInfos, this.rowCellImageInfos)
                };
                gi.uGridOffset = [
                  gi.colInfo.dimOffset,
                  gi.rowInfo.dimOffset
                ];
                return gi;
              };
            };
            _main2.default.RendererGL.prototype._renderText = function(p, line, x, y, maxY) {
              if (!this._textFont || typeof this._textFont === "string") {
                console.log("WEBGL: you must load and set a font before drawing text. See `loadFont` and `textFont` for more details.");
                return;
              }
              if (y >= maxY || !this._doFill) {
                return;
              }
              if (!this._isOpenType()) {
                console.log("WEBGL: only Opentype (.otf) and Truetype (.ttf) fonts are supported");
                return p;
              }
              p.push();
              var doStroke = this._doStroke;
              var drawMode = this.drawMode;
              this._doStroke = false;
              this.drawMode = constants2.TEXTURE;
              var font = this._textFont.font;
              var fontInfo = this._textFont._fontInfo;
              if (!fontInfo) {
                fontInfo = this._textFont._fontInfo = new FontInfo(font);
              }
              var pos = this._textFont._handleAlignment(this, line, x, y);
              var fontSize = this._textSize;
              var scale = fontSize / font.unitsPerEm;
              this.translate(pos.x, pos.y, 0);
              this.scale(scale, scale, 1);
              var gl = this.GL;
              var initializeShader = !this._defaultFontShader;
              var sh = this._getFontShader();
              sh.init();
              sh.bindShader();
              if (initializeShader) {
                sh.setUniform("uGridImageSize", [
                  gridImageWidth,
                  gridImageHeight
                ]);
                sh.setUniform("uCellsImageSize", [
                  cellImageWidth,
                  cellImageHeight
                ]);
                sh.setUniform("uStrokeImageSize", [
                  strokeImageWidth,
                  strokeImageHeight
                ]);
                sh.setUniform("uGridSize", [
                  charGridWidth,
                  charGridHeight
                ]);
              }
              this._applyColorBlend(this.curFillColor);
              var g = this.retainedMode.geometry["glyph"];
              if (!g) {
                var geom = this._textGeom = new _main2.default.Geometry(1, 1, function() {
                  for (var i2 = 0; i2 <= 1; i2++) {
                    for (var j = 0; j <= 1; j++) {
                      this.vertices.push(new _main2.default.Vector(j, i2, 0));
                      this.uvs.push(j, i2);
                    }
                  }
                });
                geom.computeFaces().computeNormals();
                g = this.createBuffers("glyph", geom);
              }
              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = void 0;
              try {
                for (var _iterator3 = this.retainedMode.buffers.text[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  var buff = _step3.value;
                  buff._prepareBuffer(g, sh);
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                    _iterator3.return();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }
              this._bindBuffer(g.indexBuffer, gl.ELEMENT_ARRAY_BUFFER);
              sh.setUniform("uMaterialColor", this.curFillColor);
              try {
                var dx = 0;
                var glyphPrev = null;
                var glyphs = font.stringToGlyphs(line);
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = void 0;
                try {
                  for (var _iterator4 = glyphs[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var glyph = _step4.value;
                    if (glyphPrev)
                      dx += font.getKerningValue(glyphPrev, glyph);
                    var gi = fontInfo.getGlyphInfo(glyph);
                    if (gi.uGlyphRect) {
                      var rowInfo = gi.rowInfo;
                      var colInfo = gi.colInfo;
                      sh.setUniform("uSamplerStrokes", gi.strokeImageInfo.imageData);
                      sh.setUniform("uSamplerRowStrokes", rowInfo.cellImageInfo.imageData);
                      sh.setUniform("uSamplerRows", rowInfo.dimImageInfo.imageData);
                      sh.setUniform("uSamplerColStrokes", colInfo.cellImageInfo.imageData);
                      sh.setUniform("uSamplerCols", colInfo.dimImageInfo.imageData);
                      sh.setUniform("uGridOffset", gi.uGridOffset);
                      sh.setUniform("uGlyphRect", gi.uGlyphRect);
                      sh.setUniform("uGlyphOffset", dx);
                      sh.bindTextures();
                      gl.drawElements(gl.TRIANGLES, 6, this.GL.UNSIGNED_SHORT, 0);
                    }
                    dx += glyph.advanceWidth;
                    glyphPrev = glyph;
                  }
                } catch (err) {
                  _didIteratorError4 = true;
                  _iteratorError4 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
                      _iterator4.return();
                    }
                  } finally {
                    if (_didIteratorError4) {
                      throw _iteratorError4;
                    }
                  }
                }
              } finally {
                sh.unbindShader();
                this._doStroke = doStroke;
                this.drawMode = drawMode;
                p.pop();
              }
              return p;
            };
          },
          {
            "../core/constants": 278,
            "../core/main": 290,
            "./p5.RendererGL.Retained": 343,
            "./p5.Shader": 345,
            "core-js/modules/es.array.iterator": 176,
            "core-js/modules/es.object.get-own-property-descriptor": 191,
            "core-js/modules/es.object.to-string": 195,
            "core-js/modules/es.regexp.exec": 199,
            "core-js/modules/es.string.iterator": 204,
            "core-js/modules/es.string.split": 209,
            "core-js/modules/es.string.sub": 210,
            "core-js/modules/es.symbol": 214,
            "core-js/modules/es.symbol.description": 212,
            "core-js/modules/es.symbol.iterator": 213,
            "core-js/modules/es.weak-map": 246,
            "core-js/modules/web.dom-collections.iterator": 248
          }
        ],
        348: [
          function(_dereq_2, module2, exports2) {
            module2.exports = {
              "fes": {
                "autoplay": "The media that tried to play (with '{{src}}') wasn't allowed to by this browser, most likely due to the browser's autoplay policy.\n\n+ More info: {{url}}",
                "checkUserDefinedFns": "It seems that you may have accidentally written {{name}} instead of {{actualName}}. Please correct it if it's not intentional.",
                "fileLoadError": {
                  "bytes": "It looks like there was a problem loading your file. {{suggestion}}",
                  "font": "It looks like there was a problem loading your font. {{suggestion}}",
                  "gif": "There was some trouble loading your GIF. Make sure that your GIF is using 87a or 89a encoding.",
                  "image": "It looks like there was a problem loading your image. {{suggestion}}",
                  "json": "It looks like there was a problem loading your JSON file. {{suggestion}}",
                  "large": "If your large file isn't fetched successfully, we recommend splitting the file into smaller segments and fetching those.",
                  "strings": "It looks like there was a problem loading your text file. {{suggestion}}",
                  "suggestion": "Try checking if the file path ({{filePath}}) is correct, hosting the file online, or running a local server.\n\n+ More info: {{url}}",
                  "table": "It looks like there was a problem loading your table file. {{suggestion}}",
                  "xml": "It looks like there was a problem loading your XML file. {{suggestion}}"
                },
                "friendlyParamError": {
                  "type_EMPTY_VAR": "{{location}} {{func}}() was expecting {{formatType}} for the {{position}} parameter, received an empty variable instead. If not intentional, this is often a problem with scope.\n\n+ More info: {{url}}",
                  "type_TOO_FEW_ARGUMENTS": "{{location}} {{func}}() was expecting at least {{minParams}} arguments, but received only {{argCount}}.",
                  "type_TOO_MANY_ARGUMENTS": "{{location}} {{func}}() was expecting no more than {{maxParams}} arguments, but received {{argCount}}.",
                  "type_WRONG_TYPE": "{{location}} {{func}}() was expecting {{formatType}} for the {{position}} parameter, received {{argType}} instead."
                },
                "globalErrors": {
                  "reference": {
                    "cannotAccess": '\n{{location}} "{{symbol}}" is used before declaration. Make sure you have declared the variable before using it.\n\n+ More info: {{url}}',
                    "notDefined": '\n{{location}} "{{symbol}}" is not defined in the current scope. If you have defined it in your code, you should check its scope, spelling, and letter-casing (JavaScript is case-sensitive).\n\n+ More info: {{url}}'
                  },
                  "stackSubseq": "└[{{location}}] \n	 Called from line {{line}} in {{func}}()\n",
                  "stackTop": "┌[{{location}}] \n	 Error at line {{line}} in {{func}}()\n",
                  "syntax": {
                    "badReturnOrYield": "\nSyntax Error - return lies outside of a function. Make sure you’re not missing any brackets, so that return lies inside a function.\n\n+ More info: {{url}}",
                    "invalidToken": "\nSyntax Error - Found a symbol that JavaScript doesn't recognize or didn't expect at it's place.\n\n+ More info: {{url}}",
                    "missingInitializer": "\nSyntax Error - A const variable is declared but not initialized. In JavaScript, an initializer for a const is required. A value must be specified in the same statement in which the variable is declared. Check the line number in the error and assign the const variable a value.\n\n+ More info: {{url}}",
                    "redeclaredVariable": `
Syntax Error - "{{symbol}}" is being redeclared. JavaScript doesn't allow declaring a variable more than once. Check the line number in error for redeclaration of the variable.

+ More info: {{url}}`,
                    "unexpectedToken": "\nSyntax Error - Symbol present at a place that wasn't expected.\nUsually this is due to a typo. Check the line number in the error for anything missing/extra.\n\n+ More info: {{url}}"
                  },
                  "type": {
                    "constAssign": "\n{{location}} A const variable is being re-assigned. In javascript, re-assigning a value to a constant is not allowed. If you want to re-assign new values to a variable, make sure it is declared as var or let.\n\n+ More info: {{url}}",
                    "notfunc": '\n{{location}} "{{symbol}}" could not be called as a function.\nCheck the spelling, letter-casing (JavaScript is case-sensitive) and its type.\n\n+ More info: {{url}}',
                    "notfuncObj": '\n{{location}} "{{symbol}}" could not be called as a function.\nVerify whether "{{obj}}" has "{{symbol}}" in it and check the spelling, letter-casing (JavaScript is case-sensitive) and its type.\n\n+ More info: {{url}}',
                    "readFromNull": "\n{{location}} The property of null can't be read. In javascript the value null indicates that an object has no value.\n\n+ More info: {{url}}",
                    "readFromUndefined": "\n{{location}} Cannot read property of undefined. Check the line number in error and make sure the variable which is being operated is not undefined.\n\n + More info: {{url}}"
                  }
                },
                "libraryError": '{{location}} An error with message "{{error}}" occurred inside the p5js library when {{func}} was called. If not stated otherwise, it might be an issue with the arguments passed to {{func}}.',
                "location": "[{{file}}, line {{line}}]",
                "misspelling": '{{location}} It seems that you may have accidentally written "{{name}}" instead of "{{actualName}}". Please correct it to {{actualName}} if you wish to use the {{type}} from p5.js.',
                "misspelling_plural": '{{location}} It seems that you may have accidentally written "{{name}}".\nYou may have meant one of the following: \n{{suggestions}}',
                "misusedTopLevel": "Did you just try to use p5.js's {{symbolName}} {{symbolType}}? If so, you may want to move it into your sketch's setup() function.\n\n+ More info: {{url}}",
                "positions": {
                  "p_1": "first",
                  "p_10": "tenth",
                  "p_11": "eleventh",
                  "p_12": "twelfth",
                  "p_2": "second",
                  "p_3": "third",
                  "p_4": "fourth",
                  "p_5": "fifth",
                  "p_6": "sixth",
                  "p_7": "seventh",
                  "p_8": "eighth",
                  "p_9": "ninth"
                },
                "pre": "\n🌸 p5.js says: {{message}}",
                "sketchReaderErrors": {
                  "reservedConst": 'you have used a p5.js reserved variable "{{symbol}}" make sure you change the variable name to something else.\n\n+ More info: {{url}}',
                  "reservedFunc": 'you have used a p5.js reserved function "{{symbol}}" make sure you change the function name to something else.\n\n+ More info: {{url}}'
                },
                "welcome": "Welcome! This is your friendly debugger. To turn me off, switch to using p5.min.js.",
                "wrongPreload": '{{location}} An error with message "{{error}}" occurred inside the p5js library when "{{func}}" was called. If not stated otherwise, it might be due to "{{func}}" being called from preload. Nothing besides load calls (loadImage, loadJSON, loadFont, loadStrings, etc.) should be inside the preload function.'
              }
            };
          },
          {}
        ],
        349: [
          function(_dereq_2, module2, exports2) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.languages = exports2.default = void 0;
            var _translation = _interopRequireDefault2(_dereq_2("./en/translation"));
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : {
                default: obj
              };
            }
            var _default2 = {
              en: {
                translation: _translation.default
              }
            };
            exports2.default = _default2;
            var languages = [
              "en",
              "es",
              "ko"
            ];
            exports2.languages = languages;
          },
          {
            "./en/translation": 348
          }
        ]
      }, {}, [
        273
      ])(273);
    });
  }
});

// node_modules/p5js-wrapper/index.js
var import_p5 = __toESM(require_p5());
var sketch = window;
window.p5 = import_p5.default;
var export_p5 = import_p5.default;
export {
  export_p5 as p5,
  sketch
};
/*! Bundled license information:

p5/lib/p5.js:
  (*! p5.js v1.6.0 February 22, 2023 *)
  (*!
  * The buffer module from node.js, for the browser.
  *
  * @author   Feross Aboukhadijeh <https://feross.org>
  * @license  MIT
  *)
  (*!
  * @overview es6-promise - a tiny implementation of Promises/A+.
  * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
  * @license   Licensed under MIT license
  *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
  * @version   v4.2.8+1e68dce6
  *)
  (*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js *)
  (*! https://mths.be/codepointat v0.2.0 by @mathias *)
*/
//# sourceMappingURL=p5js-wrapper.js.map
